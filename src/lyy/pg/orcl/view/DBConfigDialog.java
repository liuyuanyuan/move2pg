/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lyy.pg.orcl.view;

import java.awt.Color;
import java.awt.Frame;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import lyy.pg.orcl.model.DBSource;
import lyy.pg.orcl.util.CommonUtils;
import lyy.pg.orcl.util.DBEnum;
import lyy.pg.orcl.util.DBEnum.ArgType;
import lyy.pg.orcl.util.HistoryPropUtil;
import lyy.pg.orcl.util.JdbcUtil;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

/**
 *
 * @author Liu Yuanyuan
 */
public class DBConfigDialog extends javax.swing.JDialog
{

    private Logger logger = LogManager.getLogger(getClass());
    private final ResourceBundle constBundle = ResourceBundle.getBundle("constants");

    private final DBEnum type;

    private int response = -1;
    private DBSource dbSource = null;

    public DBConfigDialog(Frame parent, boolean modal, DBEnum type)
    {
        super(parent, modal);
        initComponents();
        this.type = type;
        
        setTitle(constBundle.getString("configDB"));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/lyy/pg/orcl/image/db_48px.png")));
        getRootPane().setOpaque(false);
        getContentPane().setBackground(Color.white);
        cbbType.setModel(new DefaultComboBoxModel(new Object[]
        {
            type
        }));
        updateForType(type);

        
        //regist listener
        cbbType.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                updateForType((DBEnum) cbbType.getSelectedItem());
            }
        });
        btnOK.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnOKActionPerformed(e);
            }
        });
        btnCancle.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnCancleActionPerformed(e);
            }
        });
        btnReset.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnResetActionPerformed(e);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        lblType = new javax.swing.JLabel();
        cbbType = new javax.swing.JComboBox();
        lblHost = new javax.swing.JLabel();
        tfHost = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        tfPort = new javax.swing.JTextField();
        lblDB = new javax.swing.JLabel();
        tfArg = new javax.swing.JTextField();
        lblUser = new javax.swing.JLabel();
        tfUser = new javax.swing.JTextField();
        lblPwd = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        btnCancle = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        tfPwd = new javax.swing.JPasswordField();
        cbbArgType = new javax.swing.JComboBox();
        cbRememberPwd = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(330, 260));
        setResizable(false);

        lblType.setText(constBundle.getString("dbType"));

        lblHost.setText(constBundle.getString("host"));

        lblPort.setText(constBundle.getString("port"));

        lblDB.setText(constBundle.getString("arg"));

        lblUser.setText(constBundle.getString("user"));

        lblPwd.setText(constBundle.getString("pwd"));

        btnOK.setText(constBundle.getString("ok"));

        btnCancle.setText(constBundle.getString("cancle"));

        btnReset.setText(constBundle.getString("reset"));

        cbRememberPwd.setText(constBundle.getString("rememberPwd"));
        cbRememberPwd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        cbRememberPwd.setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(11, Short.MAX_VALUE)
                        .addComponent(btnOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancle)
                        .addGap(10, 10, 10)
                        .addComponent(btnReset))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblType, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(cbbType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblPwd, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDB, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHost, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblPort, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfUser, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(tfHost)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(cbbArgType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(tfPort, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE))
                                        .addGap(5, 5, 5)
                                        .addComponent(tfArg, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(tfPwd)
                                        .addGap(5, 5, 5)
                                        .addComponent(cbRememberPwd)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblType)
                    .addComponent(cbbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHost)
                    .addComponent(tfHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(tfPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDB)
                    .addComponent(tfArg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbArgType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUser)
                    .addComponent(tfUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPwd)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfPwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbRememberPwd)))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancle)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customizeForType(DBEnum type)
    {
        if (type == DBEnum.PostgreSQL)
        {
            tfPort.setText("5432");
            cbbArgType.setModel(new DefaultComboBoxModel(new ArgType[]
            {
                ArgType.DB
            }));
            tfArg.setText("postgres");
        } else if (type == DBEnum.Oracle)
        {
            tfPort.setText("1521");
            cbbArgType.setModel(new DefaultComboBoxModel(new ArgType[]
            {
                ArgType.Service, ArgType.SID
            }));
            tfArg.setText("orcl");
        } else
        {
            logger.warn(type + " is not supported, do nothing and return.");
            return;
        }
        tfHost.setText("");        
        tfUser.setText("");
        tfPwd.setText("");
        cbRememberPwd.setSelected(false);
    }
    
    private void updateForType(DBEnum type)
    {
        customizeForType(type);           
        //load history
        try
        {
            DBSource hisDB = HistoryPropUtil.readHistory(type);
            if (hisDB != null)
            {
                tfHost.setText(hisDB.getHost());
                tfPort.setText(String.valueOf(hisDB.getPort()));
                cbbArgType.setSelectedItem(hisDB.getArgType());
                tfArg.setText(hisDB.getArg());
                tfUser.setText(hisDB.getUser());
                tfPwd.setText(hisDB.getPwd());
                cbRememberPwd.setSelected(!CommonUtils.isEmpty(hisDB.getPwd()));                
            }
        } catch (Exception ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }        
    }

    private void btnOKActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());

        try
        {
            dbSource = new DBSource();
            dbSource.setDBType(type);
            dbSource.setHost(checkEmpty(tfHost));
            dbSource.setPort(Integer.valueOf(checkEmpty(tfPort)));
            dbSource.setArgType((ArgType) cbbArgType.getSelectedItem());
            dbSource.setArg(checkEmpty(tfArg));
            dbSource.setUser(checkEmpty(tfUser));
            dbSource.setPwd(String.valueOf(tfPwd.getPassword()));

            JdbcUtil.getConnection(dbSource);
            logger.debug("Connected");
            HistoryPropUtil.saveHistory(dbSource, cbRememberPwd.isSelected());
            logger.debug("Saved History");
            response = 0;
            this.dispose();
        } catch (Exception ex)
        {
            response = -1;
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }
    }
           
    private void btnCancleActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        response = -1;
        this.dispose();
    }

    private void btnResetActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        customizeForType(type);        
    }

    private String checkEmpty(JTextField txfd) throws Exception
    {
        String txt = txfd.getText();
        if(txt.isEmpty() || txt.trim().isEmpty())
        {
            txfd.requestFocus();
            throw new Exception(constBundle.getString("emptyValueNotAllowed"));
        }else
        {
            return txt;
        }
    }
    
    public int getResponse()
    {
        return response;
    }

    public DBSource getDBSource()
    {
        return dbSource;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancle;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnReset;
    private javax.swing.JCheckBox cbRememberPwd;
    private javax.swing.JComboBox cbbArgType;
    private javax.swing.JComboBox cbbType;
    private javax.swing.JLabel lblDB;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblPwd;
    private javax.swing.JLabel lblType;
    private javax.swing.JLabel lblUser;
    private javax.swing.JTextField tfArg;
    private javax.swing.JTextField tfHost;
    private javax.swing.JTextField tfPort;
    private javax.swing.JPasswordField tfPwd;
    private javax.swing.JTextField tfUser;
    // End of variables declaration//GEN-END:variables
}
