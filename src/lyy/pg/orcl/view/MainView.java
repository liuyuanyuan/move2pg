/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lyy.pg.orcl.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.text.html.HTMLFrameHyperlinkEvent;
import lyy.pg.orcl.model.DBSource;
import lyy.pg.orcl.model.DatatypeMapping;
import lyy.pg.orcl.model.ObjInfo;
import lyy.pg.orcl.controller.DatatypeFactory;
import lyy.pg.orcl.controller.SQLFactory;
import lyy.pg.orcl.controller.check.CheckController;
import lyy.pg.orcl.controller.migrate.MigrateController;
import lyy.pg.orcl.model.MigrateMode;
import lyy.pg.orcl.model.ProgressDTO;
import lyy.pg.orcl.util.DBEnum;
import lyy.pg.orcl.util.DBEnum.DBObject;
import lyy.pg.orcl.util.DBEnum.DataMode;
import lyy.pg.orcl.util.DBEnum.TableMode;
import lyy.pg.orcl.util.HTMLReportUtil;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.SyntaxConstants;
import org.fife.ui.rtextarea.RTextScrollPane;
import ru.barsopen.plsqlconverter.ConvertMain;

/**
 *
 * @author Liu Yuanyuan
 */
public class MainView extends JFrame
{
    private final Logger logger = LogManager.getLogger(getClass());
    private final ResourceBundle constBundle = ResourceBundle.getBundle("constants");
    
    private RSyntaxTextArea rstaSource;
    //private RTextScrollPane rtspSource;
    private RSyntaxTextArea rstaPG;
    //private RTextScrollPane rtspPG;

    public MainView()
    {
        logger.debug("Enter");
        initComponents();
        setTitle(constBundle.getString("title"));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/lyy/pg/orcl/image/orcl2pg.png")));
        //inital main view
        tbMain.removeAll();
        tbMain.add(constBundle.getString("welcomeTitle"), pnlWelcome);
        tfStatus.setText(constBundle.getString("welcomeTitle"));

        //customize look and feel       
        //Color bgc = new Color(255, 250, 240);//(240,255,240);
        //toolBar.setBackground(bgc);
        cbbSourceDB.setOpaque(false);
        cbbSourceDB.setBackground(Color.WHITE);
        //cbbSourceDB.setBackground(Color.WHITE);//not work when set lookandfeel
        //cbbTargetDB.setBackground(Color.WHITE);//not work when set lookandfeel
        //btnOpenDatatype.setBackground(bgc);
        //btnOpenMigrate.setBackground(bgc);
        //btnOpenConvert.setBackground(bgc);
        //btnOpenWelcome.setBackground(bgc);
        spDatatype.getViewport().setBackground(Color.WHITE);//make table's empty area white
        spObject.getViewport().setBackground(Color.WHITE);//make table's empty area white
        //tfStatus.setBackground(bgc);

        //db source
        initDatasource();
        //welcome   
        initPnlWelcome();
        //datatype
        initPnlDatatype();
        //migrate
        initPnlMigrate();
        //convert
        initPnlConvert();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        btngChooseObj = new javax.swing.ButtonGroup();
        spWelcome = new javax.swing.JScrollPane();
        taWelcome = new javax.swing.JTextArea();
        toolBar = new javax.swing.JToolBar();
        cbbSourceDB = new javax.swing.JComboBox();
        cbbTargetDB = new javax.swing.JComboBox();
        btnOpenDatatype = new javax.swing.JButton();
        btnOpenMigrate = new javax.swing.JButton();
        btnOpenConvert = new javax.swing.JButton();
        btnOpenWelcome = new javax.swing.JButton();
        tbMain = new javax.swing.JTabbedPane();
        pnlWelcome = new javax.swing.JPanel();
        epWelcome = new javax.swing.JEditorPane();
        pnlDatatype = new javax.swing.JPanel();
        spDatatype = new javax.swing.JScrollPane();
        tbDatatype = new javax.swing.JTable();
        pnlMigrate = new javax.swing.JPanel();
        spObject = new javax.swing.JScrollPane();
        tbObject = new javax.swing.JTable();
        rbtnAll = new javax.swing.JRadioButton();
        rbtnReverse = new javax.swing.JRadioButton();
        rbtnNone = new javax.swing.JRadioButton();
        btnReport = new javax.swing.JButton();
        btnSync = new javax.swing.JButton();
        btnCompare = new javax.swing.JButton();
        btnMigrate = new javax.swing.JButton();
        pnlConvert = new javax.swing.JPanel();
        cbbObjType = new javax.swing.JComboBox();
        cbbObjects = new javax.swing.JComboBox();
        btnExecutePGSQL = new javax.swing.JButton();
        btnConvert = new javax.swing.JButton();
        spEditor = new javax.swing.JSplitPane();
        spSource = new javax.swing.JScrollPane();
        spPG = new javax.swing.JScrollPane();
        btnCheck = new javax.swing.JButton();
        pnlStatus = new javax.swing.JPanel();
        tfStatus = new javax.swing.JTextField();
        progressBar = new javax.swing.JProgressBar();

        taWelcome.setEditable(false);
        taWelcome.setColumns(20);
        taWelcome.setRows(5);
        taWelcome.setText("\n\t欢迎使用oracl2pg ^-^\n        \n        \n");
        spWelcome.setViewportView(taWelcome);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolBar.setRollover(true);

        cbbSourceDB.setOpaque(false);
        toolBar.add(cbbSourceDB);
        toolBar.add(cbbTargetDB);

        btnOpenDatatype.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lyy/pg/orcl/image/datatype_48px.png"))); // NOI18N
        btnOpenDatatype.setFocusable(false);
        btnOpenDatatype.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenDatatype.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(btnOpenDatatype);

        btnOpenMigrate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lyy/pg/orcl/image/migrator_48px.png"))); // NOI18N
        btnOpenMigrate.setFocusable(false);
        btnOpenMigrate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenMigrate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(btnOpenMigrate);

        btnOpenConvert.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lyy/pg/orcl/image/convert_48px.png"))); // NOI18N
        btnOpenConvert.setFocusable(false);
        btnOpenConvert.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenConvert.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(btnOpenConvert);

        btnOpenWelcome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lyy/pg/orcl/image/orcl2pg.png"))); // NOI18N
        btnOpenWelcome.setFocusable(false);
        btnOpenWelcome.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpenWelcome.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(btnOpenWelcome);

        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        pnlWelcome.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout pnlWelcomeLayout = new javax.swing.GroupLayout(pnlWelcome);
        pnlWelcome.setLayout(pnlWelcomeLayout);
        pnlWelcomeLayout.setHorizontalGroup(
            pnlWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 735, Short.MAX_VALUE)
            .addGroup(pnlWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(epWelcome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE))
        );
        pnlWelcomeLayout.setVerticalGroup(
            pnlWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 390, Short.MAX_VALUE)
            .addGroup(pnlWelcomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(epWelcome, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE))
        );

        tbMain.addTab(constBundle.getString("welcomeTitle"), pnlWelcome);

        spDatatype.setBackground(new java.awt.Color(255, 255, 255));

        tbDatatype.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "Title 1", "Title 2"
            }
        ));
        spDatatype.setViewportView(tbDatatype);

        javax.swing.GroupLayout pnlDatatypeLayout = new javax.swing.GroupLayout(pnlDatatype);
        pnlDatatype.setLayout(pnlDatatypeLayout);
        pnlDatatypeLayout.setHorizontalGroup(
            pnlDatatypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spDatatype, javax.swing.GroupLayout.DEFAULT_SIZE, 735, Short.MAX_VALUE)
        );
        pnlDatatypeLayout.setVerticalGroup(
            pnlDatatypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spDatatype, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
        );

        tbMain.addTab(constBundle.getString("datatypeTitle"), pnlDatatype);

        pnlMigrate.setBackground(new java.awt.Color(255, 255, 255));

        tbObject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {
                "标题 1", "Title 1", "Title 2", "Title 3", "Title 4"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        spObject.setViewportView(tbObject);

        rbtnAll.setBackground(new java.awt.Color(255, 255, 255));
        btngChooseObj.add(rbtnAll);
        rbtnAll.setText("All");

        rbtnReverse.setBackground(new java.awt.Color(255, 255, 255));
        btngChooseObj.add(rbtnReverse);
        rbtnReverse.setText("Reverse");

        rbtnNone.setBackground(new java.awt.Color(255, 255, 255));
        btngChooseObj.add(rbtnNone);
        rbtnNone.setSelected(true);
        rbtnNone.setText("None");

        btnReport.setText(constBundle.getString("report"));

        btnSync.setText(constBundle.getString("sync"));

        btnCompare.setText(constBundle.getString("compare"));

        btnMigrate.setBackground(new java.awt.Color(237, 237, 253));
        btnMigrate.setText(constBundle.getString("migrate"));

        javax.swing.GroupLayout pnlMigrateLayout = new javax.swing.GroupLayout(pnlMigrate);
        pnlMigrate.setLayout(pnlMigrateLayout);
        pnlMigrateLayout.setHorizontalGroup(
            pnlMigrateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spObject)
            .addGroup(pnlMigrateLayout.createSequentialGroup()
                .addComponent(rbtnAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtnReverse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtnNone)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                .addComponent(btnMigrate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCompare)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSync)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReport)
                .addContainerGap())
        );
        pnlMigrateLayout.setVerticalGroup(
            pnlMigrateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMigrateLayout.createSequentialGroup()
                .addComponent(spObject, javax.swing.GroupLayout.DEFAULT_SIZE, 347, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMigrateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnAll)
                    .addComponent(rbtnReverse)
                    .addComponent(rbtnNone)
                    .addComponent(btnReport)
                    .addComponent(btnSync)
                    .addComponent(btnCompare)
                    .addComponent(btnMigrate))
                .addGap(10, 10, 10))
        );

        tbMain.addTab(constBundle.getString("migrateTitle"), pnlMigrate);

        pnlConvert.setBackground(new java.awt.Color(255, 255, 255));

        cbbObjType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Function", "Procedure", "Package" }));
        cbbObjType.setSelectedIndex(-1);

        btnExecutePGSQL.setText(constBundle.getString("execute"));

        btnConvert.setText(constBundle.getString("convert"));

        spEditor.setDividerSize(1);
        spEditor.setResizeWeight(0.5);

        spSource.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(), "PLSQL", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        spEditor.setLeftComponent(spSource);

        spPG.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createCompoundBorder(), "PGSQL", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        spEditor.setRightComponent(spPG);

        btnCheck.setText(constBundle.getString("check"));

        javax.swing.GroupLayout pnlConvertLayout = new javax.swing.GroupLayout(pnlConvert);
        pnlConvert.setLayout(pnlConvertLayout);
        pnlConvertLayout.setHorizontalGroup(
            pnlConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbbObjType, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbbObjects, 0, 64, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 214, Short.MAX_VALUE)
                .addComponent(btnConvert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExecutePGSQL)
                .addGap(10, 10, 10)
                .addComponent(btnCheck)
                .addContainerGap())
            .addComponent(spEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        pnlConvertLayout.setVerticalGroup(
            pnlConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlConvertLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlConvertLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbbObjType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbbObjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExecutePGSQL)
                    .addComponent(btnConvert)
                    .addComponent(btnCheck))
                .addGap(9, 9, 9)
                .addComponent(spEditor, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
        );

        tbMain.addTab(constBundle.getString("convertTitle"), pnlConvert);

        getContentPane().add(tbMain, java.awt.BorderLayout.CENTER);
        tbMain.getAccessibleContext().setAccessibleName(constBundle.getString("welcomeTitle"));

        pnlStatus.setPreferredSize(new java.awt.Dimension(723, 24));

        tfStatus.setEditable(false);
        tfStatus.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        tfStatus.setText("current status...");
        tfStatus.setBorder(null);
        tfStatus.setOpaque(false);

        progressBar.setBackground(new java.awt.Color(255, 255, 255));
        progressBar.setStringPainted(true);

        javax.swing.GroupLayout pnlStatusLayout = new javax.swing.GroupLayout(pnlStatus);
        pnlStatus.setLayout(pnlStatusLayout);
        pnlStatusLayout.setHorizontalGroup(
            pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStatusLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlStatusLayout.setVerticalGroup(
            pnlStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tfStatus)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlStatusLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        getContentPane().add(pnlStatus, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private DBSource getSourceDB()
    {
        return cbbSourceDB.getSelectedItem() instanceof DBSource
                ? (DBSource) cbbSourceDB.getSelectedItem() : null;
    }
    private DBSource getTargetDB()
    {
        return cbbTargetDB.getSelectedItem() instanceof DBSource
                ? (DBSource) cbbTargetDB.getSelectedItem() : null;
    }

    //db source
    private void initDatasource()
    {
        cbbSourceDB.setModel(new DefaultComboBoxModel(new String[]
        {
            constBundle.getString("sourceDB")
        }));
        cbbTargetDB.setModel(new DefaultComboBoxModel(new String[]
        {
            constBundle.getString("targetDB")
        }));
        ActionListener dbActionListener = new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                dbActionPerformed(e);
            }
        };
        cbbSourceDB.addActionListener(dbActionListener);
        cbbTargetDB.addActionListener(dbActionListener);
    }
    private void dbActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());

        JComboBox cbb = (JComboBox) e.getSource();
        Object selectedItem = cbb.getSelectedItem();
        if (selectedItem == null)//selected nothing
        {
            return;
        } else if (selectedItem instanceof DBSource)//selected db
        {
            logger.warn("Changed db source");
            return;
        }

        //selected config db
        logger.debug(selectedItem.toString());
        DBConfigDialog dbcDialog = new DBConfigDialog(this, true,
                selectedItem.equals(constBundle.getString("sourceDB")) ? DBEnum.Oracle : DBEnum.PostgreSQL);
        dbcDialog.setLocationRelativeTo(this);
        dbcDialog.setVisible(true);
        logger.debug("response=" + dbcDialog.getResponse());
        if (dbcDialog.getResponse() == 0)
        {
            DBSource db = dbcDialog.getDBSource();
            cbb.addItem(db);
            cbb.setSelectedItem(db);
        }
    }

    //welcome
    private void initPnlWelcome()
    {
        epWelcome.setEditable(false);
        epWelcome.setContentType("text/html");
        try
        {
            HTMLEditorKit kit = new HTMLEditorKit();
            epWelcome.setEditorKit(kit);
            kit.read(this.getClass().getClassLoader().getResourceAsStream("welcome.html") //new FileInputStream(new File("welcome.html")),
                    , (HTMLDocument) epWelcome.getDocument(), 0);
            epWelcome.setPage("https://github.com/liuyuanyuan/orcl2pg");
        } catch (IOException | BadLocationException ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }
        btnOpenWelcome.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnOpenWelcomeActionPerformed(e);
            }
        });
    }
    private void btnOpenWelcomeActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        tbMain.removeAll();
        tbMain.add(constBundle.getString("welcomeTitle"), pnlWelcome);
        tfStatus.setText(constBundle.getString("welcomeTitle"));
    }

    //datatype
    private void initPnlDatatype()
    {
        btnOpenDatatype.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnOpenDatatypeActionPerformed(e);
            }
        });
        tbDatatype.setModel(new DefaultTableModel(
                new Object[][]
                {
                },
                new Object[]
                {
                    DBEnum.Oracle, DBEnum.PostgreSQL
                })
                {
                    Class[] types = new Class[]
                    {
                        String.class, String.class,
                    };
                    boolean[] canEdit = new boolean[]
                    {
                        false, true,
                    };

                    @Override
                    public Class getColumnClass(int columnIndex)
                    {
                        return types[columnIndex];
                    }

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex)
                    {
                        return canEdit[columnIndex];
                    }
                });
    }
    private void btnOpenDatatypeActionPerformed(ActionEvent e)
    {
        logger.debug("Enter:" + e.getActionCommand());
        tbMain.removeAll();
        tbMain.add(constBundle.getString("datatypeTitle"), pnlDatatype);
        tfStatus.setText(constBundle.getString("datatypeTitle"));
        fillTbDatatype();
    }
    private void fillTbDatatype()
    {
        logger.info("Enter");
        DefaultTableModel model = (DefaultTableModel) tbDatatype.getModel();
        if (model.getRowCount() > 0)
        {
            /*logger.info("Clean Table");
             for (int i = model.getRowCount() - 1; i >= 0; i--)
             {
             model.removeRow(i);
             }*/
            logger.debug("Remain and return.");
            return;
        }

        List<DatatypeMapping> datatypeList = DatatypeFactory.getInstance().getDefaultDatatypeCasts(DBEnum.Oracle);
        logger.info("datatypeList.size = " + datatypeList.size());
        for (DatatypeMapping DatatypeMapping : datatypeList)
        {
            Object[] rowData = new Object[2];
            rowData[0] = DatatypeMapping.getSourceDatatype();
            rowData[1] = DatatypeMapping.getPgDatatype();
            model.addRow(rowData);
        }
    }
    private HashMap<String, String> getDatatypeMap()
    {
        HashMap<String, String> datatypeMaps = new HashMap();

        DefaultTableModel model = (DefaultTableModel) tbDatatype.getModel();
        logger.debug("tbDatatype RowCount=" + model.getRowCount());
        for (int i = 0; i < model.getRowCount(); i++)
        {
            datatypeMaps.put(model.getValueAt(i, 0).toString(), model.getValueAt(i, 1).toString());
        }
        
        return datatypeMaps;
    }
 
    //migrate
    private List<ObjInfo> choosedObjects;
    private Timer timer;
    private MigrateController mc;
    private ProgressDTO backProgress;    
    private void initPnlMigrate()
    {
        btnOpenMigrate.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnOpenMigrateActionPerformed(e);
            }
        });
        Object[][] migrateData = new Object[][]
        {
        };
        Object[] columnNames = new Object[]
        {
            constBundle.getString("choose"),
            constBundle.getString("objName"),
            constBundle.getString("migrateResult"),
            constBundle.getString("compareResult"),
            constBundle.getString("syncResult")
        };
        tbObject.setModel(new DefaultTableModel(migrateData, columnNames)
        {
            Class[] types = new Class[]
            {
                Boolean.class, Object.class, Object.class, Object.class, Object.class
            };
            boolean[] canEdit = new boolean[]
            {
                true, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex)
            {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex)
            {
                return canEdit[columnIndex];
            }
        });
        tbObject.getColumn(constBundle.getString("choose")).setMaxWidth(40);

        rbtnAll.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                chooseObj(true, (DefaultTableModel) tbObject.getModel());
            }
        });
        rbtnNone.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                chooseObj(false, (DefaultTableModel) tbObject.getModel());
            }
        });
        rbtnReverse.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent e)
            {
                chooseReverseObj((DefaultTableModel) tbObject.getModel());
            }
        });
   
        btnMigrate.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnMigrateActionPerformed(e);
            }
        });
        btnCompare.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnCompareActionPerformed(e);
            }
        });
        btnReport.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnReportActionPerformed(e);
            }
        });     
    }
    private void btnOpenMigrateActionPerformed(ActionEvent e)
    {
        logger.debug("Enter:" + e.getActionCommand());
        tbMain.removeAll();
        tbMain.add(constBundle.getString("migrateTitle"), pnlMigrate);
        tfStatus.setText(constBundle.getString("migrateTitle"));
        fillTbObject();
    }
    private void fillTbObject()
    {
        logger.info("Enter");
        DefaultTableModel model = (DefaultTableModel) tbObject.getModel();
        if (model.getRowCount() > 0)
        {
            /*logger.info("Clean Table");
             for (int i = model.getRowCount() - 1; i >= 0; i--)
             {
             model.removeRow(i);
             }*/
            logger.debug("Remain and return.");
            return;
        }
        try
        {
            DBSource sdb = getSourceDB();
            if (sdb == null)
            {
                throw new Exception(constBundle.getString("configDBSource"));
            }
            List<ObjInfo> objectList = SQLFactory.getTypedObjects(sdb, DBEnum.DBObject.Table);
            logger.info("objectList.size = " + objectList.size());
            for (ObjInfo obj : objectList)
            {
                Object[] rowData = new Object[5];
                rowData[0] = obj.isSelected();
                rowData[1] = obj;
                rowData[2] = obj.getMigrateStatus();
                model.addRow(rowData);
            }
        } catch (Exception ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }
    }
    private void chooseObj(boolean choose, DefaultTableModel model)
    {
        for (int i = 0; i < model.getRowCount(); i++)
        {
            model.setValueAt(choose, i, 0);
        }
    }
    private void chooseReverseObj(DefaultTableModel model)
    {
        for (int i = 0; i < model.getRowCount(); i++)
        {
            model.setValueAt(!(boolean) model.getValueAt(i, 0), i, 0);
        }
    }
    private List<ObjInfo> getChoosedObject()
    {
        List<ObjInfo> choosedObjects = new ArrayList();

        DefaultTableModel model = (DefaultTableModel) tbObject.getModel();
        for (int i = 0; i < model.getRowCount(); i++)
        {
            if ((Boolean) model.getValueAt(i, 0))
            {
                ObjInfo obj = (ObjInfo) model.getValueAt(i, 1);
                obj.setTableRow(i);
                choosedObjects.add(obj);
            }
        }

        return choosedObjects;
    }
    private void migrateTimerActionPerformed(ActionEvent e)
    {   
        backProgress = mc.getProgress();
        logger.debug("Timer run..." + backProgress.getValue() + "/" + progressBar.getMaximum());
        
        progressBar.setValue(backProgress.getValue());
        Dimension d = progressBar.getSize();
        Rectangle rect = new Rectangle(0, 0, d.width, d.height);
        progressBar.paintImmediately(rect);
        if (backProgress.getValue() > 0)
        {
            ObjInfo obj = choosedObjects.get(backProgress.getValue() - 1);
            logger.debug(obj.getName() + "-----" + obj.getMigrateStatus());
            tbObject.getModel().setValueAt(obj.getMigrateStatus(), obj.getTableRow(), 2);

            tfStatus.setText(backProgress.getValue() + "/" + backProgress.getTotalCount() + " " + obj.toString() + " " + obj.getMigrateStatus());
        }
                
        if (progressBar.getValue() == progressBar.getMaximum() && backProgress.getState() == 2)
        {
            logger.debug("Timer finish..." + backProgress.getValue() + "/" + progressBar.getMaximum());
            timer.stop();    
            // Notifies all listeners that all cell values may change  
            ((AbstractTableModel)tbObject.getModel()).fireTableDataChanged();          
            //tbObject.validate();
	    //tbObject.updateUI();
        }
    }
    private void btnMigrateActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());

//        List<String[]> migrateLog = new ArrayList<>();
        String logRoot = HTMLReportUtil.ReportRoot;
        logger.debug("logRoot=" + logRoot);
        DBSource sourceDBInfo = getSourceDB();
        if (sourceDBInfo == null)
        {
            JOptionPane.showMessageDialog(this, constBundle.getString("noSourceDBConfiged"),
                    constBundle.getString("warning"), JOptionPane.WARNING_MESSAGE);
            return;
        }
        DBSource hgDBInfo = getTargetDB();
        if (hgDBInfo == null)
        {
            JOptionPane.showMessageDialog(this, constBundle.getString("noTargetDBConfiged"),
                    constBundle.getString("warning"), JOptionPane.WARNING_MESSAGE);
            return;
        }
        HashMap<String, String> datatypeMaps = getDatatypeMap();
        if (datatypeMaps.isEmpty())
        {
            JOptionPane.showMessageDialog(this, constBundle.getString("noDatatypeMapping"),
                    constBundle.getString("warning"), JOptionPane.WARNING_MESSAGE);
            return;
        }        
        choosedObjects = getChoosedObject();
        if (choosedObjects.isEmpty())
        {
            JOptionPane.showMessageDialog(this, constBundle.getString("noObjectChoosed"),
                    constBundle.getString("warning"), JOptionPane.WARNING_MESSAGE);
            return;
        }        
        MigrateMode migrateMode = new MigrateMode(TableMode.Generally, DataMode.Insert, 500, 500, "\"", ",");//unused        
        mc = new MigrateController();        
        mc.startMigrateThread(logRoot, sourceDBInfo, hgDBInfo,
                choosedObjects, datatypeMaps, migrateMode);
        
        backProgress = new ProgressDTO();        
        progressBar.setMaximum(choosedObjects.size());
        progressBar.setValue(0);        
        timer = new Timer(50, new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent evt)
            {
                migrateTimerActionPerformed(evt);
            }
        });
        timer.start();
    }
    private void btnCompareActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        //todo
    }
    private void btnReportActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        try
        {
            StringBuilder rows = new StringBuilder();
            TableModel objModel = tbObject.getModel();
            logger.debug("RowCount=" + objModel.getRowCount());
            for (int i = 0; i < objModel.getRowCount(); i++)
            {
                rows.append(HTMLReportUtil.RowFormat
                        .replace("no", String.valueOf(i + 1))
                        .replace("name", objModel.getValueAt(i, 1) == null ? "" : objModel.getValueAt(i, 1).toString())
                        .replace("migrateResult", objModel.getValueAt(i, 2) == null ? "" : objModel.getValueAt(i, 2).toString())
                        .replace("compareResult", objModel.getValueAt(i, 3) == null ? "" : objModel.getValueAt(i, 3).toString())
                        .replace("syncResult", objModel.getValueAt(i, 4) == null ? "" : objModel.getValueAt(i, 4).toString()));
            }
            HTMLReportUtil.createMigrateReport(getSourceDB().getUser(), rows.toString());
        } catch (Exception ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }
    }

    //convert
    private void initPnlConvert()
    {
        //init
        rstaSource = getRSyntaxTextArea();
        //rtspSource = getRTextScrollPane(rstaSource);
        rstaPG = getRSyntaxTextArea();
        //rtspPG = getRTextScrollPane(rstaPG);
        //show
        spSource.setViewportView(rstaSource);
        spPG.setViewportView(rstaPG);        
        //spSource.setViewportView(rtspSource);
        //spPG.setViewportView(rtspPG);

        btnOpenConvert.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnOpenConvertActionPerformed(e);
            }
        });
        cbbObjType.setModel(new DefaultComboBoxModel(new DBObject[]
        {
            DBObject.Procedure, DBObject.Function, 
            DBObject.Package, //package -> schema
            DBObject.PackageBody, //package body func -> func
            DBObject.View,
            DBObject.Trigger,
            DBObject.MView, DBObject.DBLink, DBObject.Synonym
        }));
        cbbObjType.setSelectedIndex(-1);
        cbbObjType.addActionListener(new ActionListener()
        {

            @Override
            public void actionPerformed(ActionEvent e)
            {
                cbbObjTypeActionPerformed(e);
            }
        });
        cbbObjects.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                cbbObjectsActionPerformed(e);
            }
        });
        btnConvert.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnConvertActionPerformed(e);
            }
        });
        btnExecutePGSQL.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnExecutePGSQLActionPerformed(e);
            }
        });
        btnCheck.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(ActionEvent e)
            {
                btnCheckActionPerformed(e);
            }
        });

    }
    private RSyntaxTextArea getRSyntaxTextArea()
    {
        RSyntaxTextArea rsta = new RSyntaxTextArea();
        rsta.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_SQL);
        rsta.setCodeFoldingEnabled(true);
        rsta.setBracketMatchingEnabled(false);
        //rsta.setWhitespaceVisible(true);
        rsta.setMinimumSize(new Dimension(2, 1));
        return rsta;
    }
    private RTextScrollPane getRTextScrollPane(RSyntaxTextArea rsta)
    {
        RTextScrollPane rtsp = new RTextScrollPane(rsta, true);
        //rtsp.setPreferredSize(new Dimension(100, 50));
        /*
        Gutter gt = rtsp.getGutter();
        Color lightc = new Color(209, 196, 233);
        Color wightc = new Color(20, 195, 91);
        gt.setBorderColor(lightc);//Color.green
        gt.setLineNumberColor(lightc);//Color.red
        //gt.setActiveLineRangeColor(wightc);//not work, Color.yellow is default setting
        gt.setBookmarkingEnabled(true);
        ImageIcon errorLineIcon = new ImageIcon(Toolkit.getDefaultToolkit()
                .getImage(getClass().getResource("/lyy/pg/orcl/image/ddnull.png")));
        gt.setBookmarkIcon(errorLineIcon);
        */        
        return rtsp;
    }
    private void btnOpenConvertActionPerformed(ActionEvent e)
    {
        logger.debug("Enter:" + e.getActionCommand());
        tbMain.removeAll();
        tbMain.add(constBundle.getString("convertTitle"), pnlConvert);
        tfStatus.setText(constBundle.getString("convertTitle"));
    }
    private void cbbObjTypeActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        if (cbbObjType.getSelectedIndex() == -1)
        {
            return;
        }
        try
        {
            DBSource sdb = getSourceDB();
            if (sdb == null)
            {
                cbbObjType.setSelectedIndex(-1);
                throw new Exception(constBundle.getString("noSourceDBConfiged"));                
            }
            DBEnum.DBObject type = (DBEnum.DBObject) cbbObjType.getSelectedItem();
            if (type == null)
            {
                throw new Exception(constBundle.getString("nullItemNotAllowed"));
            }
            List<ObjInfo> objectList = SQLFactory.getTypedObjects(sdb, type);
            cbbObjects.setModel(new DefaultComboBoxModel(objectList.toArray()));
            cbbObjects.setSelectedIndex(-1);
        } catch (Exception ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }

    }
    private void cbbObjectsActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        if (cbbObjects.getSelectedIndex() == -1)
        {
            return;
        }
        try
        {
            DBSource sdb = getSourceDB();
            if (sdb == null)
            {
                throw new Exception(constBundle.getString("noSourceDBConfiged"));
            }
            ObjInfo obj = (ObjInfo) cbbObjects.getSelectedItem();
            if (obj == null)
            {
                throw new Exception(constBundle.getString("nullItemNotAllowed"));
            }
            String sddl = SQLFactory.getDDL(obj, getSourceDB());
            rstaSource.setText(sddl);//epSource.setText(sddl);
        } catch (Exception ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }
    }
    private void btnConvertActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        try
        {
            String sddl = rstaSource.getText();//epSource.getText();
            if(sddl.isEmpty())
            {
                throw new Exception(constBundle.getString("noSourceSQL"));
            }
            ConvertMain converterMain = new ConvertMain();
            String hgddl = converterMain.convert(sddl);
            //+ " \r\n $$ LANGUAGE plpgsql;";
            rstaPG.setText(hgddl);//epPG.setText(hgddl);
        } catch (Exception ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }
    }
    private void btnExecutePGSQLActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        try
        {
            String pgsql = rstaPG.getText();//epPG.getText();
            if (pgsql.isEmpty())
            {
                throw new Exception(constBundle.getString("noTargetSQL"));
            }
            DBSource tdb = getTargetDB();
            if (tdb == null)
            {
                throw new Exception(constBundle.getString("noTargetDBConfiged"));
            }
            boolean success = SQLFactory.executeSQL(tdb, pgsql);
            if (success)
            {
                JOptionPane.showMessageDialog(this, constBundle.getString("success"),
                        constBundle.getString("info"), JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }
    }
    private void btnCheckActionPerformed(ActionEvent e)
    {
        logger.debug(e.getActionCommand());
        DBObject type = cbbObjType.getSelectedIndex() == -1 ? null : (DBObject) cbbObjType.getSelectedItem();
        if (type != DBObject.Function && type != DBObject.Procedure)
        {
            JOptionPane.showMessageDialog(this, constBundle.getString("checkOnlySupportFuncProc"),
                    constBundle.getString("info"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        ObjInfo obj = cbbObjects.getSelectedIndex() == -1 ? null : (ObjInfo) cbbObjects.getSelectedItem();
        if (obj == null)
        {
            JOptionPane.showMessageDialog(this, constBundle.getString("noObjToCheck"),
                    constBundle.getString("info"), JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try
        {
            DBSource tdb = getTargetDB();
            if (tdb == null)
            {
                throw new Exception(constBundle.getString("noTargetDBConfiged"));
            }
            String result = CheckController.check(tdb, obj);
            JOptionPane.showMessageDialog(this, result.isEmpty() ? constBundle.getString("cannotAutoCheck") : result,
                    constBundle.getString("checkResult"), JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex)
        {
            logger.error(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    constBundle.getString("error"), JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(System.out);
        }
    }
    
    public static void main(String args[])
    {
        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName().toString());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
        {
            //java.util.logging.Logger.getLogger(MainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            System.err.println(ex.getMessage());
            ex.printStackTrace(System.out);
        }
        
        /* Create and display the form */
        EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                MainView mainView = new MainView();
                mainView.setLocationRelativeTo(null);
                mainView.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnCompare;
    private javax.swing.JButton btnConvert;
    private javax.swing.JButton btnExecutePGSQL;
    private javax.swing.JButton btnMigrate;
    private javax.swing.JButton btnOpenConvert;
    private javax.swing.JButton btnOpenDatatype;
    private javax.swing.JButton btnOpenMigrate;
    private javax.swing.JButton btnOpenWelcome;
    private javax.swing.JButton btnReport;
    private javax.swing.JButton btnSync;
    private javax.swing.ButtonGroup btngChooseObj;
    private javax.swing.JComboBox cbbObjType;
    private javax.swing.JComboBox cbbObjects;
    private javax.swing.JComboBox cbbSourceDB;
    private javax.swing.JComboBox cbbTargetDB;
    private javax.swing.JEditorPane epWelcome;
    private javax.swing.JPanel pnlConvert;
    private javax.swing.JPanel pnlDatatype;
    private javax.swing.JPanel pnlMigrate;
    private javax.swing.JPanel pnlStatus;
    private javax.swing.JPanel pnlWelcome;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton rbtnAll;
    private javax.swing.JRadioButton rbtnNone;
    private javax.swing.JRadioButton rbtnReverse;
    private javax.swing.JScrollPane spDatatype;
    private javax.swing.JSplitPane spEditor;
    private javax.swing.JScrollPane spObject;
    private javax.swing.JScrollPane spPG;
    private javax.swing.JScrollPane spSource;
    private javax.swing.JScrollPane spWelcome;
    private javax.swing.JTextArea taWelcome;
    private javax.swing.JTable tbDatatype;
    private javax.swing.JTabbedPane tbMain;
    private javax.swing.JTable tbObject;
    private javax.swing.JTextField tfStatus;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables
}
