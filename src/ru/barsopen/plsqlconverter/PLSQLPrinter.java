// $ANTLR 3.5.2 PLSQLPrinter.g 2017-09-29 10:30:57

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
package ru.barsopen.plsqlconverter;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2014 Bars Group
 */
@SuppressWarnings("all")
public class PLSQLPrinter extends TreeParser {
        private static Logger logger = LoggerFactory.getLogger(PLSQLPrinter.class);
    
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AMPERSAND", "APPROXIMATE_NUM_LIT", 
		"ASSIGN_OP", "ASTERISK", "AT_SIGN", "B", "BINDVAR", "BIT_STRING_LIT", 
		"C", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", 
		"COMMA", "COMMENT", "COMMENT_FRAGMENT", "CONCATENATION_OP", "D", "DELIMITED_ID", 
		"DOUBLE_ASTERISK", "DOUBLE_PERIOD", "E", "EQUALS_OP", "EXACT_NUM_LIT", 
		"EXCLAMATION_OPERATOR_PART", "F", "G", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", 
		"H", "HEX_STRING_LIT", "I", "INTRODUCER", "J", "K", "L", "LEFT_BRACKET", 
		"LEFT_PAREN", "LESS_THAN_OP", "LESS_THAN_OR_EQUALS_OP", "M", "MINUS_SIGN", 
		"N", "NATIONAL_CHAR_STRING_LIT", "NEWLINE", "NOT_EQUAL_OP", "O", "P", 
		"PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_NON_RESERVED_ELSIF", 
		"PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", 
		"PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", "PLSQL_RESERVED_COLAUTH", 
		"PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", "PLSQL_RESERVED_EXCLUSIVE", 
		"PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "PLSQL_RESERVED_INDEX", 
		"PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
		"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "PLSQL_RESERVED_NOWAIT", 
		"PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", "PLSQL_RESERVED_START", 
		"PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", "PLUS_SIGN", "PROMPT", 
		"Q", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", "QS_OTHER_CH", "QS_PAREN", 
		"QUESTION_MARK", "QUOTE", "R", "REGULAR_ID", "RIGHT_BRACKET", "RIGHT_PAREN", 
		"S", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", "SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", 
		"SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", 
		"SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
		"SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", 
		"SQL92_RESERVED_CREATE", "SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", 
		"SQL92_RESERVED_DATE", "SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", 
		"SQL92_RESERVED_DELETE", "SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", 
		"SQL92_RESERVED_DROP", "SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", 
		"SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
		"SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", 
		"SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", 
		"SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "T", "TILDE_OPERATOR_PART", 
		"U", "UNDERSCORE", "UNSIGNED_INTEGER", "V", "VERTICAL_BAR", "W", "X", 
		"Y", "Z", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", 
		"AGENT_VK", "AGGREGATE_VK", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", "ALTER_FUNCTION", 
		"ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", "ALTER_PROCEDURE", 
		"ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", "ANY_ELEMENT", 
		"ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", "ATTRIBUTE", 
		"ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", "AUTOMATIC_VK", 
		"AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", 
		"BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", 
		"BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", 
		"BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", 
		"BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", 
		"CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", 
		"CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", 
		"COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_ALIAS", "COLUMN_NAME", 
		"COMMENT_VK", "COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", 
		"COMPILER_PARAMETER", "COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", 
		"CONSTANT_NEGATED", "CONSTANT_VK", "CONSTRAINT_NAME", "CONSTRAINT_STATE", 
		"CONSTRAINT_VK", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", "CONTENT_VK", "CONTEXT_VK", 
		"CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", "COST_CLASS_NAME", 
		"COST_VK", "COUNT_VK", "CREATE_FUNCTION", "CREATE_PACKAGE_BODY", "CREATE_PACKAGE_SPEC", 
		"CREATE_PROCEDURE", "CREATE_SEQUENCE", "CREATE_TRIGGER", "CREATE_TYPE_BODY", 
		"CREATE_TYPE_SPEC", "CREATE_VIEW", "CROSS_VK", "CUBE_VK", "CURRENT_USER_VK", 
		"CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", "CURSOR_NAME", "CUSTOMDATUM_VK", 
		"CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", "DATETIME_OP", "DAY_VK", 
		"DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", "DEBUG_VK", "DECIMAL_VK", 
		"DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", "DEFAULT_VALUE", 
		"DEFERRABLE_VK", "DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", 
		"DEPTH_VK", "DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", 
		"DISASSOCIATE_VK", "DIV_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", 
		"DOT_ASTERISK", "DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", 
		"DROP_SEQUENCE", "DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", 
		"DYNAMIC_RETURN", "ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", 
		"ENCODING_VK", "ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", 
		"EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", 
		"EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", 
		"EXTRACT_VK", "FACTORING", "FAILURE_VK", "FIELDS", "FIELD_SPEC", "FINAL_VK", 
		"FIRST_VALUE_VK", "FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", 
		"FORALL_VK", "FORCE_VK", "FOREIGN_KEY", "FOREIGN_VK", "FOR_EACH_ROW", 
		"FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", "FUNCTION_ENABLING_OVER", 
		"FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", "FUNCTION_NAME", 
		"FUNCTION_SPEC", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", "HASH_VK", 
		"HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", 
		"HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", 
		"IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", 
		"INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", 
		"INITIALLY_VK", "INLINE_CONSTRAINT_CLAUSE", "INLINE_VK", "INNER_VK", "INOUT_VK", 
		"INSTANTIABLE_VK", "INSTEAD_VK", "INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", 
		"INVALIDATE_VK", "ISOLATION_VK", "IS_A_SET", "IS_EMPTY", "IS_INFINITE", 
		"IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", "IS_NOT_INFINITE", "IS_NOT_NAN", 
		"IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", "IS_NULL", "IS_OF_TYPE", 
		"IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", "KEEP_VK", "KEY_VK", 
		"LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", "LAST_VK", 
		"LEADING_VK", "LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", "LIKEC_VK", 
		"LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", "LOGIC_EXPR", 
		"LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_RAW", "LONG_VK", "LOOP_VK", "MAIN_MODEL", 
		"MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", "MEMBER_VK", 
		"MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", "MINVALUE_VK", 
		"MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", "MODEL_RULE", 
		"MODEL_RULES", "MODIFIER", "MODIFY_VK", "MOD_VK", "MONTH_VK", "MULTI_TABLE_MODE", 
		"NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", "NAV_VK", "NCHAR_CS_VK", 
		"NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", "NESTED_VK", "NEW_VK", 
		"NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", "NOENTITYESCAPING_VK", 
		"NOFORCE", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NONE_VK", "NON_DML", "NOORDER_VK", 
		"NORELY_VK", "NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_DEFERRABLE", "NOT_IN", 
		"NOT_LIKE", "NOT_NULL", "NOVALIDATE_VK", "NO_VK", "NULLS_VK", "NUMBER_VK", 
		"NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", "OBJECT_TYPE_DEF", 
		"OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "ON_DELETE", "OPEN_FOR", "OPEN_VK", 
		"ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", 
		"OSERROR_VK", "OUTER_JOIN_SIGN", "OUT_OF_LINE_CONSTRAINT", "OUT_VK", "OVERRIDING_VK", 
		"OVER_VK", "PACKAGE_NAME", "PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", 
		"PARAMETERS", "PARAMETERS_VK", "PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", 
		"PASSING_VK", "PERCENT_FOUND_VK", "PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", 
		"PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", "PERCENT_TYPE_VK", "PIPELINED_VK", 
		"PIPE_ROW", "PIPE_VK", "PIVOT_ALIAS", "PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", 
		"PIVOT_VK", "PLS_INTEGER_VK", "POSITIVEN_VK", "POSITIVE_VK", "PRAGMA_DECLARE", 
		"PRAGMA_VK", "PRECEDING_VK", "PRECISION", "PRECISION_VK", "PREDICTION_FUNCTION", 
		"PRIMARY_KEY", "PRIMARY_VK", "PROCEDURE_NAME", "PROCEDURE_SPEC", "QUERY_NAME", 
		"QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS", "RAISE_VK", "RANGE_VK", "RAW_VK", 
		"READ_VK", "REAL_VK", "RECORD_NAME", "RECORD_TYPE_DECLARE_FIELDS", "RECORD_TYPE_DECLARE_REFCURSOR", 
		"RECORD_VAR_DECLARE", "RECURSIVE_VK", "REFERENCES_CLAUSE", "REFERENCES_VK", 
		"REFERENCE_MODEL_NAME", "REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REJECT_VK", 
		"RELIES_ON_VK", "RELY_VK", "RENAME_VK", "REPLACE_VK", "RESPECT_VK", "RESTRICT_REFERENCES_VK", 
		"RESULT_CACHE_VK", "RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", 
		"ROLLBACK_SEGMENT_NAME", "ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", 
		"ROWID_VK", "ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", 
		"SAVEPOINT_VK", "SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", 
		"SEARCHED_CASE", "SEARCH_VK", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", 
		"SELECT_BASED_FOR", "SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", 
		"SELF_VK", "SEQUENCE_NAME", "SEQUENCE_VK", "SEQUENTIAL_VK", "SERIALIZABLE_VK", 
		"SERIALLY_REUSABLE_VK", "SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", 
		"SET_NULL", "SET_SERVEROUTPUT", "SET_TRANSACTION", "SET_VK", "SHOW_VK", 
		"SHUTDOWN_VK", "SIBLINGS_VK", "SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", 
		"SIMPLE_DML", "SIMPLE_INTEGER_VK", "SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", 
		"SMALLINT_VK", "SOME_VK", "SPECIFICATION_VK", "SQLDATA_VK", "SQLERROR_VK", 
		"SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", "STARTUP_VK", "STATEMENTS", 
		"STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", "STREAMING_CLAUSE", 
		"STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", "SUBQUERY", "SUBTYPE_DECLARE", 
		"SUCCESS_VK", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ALIAS", "TABLE_ELEMENT", 
		"TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", "TABLE_TYPE_DECLARE", 
		"TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", "TIMESTAMP_LTZ_UNCONSTRAINED_VK", 
		"TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", "TIMESTAMP_VK", 
		"TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", "TIMEZONE_REGION_VK", 
		"TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", "TRIGGER_NAME", 
		"TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", "TYPE_VK", 
		"UNARY_MINUS", "UNARY_PLUS", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", 
		"UNPIVOT_IN_ELEMENT", "UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", 
		"UROWID_VK", "USING_INDEX", "USING_MODE", "VALIDATE_VK", "VALUES_BOUND", 
		"VALUE_VK", "VARCHAR2_VK", "VARCHAR_VK", "VARIABLE_DECLARE", "VARIABLE_NAME", 
		"VARR_ARRAY_DEF", "VECTOR_EXPR", "VERSIONS_VK", "VERSION_VK", "VIEW_NAME", 
		"VIEW_TYPE_CONSTRAINTS", "VIEW_TYPE_CONSTRAINT_ITEM_INLINE", "WAIT_VK", 
		"WARNING_VK", "WELLFORMED_VK", "WHENEVER_VK", "WHILE_LOOP", "WITHIN_VK", 
		"WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", "XMLCAST_VK", 
		"XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", "XMLNAMESPACES_VK", 
		"XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", "XMLSERIALIZE_VK", 
		"XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", "XML_ELEMENT", 
		"XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK", "PGSQL_BIGINT", 
		"PGSQL_ERRCODE", "PGSQL_EXCEPT", "PGSQL_EXCEPTION", "PGSQL_NATIVE_DATATYPE_INTERVAL", 
		"PGSQL_NOTICE", "PGSQL_OPTION", "PGSQL_PERFORM", "PGSQL_RAISE", "PGSQL_STRICT", 
		"PGSQL_TEXT", "PGSQL_TYPED_LITERAL", "PGSQL_USING", "1024", "1025", "1026", 
		"1027", "1028", "1029", "1030", "1031", "1032", "1033", "1034", "1035", 
		"1036", "1037", "1038", "1039", "1040", "1041", "1042", "1043", "1044", 
		"1045", "1046", "1047", "1048", "1049", "1050", "1051", "1052", "1053", 
		"1054", "1055", "1056", "1057", "1058", "1059", "1060", "1061", "1062", 
		"1063", "1064", "1065", "1066", "1067", "1068", "1069", "1070", "1071", 
		"1072", "1073", "1074", "1075", "1076", "1077", "1078"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AMPERSAND=5;
	public static final int APPROXIMATE_NUM_LIT=6;
	public static final int ASSIGN_OP=7;
	public static final int ASTERISK=8;
	public static final int AT_SIGN=9;
	public static final int B=10;
	public static final int BINDVAR=11;
	public static final int BIT_STRING_LIT=12;
	public static final int C=13;
	public static final int CARRET_OPERATOR_PART=14;
	public static final int CHAR_STRING=15;
	public static final int CHAR_STRING_PERL=16;
	public static final int COLON=17;
	public static final int COMMA=18;
	public static final int COMMENT=19;
	public static final int COMMENT_FRAGMENT=20;
	public static final int CONCATENATION_OP=21;
	public static final int D=22;
	public static final int DELIMITED_ID=23;
	public static final int DOUBLE_ASTERISK=24;
	public static final int DOUBLE_PERIOD=25;
	public static final int E=26;
	public static final int EQUALS_OP=27;
	public static final int EXACT_NUM_LIT=28;
	public static final int EXCLAMATION_OPERATOR_PART=29;
	public static final int F=30;
	public static final int G=31;
	public static final int GREATER_THAN_OP=32;
	public static final int GREATER_THAN_OR_EQUALS_OP=33;
	public static final int H=34;
	public static final int HEX_STRING_LIT=35;
	public static final int I=36;
	public static final int INTRODUCER=37;
	public static final int J=38;
	public static final int K=39;
	public static final int L=40;
	public static final int LEFT_BRACKET=41;
	public static final int LEFT_PAREN=42;
	public static final int LESS_THAN_OP=43;
	public static final int LESS_THAN_OR_EQUALS_OP=44;
	public static final int M=45;
	public static final int MINUS_SIGN=46;
	public static final int N=47;
	public static final int NATIONAL_CHAR_STRING_LIT=48;
	public static final int NEWLINE=49;
	public static final int NOT_EQUAL_OP=50;
	public static final int O=51;
	public static final int P=52;
	public static final int PERCENT=53;
	public static final int PERIOD=54;
	public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=55;
	public static final int PLSQL_NON_RESERVED_ELSIF=56;
	public static final int PLSQL_NON_RESERVED_MODEL=57;
	public static final int PLSQL_NON_RESERVED_PIVOT=58;
	public static final int PLSQL_NON_RESERVED_UNPIVOT=59;
	public static final int PLSQL_NON_RESERVED_USING=60;
	public static final int PLSQL_RESERVED_CLUSTERS=61;
	public static final int PLSQL_RESERVED_COLAUTH=62;
	public static final int PLSQL_RESERVED_COMPRESS=63;
	public static final int PLSQL_RESERVED_CRASH=64;
	public static final int PLSQL_RESERVED_EXCLUSIVE=65;
	public static final int PLSQL_RESERVED_IDENTIFIED=66;
	public static final int PLSQL_RESERVED_IF=67;
	public static final int PLSQL_RESERVED_INDEX=68;
	public static final int PLSQL_RESERVED_INDEXES=69;
	public static final int PLSQL_RESERVED_LOCK=70;
	public static final int PLSQL_RESERVED_MINUS=71;
	public static final int PLSQL_RESERVED_MODE=72;
	public static final int PLSQL_RESERVED_NOCOMPRESS=73;
	public static final int PLSQL_RESERVED_NOWAIT=74;
	public static final int PLSQL_RESERVED_RESOURCE=75;
	public static final int PLSQL_RESERVED_SHARE=76;
	public static final int PLSQL_RESERVED_START=77;
	public static final int PLSQL_RESERVED_TABAUTH=78;
	public static final int PLSQL_RESERVED_VIEWS=79;
	public static final int PLUS_SIGN=80;
	public static final int PROMPT=81;
	public static final int Q=82;
	public static final int QS_ANGLE=83;
	public static final int QS_BRACE=84;
	public static final int QS_BRACK=85;
	public static final int QS_OTHER=86;
	public static final int QS_OTHER_CH=87;
	public static final int QS_PAREN=88;
	public static final int QUESTION_MARK=89;
	public static final int QUOTE=90;
	public static final int R=91;
	public static final int REGULAR_ID=92;
	public static final int RIGHT_BRACKET=93;
	public static final int RIGHT_PAREN=94;
	public static final int S=95;
	public static final int SEMICOLON=96;
	public static final int SEPARATOR=97;
	public static final int SIMPLE_LETTER=98;
	public static final int SOLIDUS=99;
	public static final int SPACE=100;
	public static final int SQL92_RESERVED_ALL=101;
	public static final int SQL92_RESERVED_ALTER=102;
	public static final int SQL92_RESERVED_AND=103;
	public static final int SQL92_RESERVED_ANY=104;
	public static final int SQL92_RESERVED_AS=105;
	public static final int SQL92_RESERVED_ASC=106;
	public static final int SQL92_RESERVED_BEGIN=107;
	public static final int SQL92_RESERVED_BETWEEN=108;
	public static final int SQL92_RESERVED_BY=109;
	public static final int SQL92_RESERVED_CASE=110;
	public static final int SQL92_RESERVED_CHECK=111;
	public static final int SQL92_RESERVED_CONNECT=112;
	public static final int SQL92_RESERVED_CREATE=113;
	public static final int SQL92_RESERVED_CURRENT=114;
	public static final int SQL92_RESERVED_CURSOR=115;
	public static final int SQL92_RESERVED_DATE=116;
	public static final int SQL92_RESERVED_DECLARE=117;
	public static final int SQL92_RESERVED_DEFAULT=118;
	public static final int SQL92_RESERVED_DELETE=119;
	public static final int SQL92_RESERVED_DESC=120;
	public static final int SQL92_RESERVED_DISTINCT=121;
	public static final int SQL92_RESERVED_DROP=122;
	public static final int SQL92_RESERVED_ELSE=123;
	public static final int SQL92_RESERVED_END=124;
	public static final int SQL92_RESERVED_EXCEPTION=125;
	public static final int SQL92_RESERVED_EXISTS=126;
	public static final int SQL92_RESERVED_FALSE=127;
	public static final int SQL92_RESERVED_FETCH=128;
	public static final int SQL92_RESERVED_FOR=129;
	public static final int SQL92_RESERVED_FROM=130;
	public static final int SQL92_RESERVED_GOTO=131;
	public static final int SQL92_RESERVED_GRANT=132;
	public static final int SQL92_RESERVED_GROUP=133;
	public static final int SQL92_RESERVED_HAVING=134;
	public static final int SQL92_RESERVED_IN=135;
	public static final int SQL92_RESERVED_INSERT=136;
	public static final int SQL92_RESERVED_INTERSECT=137;
	public static final int SQL92_RESERVED_INTO=138;
	public static final int SQL92_RESERVED_IS=139;
	public static final int SQL92_RESERVED_LIKE=140;
	public static final int SQL92_RESERVED_NOT=141;
	public static final int SQL92_RESERVED_NULL=142;
	public static final int SQL92_RESERVED_OF=143;
	public static final int SQL92_RESERVED_ON=144;
	public static final int SQL92_RESERVED_OPTION=145;
	public static final int SQL92_RESERVED_OR=146;
	public static final int SQL92_RESERVED_ORDER=147;
	public static final int SQL92_RESERVED_OVERLAPS=148;
	public static final int SQL92_RESERVED_PRIOR=149;
	public static final int SQL92_RESERVED_PROCEDURE=150;
	public static final int SQL92_RESERVED_PUBLIC=151;
	public static final int SQL92_RESERVED_REVOKE=152;
	public static final int SQL92_RESERVED_SELECT=153;
	public static final int SQL92_RESERVED_SIZE=154;
	public static final int SQL92_RESERVED_TABLE=155;
	public static final int SQL92_RESERVED_THE=156;
	public static final int SQL92_RESERVED_THEN=157;
	public static final int SQL92_RESERVED_TO=158;
	public static final int SQL92_RESERVED_TRUE=159;
	public static final int SQL92_RESERVED_UNION=160;
	public static final int SQL92_RESERVED_UNIQUE=161;
	public static final int SQL92_RESERVED_UPDATE=162;
	public static final int SQL92_RESERVED_VALUES=163;
	public static final int SQL92_RESERVED_VIEW=164;
	public static final int SQL92_RESERVED_WHEN=165;
	public static final int SQL92_RESERVED_WHERE=166;
	public static final int SQL92_RESERVED_WITH=167;
	public static final int T=168;
	public static final int TILDE_OPERATOR_PART=169;
	public static final int U=170;
	public static final int UNDERSCORE=171;
	public static final int UNSIGNED_INTEGER=172;
	public static final int V=173;
	public static final int VERTICAL_BAR=174;
	public static final int W=175;
	public static final int X=176;
	public static final int Y=177;
	public static final int Z=178;
	public static final int ZV=179;
	public static final int ADD_VK=180;
	public static final int AFTER_EACH_ROW=181;
	public static final int AFTER_STATEMENT=182;
	public static final int AFTER_VK=183;
	public static final int AGENT_VK=184;
	public static final int AGGREGATE_VK=185;
	public static final int ALTER_ATTRIBUTE=186;
	public static final int ALTER_COLLECTION=187;
	public static final int ALTER_FUNCTION=188;
	public static final int ALTER_METHOD=189;
	public static final int ALTER_METHOD_ELEMENT=190;
	public static final int ALTER_PACKAGE=191;
	public static final int ALTER_PROCEDURE=192;
	public static final int ALTER_SEQUENCE=193;
	public static final int ALTER_TRIGGER=194;
	public static final int ALTER_TYPE=195;
	public static final int ANALYZE_VK=196;
	public static final int ANY_ELEMENT=197;
	public static final int ANY_MODE=198;
	public static final int ARGUMENT=200;
	public static final int ARGUMENTS=201;
	public static final int ASSIGN=202;
	public static final int ASSOCIATE_VK=203;
	public static final int ATTRIBUTE=205;
	public static final int ATTRIBUTES=206;
	public static final int ATTRIBUTE_NAME=207;
	public static final int AT_VK=209;
	public static final int AUDIT_VK=210;
	public static final int AUTHID_VK=211;
	public static final int AUTOMATIC_VK=212;
	public static final int AUTONOMOUS_TRANSACTION_VK=213;
	public static final int AUTO_VK=214;
	public static final int BATCH_VK=215;
	public static final int BEFORE_EACH_ROW=216;
	public static final int BEFORE_STATEMENT=217;
	public static final int BEFORE_VK=218;
	public static final int BFILE_VK=219;
	public static final int BINARY_DOUBLE_VK=220;
	public static final int BINARY_FLOAT_VK=221;
	public static final int BINARY_INTEGER_VK=222;
	public static final int BIT_VK=224;
	public static final int BLOB_VK=225;
	public static final int BLOCK=226;
	public static final int BLOCK_VK=227;
	public static final int BODY=228;
	public static final int BODY_MODE=229;
	public static final int BODY_VK=230;
	public static final int BOOLEAN_VK=231;
	public static final int BOTH_VK=232;
	public static final int BREADTH_VK=233;
	public static final int BULK_VK=234;
	public static final int BYTE_VK=235;
	public static final int CACHE_VK=236;
	public static final int CALL_MODE=237;
	public static final int CALL_VK=238;
	public static final int CANONICAL_VK=239;
	public static final int CASCADE_VK=241;
	public static final int CASCATED_ELEMENT=242;
	public static final int CAST_VK=243;
	public static final int CHARACTER_VK=244;
	public static final int CHAR_CS_VK=245;
	public static final int CHAR_SET_NAME=246;
	public static final int CHAR_VK=249;
	public static final int CHR_VK=250;
	public static final int CLOB_VK=251;
	public static final int CLOSE_VK=252;
	public static final int CLUSTER_VK=253;
	public static final int COLLECTION_MODE=254;
	public static final int COLLECTION_NAME=255;
	public static final int COLLECT_VK=256;
	public static final int COLUMNS=258;
	public static final int COLUMN_ALIAS=259;
	public static final int COLUMN_NAME=260;
	public static final int COMMENT_VK=262;
	public static final int COMMITTED_VK=263;
	public static final int COMMIT_VK=264;
	public static final int COMPATIBILITY_VK=265;
	public static final int COMPILATION_UNIT=266;
	public static final int COMPILER_PARAMETER=267;
	public static final int COMPILE_VK=268;
	public static final int COMPOUND_DML=269;
	public static final int COMPOUND_VK=270;
	public static final int CONDITIONAL_INSERT=272;
	public static final int CONSTANT_NEGATED=273;
	public static final int CONSTANT_VK=274;
	public static final int CONSTRAINT_NAME=275;
	public static final int CONSTRAINT_STATE=276;
	public static final int CONSTRAINT_VK=277;
	public static final int CONSTRUCTOR_SPEC=278;
	public static final int CONSTRUCTOR_VK=279;
	public static final int CONTENT_VK=280;
	public static final int CONTEXT_VK=281;
	public static final int CONTINUE_VK=282;
	public static final int CONVERT_VK=283;
	public static final int CORRUPT_XID_ALL_VK=284;
	public static final int CORRUPT_XID_VK=285;
	public static final int COST_CLASS_NAME=286;
	public static final int COST_VK=287;
	public static final int COUNT_VK=288;
	public static final int CREATE_FUNCTION=289;
	public static final int CREATE_PACKAGE_BODY=290;
	public static final int CREATE_PACKAGE_SPEC=291;
	public static final int CREATE_PROCEDURE=292;
	public static final int CREATE_SEQUENCE=293;
	public static final int CREATE_TRIGGER=294;
	public static final int CREATE_TYPE_BODY=295;
	public static final int CREATE_TYPE_SPEC=296;
	public static final int CREATE_VIEW=297;
	public static final int CROSS_VK=298;
	public static final int CUBE_VK=299;
	public static final int CURRENT_USER_VK=300;
	public static final int CURRENT_VK=301;
	public static final int CURSOR_BASED_FOR=302;
	public static final int CURSOR_DECLARE=303;
	public static final int CURSOR_NAME=304;
	public static final int CUSTOMDATUM_VK=305;
	public static final int CUSTOM_TYPE=306;
	public static final int CYCLE_VK=307;
	public static final int C_VK=308;
	public static final int DATABASE_VK=309;
	public static final int DATETIME_OP=310;
	public static final int DAY_VK=311;
	public static final int DBTIMEZONE_VK=312;
	public static final int DB_ROLE_CHANGE_VK=313;
	public static final int DDL_VK=314;
	public static final int DEBUG_VK=315;
	public static final int DECIMAL_VK=316;
	public static final int DECOMPOSE_VK=317;
	public static final int DECREMENT_VK=318;
	public static final int DEC_VK=319;
	public static final int DEFAULTS_VK=320;
	public static final int DEFAULT_VALUE=321;
	public static final int DEFERRABLE_VK=322;
	public static final int DEFERRED_VK=323;
	public static final int DEFINER_VK=324;
	public static final int DENSE_RANK_VK=326;
	public static final int DEPENDENT_HANDLING=327;
	public static final int DEPTH_VK=328;
	public static final int DETERMINISTIC_VK=329;
	public static final int DIMENSION_VK=330;
	public static final int DIRECT_MODE=331;
	public static final int DISABLE_VK=332;
	public static final int DISASSOCIATE_VK=333;
	public static final int DIV_VK=334;
	public static final int DML_EVENT=335;
	public static final int DML_EVENT_ELEMENT=336;
	public static final int DOCUMENT_VK=337;
	public static final int DOT_ASTERISK=338;
	public static final int DOUBLE_VK=339;
	public static final int DROP_FUNCTION=340;
	public static final int DROP_PACKAGE=341;
	public static final int DROP_PROCEDURE=342;
	public static final int DROP_SEQUENCE=343;
	public static final int DROP_TRIGGER=344;
	public static final int DROP_TYPE=345;
	public static final int DSINTERVAL_UNCONSTRAINED_VK=346;
	public static final int DYNAMIC_RETURN=347;
	public static final int ELEMENT=348;
	public static final int ELEMENTS_MODE=349;
	public static final int ELEMENT_SPEC=350;
	public static final int ENABLE_VK=351;
	public static final int ENCODING_VK=352;
	public static final int ENTITYESCAPING_VK=353;
	public static final int EVALNAME_VK=355;
	public static final int EXCEPTIONS_VK=357;
	public static final int EXCEPTION_DECLARE=358;
	public static final int EXCEPTION_INIT_VK=359;
	public static final int EXCEPTION_NAME=360;
	public static final int EXCLUDE_VK=362;
	public static final int EXECUTE_VK=363;
	public static final int EXIT_VK=364;
	public static final int EXPLAIN_STATEMENT=365;
	public static final int EXPR=366;
	public static final int EXPR_LIST=367;
	public static final int EXTERNAL_MODE=368;
	public static final int EXTERNAL_VK=369;
	public static final int EXTRACT_VK=370;
	public static final int FACTORING=371;
	public static final int FAILURE_VK=372;
	public static final int FIELDS=373;
	public static final int FIELD_SPEC=374;
	public static final int FINAL_VK=375;
	public static final int FIRST_VALUE_VK=376;
	public static final int FIRST_VK=377;
	public static final int FLOAT_VK=378;
	public static final int FOLLOWING_VK=379;
	public static final int FOLLOWS_VK=380;
	public static final int FORALL_VK=381;
	public static final int FORCE_VK=382;
	public static final int FOREIGN_KEY=383;
	public static final int FOREIGN_VK=384;
	public static final int FOR_EACH_ROW=385;
	public static final int FOR_LOOP=386;
	public static final int FOR_MULTI_COLUMN=387;
	public static final int FOR_SINGLE_COLUMN=388;
	public static final int FULL_VK=389;
	public static final int FUNCTION_ENABLING_OVER=390;
	public static final int FUNCTION_ENABLING_USING=391;
	public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=392;
	public static final int FUNCTION_NAME=393;
	public static final int FUNCTION_SPEC=394;
	public static final int GROUPING_VK=397;
	public static final int GROUPIN_SET=398;
	public static final int GROUP_BY_ELEMENT=399;
	public static final int HASH_VK=400;
	public static final int HIDE_VK=401;
	public static final int HIERARCHICAL=402;
	public static final int HOSTED_VARIABLE=403;
	public static final int HOSTED_VARIABLE_NAME=404;
	public static final int HOSTED_VARIABLE_ROUTINE_CALL=405;
	public static final int HOUR_VK=406;
	public static final int ID=407;
	public static final int IGNORE_VK=408;
	public static final int IMMEDIATE_VK=409;
	public static final int IMPLEMENTATION_TYPE_NAME=410;
	public static final int INCLUDE_VK=411;
	public static final int INCLUDING_VK=412;
	public static final int INCREMENT_VK=413;
	public static final int INDENT_VK=414;
	public static final int INDEXED_BY=415;
	public static final int INDEXED_FOR=416;
	public static final int INDEX_NAME=417;
	public static final int INDICES_BOUND=418;
	public static final int INITIALLY_VK=419;
	public static final int INLINE_CONSTRAINT_CLAUSE=420;
	public static final int INLINE_VK=421;
	public static final int INNER_VK=422;
	public static final int INOUT_VK=423;
	public static final int INSTANTIABLE_VK=424;
	public static final int INSTEAD_VK=425;
	public static final int INTEGER_VK=426;
	public static final int INTERVAL_DATATYPE=427;
	public static final int INT_VK=429;
	public static final int INVALIDATE_VK=430;
	public static final int ISOLATION_VK=431;
	public static final int IS_A_SET=432;
	public static final int IS_EMPTY=433;
	public static final int IS_INFINITE=434;
	public static final int IS_NAN=435;
	public static final int IS_NOT_A_SET=436;
	public static final int IS_NOT_EMPTY=437;
	public static final int IS_NOT_INFINITE=438;
	public static final int IS_NOT_NAN=439;
	public static final int IS_NOT_NULL=440;
	public static final int IS_NOT_OF_TYPE=441;
	public static final int IS_NOT_PRESENT=442;
	public static final int IS_NULL=443;
	public static final int IS_OF_TYPE=444;
	public static final int IS_PRESENT=445;
	public static final int ITERATE_VK=446;
	public static final int JAVA_VK=447;
	public static final int JOIN_DEF=448;
	public static final int KEEP_VK=449;
	public static final int KEY_VK=450;
	public static final int LABEL_DECLARE=451;
	public static final int LABEL_NAME=452;
	public static final int LANGUAGE_VK=453;
	public static final int LAST_VALUE_VK=454;
	public static final int LAST_VK=455;
	public static final int LEADING_VK=456;
	public static final int LEFT_VK=459;
	public static final int LIBRARY_VK=462;
	public static final int LIKE2_VK=463;
	public static final int LIKE4_VK=464;
	public static final int LIKEC_VK=465;
	public static final int LIMIT_VK=466;
	public static final int LINK_NAME=467;
	public static final int LOCAL_VK=468;
	public static final int LOCK_TABLE_ELEMENT=469;
	public static final int LOGIC_EXPR=470;
	public static final int LOGOFF_VK=471;
	public static final int LOGON_VK=472;
	public static final int LOG_VK=473;
	public static final int LONG_RAW=474;
	public static final int LONG_VK=475;
	public static final int LOOP_VK=476;
	public static final int MAIN_MODEL=477;
	public static final int MAIN_MODEL_NAME=478;
	public static final int MAP_VK=479;
	public static final int MAXVALUE_VK=480;
	public static final int MEASURES_VK=481;
	public static final int MEMBER_VK=482;
	public static final int MERGE_INSERT=483;
	public static final int MERGE_UPDATE=484;
	public static final int MERGE_VK=485;
	public static final int MINUTE_VK=487;
	public static final int MINVALUE_VK=488;
	public static final int MLSLABEL_VK=489;
	public static final int MODEL_COLUMN=490;
	public static final int MODEL_COLUMNS=491;
	public static final int MODEL_EXPRESSION=492;
	public static final int MODEL_RULE=493;
	public static final int MODEL_RULES=494;
	public static final int MODIFIER=495;
	public static final int MODIFY_VK=496;
	public static final int MOD_VK=497;
	public static final int MONTH_VK=498;
	public static final int MULTI_TABLE_MODE=499;
	public static final int NAME_VK=500;
	public static final int NATIVE_DATATYPE=502;
	public static final int NATURALN_VK=503;
	public static final int NATURAL_VK=504;
	public static final int NAV_VK=505;
	public static final int NCHAR_CS_VK=506;
	public static final int NCHAR_VK=507;
	public static final int NCLOB_VK=508;
	public static final int NESTED_TABLE_TYPE_DEF=509;
	public static final int NESTED_VK=510;
	public static final int NEW_VK=511;
	public static final int NOAUDIT_VK=512;
	public static final int NOCACHE_VK=513;
	public static final int NOCOPY_VK=514;
	public static final int NOCYCLE_VK=515;
	public static final int NOENTITYESCAPING_VK=516;
	public static final int NOFORCE=517;
	public static final int NOMAXVALUE_VK=518;
	public static final int NOMINVALUE_VK=519;
	public static final int NONE_VK=520;
	public static final int NON_DML=521;
	public static final int NOORDER_VK=522;
	public static final int NORELY_VK=523;
	public static final int NOSCHEMACHECK_VK=524;
	public static final int NOT_BETWEEN=525;
	public static final int NOT_DEFERRABLE=526;
	public static final int NOT_IN=528;
	public static final int NOT_LIKE=529;
	public static final int NOT_NULL=530;
	public static final int NOVALIDATE_VK=531;
	public static final int NO_VK=532;
	public static final int NULLS_VK=533;
	public static final int NUMBER_VK=534;
	public static final int NUMERIC_VK=535;
	public static final int NVARCHAR2_VK=536;
	public static final int OBJECT_AS=537;
	public static final int OBJECT_MEMBERS=538;
	public static final int OBJECT_TYPE_DEF=539;
	public static final int OBJECT_VK=540;
	public static final int OFF_VK=541;
	public static final int OLD_VK=542;
	public static final int ONLY_VK=543;
	public static final int ON_DELETE=544;
	public static final int OPEN_FOR=545;
	public static final int OPEN_VK=546;
	public static final int ORADATA_VK=547;
	public static final int ORDER_BY_ELEMENT=548;
	public static final int ORDER_BY_ELEMENTS=549;
	public static final int ORDINALITY_VK=550;
	public static final int OSERROR_VK=551;
	public static final int OUTER_JOIN_SIGN=552;
	public static final int OUT_OF_LINE_CONSTRAINT=553;
	public static final int OUT_VK=554;
	public static final int OVERRIDING_VK=555;
	public static final int OVER_VK=556;
	public static final int PACKAGE_NAME=557;
	public static final int PACKAGE_VK=558;
	public static final int PARALLEL_ENABLE_VK=559;
	public static final int PARAMETER=560;
	public static final int PARAMETERS=561;
	public static final int PARAMETERS_VK=562;
	public static final int PARAMETER_NAME=563;
	public static final int PARENT_VK=564;
	public static final int PARTITION_VK=565;
	public static final int PASSING_VK=566;
	public static final int PERCENT_FOUND_VK=568;
	public static final int PERCENT_ISOPEN_VK=569;
	public static final int PERCENT_NOTFOUND_VK=570;
	public static final int PERCENT_ROWCOUNT_VK=571;
	public static final int PERCENT_ROWTYPE_VK=572;
	public static final int PERCENT_TYPE_VK=573;
	public static final int PIPELINED_VK=575;
	public static final int PIPE_ROW=576;
	public static final int PIPE_VK=577;
	public static final int PIVOT_ALIAS=578;
	public static final int PIVOT_ELEMENT=579;
	public static final int PIVOT_IN_ELEMENT=580;
	public static final int PIVOT_VK=581;
	public static final int PLS_INTEGER_VK=596;
	public static final int POSITIVEN_VK=598;
	public static final int POSITIVE_VK=599;
	public static final int PRAGMA_DECLARE=600;
	public static final int PRAGMA_VK=601;
	public static final int PRECEDING_VK=602;
	public static final int PRECISION=603;
	public static final int PRECISION_VK=604;
	public static final int PREDICTION_FUNCTION=605;
	public static final int PRIMARY_KEY=606;
	public static final int PRIMARY_VK=607;
	public static final int PROCEDURE_NAME=608;
	public static final int PROCEDURE_SPEC=609;
	public static final int QUERY_NAME=611;
	public static final int QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS=612;
	public static final int RAISE_VK=613;
	public static final int RANGE_VK=614;
	public static final int RAW_VK=615;
	public static final int READ_VK=616;
	public static final int REAL_VK=617;
	public static final int RECORD_NAME=618;
	public static final int RECORD_TYPE_DECLARE_FIELDS=619;
	public static final int RECORD_TYPE_DECLARE_REFCURSOR=620;
	public static final int RECORD_VAR_DECLARE=621;
	public static final int RECURSIVE_VK=622;
	public static final int REFERENCES_CLAUSE=623;
	public static final int REFERENCES_VK=624;
	public static final int REFERENCE_MODEL_NAME=625;
	public static final int REFERENCE_VK=626;
	public static final int REFERENCING_VK=627;
	public static final int REF_VK=628;
	public static final int REJECT_VK=630;
	public static final int RELIES_ON_VK=631;
	public static final int RELY_VK=632;
	public static final int RENAME_VK=633;
	public static final int REPLACE_VK=634;
	public static final int RESPECT_VK=635;
	public static final int RESTRICT_REFERENCES_VK=636;
	public static final int RESULT_CACHE_VK=637;
	public static final int RETURN_VK=638;
	public static final int REUSE_VK=639;
	public static final int REVERSE_VK=640;
	public static final int RIGHT_VK=643;
	public static final int ROLLBACK_SEGMENT_NAME=644;
	public static final int ROLLBACK_VK=645;
	public static final int ROLLUP_VK=646;
	public static final int ROUTINE_CALL=647;
	public static final int ROUTINE_NAME=648;
	public static final int ROWID_VK=649;
	public static final int ROWS_VK=650;
	public static final int ROW_VK=651;
	public static final int RULES_VK=652;
	public static final int SAMPLE_VK=653;
	public static final int SAVEPOINT_NAME=654;
	public static final int SAVEPOINT_VK=655;
	public static final int SCHEMACHECK_VK=656;
	public static final int SCHEMA_NAME=657;
	public static final int SCHEMA_VK=658;
	public static final int SCN_VK=659;
	public static final int SEARCHED_CASE=660;
	public static final int SEARCH_VK=661;
	public static final int SECOND_VK=662;
	public static final int SEED_VK=663;
	public static final int SELECTED_TABLEVIEW=664;
	public static final int SELECT_BASED_FOR=665;
	public static final int SELECT_ITEM=666;
	public static final int SELECT_LIST=667;
	public static final int SELECT_MODE=668;
	public static final int SELECT_STATEMENT=669;
	public static final int SELF_VK=670;
	public static final int SEQUENCE_NAME=672;
	public static final int SEQUENCE_VK=673;
	public static final int SEQUENTIAL_VK=674;
	public static final int SERIALIZABLE_VK=675;
	public static final int SERIALLY_REUSABLE_VK=676;
	public static final int SERVERERROR_VK=677;
	public static final int SESSIONTIMEZONE_VK=678;
	public static final int SET_CONSTRAINT=679;
	public static final int SET_NULL=680;
	public static final int SET_SERVEROUTPUT=681;
	public static final int SET_TRANSACTION=682;
	public static final int SET_VK=683;
	public static final int SHOW_VK=684;
	public static final int SHUTDOWN_VK=685;
	public static final int SIBLINGS_VK=686;
	public static final int SIGNTYPE_VK=687;
	public static final int SIMPLE_BOUND=688;
	public static final int SIMPLE_CASE=689;
	public static final int SIMPLE_DML=690;
	public static final int SIMPLE_INTEGER_VK=691;
	public static final int SINGLE_TABLE_MODE=692;
	public static final int SINGLE_VK=693;
	public static final int SKIP_VK=694;
	public static final int SMALLINT_VK=695;
	public static final int SOME_VK=697;
	public static final int SPECIFICATION_VK=698;
	public static final int SQLDATA_VK=764;
	public static final int SQLERROR_VK=765;
	public static final int SQL_SCRIPT=766;
	public static final int STANDALONE_VK=767;
	public static final int STANDARD_FUNCTION=768;
	public static final int STARTUP_VK=769;
	public static final int STATEMENTS=770;
	public static final int STATIC_RETURNING=771;
	public static final int STATIC_VK=772;
	public static final int STATISTICS_VK=773;
	public static final int STREAMING_CLAUSE=774;
	public static final int STRING_VK=775;
	public static final int SUBMULTISET_VK=776;
	public static final int SUBPARTITION_VK=777;
	public static final int SUBQUERY=778;
	public static final int SUBTYPE_DECLARE=779;
	public static final int SUCCESS_VK=780;
	public static final int SUSPEND_VK=781;
	public static final int TABLEVIEW_NAME=782;
	public static final int TABLE_ALIAS=783;
	public static final int TABLE_ELEMENT=784;
	public static final int TABLE_EXPRESSION=785;
	public static final int TABLE_REF=786;
	public static final int TABLE_REF_ELEMENT=787;
	public static final int TABLE_TYPE_DECLARE=788;
	public static final int TABLE_VAR_DECLARE=789;
	public static final int TABLE_VAR_NAME=790;
	public static final int THREE_DOTS=791;
	public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=792;
	public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=793;
	public static final int TIMESTAMP_UNCONSTRAINED_VK=794;
	public static final int TIMESTAMP_VK=795;
	public static final int TIMEZONE_ABBR_VK=796;
	public static final int TIMEZONE_HOUR_VK=797;
	public static final int TIMEZONE_MINUTE_VK=798;
	public static final int TIMEZONE_REGION_VK=799;
	public static final int TIME_VK=800;
	public static final int TRAILING_VK=801;
	public static final int TRANSLATE_VK=802;
	public static final int TREAT_VK=803;
	public static final int TRIGGER_NAME=804;
	public static final int TRIM_VK=805;
	public static final int TRUNCATE_VK=806;
	public static final int TYPE_BODY_ELEMENTS=807;
	public static final int TYPE_NAME=808;
	public static final int TYPE_VK=809;
	public static final int UNARY_MINUS=810;
	public static final int UNARY_PLUS=811;
	public static final int UNBOUNDED_VK=812;
	public static final int UNDER_VK=813;
	public static final int UNLIMITED_VK=814;
	public static final int UNPIVOT_IN_ELEMENT=815;
	public static final int UNPIVOT_VK=816;
	public static final int UNTIL_VK=818;
	public static final int UPDATED_VK=819;
	public static final int UPSERT_VK=820;
	public static final int UROWID_VK=821;
	public static final int USING_INDEX=822;
	public static final int USING_MODE=823;
	public static final int VALIDATE_VK=824;
	public static final int VALUES_BOUND=825;
	public static final int VALUE_VK=826;
	public static final int VARCHAR2_VK=827;
	public static final int VARCHAR_VK=828;
	public static final int VARIABLE_DECLARE=829;
	public static final int VARIABLE_NAME=830;
	public static final int VARR_ARRAY_DEF=831;
	public static final int VECTOR_EXPR=832;
	public static final int VERSIONS_VK=833;
	public static final int VERSION_VK=834;
	public static final int VIEW_NAME=836;
	public static final int VIEW_TYPE_CONSTRAINTS=837;
	public static final int VIEW_TYPE_CONSTRAINT_ITEM_INLINE=838;
	public static final int WAIT_VK=839;
	public static final int WARNING_VK=840;
	public static final int WELLFORMED_VK=841;
	public static final int WHENEVER_VK=842;
	public static final int WHILE_LOOP=843;
	public static final int WITHIN_VK=844;
	public static final int WORK_VK=845;
	public static final int WRITE_VK=846;
	public static final int XMLAGG_VK=847;
	public static final int XMLATTRIBUTES_VK=848;
	public static final int XMLCAST_VK=849;
	public static final int XMLCOLATTVAL_VK=850;
	public static final int XMLELEMENT_VK=851;
	public static final int XMLEXISTS_VK=852;
	public static final int XMLFOREST_VK=853;
	public static final int XMLNAMESPACES_VK=854;
	public static final int XMLPARSE_VK=855;
	public static final int XMLPI_VK=856;
	public static final int XMLQUERY_VK=857;
	public static final int XMLROOT_VK=858;
	public static final int XMLSERIALIZE_VK=859;
	public static final int XMLTABLE_VK=860;
	public static final int XML_ALIAS=861;
	public static final int XML_COLUMN=862;
	public static final int XML_COLUMN_NAME=863;
	public static final int XML_ELEMENT=864;
	public static final int XML_VK=865;
	public static final int YEAR_VK=866;
	public static final int YES_VK=867;
	public static final int YMINTERVAL_UNCONSTRAINED_VK=868;
	public static final int PGSQL_BIGINT=1011;
	public static final int PGSQL_ERRCODE=1012;
	public static final int PGSQL_EXCEPT=1013;
	public static final int PGSQL_EXCEPTION=1014;
	public static final int PGSQL_NATIVE_DATATYPE_INTERVAL=1015;
	public static final int PGSQL_NOTICE=1016;
	public static final int PGSQL_OPTION=1017;
	public static final int PGSQL_PERFORM=1018;
	public static final int PGSQL_RAISE=1019;
	public static final int PGSQL_STRICT=1020;
	public static final int PGSQL_TEXT=1021;
	public static final int PGSQL_TYPED_LITERAL=1022;
	public static final int PGSQL_USING=1023;

	// delegates
	public PLSQLPrinter_PLSQLPrinter_DDL gPLSQLPrinter_DDL;
	public TreeParser[] getDelegates() {
		return new TreeParser[] {gPLSQLPrinter_DDL};
	}

	// delegators


	public PLSQLPrinter(TreeNodeStream input) {
		this(input, new RecognizerSharedState());
	}
	public PLSQLPrinter(TreeNodeStream input, RecognizerSharedState state) {
		super(input, state);
		gPLSQLPrinter_DDL = new PLSQLPrinter_PLSQLPrinter_DDL(input, state, this);
	}

	protected StringTemplateGroup templateLib =
	  new StringTemplateGroup("PLSQLPrinterTemplates", AngleBracketTemplateLexer.class);

	public void setTemplateLib(StringTemplateGroup templateLib) {
	  this.templateLib = templateLib;
	}
	public StringTemplateGroup getTemplateLib() {
	  return templateLib;
	}
	/** allows convenient multi-value initialization:
	 *  "new STAttrMap().put(...).put(...)"
	 */
	@SuppressWarnings("serial")
	public static class STAttrMap extends HashMap<String, Object> {
		public STAttrMap put(String attrName, Object value) {
			super.put(attrName, value);
			return this;
		}
	}
	@Override public String[] getTokenNames() { return PLSQLPrinter.tokenNames; }
	@Override public String getGrammarFileName() { return "PLSQLPrinter.g"; }



	  static String[] correctTokenNames = getCorrectTokenNames();

	  static String[] getCorrectTokenNames() {
	    // This is workaround for bug in antlr3 (at least in 3.5.2)
	    java.lang.reflect.Field[] fields = PLSQLPrinter.class.getDeclaredFields();
	    java.util.Map<Integer, String> tokenNamesMap = new java.util.HashMap<Integer, String>();
	    int maxTokenValue = 0;
	    for (java.lang.reflect.Field field: fields) {
	      int mod = field.getModifiers();
	      if (java.lang.reflect.Modifier.isStatic(mod) && java.lang.reflect.Modifier.isFinal(mod) && field.getType() == int.class) {
	        String name = field.getName();
	        int value;
	        try {
	          value = field.getInt(null);
	        } catch (Exception e) {
	          throw new RuntimeException(e);
	        }
	        tokenNamesMap.put(value, name);
	        maxTokenValue = Math.max(maxTokenValue, value);
	      }
	    }
	    String[] result = new String[maxTokenValue + 1];
	    for (int i = 0; i < maxTokenValue; ++i) {
	      if (tokenNamesMap.containsKey(i)) {
	        result[i] = tokenNamesMap.get(i);
	      } else {
	        result[i] = "<none>";
	      }
	    }
	    return result;
	  }
	  
	  
	  public void reportError(RecognitionException e) {
	    // if we've already reported an error and have not matched a token
	    // yet successfully, don't report any errors.
	    if ( state.errorRecovery ) {
	      //System.err.print("[SPURIOUS] ");
	      return;
	    }
	    state.syntaxErrors++; // don't count spurious
	    state.errorRecovery = true;

	    displayRecognitionError(correctTokenNames, e);
	  }
	  
	  /*
	  
	  14 OR CURSOR
	  13 AND
	  12 NOT
	  11 IS_NOT_NULL IS_NULL IS_NOT_NAN IS_NAN IS_NOT_PRESENT IS_PRESENT
	     IS_NOT_INFINITE IS_INFINITE IS_NOT_A_SET IS_A_SET IS_NOT_EMPTY IS_EMPTY
	     IS_NOT_OF_TYPE IS_OF_TYPE
	  10 MEMBER_VK SUBMULTISET_VK
	  9 EQUALS_OP NOT_EQUAL_OP LESS_THAN_OP GREATER_THAN_OP  LESS_THAN_OR_EQUALS_OP GREATER_THAN_OR_EQUALS_OP
	  8 NOT_IN SQL92_RESERVED_IN NOT_BETWEEN SQL92_RESERVED_BETWEEN NOT_LIKE SQL92_RESERVED_LIKE LIKEC_VK LIKE2_VK LIKE4_VK
	  7 CONCATENATION_OP
	  6 PLUS_SIGN MINUS_SIGN
	  5 ASTERISK SOLIDUS PERCENT MOD_VK DIV_VK
	  4 DATETIME_OP
	  3 MODEL_EXPRESSION
	  2 unary: MINUS_SIGN PLUS_SIGN SQL92_RESERVED_PRIOR PLSQL_NON_RESERVED_CONNECT_BY_ROOT NEW_VK SQL92_RESERVED_DISTINCT
	         SQL92_RESERVED_ALL SIMPLE_CASE SEARCHED_CASE SOME_VK SQL92_RESERVED_EXISTS SQL92_RESERVED_ANY
	         PERCENT_NOTFOUND_VK PERCENT_FOUND_VK PERCENT_ISOPEN_VK PERCENT_ROWCOUNT_VK
	  1 OUTER_JOIN_SIGN
	  0 HOSTED_VARIABLE_NAME  UNSIGNED_INTEGER CONSTANT_NEGATED EXACT_NUM_LIT APPROXIMATE_NUM_LIT CHAR_STRING SQL92_RESERVED_NULL
	        SQL92_RESERVED_TRUE SQL92_RESERVED_FALSE  DBTIMEZONE_VK  SESSIONTIMEZONE_VK  MINVALUE_VK  MAXVALUE_VK  SQL92_RESERVED_DEFAULT
	        STANDARD_FUNCTION CASCATED_ELEMENT PGSQL_TYPED_LITERAL
	  */
	  
	  static java.util.Map<Integer, Integer> unaryPriorityMap = new java.util.HashMap<Integer, Integer>();
	  static java.util.Map<Integer, Integer> priorityMap = new java.util.HashMap<Integer, Integer>();
	  {
	    int priority = 0;
	    // 0
	    priorityMap.put(PLSQLPrinter.HOSTED_VARIABLE_NAME, priority);
	    priorityMap.put(PLSQLPrinter.UNSIGNED_INTEGER, priority);
	    priorityMap.put(PLSQLPrinter.CONSTANT_NEGATED, priority);
	    priorityMap.put(PLSQLPrinter.EXACT_NUM_LIT, priority);
	    priorityMap.put(PLSQLPrinter.APPROXIMATE_NUM_LIT, priority);
	    priorityMap.put(PLSQLPrinter.CHAR_STRING, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_NULL, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_TRUE, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_FALSE, priority);
	    priorityMap.put(PLSQLPrinter.DBTIMEZONE_VK, priority);
	    priorityMap.put(PLSQLPrinter.SESSIONTIMEZONE_VK, priority);
	    priorityMap.put(PLSQLPrinter.MINVALUE_VK, priority);
	    priorityMap.put(PLSQLPrinter.MAXVALUE_VK, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_DEFAULT, priority);
	    priorityMap.put(PLSQLPrinter.STANDARD_FUNCTION, priority);
	    priorityMap.put(PLSQLPrinter.CASCATED_ELEMENT, priority);
	    priorityMap.put(PLSQLPrinter.PGSQL_TYPED_LITERAL, priority);
	    // 1
	    ++priority;
	    priorityMap.put(PLSQLPrinter.OUTER_JOIN_SIGN, priority);;
	    // 2
	    ++priority;
	    priorityMap.put(PLSQLPrinter.UNARY_PLUS, priority);
	    priorityMap.put(PLSQLPrinter.UNARY_MINUS, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_PRIOR, priority);
	    priorityMap.put(PLSQLPrinter.PLSQL_NON_RESERVED_CONNECT_BY_ROOT, priority);
	    priorityMap.put(PLSQLPrinter.NEW_VK, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_DISTINCT, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_ALL, priority);
	    priorityMap.put(PLSQLPrinter.SIMPLE_CASE, priority);
	    priorityMap.put(PLSQLPrinter.SEARCHED_CASE, priority);
	    priorityMap.put(PLSQLPrinter.SOME_VK, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_EXISTS, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_ANY, priority);
	    priorityMap.put(PLSQLPrinter.PERCENT_NOTFOUND_VK, priority);
	    priorityMap.put(PLSQLPrinter.PERCENT_FOUND_VK, priority);
	    priorityMap.put(PLSQLPrinter.PERCENT_ISOPEN_VK, priority);
	    priorityMap.put(PLSQLPrinter.PERCENT_ROWCOUNT_VK, priority);
	    // 3
	    ++priority;
	    priorityMap.put(PLSQLPrinter.MODEL_EXPRESSION, priority);
	    // 4
	    ++priority;
	    priorityMap.put(PLSQLPrinter.DATETIME_OP, priority);
	    // 5
	    ++priority;
	    priorityMap.put(PLSQLPrinter.ASTERISK, priority);
	    priorityMap.put(PLSQLPrinter.SOLIDUS, priority);
	    priorityMap.put(PLSQLPrinter.PERCENT, priority);
	    priorityMap.put(PLSQLPrinter.MOD_VK, priority);
	    priorityMap.put(PLSQLPrinter.DIV_VK, priority);
	    // 6
	    ++priority;
	    priorityMap.put(PLSQLPrinter.PLUS_SIGN, priority);
	    priorityMap.put(PLSQLPrinter.MINUS_SIGN, priority);
	    // 7
	    ++priority;
	    priorityMap.put(PLSQLPrinter.CONCATENATION_OP, priority);
	    // 8
	    ++priority;
	    priorityMap.put(PLSQLPrinter.NOT_IN, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_IN, priority);
	    priorityMap.put(PLSQLPrinter.NOT_BETWEEN, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_BETWEEN, priority);
	    priorityMap.put(PLSQLPrinter.NOT_LIKE, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_LIKE, priority);
	    priorityMap.put(PLSQLPrinter.LIKEC_VK, priority);
	    priorityMap.put(PLSQLPrinter.LIKE2_VK, priority);
	    priorityMap.put(PLSQLPrinter.LIKE4_VK, priority);
	    // 9
	    ++priority;
	    priorityMap.put(PLSQLPrinter.EQUALS_OP, priority);
	    priorityMap.put(PLSQLPrinter.NOT_EQUAL_OP, priority);
	    priorityMap.put(PLSQLPrinter.LESS_THAN_OP, priority);
	    priorityMap.put(PLSQLPrinter.GREATER_THAN_OP, priority);
	    priorityMap.put(PLSQLPrinter.LESS_THAN_OR_EQUALS_OP, priority);
	    priorityMap.put(PLSQLPrinter.GREATER_THAN_OR_EQUALS_OP, priority);
	    // 10
	    ++priority;
	    priorityMap.put(PLSQLPrinter.MEMBER_VK, priority);
	    priorityMap.put(PLSQLPrinter.SUBMULTISET_VK, priority);
	    // 11
	    ++priority;
	    priorityMap.put(PLSQLPrinter.IS_NOT_NULL, priority);
	    priorityMap.put(PLSQLPrinter.IS_NULL, priority);
	    priorityMap.put(PLSQLPrinter.IS_NOT_NAN, priority);
	    priorityMap.put(PLSQLPrinter.IS_NAN, priority);
	    priorityMap.put(PLSQLPrinter.IS_NOT_PRESENT, priority);
	    priorityMap.put(PLSQLPrinter.IS_PRESENT, priority);
	    priorityMap.put(PLSQLPrinter.IS_NOT_INFINITE, priority);
	    priorityMap.put(PLSQLPrinter.IS_INFINITE, priority);
	    priorityMap.put(PLSQLPrinter.IS_NOT_A_SET, priority);
	    priorityMap.put(PLSQLPrinter.IS_A_SET, priority);
	    priorityMap.put(PLSQLPrinter.IS_NOT_EMPTY, priority);
	    priorityMap.put(PLSQLPrinter.IS_EMPTY, priority);
	    priorityMap.put(PLSQLPrinter.IS_NOT_OF_TYPE, priority);
	    priorityMap.put(PLSQLPrinter.IS_OF_TYPE, priority);
	    // 12
	    ++priority;
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_NOT, priority);
	    // 13
	    ++priority;
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_AND, priority);
	    // 14
	    ++priority;
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_OR, priority);
	    priorityMap.put(PLSQLPrinter.SQL92_RESERVED_CURSOR, priority);
	  }
	  
	  static int getUnaryPriority(int nodeType) {
	    if (unaryPriorityMap.containsKey(nodeType)) {
	      return unaryPriorityMap.get(nodeType);
	    }
	    return -1;
	  }
	  
	  static int getPriority(int nodeType) {
	    if (priorityMap.containsKey(nodeType)) {
	      return priorityMap.get(nodeType);
	    }
	    return -1;
	  }
	  
	  static boolean canOmitParens(int parentPriority, int childPriority) {
	    return parentPriority != -1 && childPriority != -1 && parentPriority >= childPriority;
	  }
	  
	  static boolean canOmitParensNonAssoc(int parentPriority, int childPriority) {
	    return parentPriority != -1 && childPriority != -1 && parentPriority > childPriority;
	  }



	public static class compilation_unit_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "compilation_unit"
	// PLSQLPrinter.g:253:1: compilation_unit : ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\r\n<statements:{v|<v>}; separator=\"\\n\\n\">\r\n>>;
	public final PLSQLPrinter.compilation_unit_return compilation_unit() throws RecognitionException {
		PLSQLPrinter.compilation_unit_return retval = new PLSQLPrinter.compilation_unit_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:254:5: ( ^( COMPILATION_UNIT (u+= unit_statement )* ) -> template(statements=$u) <<\r\n<statements:{v|<v>}; separator=\"\\n\\n\">\r\n>>)
			// PLSQLPrinter.g:254:10: ^( COMPILATION_UNIT (u+= unit_statement )* )
			{
			match(input,COMPILATION_UNIT,FOLLOW_COMPILATION_UNIT_in_compilation_unit171); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:254:30: (u+= unit_statement )*
				loop1:
				while (true) {
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==ALTER_FUNCTION||(LA1_0 >= ALTER_PACKAGE && LA1_0 <= ALTER_TYPE)||(LA1_0 >= CREATE_FUNCTION && LA1_0 <= CREATE_VIEW)||(LA1_0 >= DROP_FUNCTION && LA1_0 <= DROP_TYPE)) ) {
						alt1=1;
					}

					switch (alt1) {
					case 1 :
						// PLSQLPrinter.g:254:30: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_compilation_unit175);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop1;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 255:5: -> template(statements=$u) <<\r\n<statements:{v|<v>}; separator=\"\\n\\n\">\r\n>>
			{
				retval.st = new StringTemplate(templateLib, "\r\n<statements:{v|<v>}; separator=\"\\n\\n\">\r\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compilation_unit"


	public static class sql_script_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_script"
	// PLSQLPrinter.g:261:1: sql_script : ^( SQL_SCRIPT (u+= unit_statement |u+= sql_plus_command )* ) -> template(statements=$u) <<\r\n<statements; separator=\"\\n\\n\">\r\n>>;
	public final PLSQLPrinter.sql_script_return sql_script() throws RecognitionException {
		PLSQLPrinter.sql_script_return retval = new PLSQLPrinter.sql_script_return();
		retval.start = input.LT(1);

		List<Object> list_u=null;
		RuleReturnScope u = null;
		try {
			// PLSQLPrinter.g:262:5: ( ^( SQL_SCRIPT (u+= unit_statement |u+= sql_plus_command )* ) -> template(statements=$u) <<\r\n<statements; separator=\"\\n\\n\">\r\n>>)
			// PLSQLPrinter.g:262:10: ^( SQL_SCRIPT (u+= unit_statement |u+= sql_plus_command )* )
			{
			match(input,SQL_SCRIPT,FOLLOW_SQL_SCRIPT_in_sql_script214); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:262:23: (u+= unit_statement |u+= sql_plus_command )*
				loop2:
				while (true) {
					int alt2=3;
					int LA2_0 = input.LA(1);
					if ( (LA2_0==ALTER_FUNCTION||(LA2_0 >= ALTER_PACKAGE && LA2_0 <= ALTER_TYPE)||(LA2_0 >= CREATE_FUNCTION && LA2_0 <= CREATE_VIEW)||(LA2_0 >= DROP_FUNCTION && LA2_0 <= DROP_TYPE)) ) {
						alt2=1;
					}
					else if ( (LA2_0==PROMPT||LA2_0==EXIT_VK||LA2_0==SET_VK||LA2_0==WHENEVER_VK) ) {
						alt2=2;
					}

					switch (alt2) {
					case 1 :
						// PLSQLPrinter.g:262:24: u+= unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_sql_script219);
						u=unit_statement();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;
					case 2 :
						// PLSQLPrinter.g:262:42: u+= sql_plus_command
						{
						pushFollow(FOLLOW_sql_plus_command_in_sql_script223);
						u=sql_plus_command();
						state._fsp--;

						if (list_u==null) list_u=new ArrayList<Object>();
						list_u.add(u.getTemplate());
						}
						break;

					default :
						break loop2;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 263:5: -> template(statements=$u) <<\r\n<statements; separator=\"\\n\\n\">\r\n>>
			{
				retval.st = new StringTemplate(templateLib, "\r\n<statements; separator=\"\\n\\n\">\r\n",new STAttrMap().put("statements", list_u));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_script"


	public static class sql_plus_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_plus_command"
	// PLSQLPrinter.g:270:1: sql_plus_command : ( whenever_command | exit_command | prompt_command | set_command );
	public final PLSQLPrinter.sql_plus_command_return sql_plus_command() throws RecognitionException {
		PLSQLPrinter.sql_plus_command_return retval = new PLSQLPrinter.sql_plus_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:271:5: ( whenever_command | exit_command | prompt_command | set_command )
			int alt3=4;
			switch ( input.LA(1) ) {
			case WHENEVER_VK:
				{
				alt3=1;
				}
				break;
			case EXIT_VK:
				{
				alt3=2;
				}
				break;
			case PROMPT:
				{
				alt3=3;
				}
				break;
			case SET_VK:
				{
				alt3=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}
			switch (alt3) {
				case 1 :
					// PLSQLPrinter.g:271:9: whenever_command
					{
					pushFollow(FOLLOW_whenever_command_in_sql_plus_command267);
					whenever_command();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:272:9: exit_command
					{
					pushFollow(FOLLOW_exit_command_in_sql_plus_command277);
					exit_command();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:273:9: prompt_command
					{
					pushFollow(FOLLOW_prompt_command_in_sql_plus_command287);
					prompt_command();
					state._fsp--;

					}
					break;
				case 4 :
					// PLSQLPrinter.g:274:9: set_command
					{
					pushFollow(FOLLOW_set_command_in_sql_plus_command297);
					set_command();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_plus_command"


	public static class whenever_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "whenever_command"
	// PLSQLPrinter.g:277:1: whenever_command : ^( WHENEVER_VK ( SQLERROR_VK | OSERROR_VK ) ( EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK ) | CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK ) ) ) ;
	public final PLSQLPrinter.whenever_command_return whenever_command() throws RecognitionException {
		PLSQLPrinter.whenever_command_return retval = new PLSQLPrinter.whenever_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:278:5: ( ^( WHENEVER_VK ( SQLERROR_VK | OSERROR_VK ) ( EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK ) | CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK ) ) ) )
			// PLSQLPrinter.g:278:9: ^( WHENEVER_VK ( SQLERROR_VK | OSERROR_VK ) ( EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK ) | CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK ) ) )
			{
			match(input,WHENEVER_VK,FOLLOW_WHENEVER_VK_in_whenever_command317); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==OSERROR_VK||input.LA(1)==SQLERROR_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// PLSQLPrinter.g:280:11: ( EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK ) | CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK ) )
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==EXIT_VK) ) {
				alt4=1;
			}
			else if ( (LA4_0==CONTINUE_VK) ) {
				alt4=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 4, 0, input);
				throw nvae;
			}

			switch (alt4) {
				case 1 :
					// PLSQLPrinter.g:281:13: EXIT_VK ( SUCCESS_VK | FAILURE_VK | WARNING_VK ) ( COMMIT_VK | ROLLBACK_VK )
					{
					match(input,EXIT_VK,FOLLOW_EXIT_VK_in_whenever_command359); 
					if ( input.LA(1)==FAILURE_VK||input.LA(1)==SUCCESS_VK||input.LA(1)==WARNING_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					if ( input.LA(1)==COMMIT_VK||input.LA(1)==ROLLBACK_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 2 :
					// PLSQLPrinter.g:284:15: CONTINUE_VK ( COMMIT_VK | ROLLBACK_VK | NONE_VK )
					{
					match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_whenever_command413); 
					if ( input.LA(1)==COMMIT_VK||input.LA(1)==NONE_VK||input.LA(1)==ROLLBACK_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenever_command"


	public static class set_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_command"
	// PLSQLPrinter.g:289:1: set_command : ^( SET_VK REGULAR_ID ( CHAR_STRING | SQL92_RESERVED_ON | OFF_VK | EXACT_NUM_LIT | REGULAR_ID ) ) ;
	public final PLSQLPrinter.set_command_return set_command() throws RecognitionException {
		PLSQLPrinter.set_command_return retval = new PLSQLPrinter.set_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:290:5: ( ^( SET_VK REGULAR_ID ( CHAR_STRING | SQL92_RESERVED_ON | OFF_VK | EXACT_NUM_LIT | REGULAR_ID ) ) )
			// PLSQLPrinter.g:290:10: ^( SET_VK REGULAR_ID ( CHAR_STRING | SQL92_RESERVED_ON | OFF_VK | EXACT_NUM_LIT | REGULAR_ID ) )
			{
			match(input,SET_VK,FOLLOW_SET_VK_in_set_command464); 
			match(input, Token.DOWN, null); 
			match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_set_command478); 
			if ( input.LA(1)==CHAR_STRING||input.LA(1)==EXACT_NUM_LIT||input.LA(1)==REGULAR_ID||input.LA(1)==SQL92_RESERVED_ON||input.LA(1)==OFF_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_command"


	public static class exit_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exit_command"
	// PLSQLPrinter.g:296:1: exit_command : EXIT_VK ;
	public final PLSQLPrinter.exit_command_return exit_command() throws RecognitionException {
		PLSQLPrinter.exit_command_return retval = new PLSQLPrinter.exit_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:297:5: ( EXIT_VK )
			// PLSQLPrinter.g:297:10: EXIT_VK
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_command534); 
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_command"


	public static class prompt_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "prompt_command"
	// PLSQLPrinter.g:300:1: prompt_command : PROMPT ;
	public final PLSQLPrinter.prompt_command_return prompt_command() throws RecognitionException {
		PLSQLPrinter.prompt_command_return retval = new PLSQLPrinter.prompt_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:301:5: ( PROMPT )
			// PLSQLPrinter.g:301:10: PROMPT
			{
			match(input,PROMPT,FOLLOW_PROMPT_in_prompt_command555); 
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "prompt_command"


	public static class unit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unit_statement"
	// PLSQLPrinter.g:304:1: unit_statement : ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st}| create_view -> { $create_view.st });
	public final PLSQLPrinter.unit_statement_return unit_statement() throws RecognitionException {
		PLSQLPrinter.unit_statement_return retval = new PLSQLPrinter.unit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope alter_function1 =null;
		TreeRuleReturnScope alter_package2 =null;
		TreeRuleReturnScope alter_procedure3 =null;
		TreeRuleReturnScope alter_sequence4 =null;
		TreeRuleReturnScope alter_trigger5 =null;
		TreeRuleReturnScope alter_type6 =null;
		TreeRuleReturnScope create_function_body7 =null;
		TreeRuleReturnScope create_procedure_body8 =null;
		TreeRuleReturnScope create_package9 =null;
		TreeRuleReturnScope create_sequence10 =null;
		TreeRuleReturnScope create_trigger11 =null;
		TreeRuleReturnScope create_type12 =null;
		TreeRuleReturnScope drop_function13 =null;
		TreeRuleReturnScope drop_package14 =null;
		TreeRuleReturnScope drop_procedure15 =null;
		TreeRuleReturnScope drop_sequence16 =null;
		TreeRuleReturnScope drop_trigger17 =null;
		TreeRuleReturnScope drop_type18 =null;
		TreeRuleReturnScope create_view19 =null;

		try {
			// PLSQLPrinter.g:305:5: ( alter_function -> { $alter_function.st }| alter_package -> { $alter_package.st}| alter_procedure -> { $alter_procedure.st}| alter_sequence -> { $alter_sequence.st}| alter_trigger -> { $alter_trigger.st}| alter_type -> { $alter_type.st}| create_function_body -> { $create_function_body.st; }| create_procedure_body -> { $create_procedure_body.st}| create_package -> { $create_package.st}| create_sequence -> { $create_sequence.st}| create_trigger -> { $create_trigger.st}| create_type -> { $create_type.st}| drop_function -> { $drop_function.st}| drop_package -> { $drop_package.st}| drop_procedure -> { $drop_procedure.st}| drop_sequence -> { $drop_sequence.st}| drop_trigger -> { $drop_trigger.st}| drop_type -> { $drop_type.st}| create_view -> { $create_view.st })
			int alt5=19;
			switch ( input.LA(1) ) {
			case ALTER_FUNCTION:
				{
				alt5=1;
				}
				break;
			case ALTER_PACKAGE:
				{
				alt5=2;
				}
				break;
			case ALTER_PROCEDURE:
				{
				alt5=3;
				}
				break;
			case ALTER_SEQUENCE:
				{
				alt5=4;
				}
				break;
			case ALTER_TRIGGER:
				{
				alt5=5;
				}
				break;
			case ALTER_TYPE:
				{
				alt5=6;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt5=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt5=8;
				}
				break;
			case CREATE_PACKAGE_BODY:
			case CREATE_PACKAGE_SPEC:
				{
				alt5=9;
				}
				break;
			case CREATE_SEQUENCE:
				{
				alt5=10;
				}
				break;
			case CREATE_TRIGGER:
				{
				alt5=11;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt5=12;
				}
				break;
			case DROP_FUNCTION:
				{
				alt5=13;
				}
				break;
			case DROP_PACKAGE:
				{
				alt5=14;
				}
				break;
			case DROP_PROCEDURE:
				{
				alt5=15;
				}
				break;
			case DROP_SEQUENCE:
				{
				alt5=16;
				}
				break;
			case DROP_TRIGGER:
				{
				alt5=17;
				}
				break;
			case DROP_TYPE:
				{
				alt5=18;
				}
				break;
			case CREATE_VIEW:
				{
				alt5=19;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 5, 0, input);
				throw nvae;
			}
			switch (alt5) {
				case 1 :
					// PLSQLPrinter.g:305:10: alter_function
					{
					pushFollow(FOLLOW_alter_function_in_unit_statement575);
					alter_function1=alter_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 305:25: -> { $alter_function.st }
					{
						retval.st =  (alter_function1!=null?((StringTemplate)alter_function1.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:306:10: alter_package
					{
					pushFollow(FOLLOW_alter_package_in_unit_statement590);
					alter_package2=alter_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 306:24: -> { $alter_package.st}
					{
						retval.st =  (alter_package2!=null?((StringTemplate)alter_package2.getTemplate()):null);
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:307:10: alter_procedure
					{
					pushFollow(FOLLOW_alter_procedure_in_unit_statement605);
					alter_procedure3=alter_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 307:26: -> { $alter_procedure.st}
					{
						retval.st =  (alter_procedure3!=null?((StringTemplate)alter_procedure3.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:308:10: alter_sequence
					{
					pushFollow(FOLLOW_alter_sequence_in_unit_statement620);
					alter_sequence4=alter_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 308:25: -> { $alter_sequence.st}
					{
						retval.st =  (alter_sequence4!=null?((StringTemplate)alter_sequence4.getTemplate()):null);
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:309:10: alter_trigger
					{
					pushFollow(FOLLOW_alter_trigger_in_unit_statement635);
					alter_trigger5=alter_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 309:24: -> { $alter_trigger.st}
					{
						retval.st =  (alter_trigger5!=null?((StringTemplate)alter_trigger5.getTemplate()):null);
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:310:10: alter_type
					{
					pushFollow(FOLLOW_alter_type_in_unit_statement650);
					alter_type6=alter_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 310:21: -> { $alter_type.st}
					{
						retval.st =  (alter_type6!=null?((StringTemplate)alter_type6.getTemplate()):null);
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:311:10: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_unit_statement665);
					create_function_body7=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 311:31: -> { $create_function_body.st; }
					{
						retval.st =  (create_function_body7!=null?((StringTemplate)create_function_body7.getTemplate()):null); ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:312:10: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_unit_statement680);
					create_procedure_body8=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 312:32: -> { $create_procedure_body.st}
					{
						retval.st =  (create_procedure_body8!=null?((StringTemplate)create_procedure_body8.getTemplate()):null);
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:313:10: create_package
					{
					pushFollow(FOLLOW_create_package_in_unit_statement695);
					create_package9=create_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 313:25: -> { $create_package.st}
					{
						retval.st =  (create_package9!=null?((StringTemplate)create_package9.getTemplate()):null);
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:314:10: create_sequence
					{
					pushFollow(FOLLOW_create_sequence_in_unit_statement710);
					create_sequence10=create_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 314:26: -> { $create_sequence.st}
					{
						retval.st =  (create_sequence10!=null?((StringTemplate)create_sequence10.getTemplate()):null);
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:315:10: create_trigger
					{
					pushFollow(FOLLOW_create_trigger_in_unit_statement725);
					create_trigger11=create_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 315:25: -> { $create_trigger.st}
					{
						retval.st =  (create_trigger11!=null?((StringTemplate)create_trigger11.getTemplate()):null);
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:316:10: create_type
					{
					pushFollow(FOLLOW_create_type_in_unit_statement740);
					create_type12=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 316:22: -> { $create_type.st}
					{
						retval.st =  (create_type12!=null?((StringTemplate)create_type12.getTemplate()):null);
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:317:10: drop_function
					{
					pushFollow(FOLLOW_drop_function_in_unit_statement755);
					drop_function13=drop_function();
					state._fsp--;

					// TEMPLATE REWRITE
					// 317:24: -> { $drop_function.st}
					{
						retval.st =  (drop_function13!=null?((StringTemplate)drop_function13.getTemplate()):null);
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:318:10: drop_package
					{
					pushFollow(FOLLOW_drop_package_in_unit_statement770);
					drop_package14=drop_package();
					state._fsp--;

					// TEMPLATE REWRITE
					// 318:23: -> { $drop_package.st}
					{
						retval.st =  (drop_package14!=null?((StringTemplate)drop_package14.getTemplate()):null);
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:319:10: drop_procedure
					{
					pushFollow(FOLLOW_drop_procedure_in_unit_statement785);
					drop_procedure15=drop_procedure();
					state._fsp--;

					// TEMPLATE REWRITE
					// 319:25: -> { $drop_procedure.st}
					{
						retval.st =  (drop_procedure15!=null?((StringTemplate)drop_procedure15.getTemplate()):null);
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:320:10: drop_sequence
					{
					pushFollow(FOLLOW_drop_sequence_in_unit_statement800);
					drop_sequence16=drop_sequence();
					state._fsp--;

					// TEMPLATE REWRITE
					// 320:24: -> { $drop_sequence.st}
					{
						retval.st =  (drop_sequence16!=null?((StringTemplate)drop_sequence16.getTemplate()):null);
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:321:10: drop_trigger
					{
					pushFollow(FOLLOW_drop_trigger_in_unit_statement815);
					drop_trigger17=drop_trigger();
					state._fsp--;

					// TEMPLATE REWRITE
					// 321:23: -> { $drop_trigger.st}
					{
						retval.st =  (drop_trigger17!=null?((StringTemplate)drop_trigger17.getTemplate()):null);
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:322:10: drop_type
					{
					pushFollow(FOLLOW_drop_type_in_unit_statement830);
					drop_type18=drop_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 322:20: -> { $drop_type.st}
					{
						retval.st =  (drop_type18!=null?((StringTemplate)drop_type18.getTemplate()):null);
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:323:10: create_view
					{
					pushFollow(FOLLOW_create_view_in_unit_statement845);
					create_view19=create_view();
					state._fsp--;

					// TEMPLATE REWRITE
					// 323:22: -> { $create_view.st }
					{
						retval.st =  (create_view19!=null?((StringTemplate)create_view19.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unit_statement"


	public static class declare_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "declare_spec"
	// PLSQLPrinter.g:330:1: declare_spec : ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st });
	public final PLSQLPrinter.declare_spec_return declare_spec() throws RecognitionException {
		PLSQLPrinter.declare_spec_return retval = new PLSQLPrinter.declare_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope variable_declaration20 =null;
		TreeRuleReturnScope subtype_declaration21 =null;
		TreeRuleReturnScope cursor_declaration22 =null;
		TreeRuleReturnScope exception_declaration23 =null;
		TreeRuleReturnScope pragma_declaration24 =null;
		TreeRuleReturnScope record_declaration25 =null;
		TreeRuleReturnScope table_declaration26 =null;
		TreeRuleReturnScope create_procedure_body27 =null;
		TreeRuleReturnScope create_function_body28 =null;
		TreeRuleReturnScope create_type29 =null;

		try {
			// PLSQLPrinter.g:331:5: ( variable_declaration -> { $variable_declaration.st }| subtype_declaration -> { $subtype_declaration.st }| cursor_declaration -> { $cursor_declaration.st }| exception_declaration -> { $exception_declaration.st }| pragma_declaration -> { $pragma_declaration.st }| record_declaration -> { $record_declaration.st }| table_declaration -> { $table_declaration.st }| create_procedure_body -> { $create_procedure_body.st }| create_function_body -> { $create_function_body.st }| create_type -> { $create_type.st })
			int alt6=10;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt6=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt6=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt6=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt6=4;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt6=5;
				}
				break;
			case RECORD_TYPE_DECLARE_FIELDS:
			case RECORD_TYPE_DECLARE_REFCURSOR:
			case RECORD_VAR_DECLARE:
				{
				alt6=6;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt6=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt6=8;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt6=9;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt6=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 6, 0, input);
				throw nvae;
			}
			switch (alt6) {
				case 1 :
					// PLSQLPrinter.g:331:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_declare_spec873);
					variable_declaration20=variable_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 331:31: -> { $variable_declaration.st }
					{
						retval.st =  (variable_declaration20!=null?((StringTemplate)variable_declaration20.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:332:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_declare_spec889);
					subtype_declaration21=subtype_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 332:31: -> { $subtype_declaration.st }
					{
						retval.st =  (subtype_declaration21!=null?((StringTemplate)subtype_declaration21.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:333:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_declare_spec905);
					cursor_declaration22=cursor_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 333:30: -> { $cursor_declaration.st }
					{
						retval.st =  (cursor_declaration22!=null?((StringTemplate)cursor_declaration22.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:334:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_declare_spec921);
					exception_declaration23=exception_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 334:33: -> { $exception_declaration.st }
					{
						retval.st =  (exception_declaration23!=null?((StringTemplate)exception_declaration23.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:335:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_declare_spec937);
					pragma_declaration24=pragma_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 335:30: -> { $pragma_declaration.st }
					{
						retval.st =  (pragma_declaration24!=null?((StringTemplate)pragma_declaration24.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:336:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_declare_spec953);
					record_declaration25=record_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 336:30: -> { $record_declaration.st }
					{
						retval.st =  (record_declaration25!=null?((StringTemplate)record_declaration25.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:337:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_declare_spec969);
					table_declaration26=table_declaration();
					state._fsp--;

					// TEMPLATE REWRITE
					// 337:29: -> { $table_declaration.st }
					{
						retval.st =  (table_declaration26!=null?((StringTemplate)table_declaration26.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:338:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_declare_spec985);
					create_procedure_body27=create_procedure_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 338:33: -> { $create_procedure_body.st }
					{
						retval.st =  (create_procedure_body27!=null?((StringTemplate)create_procedure_body27.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:339:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_declare_spec1001);
					create_function_body28=create_function_body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 339:32: -> { $create_function_body.st }
					{
						retval.st =  (create_function_body28!=null?((StringTemplate)create_function_body28.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:340:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_declare_spec1017);
					create_type29=create_type();
					state._fsp--;

					// TEMPLATE REWRITE
					// 340:23: -> { $create_type.st }
					{
						retval.st =  (create_type29!=null?((StringTemplate)create_type29.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "declare_spec"


	public static class variable_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_declaration"
	// PLSQLPrinter.g:344:1: variable_declaration : ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.variable_declaration_return variable_declaration() throws RecognitionException {
		PLSQLPrinter.variable_declaration_return retval = new PLSQLPrinter.variable_declaration_return();
		retval.start = input.LT(1);

		CommonTree CONSTANT_VK32=null;
		CommonTree SQL92_RESERVED_NULL33=null;
		TreeRuleReturnScope variable_name30 =null;
		TreeRuleReturnScope type_spec31 =null;
		TreeRuleReturnScope default_value_part34 =null;

		try {
			// PLSQLPrinter.g:345:5: ( ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:345:10: ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,VARIABLE_DECLARE,FOLLOW_VARIABLE_DECLARE_in_variable_declaration1043); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_variable_declaration1045);
			variable_name30=variable_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_variable_declaration1047);
			type_spec31=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:345:53: ( CONSTANT_VK )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==CONSTANT_VK) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// PLSQLPrinter.g:345:53: CONSTANT_VK
					{
					CONSTANT_VK32=(CommonTree)match(input,CONSTANT_VK,FOLLOW_CONSTANT_VK_in_variable_declaration1049); 
					}
					break;

			}

			// PLSQLPrinter.g:345:66: ( SQL92_RESERVED_NULL )?
			int alt8=2;
			int LA8_0 = input.LA(1);
			if ( (LA8_0==SQL92_RESERVED_NULL) ) {
				alt8=1;
			}
			switch (alt8) {
				case 1 :
					// PLSQLPrinter.g:345:66: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL33=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration1052); 
					}
					break;

			}

			// PLSQLPrinter.g:345:87: ( default_value_part )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==DEFAULT_VALUE) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// PLSQLPrinter.g:345:87: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_variable_declaration1055);
					default_value_part34=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 346:5: -> variable_declaration(name=$variable_name.sttype=$type_spec.stis_constant=$CONSTANT_VK != nullis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("variable_declaration",new STAttrMap().put("name", (variable_name30!=null?((StringTemplate)variable_name30.getTemplate()):null)).put("type", (type_spec31!=null?((StringTemplate)type_spec31.getTemplate()):null)).put("is_constant", CONSTANT_VK32 != null).put("is_not_null", SQL92_RESERVED_NULL33 != null).put("default_value_part", (default_value_part34!=null?((StringTemplate)default_value_part34.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_declaration"


	public static class subtype_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_declaration"
	// PLSQLPrinter.g:351:1: subtype_declaration : ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.subtype_declaration_return subtype_declaration() throws RecognitionException {
		PLSQLPrinter.subtype_declaration_return retval = new PLSQLPrinter.subtype_declaration_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL38=null;
		TreeRuleReturnScope type_name35 =null;
		TreeRuleReturnScope type_spec36 =null;
		TreeRuleReturnScope subtype_range37 =null;

		try {
			// PLSQLPrinter.g:352:5: ( ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:352:10: ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? )
			{
			match(input,SUBTYPE_DECLARE,FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration1140); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_subtype_declaration1142);
			type_name35=type_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_subtype_declaration1144);
			type_spec36=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:352:48: ( SQL92_RESERVED_NULL )?
			int alt10=2;
			int LA10_0 = input.LA(1);
			if ( (LA10_0==SQL92_RESERVED_NULL) ) {
				alt10=1;
			}
			switch (alt10) {
				case 1 :
					// PLSQLPrinter.g:352:48: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL38=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration1146); 
					}
					break;

			}

			// PLSQLPrinter.g:352:69: ( subtype_range )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==RANGE_VK) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// PLSQLPrinter.g:352:69: subtype_range
					{
					pushFollow(FOLLOW_subtype_range_in_subtype_declaration1149);
					subtype_range37=subtype_range();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 353:5: -> subtype_declaration(name=$type_name.sttype_spec=$type_spec.strange=$subtype_range.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("subtype_declaration",new STAttrMap().put("name", (type_name35!=null?((StringTemplate)type_name35.getTemplate()):null)).put("type_spec", (type_spec36!=null?((StringTemplate)type_spec36.getTemplate()):null)).put("range", (subtype_range37!=null?((StringTemplate)subtype_range37.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL38 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_declaration"


	public static class subtype_range_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subtype_range"
	// PLSQLPrinter.g:358:1: subtype_range : ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st);
	public final PLSQLPrinter.subtype_range_return subtype_range() throws RecognitionException {
		PLSQLPrinter.subtype_range_return retval = new PLSQLPrinter.subtype_range_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope e1 =null;
		TreeRuleReturnScope e2 =null;

		try {
			// PLSQLPrinter.g:359:5: ( ^( RANGE_VK e1= expression e2= expression ) -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st))
			// PLSQLPrinter.g:359:10: ^( RANGE_VK e1= expression e2= expression )
			{
			match(input,RANGE_VK,FOLLOW_RANGE_VK_in_subtype_range1227); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_subtype_range1231);
			e1=expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_subtype_range1235);
			e2=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 360:5: -> subtype_range(low_bound=$e1.sthigh_bound=$e2.st)
			{
				retval.st = templateLib.getInstanceOf("subtype_range",new STAttrMap().put("low_bound", (e1!=null?((StringTemplate)e1.getTemplate()):null)).put("high_bound", (e2!=null?((StringTemplate)e2.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_range"


	public static class cursor_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_declaration"
	// PLSQLPrinter.g:364:1: cursor_declaration : ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) ) -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st);
	public final PLSQLPrinter.cursor_declaration_return cursor_declaration() throws RecognitionException {
		PLSQLPrinter.cursor_declaration_return retval = new PLSQLPrinter.cursor_declaration_return();
		retval.start = input.LT(1);

		List<Object> list_parameters=null;
		TreeRuleReturnScope cursor_name39 =null;
		TreeRuleReturnScope type_spec40 =null;
		TreeRuleReturnScope select_statement41 =null;
		RuleReturnScope parameters = null;
		try {
			// PLSQLPrinter.g:365:5: ( ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) ) -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st))
			// PLSQLPrinter.g:365:10: ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS (parameters+= parameter_spec )* ) )
			{
			match(input,CURSOR_DECLARE,FOLLOW_CURSOR_DECLARE_in_cursor_declaration1278); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_cursor_declaration1280);
			cursor_name39=cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:365:39: ( type_spec )?
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==CUSTOM_TYPE||LA12_0==INTERVAL_DATATYPE||LA12_0==NATIVE_DATATYPE) ) {
				alt12=1;
			}
			switch (alt12) {
				case 1 :
					// PLSQLPrinter.g:365:39: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_cursor_declaration1282);
					type_spec40=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:365:50: ( select_statement )?
			int alt13=2;
			int LA13_0 = input.LA(1);
			if ( (LA13_0==SELECT_STATEMENT) ) {
				alt13=1;
			}
			switch (alt13) {
				case 1 :
					// PLSQLPrinter.g:365:50: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_cursor_declaration1285);
					select_statement41=select_statement();
					state._fsp--;

					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_cursor_declaration1289); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:365:91: (parameters+= parameter_spec )*
				loop14:
				while (true) {
					int alt14=2;
					int LA14_0 = input.LA(1);
					if ( (LA14_0==PARAMETER) ) {
						alt14=1;
					}

					switch (alt14) {
					case 1 :
						// PLSQLPrinter.g:365:91: parameters+= parameter_spec
						{
						pushFollow(FOLLOW_parameter_spec_in_cursor_declaration1293);
						parameters=parameter_spec();
						state._fsp--;

						if (list_parameters==null) list_parameters=new ArrayList<Object>();
						list_parameters.add(parameters.getTemplate());
						}
						break;

					default :
						break loop14;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 366:5: -> cursor_declaration(cursor_name=$cursor_name.stparameters=$parameterstype_spec=$type_spec.stselect_statement=$select_statement.st)
			{
				retval.st = templateLib.getInstanceOf("cursor_declaration",new STAttrMap().put("cursor_name", (cursor_name39!=null?((StringTemplate)cursor_name39.getTemplate()):null)).put("parameters", list_parameters).put("type_spec", (type_spec40!=null?((StringTemplate)type_spec40.getTemplate()):null)).put("select_statement", (select_statement41!=null?((StringTemplate)select_statement41.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_declaration"


	public static class parameter_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_spec"
	// PLSQLPrinter.g:371:1: parameter_spec : ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.parameter_spec_return parameter_spec() throws RecognitionException {
		PLSQLPrinter.parameter_spec_return retval = new PLSQLPrinter.parameter_spec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope parameter_name42 =null;
		TreeRuleReturnScope type_spec43 =null;
		TreeRuleReturnScope default_value_part44 =null;

		try {
			// PLSQLPrinter.g:372:5: ( ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:372:10: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter_spec1369); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter_spec1371);
			parameter_name42=parameter_name();
			state._fsp--;

			// PLSQLPrinter.g:372:37: ( type_spec )?
			int alt15=2;
			int LA15_0 = input.LA(1);
			if ( (LA15_0==CUSTOM_TYPE||LA15_0==INTERVAL_DATATYPE||LA15_0==NATIVE_DATATYPE) ) {
				alt15=1;
			}
			switch (alt15) {
				case 1 :
					// PLSQLPrinter.g:372:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter_spec1373);
					type_spec43=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:372:48: ( default_value_part )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==DEFAULT_VALUE) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// PLSQLPrinter.g:372:48: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter_spec1376);
					default_value_part44=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 373:5: -> parameter_spec(parameter_name=$parameter_name.sttype_spec=$type_spec.stdefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("parameter_spec",new STAttrMap().put("parameter_name", (parameter_name42!=null?((StringTemplate)parameter_name42.getTemplate()):null)).put("type_spec", (type_spec43!=null?((StringTemplate)type_spec43.getTemplate()):null)).put("default_value_part", (default_value_part44!=null?((StringTemplate)default_value_part44.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_spec"


	public static class exception_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_declaration"
	// PLSQLPrinter.g:378:1: exception_declaration : ^( EXCEPTION_DECLARE exception_name ) -> exception_declaration(name=$exception_name.st);
	public final PLSQLPrinter.exception_declaration_return exception_declaration() throws RecognitionException {
		PLSQLPrinter.exception_declaration_return retval = new PLSQLPrinter.exception_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope exception_name45 =null;

		try {
			// PLSQLPrinter.g:379:5: ( ^( EXCEPTION_DECLARE exception_name ) -> exception_declaration(name=$exception_name.st))
			// PLSQLPrinter.g:379:10: ^( EXCEPTION_DECLARE exception_name )
			{
			match(input,EXCEPTION_DECLARE,FOLLOW_EXCEPTION_DECLARE_in_exception_declaration1446); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_exception_name_in_exception_declaration1448);
			exception_name45=exception_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 380:5: -> exception_declaration(name=$exception_name.st)
			{
				retval.st = templateLib.getInstanceOf("exception_declaration",new STAttrMap().put("name", (exception_name45!=null?((StringTemplate)exception_name45.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_declaration"


	public static class pragma_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration"
	// PLSQLPrinter.g:383:1: pragma_declaration : ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st);
	public final PLSQLPrinter.pragma_declaration_return pragma_declaration() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_return retval = new PLSQLPrinter.pragma_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope pragma_declaration_impl46 =null;

		try {
			// PLSQLPrinter.g:384:5: ( ^( PRAGMA_DECLARE pragma_declaration_impl ) -> pragma_declaration(impl=$pragma_declaration_impl.st))
			// PLSQLPrinter.g:384:10: ^( PRAGMA_DECLARE pragma_declaration_impl )
			{
			match(input,PRAGMA_DECLARE,FOLLOW_PRAGMA_DECLARE_in_pragma_declaration1498); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_pragma_declaration_impl_in_pragma_declaration1500);
			pragma_declaration_impl46=pragma_declaration_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 385:5: -> pragma_declaration(impl=$pragma_declaration_impl.st)
			{
				retval.st = templateLib.getInstanceOf("pragma_declaration",new STAttrMap().put("impl", (pragma_declaration_impl46!=null?((StringTemplate)pragma_declaration_impl46.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration"


	public static class pragma_declaration_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pragma_declaration_impl"
	// PLSQLPrinter.g:388:1: pragma_declaration_impl : ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id= commented_id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= commented_id ) (rest+= commented_id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest));
	public final PLSQLPrinter.pragma_declaration_impl_return pragma_declaration_impl() throws RecognitionException {
		PLSQLPrinter.pragma_declaration_impl_return retval = new PLSQLPrinter.pragma_declaration_impl_return();
		retval.start = input.LT(1);

		List<Object> list_rest=null;
		TreeRuleReturnScope id =null;
		TreeRuleReturnScope firstId =null;
		TreeRuleReturnScope exception_name47 =null;
		TreeRuleReturnScope constant48 =null;
		TreeRuleReturnScope expression49 =null;
		RuleReturnScope rest = null;
		 StringTemplate firstSt = null; 
		try {
			// PLSQLPrinter.g:390:5: ( SERIALLY_REUSABLE_VK -> pragma_declaration_impl_serially_reusable(| AUTONOMOUS_TRANSACTION_VK -> pragma_declaration_impl_serially_autonomous_transaction(| ^( EXCEPTION_INIT_VK exception_name constant ) -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)| ^( INLINE_VK id= commented_id expression ) -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)| ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= commented_id ) (rest+= commented_id )+ ) -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest))
			int alt19=5;
			switch ( input.LA(1) ) {
			case SERIALLY_REUSABLE_VK:
				{
				alt19=1;
				}
				break;
			case AUTONOMOUS_TRANSACTION_VK:
				{
				alt19=2;
				}
				break;
			case EXCEPTION_INIT_VK:
				{
				alt19=3;
				}
				break;
			case INLINE_VK:
				{
				alt19=4;
				}
				break;
			case RESTRICT_REFERENCES_VK:
				{
				alt19=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 19, 0, input);
				throw nvae;
			}
			switch (alt19) {
				case 1 :
					// PLSQLPrinter.g:390:10: SERIALLY_REUSABLE_VK
					{
					match(input,SERIALLY_REUSABLE_VK,FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl1545); 
					// TEMPLATE REWRITE
					// 390:31: -> pragma_declaration_impl_serially_reusable(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_reusable");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:391:16: AUTONOMOUS_TRANSACTION_VK
					{
					match(input,AUTONOMOUS_TRANSACTION_VK,FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl1568); 
					// TEMPLATE REWRITE
					// 391:42: -> pragma_declaration_impl_serially_autonomous_transaction(
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_autonomous_transaction");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:392:15: ^( EXCEPTION_INIT_VK exception_name constant )
					{
					match(input,EXCEPTION_INIT_VK,FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl1591); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_exception_name_in_pragma_declaration_impl1593);
					exception_name47=exception_name();
					state._fsp--;

					pushFollow(FOLLOW_constant_in_pragma_declaration_impl1595);
					constant48=constant();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 393:10: -> pragma_declaration_impl_serially_exception_init(name=$exception_name.stnumeric=$constant.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_exception_init",new STAttrMap().put("name", (exception_name47!=null?((StringTemplate)exception_name47.getTemplate()):null)).put("numeric", (constant48!=null?((StringTemplate)constant48.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:394:15: ^( INLINE_VK id= commented_id expression )
					{
					match(input,INLINE_VK,FOLLOW_INLINE_VK_in_pragma_declaration_impl1638); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_commented_id_in_pragma_declaration_impl1642);
					id=commented_id();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_pragma_declaration_impl1644);
					expression49=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 395:10: -> pragma_declaration_impl_serially_inline(id=$id.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_inline",new STAttrMap().put("id", (id!=null?((StringTemplate)id.getTemplate()):null)).put("expression", (expression49!=null?((StringTemplate)expression49.getTemplate()):null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:396:15: ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT |firstId= commented_id ) (rest+= commented_id )+ )
					{
					match(input,RESTRICT_REFERENCES_VK,FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl1687); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:397:17: ( SQL92_RESERVED_DEFAULT |firstId= commented_id )
					int alt17=2;
					int LA17_0 = input.LA(1);
					if ( (LA17_0==SQL92_RESERVED_DEFAULT) ) {
						alt17=1;
					}
					else if ( (LA17_0==ID) ) {
						alt17=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 17, 0, input);
						throw nvae;
					}

					switch (alt17) {
						case 1 :
							// PLSQLPrinter.g:398:19: SQL92_RESERVED_DEFAULT
							{
							match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl1725); 
							 firstSt = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default")); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:399:21: firstId= commented_id
							{
							pushFollow(FOLLOW_commented_id_in_pragma_declaration_impl1751);
							firstId=commented_id();
							state._fsp--;

							 firstSt = (firstId!=null?((StringTemplate)firstId.getTemplate()):null); 
							}
							break;

					}

					// PLSQLPrinter.g:401:21: (rest+= commented_id )+
					int cnt18=0;
					loop18:
					while (true) {
						int alt18=2;
						int LA18_0 = input.LA(1);
						if ( (LA18_0==ID) ) {
							alt18=1;
						}

						switch (alt18) {
						case 1 :
							// PLSQLPrinter.g:401:21: rest+= commented_id
							{
							pushFollow(FOLLOW_commented_id_in_pragma_declaration_impl1791);
							rest=commented_id();
							state._fsp--;

							if (list_rest==null) list_rest=new ArrayList<Object>();
							list_rest.add(rest.getTemplate());
							}
							break;

						default :
							if ( cnt18 >= 1 ) break loop18;
							EarlyExitException eee = new EarlyExitException(18, input);
							throw eee;
						}
						cnt18++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 403:10: -> pragma_declaration_impl_serially_restrict_references(arg1=firstStrestArgs=$rest)
					{
						retval.st = templateLib.getInstanceOf("pragma_declaration_impl_serially_restrict_references",new STAttrMap().put("arg1", firstSt).put("restArgs", list_rest));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration_impl"


	public static class record_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_declaration"
	// PLSQLPrinter.g:407:1: record_declaration : ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st });
	public final PLSQLPrinter.record_declaration_return record_declaration() throws RecognitionException {
		PLSQLPrinter.record_declaration_return retval = new PLSQLPrinter.record_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec50 =null;
		TreeRuleReturnScope record_var_dec51 =null;

		try {
			// PLSQLPrinter.g:408:5: ( record_type_dec -> { $record_type_dec.st }| record_var_dec -> { $record_var_dec.st })
			int alt20=2;
			int LA20_0 = input.LA(1);
			if ( ((LA20_0 >= RECORD_TYPE_DECLARE_FIELDS && LA20_0 <= RECORD_TYPE_DECLARE_REFCURSOR)) ) {
				alt20=1;
			}
			else if ( (LA20_0==RECORD_VAR_DECLARE) ) {
				alt20=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 20, 0, input);
				throw nvae;
			}

			switch (alt20) {
				case 1 :
					// PLSQLPrinter.g:408:10: record_type_dec
					{
					pushFollow(FOLLOW_record_type_dec_in_record_declaration1857);
					record_type_dec50=record_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 408:26: -> { $record_type_dec.st }
					{
						retval.st =  (record_type_dec50!=null?((StringTemplate)record_type_dec50.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:409:10: record_var_dec
					{
					pushFollow(FOLLOW_record_var_dec_in_record_declaration1872);
					record_var_dec51=record_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 409:25: -> { $record_var_dec.st }
					{
						retval.st =  (record_var_dec51!=null?((StringTemplate)record_var_dec51.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_declaration"


	public static class record_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec"
	// PLSQLPrinter.g:415:1: record_type_dec : ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st });
	public final PLSQLPrinter.record_type_dec_return record_type_dec() throws RecognitionException {
		PLSQLPrinter.record_type_dec_return retval = new PLSQLPrinter.record_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope record_type_dec_record52 =null;
		TreeRuleReturnScope record_type_dec_refcursor53 =null;

		try {
			// PLSQLPrinter.g:416:5: ( record_type_dec_record -> { $record_type_dec_record.st }| record_type_dec_refcursor -> { $record_type_dec_refcursor.st })
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==RECORD_TYPE_DECLARE_FIELDS) ) {
				alt21=1;
			}
			else if ( (LA21_0==RECORD_TYPE_DECLARE_REFCURSOR) ) {
				alt21=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 21, 0, input);
				throw nvae;
			}

			switch (alt21) {
				case 1 :
					// PLSQLPrinter.g:416:10: record_type_dec_record
					{
					pushFollow(FOLLOW_record_type_dec_record_in_record_type_dec1899);
					record_type_dec_record52=record_type_dec_record();
					state._fsp--;

					// TEMPLATE REWRITE
					// 416:33: -> { $record_type_dec_record.st }
					{
						retval.st =  (record_type_dec_record52!=null?((StringTemplate)record_type_dec_record52.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:417:10: record_type_dec_refcursor
					{
					pushFollow(FOLLOW_record_type_dec_refcursor_in_record_type_dec1914);
					record_type_dec_refcursor53=record_type_dec_refcursor();
					state._fsp--;

					// TEMPLATE REWRITE
					// 417:36: -> { $record_type_dec_refcursor.st }
					{
						retval.st =  (record_type_dec_refcursor53!=null?((StringTemplate)record_type_dec_refcursor53.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec"


	public static class record_type_dec_record_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_record"
	// PLSQLPrinter.g:420:1: record_type_dec_record : ^( RECORD_TYPE_DECLARE_FIELDS type_name (fields+= field_spec )+ ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields);
	public final PLSQLPrinter.record_type_dec_record_return record_type_dec_record() throws RecognitionException {
		PLSQLPrinter.record_type_dec_record_return retval = new PLSQLPrinter.record_type_dec_record_return();
		retval.start = input.LT(1);

		List<Object> list_fields=null;
		TreeRuleReturnScope type_name54 =null;
		RuleReturnScope fields = null;
		try {
			// PLSQLPrinter.g:421:5: ( ^( RECORD_TYPE_DECLARE_FIELDS type_name (fields+= field_spec )+ ) -> record_type_dec_record(name=$type_name.stfield_specs=$fields))
			// PLSQLPrinter.g:421:10: ^( RECORD_TYPE_DECLARE_FIELDS type_name (fields+= field_spec )+ )
			{
			match(input,RECORD_TYPE_DECLARE_FIELDS,FOLLOW_RECORD_TYPE_DECLARE_FIELDS_in_record_type_dec_record1943); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_record1945);
			type_name54=type_name();
			state._fsp--;

			// PLSQLPrinter.g:421:55: (fields+= field_spec )+
			int cnt22=0;
			loop22:
			while (true) {
				int alt22=2;
				int LA22_0 = input.LA(1);
				if ( (LA22_0==FIELD_SPEC) ) {
					alt22=1;
				}

				switch (alt22) {
				case 1 :
					// PLSQLPrinter.g:421:55: fields+= field_spec
					{
					pushFollow(FOLLOW_field_spec_in_record_type_dec_record1949);
					fields=field_spec();
					state._fsp--;

					if (list_fields==null) list_fields=new ArrayList<Object>();
					list_fields.add(fields.getTemplate());
					}
					break;

				default :
					if ( cnt22 >= 1 ) break loop22;
					EarlyExitException eee = new EarlyExitException(22, input);
					throw eee;
				}
				cnt22++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 422:5: -> record_type_dec_record(name=$type_name.stfield_specs=$fields)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_record",new STAttrMap().put("name", (type_name54!=null?((StringTemplate)type_name54.getTemplate()):null)).put("field_specs", list_fields));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_record"


	public static class record_type_dec_refcursor_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_type_dec_refcursor"
	// PLSQLPrinter.g:425:1: record_type_dec_refcursor : ^( RECORD_TYPE_DECLARE_REFCURSOR type_name ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st);
	public final PLSQLPrinter.record_type_dec_refcursor_return record_type_dec_refcursor() throws RecognitionException {
		PLSQLPrinter.record_type_dec_refcursor_return retval = new PLSQLPrinter.record_type_dec_refcursor_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name55 =null;
		TreeRuleReturnScope type_spec56 =null;

		try {
			// PLSQLPrinter.g:426:5: ( ^( RECORD_TYPE_DECLARE_REFCURSOR type_name ( type_spec )? ) -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st))
			// PLSQLPrinter.g:426:10: ^( RECORD_TYPE_DECLARE_REFCURSOR type_name ( type_spec )? )
			{
			match(input,RECORD_TYPE_DECLARE_REFCURSOR,FOLLOW_RECORD_TYPE_DECLARE_REFCURSOR_in_record_type_dec_refcursor1996); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec_refcursor1998);
			type_name55=type_name();
			state._fsp--;

			// PLSQLPrinter.g:426:52: ( type_spec )?
			int alt23=2;
			int LA23_0 = input.LA(1);
			if ( (LA23_0==CUSTOM_TYPE||LA23_0==INTERVAL_DATATYPE||LA23_0==NATIVE_DATATYPE) ) {
				alt23=1;
			}
			switch (alt23) {
				case 1 :
					// PLSQLPrinter.g:426:52: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_record_type_dec_refcursor2000);
					type_spec56=type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 427:5: -> record_type_dec_refcursor(name=$type_name.sttype_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("record_type_dec_refcursor",new STAttrMap().put("name", (type_name55!=null?((StringTemplate)type_name55.getTemplate()):null)).put("type_spec", (type_spec56!=null?((StringTemplate)type_spec56.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec_refcursor"


	public static class field_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "field_spec"
	// PLSQLPrinter.g:430:1: field_spec : ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st);
	public final PLSQLPrinter.field_spec_return field_spec() throws RecognitionException {
		PLSQLPrinter.field_spec_return retval = new PLSQLPrinter.field_spec_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL59=null;
		TreeRuleReturnScope column_name57 =null;
		TreeRuleReturnScope type_spec58 =null;
		TreeRuleReturnScope default_value_part60 =null;

		try {
			// PLSQLPrinter.g:431:5: ( ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st))
			// PLSQLPrinter.g:431:10: ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_field_spec2043); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_field_spec2045);
			column_name57=column_name();
			state._fsp--;

			// PLSQLPrinter.g:431:35: ( type_spec )?
			int alt24=2;
			int LA24_0 = input.LA(1);
			if ( (LA24_0==CUSTOM_TYPE||LA24_0==INTERVAL_DATATYPE||LA24_0==NATIVE_DATATYPE) ) {
				alt24=1;
			}
			switch (alt24) {
				case 1 :
					// PLSQLPrinter.g:431:35: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_field_spec2047);
					type_spec58=type_spec();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:431:46: ( SQL92_RESERVED_NULL )?
			int alt25=2;
			int LA25_0 = input.LA(1);
			if ( (LA25_0==SQL92_RESERVED_NULL) ) {
				alt25=1;
			}
			switch (alt25) {
				case 1 :
					// PLSQLPrinter.g:431:46: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL59=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_field_spec2050); 
					}
					break;

			}

			// PLSQLPrinter.g:431:67: ( default_value_part )?
			int alt26=2;
			int LA26_0 = input.LA(1);
			if ( (LA26_0==DEFAULT_VALUE) ) {
				alt26=1;
			}
			switch (alt26) {
				case 1 :
					// PLSQLPrinter.g:431:67: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_field_spec2053);
					default_value_part60=default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 432:5: -> field_spec(name=$column_name.sttype_spec=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != nulldefault_value_part=$default_value_part.st)
			{
				retval.st = templateLib.getInstanceOf("field_spec",new STAttrMap().put("name", (column_name57!=null?((StringTemplate)column_name57.getTemplate()):null)).put("type_spec", (type_spec58!=null?((StringTemplate)type_spec58.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL59 != null).put("default_value_part", (default_value_part60!=null?((StringTemplate)default_value_part60.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "field_spec"


	public static class record_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_var_dec"
	// PLSQLPrinter.g:437:1: record_var_dec : ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\";
	public final PLSQLPrinter.record_var_dec_return record_var_dec() throws RecognitionException {
		PLSQLPrinter.record_var_dec_return retval = new PLSQLPrinter.record_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:438:5: ( ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) -> template( \"not implemented: record_var_dec\")
			// PLSQLPrinter.g:438:10: ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) )
			{
			match(input,RECORD_VAR_DECLARE,FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec2126); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_record_name_in_record_var_dec2128);
			record_name();
			state._fsp--;

			pushFollow(FOLLOW_type_name_in_record_var_dec2130);
			type_name();
			state._fsp--;

			// PLSQLPrinter.g:438:53: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==PERCENT_ROWTYPE_VK) ) {
				alt27=1;
			}
			else if ( (LA27_0==PERCENT_TYPE_VK) ) {
				alt27=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 27, 0, input);
				throw nvae;
			}

			switch (alt27) {
				case 1 :
					// PLSQLPrinter.g:438:54: PERCENT_ROWTYPE_VK
					{
					match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec2133); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:438:73: PERCENT_TYPE_VK
					{
					match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_record_var_dec2135); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 439:5: -> template( \"not implemented: record_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: record_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_var_dec"


	public static class table_declaration_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_declaration"
	// PLSQLPrinter.g:444:1: table_declaration : ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st });
	public final PLSQLPrinter.table_declaration_return table_declaration() throws RecognitionException {
		PLSQLPrinter.table_declaration_return retval = new PLSQLPrinter.table_declaration_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec61 =null;
		TreeRuleReturnScope table_var_dec62 =null;

		try {
			// PLSQLPrinter.g:445:5: ( table_type_dec -> { $table_type_dec.st }| table_var_dec -> { $table_var_dec.st })
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==TABLE_TYPE_DECLARE) ) {
				alt28=1;
			}
			else if ( (LA28_0==TABLE_VAR_DECLARE) ) {
				alt28=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 28, 0, input);
				throw nvae;
			}

			switch (alt28) {
				case 1 :
					// PLSQLPrinter.g:445:10: table_type_dec
					{
					pushFollow(FOLLOW_table_type_dec_in_table_declaration2173);
					table_type_dec61=table_type_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 445:25: -> { $table_type_dec.st }
					{
						retval.st =  (table_type_dec61!=null?((StringTemplate)table_type_dec61.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:446:10: table_var_dec
					{
					pushFollow(FOLLOW_table_var_dec_in_table_declaration2188);
					table_var_dec62=table_var_dec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 446:24: -> { $table_var_dec.st }
					{
						retval.st =  (table_var_dec62!=null?((StringTemplate)table_var_dec62.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_declaration"


	public static class table_type_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec"
	// PLSQLPrinter.g:449:1: table_type_dec : ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st);
	public final PLSQLPrinter.table_type_dec_return table_type_dec() throws RecognitionException {
		PLSQLPrinter.table_type_dec_return retval = new PLSQLPrinter.table_type_dec_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_name63 =null;
		TreeRuleReturnScope table_type_dec_impl64 =null;

		try {
			// PLSQLPrinter.g:450:5: ( ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl ) -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st))
			// PLSQLPrinter.g:450:10: ^( TABLE_TYPE_DECLARE type_name table_type_dec_impl )
			{
			match(input,TABLE_TYPE_DECLARE,FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec2213); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_table_type_dec2215);
			type_name63=type_name();
			state._fsp--;

			pushFollow(FOLLOW_table_type_dec_impl_in_table_type_dec2217);
			table_type_dec_impl64=table_type_dec_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 451:5: -> table_type_dec(name=$type_name.stimpl=$table_type_dec_impl.st)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec",new STAttrMap().put("name", (type_name63!=null?((StringTemplate)type_name63.getTemplate()):null)).put("impl", (table_type_dec_impl64!=null?((StringTemplate)table_type_dec_impl64.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec"


	public static class table_type_dec_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_impl"
	// PLSQLPrinter.g:454:1: table_type_dec_impl : ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st });
	public final PLSQLPrinter.table_type_dec_impl_return table_type_dec_impl() throws RecognitionException {
		PLSQLPrinter.table_type_dec_impl_return retval = new PLSQLPrinter.table_type_dec_impl_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_type_dec_table_of65 =null;
		TreeRuleReturnScope varray_type_def66 =null;

		try {
			// PLSQLPrinter.g:455:5: ( table_type_dec_table_of -> { $table_type_dec_table_of.st }| varray_type_def -> { $varray_type_def.st })
			int alt29=2;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NULL:
				{
				int LA29_1 = input.LA(2);
				if ( (LA29_1==SQL92_RESERVED_TABLE) ) {
					alt29=1;
				}
				else if ( (LA29_1==VARR_ARRAY_DEF) ) {
					alt29=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 29, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_TABLE:
				{
				alt29=1;
				}
				break;
			case VARR_ARRAY_DEF:
				{
				alt29=2;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 29, 0, input);
				throw nvae;
			}
			switch (alt29) {
				case 1 :
					// PLSQLPrinter.g:455:11: table_type_dec_table_of
					{
					pushFollow(FOLLOW_table_type_dec_table_of_in_table_type_dec_impl2263);
					table_type_dec_table_of65=table_type_dec_table_of();
					state._fsp--;

					// TEMPLATE REWRITE
					// 455:35: -> { $table_type_dec_table_of.st }
					{
						retval.st =  (table_type_dec_table_of65!=null?((StringTemplate)table_type_dec_table_of65.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:456:11: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_table_type_dec_impl2279);
					varray_type_def66=varray_type_def();
					state._fsp--;

					// TEMPLATE REWRITE
					// 456:27: -> { $varray_type_def.st }
					{
						retval.st =  (varray_type_def66!=null?((StringTemplate)varray_type_def66.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_impl"


	public static class table_type_dec_table_of_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_type_dec_table_of"
	// PLSQLPrinter.g:459:1: table_type_dec_table_of : ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.table_type_dec_table_of_return table_type_dec_table_of() throws RecognitionException {
		PLSQLPrinter.table_type_dec_table_of_return retval = new PLSQLPrinter.table_type_dec_table_of_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL69=null;
		TreeRuleReturnScope type_spec67 =null;
		TreeRuleReturnScope table_indexed_by_part68 =null;

		try {
			// PLSQLPrinter.g:460:5: ( ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:460:10: ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? )
			{
			// PLSQLPrinter.g:460:10: ( SQL92_RESERVED_NULL )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==SQL92_RESERVED_NULL) ) {
				alt30=1;
			}
			switch (alt30) {
				case 1 :
					// PLSQLPrinter.g:460:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL69=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of2307); 
					}
					break;

			}

			match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of2311); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_type_dec_table_of2313);
			type_spec67=type_spec();
			state._fsp--;

			// PLSQLPrinter.g:460:64: ( table_indexed_by_part )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==INDEXED_BY) ) {
				alt31=1;
			}
			switch (alt31) {
				case 1 :
					// PLSQLPrinter.g:460:64: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec_table_of2315);
					table_indexed_by_part68=table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 461:5: -> table_type_dec_table_of(type_spec=$type_spec.sttable_indexed_by_part=$table_indexed_by_part.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("table_type_dec_table_of",new STAttrMap().put("type_spec", (type_spec67!=null?((StringTemplate)type_spec67.getTemplate()):null)).put("table_indexed_by_part", (table_indexed_by_part68!=null?((StringTemplate)table_indexed_by_part68.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL69 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec_table_of"


	public static class table_indexed_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_indexed_by_part"
	// PLSQLPrinter.g:465:1: table_indexed_by_part : ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st);
	public final PLSQLPrinter.table_indexed_by_part_return table_indexed_by_part() throws RecognitionException {
		PLSQLPrinter.table_indexed_by_part_return retval = new PLSQLPrinter.table_indexed_by_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope type_spec70 =null;

		try {
			// PLSQLPrinter.g:466:5: ( ^( INDEXED_BY type_spec ) -> table_indexed_by_part(type_spec=$type_spec.st))
			// PLSQLPrinter.g:466:10: ^( INDEXED_BY type_spec )
			{
			match(input,INDEXED_BY,FOLLOW_INDEXED_BY_in_table_indexed_by_part2376); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_indexed_by_part2378);
			type_spec70=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 467:5: -> table_indexed_by_part(type_spec=$type_spec.st)
			{
				retval.st = templateLib.getInstanceOf("table_indexed_by_part",new STAttrMap().put("type_spec", (type_spec70!=null?((StringTemplate)type_spec70.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_indexed_by_part"


	public static class varray_type_def_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "varray_type_def"
	// PLSQLPrinter.g:470:1: varray_type_def : ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null);
	public final PLSQLPrinter.varray_type_def_return varray_type_def() throws RecognitionException {
		PLSQLPrinter.varray_type_def_return retval = new PLSQLPrinter.varray_type_def_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_NULL73=null;
		TreeRuleReturnScope expression71 =null;
		TreeRuleReturnScope type_spec72 =null;

		try {
			// PLSQLPrinter.g:471:5: ( ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null))
			// PLSQLPrinter.g:471:10: ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec )
			{
			// PLSQLPrinter.g:471:10: ( SQL92_RESERVED_NULL )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( (LA32_0==SQL92_RESERVED_NULL) ) {
				alt32=1;
			}
			switch (alt32) {
				case 1 :
					// PLSQLPrinter.g:471:10: SQL92_RESERVED_NULL
					{
					SQL92_RESERVED_NULL73=(CommonTree)match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def2414); 
					}
					break;

			}

			match(input,VARR_ARRAY_DEF,FOLLOW_VARR_ARRAY_DEF_in_varray_type_def2418); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_varray_type_def2420);
			expression71=expression();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_varray_type_def2422);
			type_spec72=type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 472:5: -> varray_type_def(limit_expression=$expression.stelement_type=$type_spec.stis_not_null=$SQL92_RESERVED_NULL != null)
			{
				retval.st = templateLib.getInstanceOf("varray_type_def",new STAttrMap().put("limit_expression", (expression71!=null?((StringTemplate)expression71.getTemplate()):null)).put("element_type", (type_spec72!=null?((StringTemplate)type_spec72.getTemplate()):null)).put("is_not_null", SQL92_RESERVED_NULL73 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "varray_type_def"


	public static class table_var_dec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_dec"
	// PLSQLPrinter.g:475:1: table_var_dec : ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\";
	public final PLSQLPrinter.table_var_dec_return table_var_dec() throws RecognitionException {
		PLSQLPrinter.table_var_dec_return retval = new PLSQLPrinter.table_var_dec_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:476:5: ( ^( TABLE_VAR_DECLARE table_var_name type_spec ) -> template( \"not implemented: table_var_dec\")
			// PLSQLPrinter.g:476:10: ^( TABLE_VAR_DECLARE table_var_name type_spec )
			{
			match(input,TABLE_VAR_DECLARE,FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec2469); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_var_name_in_table_var_dec2471);
			table_var_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_table_var_dec2473);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 477:5: -> template( \"not implemented: table_var_dec\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: table_var_dec");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_dec"


	public static class seq_of_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seq_of_statements"
	// PLSQLPrinter.g:484:1: seq_of_statements : ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements);
	public final PLSQLPrinter.seq_of_statements_return seq_of_statements() throws RecognitionException {
		PLSQLPrinter.seq_of_statements_return retval = new PLSQLPrinter.seq_of_statements_return();
		retval.start = input.LT(1);

		List<Object> list_statements=null;
		RuleReturnScope statements = null;
		try {
			// PLSQLPrinter.g:485:5: ( ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ ) -> seq_of_statements(statements=$statements))
			// PLSQLPrinter.g:485:11: ^( STATEMENTS (statements+= statement |statements+= labeled_statement )+ )
			{
			match(input,STATEMENTS,FOLLOW_STATEMENTS_in_seq_of_statements2514); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:485:24: (statements+= statement |statements+= labeled_statement )+
			int cnt33=0;
			loop33:
			while (true) {
				int alt33=3;
				int LA33_0 = input.LA(1);
				if ( (LA33_0==PLSQL_RESERVED_IF||LA33_0==PLSQL_RESERVED_LOCK||LA33_0==SQL92_RESERVED_DELETE||LA33_0==SQL92_RESERVED_FETCH||LA33_0==SQL92_RESERVED_GOTO||LA33_0==SQL92_RESERVED_INSERT||LA33_0==SQL92_RESERVED_NULL||LA33_0==SQL92_RESERVED_UPDATE||LA33_0==ASSIGN||LA33_0==BLOCK||LA33_0==BODY||LA33_0==CASCATED_ELEMENT||LA33_0==CLOSE_VK||LA33_0==COMMIT_VK||LA33_0==CONTINUE_VK||(LA33_0 >= EXECUTE_VK && LA33_0 <= EXIT_VK)||LA33_0==FORALL_VK||LA33_0==FOR_LOOP||LA33_0==LOOP_VK||LA33_0==MERGE_VK||(LA33_0 >= OPEN_FOR && LA33_0 <= OPEN_VK)||LA33_0==PIPE_ROW||LA33_0==RAISE_VK||LA33_0==RETURN_VK||LA33_0==ROLLBACK_VK||LA33_0==SAVEPOINT_VK||LA33_0==SEARCHED_CASE||LA33_0==SELECT_STATEMENT||LA33_0==SET_CONSTRAINT||LA33_0==SET_TRANSACTION||LA33_0==SIMPLE_CASE||LA33_0==WHILE_LOOP||(LA33_0 >= PGSQL_PERFORM && LA33_0 <= PGSQL_RAISE)) ) {
					alt33=1;
				}
				else if ( (LA33_0==LABEL_DECLARE) ) {
					alt33=2;
				}

				switch (alt33) {
				case 1 :
					// PLSQLPrinter.g:485:25: statements+= statement
					{
					pushFollow(FOLLOW_statement_in_seq_of_statements2519);
					statements=statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;
				case 2 :
					// PLSQLPrinter.g:485:47: statements+= labeled_statement
					{
					pushFollow(FOLLOW_labeled_statement_in_seq_of_statements2523);
					statements=labeled_statement();
					state._fsp--;

					if (list_statements==null) list_statements=new ArrayList<Object>();
					list_statements.add(statements.getTemplate());
					}
					break;

				default :
					if ( cnt33 >= 1 ) break loop33;
					EarlyExitException eee = new EarlyExitException(33, input);
					throw eee;
				}
				cnt33++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 486:5: -> seq_of_statements(statements=$statements)
			{
				retval.st = templateLib.getInstanceOf("seq_of_statements",new STAttrMap().put("statements", list_statements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seq_of_statements"


	public static class labeled_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "labeled_statement"
	// PLSQLPrinter.g:489:1: labeled_statement : ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st);
	public final PLSQLPrinter.labeled_statement_return labeled_statement() throws RecognitionException {
		PLSQLPrinter.labeled_statement_return retval = new PLSQLPrinter.labeled_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name74 =null;
		TreeRuleReturnScope statement75 =null;

		try {
			// PLSQLPrinter.g:490:5: ( ^( LABEL_DECLARE label_name statement ) -> labeled_statement(name=$label_name.ststatement=$statement.st))
			// PLSQLPrinter.g:490:10: ^( LABEL_DECLARE label_name statement )
			{
			match(input,LABEL_DECLARE,FOLLOW_LABEL_DECLARE_in_labeled_statement2564); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_labeled_statement2566);
			label_name74=label_name();
			state._fsp--;

			pushFollow(FOLLOW_statement_in_labeled_statement2568);
			statement75=statement();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 490:48: -> labeled_statement(name=$label_name.ststatement=$statement.st)
			{
				retval.st = templateLib.getInstanceOf("labeled_statement",new STAttrMap().put("name", (label_name74!=null?((StringTemplate)label_name74.getTemplate()):null)).put("statement", (statement75!=null?((StringTemplate)statement75.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "labeled_statement"


	public static class statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "statement"
	// PLSQLPrinter.g:493:1: statement : ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement[true] -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| perform_statement -> { $perform_statement.st }| general_element -> { $general_element.st }| pgsql_raise_statement -> { $pgsql_raise_statement.st }| body -> { $body.st }| block -> { $block.st });
	public final PLSQLPrinter.statement_return statement() throws RecognitionException {
		PLSQLPrinter.statement_return retval = new PLSQLPrinter.statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope assignment_statement76 =null;
		TreeRuleReturnScope continue_statement77 =null;
		TreeRuleReturnScope exit_statement78 =null;
		TreeRuleReturnScope goto_statement79 =null;
		TreeRuleReturnScope if_statement80 =null;
		TreeRuleReturnScope loop_statement81 =null;
		TreeRuleReturnScope forall_statement82 =null;
		TreeRuleReturnScope null_statement83 =null;
		TreeRuleReturnScope raise_statement84 =null;
		TreeRuleReturnScope return_statement85 =null;
		TreeRuleReturnScope pipe_row_statement86 =null;
		TreeRuleReturnScope case_statement87 =null;
		TreeRuleReturnScope sql_statement88 =null;
		TreeRuleReturnScope perform_statement89 =null;
		TreeRuleReturnScope general_element90 =null;
		TreeRuleReturnScope pgsql_raise_statement91 =null;
		TreeRuleReturnScope body92 =null;
		TreeRuleReturnScope block93 =null;

		try {
			// PLSQLPrinter.g:494:5: ( assignment_statement -> { $assignment_statement.st }| continue_statement -> { $continue_statement.st }| exit_statement -> { $exit_statement.st }| goto_statement -> { $goto_statement.st }| if_statement -> { $if_statement.st }| loop_statement -> { $loop_statement.st }| forall_statement -> { $forall_statement.st }| null_statement -> { $null_statement.st }| raise_statement -> { $raise_statement.st }| return_statement -> { $return_statement.st }| pipe_row_statement -> { $pipe_row_statement.st }| case_statement[true] -> { $case_statement.st }| sql_statement -> { $sql_statement.st }| perform_statement -> { $perform_statement.st }| general_element -> { $general_element.st }| pgsql_raise_statement -> { $pgsql_raise_statement.st }| body -> { $body.st }| block -> { $block.st })
			int alt34=18;
			switch ( input.LA(1) ) {
			case ASSIGN:
				{
				alt34=1;
				}
				break;
			case CONTINUE_VK:
				{
				alt34=2;
				}
				break;
			case EXIT_VK:
				{
				alt34=3;
				}
				break;
			case SQL92_RESERVED_GOTO:
				{
				alt34=4;
				}
				break;
			case PLSQL_RESERVED_IF:
				{
				alt34=5;
				}
				break;
			case FOR_LOOP:
			case LOOP_VK:
			case WHILE_LOOP:
				{
				alt34=6;
				}
				break;
			case FORALL_VK:
				{
				alt34=7;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt34=8;
				}
				break;
			case RAISE_VK:
				{
				alt34=9;
				}
				break;
			case RETURN_VK:
				{
				alt34=10;
				}
				break;
			case PIPE_ROW:
				{
				alt34=11;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt34=12;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_FETCH:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case CLOSE_VK:
			case COMMIT_VK:
			case EXECUTE_VK:
			case MERGE_VK:
			case OPEN_FOR:
			case OPEN_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SELECT_STATEMENT:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt34=13;
				}
				break;
			case PGSQL_PERFORM:
				{
				alt34=14;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt34=15;
				}
				break;
			case PGSQL_RAISE:
				{
				alt34=16;
				}
				break;
			case BODY:
				{
				alt34=17;
				}
				break;
			case BLOCK:
				{
				alt34=18;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 34, 0, input);
				throw nvae;
			}
			switch (alt34) {
				case 1 :
					// PLSQLPrinter.g:494:10: assignment_statement
					{
					pushFollow(FOLLOW_assignment_statement_in_statement2603);
					assignment_statement76=assignment_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 494:31: -> { $assignment_statement.st }
					{
						retval.st =  (assignment_statement76!=null?((StringTemplate)assignment_statement76.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:495:10: continue_statement
					{
					pushFollow(FOLLOW_continue_statement_in_statement2618);
					continue_statement77=continue_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 495:29: -> { $continue_statement.st }
					{
						retval.st =  (continue_statement77!=null?((StringTemplate)continue_statement77.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:496:10: exit_statement
					{
					pushFollow(FOLLOW_exit_statement_in_statement2633);
					exit_statement78=exit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 496:25: -> { $exit_statement.st }
					{
						retval.st =  (exit_statement78!=null?((StringTemplate)exit_statement78.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:497:10: goto_statement
					{
					pushFollow(FOLLOW_goto_statement_in_statement2648);
					goto_statement79=goto_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 497:25: -> { $goto_statement.st }
					{
						retval.st =  (goto_statement79!=null?((StringTemplate)goto_statement79.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:498:10: if_statement
					{
					pushFollow(FOLLOW_if_statement_in_statement2663);
					if_statement80=if_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 498:23: -> { $if_statement.st }
					{
						retval.st =  (if_statement80!=null?((StringTemplate)if_statement80.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:499:10: loop_statement
					{
					pushFollow(FOLLOW_loop_statement_in_statement2678);
					loop_statement81=loop_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 499:25: -> { $loop_statement.st }
					{
						retval.st =  (loop_statement81!=null?((StringTemplate)loop_statement81.getTemplate()):null) ;
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:500:10: forall_statement
					{
					pushFollow(FOLLOW_forall_statement_in_statement2693);
					forall_statement82=forall_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 500:27: -> { $forall_statement.st }
					{
						retval.st =  (forall_statement82!=null?((StringTemplate)forall_statement82.getTemplate()):null) ;
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:501:10: null_statement
					{
					pushFollow(FOLLOW_null_statement_in_statement2708);
					null_statement83=null_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 501:25: -> { $null_statement.st }
					{
						retval.st =  (null_statement83!=null?((StringTemplate)null_statement83.getTemplate()):null) ;
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:502:10: raise_statement
					{
					pushFollow(FOLLOW_raise_statement_in_statement2723);
					raise_statement84=raise_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 502:26: -> { $raise_statement.st }
					{
						retval.st =  (raise_statement84!=null?((StringTemplate)raise_statement84.getTemplate()):null) ;
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:503:10: return_statement
					{
					pushFollow(FOLLOW_return_statement_in_statement2738);
					return_statement85=return_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 503:27: -> { $return_statement.st }
					{
						retval.st =  (return_statement85!=null?((StringTemplate)return_statement85.getTemplate()):null) ;
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:504:10: pipe_row_statement
					{
					pushFollow(FOLLOW_pipe_row_statement_in_statement2753);
					pipe_row_statement86=pipe_row_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 504:29: -> { $pipe_row_statement.st }
					{
						retval.st =  (pipe_row_statement86!=null?((StringTemplate)pipe_row_statement86.getTemplate()):null) ;
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:505:10: case_statement[true]
					{
					pushFollow(FOLLOW_case_statement_in_statement2768);
					case_statement87=case_statement(true);
					state._fsp--;

					// TEMPLATE REWRITE
					// 505:31: -> { $case_statement.st }
					{
						retval.st =  (case_statement87!=null?((StringTemplate)case_statement87.getTemplate()):null) ;
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:506:10: sql_statement
					{
					pushFollow(FOLLOW_sql_statement_in_statement2784);
					sql_statement88=sql_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 506:24: -> { $sql_statement.st }
					{
						retval.st =  (sql_statement88!=null?((StringTemplate)sql_statement88.getTemplate()):null) ;
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:507:10: perform_statement
					{
					pushFollow(FOLLOW_perform_statement_in_statement2799);
					perform_statement89=perform_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 507:28: -> { $perform_statement.st }
					{
						retval.st =  (perform_statement89!=null?((StringTemplate)perform_statement89.getTemplate()):null) ;
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:508:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_statement2814);
					general_element90=general_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 508:26: -> { $general_element.st }
					{
						retval.st =  (general_element90!=null?((StringTemplate)general_element90.getTemplate()):null) ;
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:509:10: pgsql_raise_statement
					{
					pushFollow(FOLLOW_pgsql_raise_statement_in_statement2829);
					pgsql_raise_statement91=pgsql_raise_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 509:32: -> { $pgsql_raise_statement.st }
					{
						retval.st =  (pgsql_raise_statement91!=null?((StringTemplate)pgsql_raise_statement91.getTemplate()):null) ;
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:510:10: body
					{
					pushFollow(FOLLOW_body_in_statement2844);
					body92=body();
					state._fsp--;

					// TEMPLATE REWRITE
					// 510:15: -> { $body.st }
					{
						retval.st =  (body92!=null?((StringTemplate)body92.getTemplate()):null) ;
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:511:10: block
					{
					pushFollow(FOLLOW_block_in_statement2859);
					block93=block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 511:16: -> { $block.st }
					{
						retval.st =  (block93!=null?((StringTemplate)block93.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class assignment_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "assignment_statement"
	// PLSQLPrinter.g:514:1: assignment_statement : ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression ) -> assignment_statement(dst=$dst.stexpression=$expression.st);
	public final PLSQLPrinter.assignment_statement_return assignment_statement() throws RecognitionException {
		PLSQLPrinter.assignment_statement_return retval = new PLSQLPrinter.assignment_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope dst =null;
		TreeRuleReturnScope expression94 =null;

		try {
			// PLSQLPrinter.g:515:5: ( ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression ) -> assignment_statement(dst=$dst.stexpression=$expression.st))
			// PLSQLPrinter.g:515:11: ^( ASSIGN (dst= general_element |dst= hosted_variable_name ) expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement2885); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:515:20: (dst= general_element |dst= hosted_variable_name )
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==CASCATED_ELEMENT) ) {
				alt35=1;
			}
			else if ( (LA35_0==HOSTED_VARIABLE_NAME) ) {
				alt35=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 35, 0, input);
				throw nvae;
			}

			switch (alt35) {
				case 1 :
					// PLSQLPrinter.g:515:21: dst= general_element
					{
					pushFollow(FOLLOW_general_element_in_assignment_statement2890);
					dst=general_element();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:515:41: dst= hosted_variable_name
					{
					pushFollow(FOLLOW_hosted_variable_name_in_assignment_statement2894);
					dst=hosted_variable_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_assignment_statement2897);
			expression94=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 516:5: -> assignment_statement(dst=$dst.stexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("assignment_statement",new STAttrMap().put("dst", (dst!=null?((StringTemplate)dst.getTemplate()):null)).put("expression", (expression94!=null?((StringTemplate)expression94.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "assignment_statement"


	public static class continue_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "continue_statement"
	// PLSQLPrinter.g:519:1: continue_statement : ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> continue_statement(label_name=$label_name.stcondition=$general_when.st);
	public final PLSQLPrinter.continue_statement_return continue_statement() throws RecognitionException {
		PLSQLPrinter.continue_statement_return retval = new PLSQLPrinter.continue_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name95 =null;
		TreeRuleReturnScope general_when96 =null;

		try {
			// PLSQLPrinter.g:520:5: ( ^( CONTINUE_VK ( label_name )? ( general_when )? ) -> continue_statement(label_name=$label_name.stcondition=$general_when.st))
			// PLSQLPrinter.g:520:10: ^( CONTINUE_VK ( label_name )? ( general_when )? )
			{
			match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_continue_statement2939); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:520:24: ( label_name )?
				int alt36=2;
				int LA36_0 = input.LA(1);
				if ( (LA36_0==LABEL_NAME) ) {
					alt36=1;
				}
				switch (alt36) {
					case 1 :
						// PLSQLPrinter.g:520:24: label_name
						{
						pushFollow(FOLLOW_label_name_in_continue_statement2941);
						label_name95=label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:520:36: ( general_when )?
				int alt37=2;
				int LA37_0 = input.LA(1);
				if ( (LA37_0==SQL92_RESERVED_WHEN) ) {
					alt37=1;
				}
				switch (alt37) {
					case 1 :
						// PLSQLPrinter.g:520:36: general_when
						{
						pushFollow(FOLLOW_general_when_in_continue_statement2944);
						general_when96=general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 521:5: -> continue_statement(label_name=$label_name.stcondition=$general_when.st)
			{
				retval.st = templateLib.getInstanceOf("continue_statement",new STAttrMap().put("label_name", (label_name95!=null?((StringTemplate)label_name95.getTemplate()):null)).put("condition", (general_when96!=null?((StringTemplate)general_when96.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "continue_statement"


	public static class general_when_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_when"
	// PLSQLPrinter.g:524:1: general_when : ^( SQL92_RESERVED_WHEN expression ) -> general_when(expression=$expression.st);
	public final PLSQLPrinter.general_when_return general_when() throws RecognitionException {
		PLSQLPrinter.general_when_return retval = new PLSQLPrinter.general_when_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression97 =null;

		try {
			// PLSQLPrinter.g:525:5: ( ^( SQL92_RESERVED_WHEN expression ) -> general_when(expression=$expression.st))
			// PLSQLPrinter.g:525:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_general_when2987); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_general_when2989);
			expression97=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 526:5: -> general_when(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("general_when",new STAttrMap().put("expression", (expression97!=null?((StringTemplate)expression97.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_when"


	public static class exit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exit_statement"
	// PLSQLPrinter.g:529:1: exit_statement : ^( EXIT_VK ( label_name )? ( general_when )? ) -> exit_statement(label_name=$label_name.stcondition=$general_when.st);
	public final PLSQLPrinter.exit_statement_return exit_statement() throws RecognitionException {
		PLSQLPrinter.exit_statement_return retval = new PLSQLPrinter.exit_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name98 =null;
		TreeRuleReturnScope general_when99 =null;

		try {
			// PLSQLPrinter.g:530:5: ( ^( EXIT_VK ( label_name )? ( general_when )? ) -> exit_statement(label_name=$label_name.stcondition=$general_when.st))
			// PLSQLPrinter.g:530:10: ^( EXIT_VK ( label_name )? ( general_when )? )
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_statement3026); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:530:20: ( label_name )?
				int alt38=2;
				int LA38_0 = input.LA(1);
				if ( (LA38_0==LABEL_NAME) ) {
					alt38=1;
				}
				switch (alt38) {
					case 1 :
						// PLSQLPrinter.g:530:20: label_name
						{
						pushFollow(FOLLOW_label_name_in_exit_statement3028);
						label_name98=label_name();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:530:32: ( general_when )?
				int alt39=2;
				int LA39_0 = input.LA(1);
				if ( (LA39_0==SQL92_RESERVED_WHEN) ) {
					alt39=1;
				}
				switch (alt39) {
					case 1 :
						// PLSQLPrinter.g:530:32: general_when
						{
						pushFollow(FOLLOW_general_when_in_exit_statement3031);
						general_when99=general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 531:5: -> exit_statement(label_name=$label_name.stcondition=$general_when.st)
			{
				retval.st = templateLib.getInstanceOf("exit_statement",new STAttrMap().put("label_name", (label_name98!=null?((StringTemplate)label_name98.getTemplate()):null)).put("condition", (general_when99!=null?((StringTemplate)general_when99.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_statement"


	public static class goto_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "goto_statement"
	// PLSQLPrinter.g:534:1: goto_statement : ^( SQL92_RESERVED_GOTO label_name ) -> goto_statement(label_name=$label_name.st);
	public final PLSQLPrinter.goto_statement_return goto_statement() throws RecognitionException {
		PLSQLPrinter.goto_statement_return retval = new PLSQLPrinter.goto_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name100 =null;

		try {
			// PLSQLPrinter.g:535:5: ( ^( SQL92_RESERVED_GOTO label_name ) -> goto_statement(label_name=$label_name.st))
			// PLSQLPrinter.g:535:10: ^( SQL92_RESERVED_GOTO label_name )
			{
			match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement3074); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_goto_statement3076);
			label_name100=label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 536:5: -> goto_statement(label_name=$label_name.st)
			{
				retval.st = templateLib.getInstanceOf("goto_statement",new STAttrMap().put("label_name", (label_name100!=null?((StringTemplate)label_name100.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "goto_statement"


	public static class if_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "if_statement"
	// PLSQLPrinter.g:539:1: if_statement : ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? ) -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st);
	public final PLSQLPrinter.if_statement_return if_statement() throws RecognitionException {
		PLSQLPrinter.if_statement_return retval = new PLSQLPrinter.if_statement_return();
		retval.start = input.LT(1);

		List<Object> list_elsif_parts=null;
		TreeRuleReturnScope expression101 =null;
		TreeRuleReturnScope seq_of_statements102 =null;
		TreeRuleReturnScope else_part103 =null;
		RuleReturnScope elsif_parts = null;
		try {
			// PLSQLPrinter.g:540:5: ( ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? ) -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st))
			// PLSQLPrinter.g:540:10: ^( PLSQL_RESERVED_IF expression seq_of_statements (elsif_parts+= elsif_part )* ( else_part )? )
			{
			match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_statement3113); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_if_statement3115);
			expression101=expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_if_statement3117);
			seq_of_statements102=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:540:70: (elsif_parts+= elsif_part )*
			loop40:
			while (true) {
				int alt40=2;
				int LA40_0 = input.LA(1);
				if ( (LA40_0==PLSQL_NON_RESERVED_ELSIF) ) {
					alt40=1;
				}

				switch (alt40) {
				case 1 :
					// PLSQLPrinter.g:540:70: elsif_parts+= elsif_part
					{
					pushFollow(FOLLOW_elsif_part_in_if_statement3121);
					elsif_parts=elsif_part();
					state._fsp--;

					if (list_elsif_parts==null) list_elsif_parts=new ArrayList<Object>();
					list_elsif_parts.add(elsif_parts.getTemplate());
					}
					break;

				default :
					break loop40;
				}
			}

			// PLSQLPrinter.g:540:84: ( else_part )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==SQL92_RESERVED_ELSE) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// PLSQLPrinter.g:540:84: else_part
					{
					pushFollow(FOLLOW_else_part_in_if_statement3124);
					else_part103=else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 541:5: -> if_statement(condition=$expression.stthen_seq_of_statements=$seq_of_statements.stelsif_parts=$elsif_partselse_part=$else_part.st)
			{
				retval.st = templateLib.getInstanceOf("if_statement",new STAttrMap().put("condition", (expression101!=null?((StringTemplate)expression101.getTemplate()):null)).put("then_seq_of_statements", (seq_of_statements102!=null?((StringTemplate)seq_of_statements102.getTemplate()):null)).put("elsif_parts", list_elsif_parts).put("else_part", (else_part103!=null?((StringTemplate)else_part103.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "if_statement"


	public static class elsif_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "elsif_part"
	// PLSQLPrinter.g:546:1: elsif_part : ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.elsif_part_return elsif_part() throws RecognitionException {
		PLSQLPrinter.elsif_part_return retval = new PLSQLPrinter.elsif_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression104 =null;
		TreeRuleReturnScope seq_of_statements105 =null;

		try {
			// PLSQLPrinter.g:547:5: ( ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:547:10: ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements )
			{
			match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part3198); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_elsif_part3200);
			expression104=expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_elsif_part3202);
			seq_of_statements105=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 548:5: -> elsif_part(condition=$expression.stseq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("elsif_part",new STAttrMap().put("condition", (expression104!=null?((StringTemplate)expression104.getTemplate()):null)).put("seq_of_statements", (seq_of_statements105!=null?((StringTemplate)seq_of_statements105.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "elsif_part"


	public static class else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "else_part"
	// PLSQLPrinter.g:551:1: else_part : ^( SQL92_RESERVED_ELSE seq_of_statements ) -> else_part(seq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.else_part_return else_part() throws RecognitionException {
		PLSQLPrinter.else_part_return retval = new PLSQLPrinter.else_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope seq_of_statements106 =null;

		try {
			// PLSQLPrinter.g:552:5: ( ^( SQL92_RESERVED_ELSE seq_of_statements ) -> else_part(seq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:552:10: ^( SQL92_RESERVED_ELSE seq_of_statements )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_part3244); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_seq_of_statements_in_else_part3246);
			seq_of_statements106=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 553:5: -> else_part(seq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("else_part",new STAttrMap().put("seq_of_statements", (seq_of_statements106!=null?((StringTemplate)seq_of_statements106.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "else_part"


	public static class loop_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "loop_statement"
	// PLSQLPrinter.g:556:1: loop_statement : ( ^( WHILE_LOOP expression seq_of_statements ) -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> loop(seq_of_statements=$seq_of_statements.st));
	public final PLSQLPrinter.loop_statement_return loop_statement() throws RecognitionException {
		PLSQLPrinter.loop_statement_return retval = new PLSQLPrinter.loop_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression107 =null;
		TreeRuleReturnScope seq_of_statements108 =null;
		TreeRuleReturnScope cursor_loop_param109 =null;
		TreeRuleReturnScope seq_of_statements110 =null;
		TreeRuleReturnScope seq_of_statements111 =null;

		try {
			// PLSQLPrinter.g:557:5: ( ^( WHILE_LOOP expression seq_of_statements ) -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)| ^( FOR_LOOP cursor_loop_param seq_of_statements ) -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)| ^( LOOP_VK seq_of_statements ) -> loop(seq_of_statements=$seq_of_statements.st))
			int alt42=3;
			switch ( input.LA(1) ) {
			case WHILE_LOOP:
				{
				alt42=1;
				}
				break;
			case FOR_LOOP:
				{
				alt42=2;
				}
				break;
			case LOOP_VK:
				{
				alt42=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 42, 0, input);
				throw nvae;
			}
			switch (alt42) {
				case 1 :
					// PLSQLPrinter.g:557:10: ^( WHILE_LOOP expression seq_of_statements )
					{
					match(input,WHILE_LOOP,FOLLOW_WHILE_LOOP_in_loop_statement3283); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_loop_statement3285);
					expression107=expression();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement3287);
					seq_of_statements108=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 558:5: -> while_loop(condition=$expression.stseq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("while_loop",new STAttrMap().put("condition", (expression107!=null?((StringTemplate)expression107.getTemplate()):null)).put("seq_of_statements", (seq_of_statements108!=null?((StringTemplate)seq_of_statements108.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:559:10: ^( FOR_LOOP cursor_loop_param seq_of_statements )
					{
					match(input,FOR_LOOP,FOLLOW_FOR_LOOP_in_loop_statement3320); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_loop_param_in_loop_statement3322);
					cursor_loop_param109=cursor_loop_param();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement3324);
					seq_of_statements110=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 560:5: -> for_loop(loopDefinition=$cursor_loop_param.ststatements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("for_loop",new STAttrMap().put("loopDefinition", (cursor_loop_param109!=null?((StringTemplate)cursor_loop_param109.getTemplate()):null)).put("statements", (seq_of_statements110!=null?((StringTemplate)seq_of_statements110.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:561:10: ^( LOOP_VK seq_of_statements )
					{
					match(input,LOOP_VK,FOLLOW_LOOP_VK_in_loop_statement3357); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_seq_of_statements_in_loop_statement3359);
					seq_of_statements111=seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 562:5: -> loop(seq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("loop",new STAttrMap().put("seq_of_statements", (seq_of_statements111!=null?((StringTemplate)seq_of_statements111.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loop_statement"


	public static class cursor_loop_param_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_loop_param"
	// PLSQLPrinter.g:567:1: cursor_loop_param : ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name general_element ) -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)| ^( SELECT_BASED_FOR record_name select_statement ) -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st));
	public final PLSQLPrinter.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
		PLSQLPrinter.cursor_loop_param_return retval = new PLSQLPrinter.cursor_loop_param_return();
		retval.start = input.LT(1);

		CommonTree REVERSE_VK113=null;
		TreeRuleReturnScope b1 =null;
		TreeRuleReturnScope b2 =null;
		TreeRuleReturnScope index_name112 =null;
		TreeRuleReturnScope record_name114 =null;
		TreeRuleReturnScope general_element115 =null;
		TreeRuleReturnScope record_name116 =null;
		TreeRuleReturnScope select_statement117 =null;

		try {
			// PLSQLPrinter.g:568:5: ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) ) -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)| ^( CURSOR_BASED_FOR record_name general_element ) -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)| ^( SELECT_BASED_FOR record_name select_statement ) -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st))
			int alt44=3;
			switch ( input.LA(1) ) {
			case INDEXED_FOR:
				{
				alt44=1;
				}
				break;
			case CURSOR_BASED_FOR:
				{
				alt44=2;
				}
				break;
			case SELECT_BASED_FOR:
				{
				alt44=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 44, 0, input);
				throw nvae;
			}
			switch (alt44) {
				case 1 :
					// PLSQLPrinter.g:568:10: ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND b1= expression b2= expression ) )
					{
					match(input,INDEXED_FOR,FOLLOW_INDEXED_FOR_in_cursor_loop_param3398); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_cursor_loop_param3400);
					index_name112=index_name();
					state._fsp--;

					// PLSQLPrinter.g:568:35: ( REVERSE_VK )?
					int alt43=2;
					int LA43_0 = input.LA(1);
					if ( (LA43_0==REVERSE_VK) ) {
						alt43=1;
					}
					switch (alt43) {
						case 1 :
							// PLSQLPrinter.g:568:35: REVERSE_VK
							{
							REVERSE_VK113=(CommonTree)match(input,REVERSE_VK,FOLLOW_REVERSE_VK_in_cursor_loop_param3402); 
							}
							break;

					}

					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_cursor_loop_param3406); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_cursor_loop_param3410);
					b1=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_cursor_loop_param3414);
					b2=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 569:5: -> loopDefinition_bounds(indexVar=$index_name.stisReverse=$REVERSE_VK != nulllowerBound=$b1.stupperBound=$b2.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_bounds",new STAttrMap().put("indexVar", (index_name112!=null?((StringTemplate)index_name112.getTemplate()):null)).put("isReverse", REVERSE_VK113 != null).put("lowerBound", (b1!=null?((StringTemplate)b1.getTemplate()):null)).put("upperBound", (b2!=null?((StringTemplate)b2.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:570:10: ^( CURSOR_BASED_FOR record_name general_element )
					{
					match(input,CURSOR_BASED_FOR,FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param3458); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param3460);
					record_name114=record_name();
					state._fsp--;

					pushFollow(FOLLOW_general_element_in_cursor_loop_param3462);
					general_element115=general_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 571:5: -> loopDefinition_cursor(indexVar=$record_name.stcursor=$general_element.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_cursor",new STAttrMap().put("indexVar", (record_name114!=null?((StringTemplate)record_name114.getTemplate()):null)).put("cursor", (general_element115!=null?((StringTemplate)general_element115.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:572:10: ^( SELECT_BASED_FOR record_name select_statement )
					{
					match(input,SELECT_BASED_FOR,FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param3495); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param3497);
					record_name116=record_name();
					state._fsp--;

					pushFollow(FOLLOW_select_statement_in_cursor_loop_param3499);
					select_statement117=select_statement();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 573:5: -> loopDefinition_select(indexVar=$record_name.stselect_statement=$select_statement.st)
					{
						retval.st = templateLib.getInstanceOf("loopDefinition_select",new STAttrMap().put("indexVar", (record_name116!=null?((StringTemplate)record_name116.getTemplate()):null)).put("select_statement", (select_statement117!=null?((StringTemplate)select_statement117.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_loop_param"


	public static class forall_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "forall_statement"
	// PLSQLPrinter.g:578:1: forall_statement : ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\";
	public final PLSQLPrinter.forall_statement_return forall_statement() throws RecognitionException {
		PLSQLPrinter.forall_statement_return retval = new PLSQLPrinter.forall_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:579:5: ( ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) -> template( \"not implemented: forall_statement\")
			// PLSQLPrinter.g:579:10: ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? )
			{
			match(input,FORALL_VK,FOLLOW_FORALL_VK_in_forall_statement3543); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_index_name_in_forall_statement3545);
			index_name();
			state._fsp--;

			pushFollow(FOLLOW_bounds_clause_in_forall_statement3547);
			bounds_clause();
			state._fsp--;

			pushFollow(FOLLOW_sql_statement_in_forall_statement3549);
			sql_statement();
			state._fsp--;

			// PLSQLPrinter.g:579:61: ( EXCEPTIONS_VK )?
			int alt45=2;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==EXCEPTIONS_VK) ) {
				alt45=1;
			}
			switch (alt45) {
				case 1 :
					// PLSQLPrinter.g:579:61: EXCEPTIONS_VK
					{
					match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_forall_statement3551); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 580:5: -> template( \"not implemented: forall_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: forall_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "forall_statement"


	public static class bounds_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "bounds_clause"
	// PLSQLPrinter.g:583:1: bounds_clause : ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\");
	public final PLSQLPrinter.bounds_clause_return bounds_clause() throws RecognitionException {
		PLSQLPrinter.bounds_clause_return retval = new PLSQLPrinter.bounds_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:584:5: ( ^( SIMPLE_BOUND expression expression ) -> template( \"not implemented: bounds_clause\"| ^( INDICES_BOUND collection_name ( between_bound )? ) -> template( \"not implemented: bounds_clause\"| ^( VALUES_BOUND index_name ) -> template( \"not implemented: bounds_clause\")
			int alt47=3;
			switch ( input.LA(1) ) {
			case SIMPLE_BOUND:
				{
				alt47=1;
				}
				break;
			case INDICES_BOUND:
				{
				alt47=2;
				}
				break;
			case VALUES_BOUND:
				{
				alt47=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 47, 0, input);
				throw nvae;
			}
			switch (alt47) {
				case 1 :
					// PLSQLPrinter.g:584:10: ^( SIMPLE_BOUND expression expression )
					{
					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_bounds_clause3588); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_bounds_clause3590);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_bounds_clause3592);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 585:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:586:10: ^( INDICES_BOUND collection_name ( between_bound )? )
					{
					match(input,INDICES_BOUND,FOLLOW_INDICES_BOUND_in_bounds_clause3619); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_collection_name_in_bounds_clause3621);
					collection_name();
					state._fsp--;

					// PLSQLPrinter.g:586:42: ( between_bound )?
					int alt46=2;
					int LA46_0 = input.LA(1);
					if ( (LA46_0==SQL92_RESERVED_BETWEEN) ) {
						alt46=1;
					}
					switch (alt46) {
						case 1 :
							// PLSQLPrinter.g:586:42: between_bound
							{
							pushFollow(FOLLOW_between_bound_in_bounds_clause3623);
							between_bound();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 587:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:588:10: ^( VALUES_BOUND index_name )
					{
					match(input,VALUES_BOUND,FOLLOW_VALUES_BOUND_in_bounds_clause3651); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_bounds_clause3653);
					index_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 589:5: -> template( \"not implemented: bounds_clause\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: bounds_clause");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bounds_clause"


	public static class between_bound_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "between_bound"
	// PLSQLPrinter.g:592:1: between_bound : ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\";
	public final PLSQLPrinter.between_bound_return between_bound() throws RecognitionException {
		PLSQLPrinter.between_bound_return retval = new PLSQLPrinter.between_bound_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:593:5: ( ^( SQL92_RESERVED_BETWEEN expression expression ) -> template( \"not implemented: between_bound\")
			// PLSQLPrinter.g:593:10: ^( SQL92_RESERVED_BETWEEN expression expression )
			{
			match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound3690); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_between_bound3692);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_between_bound3694);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 594:5: -> template( \"not implemented: between_bound\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: between_bound");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "between_bound"


	public static class null_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "null_statement"
	// PLSQLPrinter.g:597:1: null_statement : SQL92_RESERVED_NULL -> null_statement(;
	public final PLSQLPrinter.null_statement_return null_statement() throws RecognitionException {
		PLSQLPrinter.null_statement_return retval = new PLSQLPrinter.null_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:598:5: ( SQL92_RESERVED_NULL -> null_statement()
			// PLSQLPrinter.g:598:10: SQL92_RESERVED_NULL
			{
			match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_statement3729); 
			// TEMPLATE REWRITE
			// 599:5: -> null_statement(
			{
				retval.st = templateLib.getInstanceOf("null_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_statement"


	public static class raise_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "raise_statement"
	// PLSQLPrinter.g:602:1: raise_statement : ^( RAISE_VK ( exception_name )? ) -> raise_statement(name=$exception_name.st);
	public final PLSQLPrinter.raise_statement_return raise_statement() throws RecognitionException {
		PLSQLPrinter.raise_statement_return retval = new PLSQLPrinter.raise_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope exception_name118 =null;

		try {
			// PLSQLPrinter.g:603:5: ( ^( RAISE_VK ( exception_name )? ) -> raise_statement(name=$exception_name.st))
			// PLSQLPrinter.g:603:10: ^( RAISE_VK ( exception_name )? )
			{
			match(input,RAISE_VK,FOLLOW_RAISE_VK_in_raise_statement3762); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:603:21: ( exception_name )?
				int alt48=2;
				int LA48_0 = input.LA(1);
				if ( (LA48_0==EXCEPTION_NAME) ) {
					alt48=1;
				}
				switch (alt48) {
					case 1 :
						// PLSQLPrinter.g:603:21: exception_name
						{
						pushFollow(FOLLOW_exception_name_in_raise_statement3764);
						exception_name118=exception_name();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 604:5: -> raise_statement(name=$exception_name.st)
			{
				retval.st = templateLib.getInstanceOf("raise_statement",new STAttrMap().put("name", (exception_name118!=null?((StringTemplate)exception_name118.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "raise_statement"


	public static class return_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_statement"
	// PLSQLPrinter.g:607:1: return_statement : ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st);
	public final PLSQLPrinter.return_statement_return return_statement() throws RecognitionException {
		PLSQLPrinter.return_statement_return retval = new PLSQLPrinter.return_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression119 =null;

		try {
			// PLSQLPrinter.g:608:5: ( ^( RETURN_VK ( expression )? ) -> return_statement(expression=$expression.st))
			// PLSQLPrinter.g:608:10: ^( RETURN_VK ( expression )? )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_statement3802); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:608:22: ( expression )?
				int alt49=2;
				int LA49_0 = input.LA(1);
				if ( (LA49_0==EXPR||LA49_0==LOGIC_EXPR) ) {
					alt49=1;
				}
				switch (alt49) {
					case 1 :
						// PLSQLPrinter.g:608:22: expression
						{
						pushFollow(FOLLOW_expression_in_return_statement3804);
						expression119=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 608:35: -> return_statement(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("return_statement",new STAttrMap().put("expression", (expression119!=null?((StringTemplate)expression119.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_statement"


	public static class body_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "body"
	// PLSQLPrinter.g:611:1: body : ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st);
	public final PLSQLPrinter.body_return body() throws RecognitionException {
		PLSQLPrinter.body_return retval = new PLSQLPrinter.body_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope label_name120 =null;
		TreeRuleReturnScope seq_of_statements121 =null;
		TreeRuleReturnScope exception_clause122 =null;

		try {
			// PLSQLPrinter.g:612:5: ( ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st))
			// PLSQLPrinter.g:612:10: ^( BODY ( label_name )? seq_of_statements ( exception_clause )? )
			{
			match(input,BODY,FOLLOW_BODY_in_body3836); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:612:17: ( label_name )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==LABEL_NAME) ) {
				alt50=1;
			}
			switch (alt50) {
				case 1 :
					// PLSQLPrinter.g:612:17: label_name
					{
					pushFollow(FOLLOW_label_name_in_body3838);
					label_name120=label_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_seq_of_statements_in_body3841);
			seq_of_statements121=seq_of_statements();
			state._fsp--;

			// PLSQLPrinter.g:612:47: ( exception_clause )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==SQL92_RESERVED_EXCEPTION) ) {
				alt51=1;
			}
			switch (alt51) {
				case 1 :
					// PLSQLPrinter.g:612:47: exception_clause
					{
					pushFollow(FOLLOW_exception_clause_in_body3843);
					exception_clause122=exception_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 613:5: -> body(bodyLabel=$label_name.ststatements=$seq_of_statements.stexception_clause=$exception_clause.st)
			{
				retval.st = templateLib.getInstanceOf("body",new STAttrMap().put("bodyLabel", (label_name120!=null?((StringTemplate)label_name120.getTemplate()):null)).put("statements", (seq_of_statements121!=null?((StringTemplate)seq_of_statements121.getTemplate()):null)).put("exception_clause", (exception_clause122!=null?((StringTemplate)exception_clause122.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class exception_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_clause"
	// PLSQLPrinter.g:618:1: exception_clause : ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ ) -> exception_clause(exception_handlers=$handlers);
	public final PLSQLPrinter.exception_clause_return exception_clause() throws RecognitionException {
		PLSQLPrinter.exception_clause_return retval = new PLSQLPrinter.exception_clause_return();
		retval.start = input.LT(1);

		List<Object> list_handlers=null;
		RuleReturnScope handlers = null;
		try {
			// PLSQLPrinter.g:619:5: ( ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ ) -> exception_clause(exception_handlers=$handlers))
			// PLSQLPrinter.g:619:10: ^( SQL92_RESERVED_EXCEPTION (handlers+= exception_handler )+ )
			{
			match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause3894); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:619:45: (handlers+= exception_handler )+
			int cnt52=0;
			loop52:
			while (true) {
				int alt52=2;
				int LA52_0 = input.LA(1);
				if ( (LA52_0==SQL92_RESERVED_WHEN) ) {
					alt52=1;
				}

				switch (alt52) {
				case 1 :
					// PLSQLPrinter.g:619:45: handlers+= exception_handler
					{
					pushFollow(FOLLOW_exception_handler_in_exception_clause3898);
					handlers=exception_handler();
					state._fsp--;

					if (list_handlers==null) list_handlers=new ArrayList<Object>();
					list_handlers.add(handlers.getTemplate());
					}
					break;

				default :
					if ( cnt52 >= 1 ) break loop52;
					EarlyExitException eee = new EarlyExitException(52, input);
					throw eee;
				}
				cnt52++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 620:5: -> exception_clause(exception_handlers=$handlers)
			{
				retval.st = templateLib.getInstanceOf("exception_clause",new STAttrMap().put("exception_handlers", list_handlers));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_clause"


	public static class exception_handler_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_handler"
	// PLSQLPrinter.g:623:1: exception_handler : ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements ) -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st);
	public final PLSQLPrinter.exception_handler_return exception_handler() throws RecognitionException {
		PLSQLPrinter.exception_handler_return retval = new PLSQLPrinter.exception_handler_return();
		retval.start = input.LT(1);

		List<Object> list_names=null;
		TreeRuleReturnScope seq_of_statements123 =null;
		RuleReturnScope names = null;
		try {
			// PLSQLPrinter.g:624:5: ( ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements ) -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st))
			// PLSQLPrinter.g:624:10: ^( SQL92_RESERVED_WHEN (names+= exception_name )+ seq_of_statements )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler3936); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:624:37: (names+= exception_name )+
			int cnt53=0;
			loop53:
			while (true) {
				int alt53=2;
				int LA53_0 = input.LA(1);
				if ( (LA53_0==EXCEPTION_NAME) ) {
					alt53=1;
				}

				switch (alt53) {
				case 1 :
					// PLSQLPrinter.g:624:37: names+= exception_name
					{
					pushFollow(FOLLOW_exception_name_in_exception_handler3940);
					names=exception_name();
					state._fsp--;

					if (list_names==null) list_names=new ArrayList<Object>();
					list_names.add(names.getTemplate());
					}
					break;

				default :
					if ( cnt53 >= 1 ) break loop53;
					EarlyExitException eee = new EarlyExitException(53, input);
					throw eee;
				}
				cnt53++;
			}

			pushFollow(FOLLOW_seq_of_statements_in_exception_handler3943);
			seq_of_statements123=seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 625:5: -> exception_handler(exception_names=$namesseq_of_statements=$seq_of_statements.st)
			{
				retval.st = templateLib.getInstanceOf("exception_handler",new STAttrMap().put("exception_names", list_names).put("seq_of_statements", (seq_of_statements123!=null?((StringTemplate)seq_of_statements123.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_handler"


	public static class block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "block"
	// PLSQLPrinter.g:630:1: block : ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st);
	public final PLSQLPrinter.block_return block() throws RecognitionException {
		PLSQLPrinter.block_return retval = new PLSQLPrinter.block_return();
		retval.start = input.LT(1);

		List<Object> list_specs=null;
		TreeRuleReturnScope body124 =null;
		RuleReturnScope specs = null;
		try {
			// PLSQLPrinter.g:631:5: ( ^( BLOCK (specs+= declare_spec )* body ) -> block(declare_spec=$specsbody=$body.st))
			// PLSQLPrinter.g:631:10: ^( BLOCK (specs+= declare_spec )* body )
			{
			match(input,BLOCK,FOLLOW_BLOCK_in_block3987); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:631:23: (specs+= declare_spec )*
			loop54:
			while (true) {
				int alt54=2;
				int LA54_0 = input.LA(1);
				if ( (LA54_0==CREATE_FUNCTION||LA54_0==CREATE_PROCEDURE||(LA54_0 >= CREATE_TYPE_BODY && LA54_0 <= CREATE_TYPE_SPEC)||LA54_0==CURSOR_DECLARE||LA54_0==EXCEPTION_DECLARE||LA54_0==PRAGMA_DECLARE||(LA54_0 >= RECORD_TYPE_DECLARE_FIELDS && LA54_0 <= RECORD_VAR_DECLARE)||LA54_0==SUBTYPE_DECLARE||(LA54_0 >= TABLE_TYPE_DECLARE && LA54_0 <= TABLE_VAR_DECLARE)||LA54_0==VARIABLE_DECLARE) ) {
					alt54=1;
				}

				switch (alt54) {
				case 1 :
					// PLSQLPrinter.g:631:23: specs+= declare_spec
					{
					pushFollow(FOLLOW_declare_spec_in_block3991);
					specs=declare_spec();
					state._fsp--;

					if (list_specs==null) list_specs=new ArrayList<Object>();
					list_specs.add(specs.getTemplate());
					}
					break;

				default :
					break loop54;
				}
			}

			pushFollow(FOLLOW_body_in_block3994);
			body124=body();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 632:5: -> block(declare_spec=$specsbody=$body.st)
			{
				retval.st = templateLib.getInstanceOf("block",new STAttrMap().put("declare_spec", list_specs).put("body", (body124!=null?((StringTemplate)body124.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "block"


	public static class perform_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "perform_statement"
	// PLSQLPrinter.g:637:1: perform_statement : ( ^( PGSQL_PERFORM inner= expression ) -> perform_statement_expr(inner=$inner.st)| ^( PGSQL_PERFORM inner= data_manipulation_language_statements ) -> perform_statement_sql(inner=$inner.st));
	public final PLSQLPrinter.perform_statement_return perform_statement() throws RecognitionException {
		PLSQLPrinter.perform_statement_return retval = new PLSQLPrinter.perform_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope inner =null;

		try {
			// PLSQLPrinter.g:638:5: ( ^( PGSQL_PERFORM inner= expression ) -> perform_statement_expr(inner=$inner.st)| ^( PGSQL_PERFORM inner= data_manipulation_language_statements ) -> perform_statement_sql(inner=$inner.st))
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==PGSQL_PERFORM) ) {
				int LA55_1 = input.LA(2);
				if ( (LA55_1==DOWN) ) {
					int LA55_2 = input.LA(3);
					if ( (LA55_2==EXPR||LA55_2==LOGIC_EXPR) ) {
						alt55=1;
					}
					else if ( (LA55_2==PLSQL_RESERVED_LOCK||LA55_2==SQL92_RESERVED_DELETE||LA55_2==SQL92_RESERVED_INSERT||LA55_2==SQL92_RESERVED_UPDATE||LA55_2==MERGE_VK||LA55_2==SELECT_STATEMENT) ) {
						alt55=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 55, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 55, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 55, 0, input);
				throw nvae;
			}

			switch (alt55) {
				case 1 :
					// PLSQLPrinter.g:638:9: ^( PGSQL_PERFORM inner= expression )
					{
					match(input,PGSQL_PERFORM,FOLLOW_PGSQL_PERFORM_in_perform_statement4037); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_perform_statement4041);
					inner=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 639:5: -> perform_statement_expr(inner=$inner.st)
					{
						retval.st = templateLib.getInstanceOf("perform_statement_expr",new STAttrMap().put("inner", (inner!=null?((StringTemplate)inner.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:640:9: ^( PGSQL_PERFORM inner= data_manipulation_language_statements )
					{
					match(input,PGSQL_PERFORM,FOLLOW_PGSQL_PERFORM_in_perform_statement4067); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_data_manipulation_language_statements_in_perform_statement4071);
					inner=data_manipulation_language_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 641:5: -> perform_statement_sql(inner=$inner.st)
					{
						retval.st = templateLib.getInstanceOf("perform_statement_sql",new STAttrMap().put("inner", (inner!=null?((StringTemplate)inner.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "perform_statement"


	public static class sql_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sql_statement"
	// PLSQLPrinter.g:645:1: sql_statement : ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st });
	public final PLSQLPrinter.sql_statement_return sql_statement() throws RecognitionException {
		PLSQLPrinter.sql_statement_return retval = new PLSQLPrinter.sql_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope execute_immediate125 =null;
		TreeRuleReturnScope data_manipulation_language_statements126 =null;
		TreeRuleReturnScope cursor_manipulation_statements127 =null;
		TreeRuleReturnScope transaction_control_statements128 =null;

		try {
			// PLSQLPrinter.g:646:5: ( execute_immediate -> { $execute_immediate.st }| data_manipulation_language_statements -> { $data_manipulation_language_statements.st }| cursor_manipulation_statements -> { $cursor_manipulation_statements.st }| transaction_control_statements -> { $transaction_control_statements.st })
			int alt56=4;
			switch ( input.LA(1) ) {
			case EXECUTE_VK:
				{
				alt56=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case MERGE_VK:
			case SELECT_STATEMENT:
				{
				alt56=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
			case CLOSE_VK:
			case OPEN_FOR:
			case OPEN_VK:
				{
				alt56=3;
				}
				break;
			case COMMIT_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt56=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 56, 0, input);
				throw nvae;
			}
			switch (alt56) {
				case 1 :
					// PLSQLPrinter.g:646:10: execute_immediate
					{
					pushFollow(FOLLOW_execute_immediate_in_sql_statement4103);
					execute_immediate125=execute_immediate();
					state._fsp--;

					// TEMPLATE REWRITE
					// 646:28: -> { $execute_immediate.st }
					{
						retval.st =  (execute_immediate125!=null?((StringTemplate)execute_immediate125.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:647:10: data_manipulation_language_statements
					{
					pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement4118);
					data_manipulation_language_statements126=data_manipulation_language_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 647:48: -> { $data_manipulation_language_statements.st }
					{
						retval.st =  (data_manipulation_language_statements126!=null?((StringTemplate)data_manipulation_language_statements126.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:648:10: cursor_manipulation_statements
					{
					pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement4133);
					cursor_manipulation_statements127=cursor_manipulation_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 648:41: -> { $cursor_manipulation_statements.st }
					{
						retval.st =  (cursor_manipulation_statements127!=null?((StringTemplate)cursor_manipulation_statements127.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:649:10: transaction_control_statements
					{
					pushFollow(FOLLOW_transaction_control_statements_in_sql_statement4148);
					transaction_control_statements128=transaction_control_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 649:41: -> { $transaction_control_statements.st }
					{
						retval.st =  (transaction_control_statements128!=null?((StringTemplate)transaction_control_statements128.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_statement"


	public static class execute_immediate_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "execute_immediate"
	// PLSQLPrinter.g:652:1: execute_immediate : ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? ) -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st);
	public final PLSQLPrinter.execute_immediate_return execute_immediate() throws RecognitionException {
		PLSQLPrinter.execute_immediate_return retval = new PLSQLPrinter.execute_immediate_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope into =null;
		TreeRuleReturnScope using =null;
		TreeRuleReturnScope dynamic_returning =null;
		TreeRuleReturnScope expression129 =null;

		try {
			// PLSQLPrinter.g:653:5: ( ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? ) -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st))
			// PLSQLPrinter.g:653:10: ^( EXECUTE_VK expression (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )? )
			{
			match(input,EXECUTE_VK,FOLLOW_EXECUTE_VK_in_execute_immediate4173); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_execute_immediate4175);
			expression129=expression();
			state._fsp--;

			// PLSQLPrinter.g:654:11: (into= into_clause (using= using_clause )? |using= using_clause (dynamic_returning= dynamic_returning_clause )? |dynamic_returning= dynamic_returning_clause )?
			int alt59=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_INTO:
				case BULK_VK:
					{
					alt59=1;
					}
					break;
				case PLSQL_NON_RESERVED_USING:
					{
					alt59=2;
					}
					break;
				case DYNAMIC_RETURN:
					{
					alt59=3;
					}
					break;
			}
			switch (alt59) {
				case 1 :
					// PLSQLPrinter.g:654:16: into= into_clause (using= using_clause )?
					{
					pushFollow(FOLLOW_into_clause_in_execute_immediate4194);
					into=into_clause();
					state._fsp--;

					// PLSQLPrinter.g:654:38: (using= using_clause )?
					int alt57=2;
					int LA57_0 = input.LA(1);
					if ( (LA57_0==PLSQL_NON_RESERVED_USING) ) {
						alt57=1;
					}
					switch (alt57) {
						case 1 :
							// PLSQLPrinter.g:654:38: using= using_clause
							{
							pushFollow(FOLLOW_using_clause_in_execute_immediate4198);
							using=using_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:655:16: using= using_clause (dynamic_returning= dynamic_returning_clause )?
					{
					pushFollow(FOLLOW_using_clause_in_execute_immediate4218);
					using=using_clause();
					state._fsp--;

					// PLSQLPrinter.g:655:52: (dynamic_returning= dynamic_returning_clause )?
					int alt58=2;
					int LA58_0 = input.LA(1);
					if ( (LA58_0==DYNAMIC_RETURN) ) {
						alt58=1;
					}
					switch (alt58) {
						case 1 :
							// PLSQLPrinter.g:655:52: dynamic_returning= dynamic_returning_clause
							{
							pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate4222);
							dynamic_returning=dynamic_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 3 :
					// PLSQLPrinter.g:656:16: dynamic_returning= dynamic_returning_clause
					{
					pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate4242);
					dynamic_returning=dynamic_returning_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 659:5: -> execute_immediate_statement(expression=$expression.stinto_clause=$into.stusing_clause=$using.stdynamic_returning_clause=$dynamic_returning.st)
			{
				retval.st = templateLib.getInstanceOf("execute_immediate_statement",new STAttrMap().put("expression", (expression129!=null?((StringTemplate)expression129.getTemplate()):null)).put("into_clause", (into!=null?((StringTemplate)into.getTemplate()):null)).put("using_clause", (using!=null?((StringTemplate)using.getTemplate()):null)).put("dynamic_returning_clause", (dynamic_returning!=null?((StringTemplate)dynamic_returning.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execute_immediate"


	public static class dynamic_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dynamic_returning_clause"
	// PLSQLPrinter.g:665:1: dynamic_returning_clause : ^( DYNAMIC_RETURN into_clause ) -> dynamic_returning_clause(into_clause=$into_clause.st);
	public final PLSQLPrinter.dynamic_returning_clause_return dynamic_returning_clause() throws RecognitionException {
		PLSQLPrinter.dynamic_returning_clause_return retval = new PLSQLPrinter.dynamic_returning_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope into_clause130 =null;

		try {
			// PLSQLPrinter.g:666:5: ( ^( DYNAMIC_RETURN into_clause ) -> dynamic_returning_clause(into_clause=$into_clause.st))
			// PLSQLPrinter.g:666:10: ^( DYNAMIC_RETURN into_clause )
			{
			match(input,DYNAMIC_RETURN,FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause4338); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause4340);
			into_clause130=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 667:5: -> dynamic_returning_clause(into_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("dynamic_returning_clause",new STAttrMap().put("into_clause", (into_clause130!=null?((StringTemplate)into_clause130.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dynamic_returning_clause"


	public static class pgsql_raise_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pgsql_raise_statement"
	// PLSQLPrinter.g:671:1: pgsql_raise_statement : ^( PGSQL_RAISE pgsql_raise_level CHAR_STRING (expr+= expression )* ( pgsql_raise_using_options )? ) -> pgsql_raise_statement(level=$pgsql_raise_level.stformat=$CHAR_STRING.textexpressions=$exproptions=$pgsql_raise_using_options.st);
	public final PLSQLPrinter.pgsql_raise_statement_return pgsql_raise_statement() throws RecognitionException {
		PLSQLPrinter.pgsql_raise_statement_return retval = new PLSQLPrinter.pgsql_raise_statement_return();
		retval.start = input.LT(1);

		CommonTree CHAR_STRING132=null;
		List<Object> list_expr=null;
		TreeRuleReturnScope pgsql_raise_level131 =null;
		TreeRuleReturnScope pgsql_raise_using_options133 =null;
		RuleReturnScope expr = null;
		try {
			// PLSQLPrinter.g:672:5: ( ^( PGSQL_RAISE pgsql_raise_level CHAR_STRING (expr+= expression )* ( pgsql_raise_using_options )? ) -> pgsql_raise_statement(level=$pgsql_raise_level.stformat=$CHAR_STRING.textexpressions=$exproptions=$pgsql_raise_using_options.st))
			// PLSQLPrinter.g:672:9: ^( PGSQL_RAISE pgsql_raise_level CHAR_STRING (expr+= expression )* ( pgsql_raise_using_options )? )
			{
			match(input,PGSQL_RAISE,FOLLOW_PGSQL_RAISE_in_pgsql_raise_statement4377); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_pgsql_raise_level_in_pgsql_raise_statement4379);
			pgsql_raise_level131=pgsql_raise_level();
			state._fsp--;

			CHAR_STRING132=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_pgsql_raise_statement4381); 
			// PLSQLPrinter.g:672:57: (expr+= expression )*
			loop60:
			while (true) {
				int alt60=2;
				int LA60_0 = input.LA(1);
				if ( (LA60_0==EXPR||LA60_0==LOGIC_EXPR) ) {
					alt60=1;
				}

				switch (alt60) {
				case 1 :
					// PLSQLPrinter.g:672:57: expr+= expression
					{
					pushFollow(FOLLOW_expression_in_pgsql_raise_statement4385);
					expr=expression();
					state._fsp--;

					if (list_expr==null) list_expr=new ArrayList<Object>();
					list_expr.add(expr.getTemplate());
					}
					break;

				default :
					break loop60;
				}
			}

			// PLSQLPrinter.g:672:71: ( pgsql_raise_using_options )?
			int alt61=2;
			int LA61_0 = input.LA(1);
			if ( (LA61_0==PGSQL_USING) ) {
				alt61=1;
			}
			switch (alt61) {
				case 1 :
					// PLSQLPrinter.g:672:71: pgsql_raise_using_options
					{
					pushFollow(FOLLOW_pgsql_raise_using_options_in_pgsql_raise_statement4388);
					pgsql_raise_using_options133=pgsql_raise_using_options();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 673:9: -> pgsql_raise_statement(level=$pgsql_raise_level.stformat=$CHAR_STRING.textexpressions=$exproptions=$pgsql_raise_using_options.st)
			{
				retval.st = templateLib.getInstanceOf("pgsql_raise_statement",new STAttrMap().put("level", (pgsql_raise_level131!=null?((StringTemplate)pgsql_raise_level131.getTemplate()):null)).put("format", (CHAR_STRING132!=null?CHAR_STRING132.getText():null)).put("expressions", list_expr).put("options", (pgsql_raise_using_options133!=null?((StringTemplate)pgsql_raise_using_options133.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pgsql_raise_statement"


	public static class pgsql_raise_using_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pgsql_raise_using_options"
	// PLSQLPrinter.g:676:1: pgsql_raise_using_options : ^( PGSQL_USING (options+= pgsql_raise_using_option )+ ) -> pgsql_raise_using_options(options=$options);
	public final PLSQLPrinter.pgsql_raise_using_options_return pgsql_raise_using_options() throws RecognitionException {
		PLSQLPrinter.pgsql_raise_using_options_return retval = new PLSQLPrinter.pgsql_raise_using_options_return();
		retval.start = input.LT(1);

		List<Object> list_options=null;
		RuleReturnScope options = null;
		try {
			// PLSQLPrinter.g:677:5: ( ^( PGSQL_USING (options+= pgsql_raise_using_option )+ ) -> pgsql_raise_using_options(options=$options))
			// PLSQLPrinter.g:677:9: ^( PGSQL_USING (options+= pgsql_raise_using_option )+ )
			{
			match(input,PGSQL_USING,FOLLOW_PGSQL_USING_in_pgsql_raise_using_options4442); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:677:30: (options+= pgsql_raise_using_option )+
			int cnt62=0;
			loop62:
			while (true) {
				int alt62=2;
				int LA62_0 = input.LA(1);
				if ( (LA62_0==PGSQL_OPTION) ) {
					alt62=1;
				}

				switch (alt62) {
				case 1 :
					// PLSQLPrinter.g:677:30: options+= pgsql_raise_using_option
					{
					pushFollow(FOLLOW_pgsql_raise_using_option_in_pgsql_raise_using_options4446);
					options=pgsql_raise_using_option();
					state._fsp--;

					if (list_options==null) list_options=new ArrayList<Object>();
					list_options.add(options.getTemplate());
					}
					break;

				default :
					if ( cnt62 >= 1 ) break loop62;
					EarlyExitException eee = new EarlyExitException(62, input);
					throw eee;
				}
				cnt62++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 678:9: -> pgsql_raise_using_options(options=$options)
			{
				retval.st = templateLib.getInstanceOf("pgsql_raise_using_options",new STAttrMap().put("options", list_options));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pgsql_raise_using_options"


	public static class pgsql_raise_using_option_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pgsql_raise_using_option"
	// PLSQLPrinter.g:681:1: pgsql_raise_using_option : ^( PGSQL_OPTION pgsql_raise_using_option_name expression ) -> pgsql_raise_using_option(option_name=$pgsql_raise_using_option_name.stexpression=$expression.st);
	public final PLSQLPrinter.pgsql_raise_using_option_return pgsql_raise_using_option() throws RecognitionException {
		PLSQLPrinter.pgsql_raise_using_option_return retval = new PLSQLPrinter.pgsql_raise_using_option_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope pgsql_raise_using_option_name134 =null;
		TreeRuleReturnScope expression135 =null;

		try {
			// PLSQLPrinter.g:682:5: ( ^( PGSQL_OPTION pgsql_raise_using_option_name expression ) -> pgsql_raise_using_option(option_name=$pgsql_raise_using_option_name.stexpression=$expression.st))
			// PLSQLPrinter.g:682:9: ^( PGSQL_OPTION pgsql_raise_using_option_name expression )
			{
			match(input,PGSQL_OPTION,FOLLOW_PGSQL_OPTION_in_pgsql_raise_using_option4489); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_pgsql_raise_using_option_name_in_pgsql_raise_using_option4491);
			pgsql_raise_using_option_name134=pgsql_raise_using_option_name();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_pgsql_raise_using_option4493);
			expression135=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 683:9: -> pgsql_raise_using_option(option_name=$pgsql_raise_using_option_name.stexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("pgsql_raise_using_option",new STAttrMap().put("option_name", (pgsql_raise_using_option_name134!=null?((StringTemplate)pgsql_raise_using_option_name134.getTemplate()):null)).put("expression", (expression135!=null?((StringTemplate)expression135.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pgsql_raise_using_option"


	public static class pgsql_raise_using_option_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pgsql_raise_using_option_name"
	// PLSQLPrinter.g:686:1: pgsql_raise_using_option_name : PGSQL_ERRCODE -> pgsql_raise_using_option_name_errcode(;
	public final PLSQLPrinter.pgsql_raise_using_option_name_return pgsql_raise_using_option_name() throws RecognitionException {
		PLSQLPrinter.pgsql_raise_using_option_name_return retval = new PLSQLPrinter.pgsql_raise_using_option_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:687:5: ( PGSQL_ERRCODE -> pgsql_raise_using_option_name_errcode()
			// PLSQLPrinter.g:687:9: PGSQL_ERRCODE
			{
			match(input,PGSQL_ERRCODE,FOLLOW_PGSQL_ERRCODE_in_pgsql_raise_using_option_name4535); 
			// TEMPLATE REWRITE
			// 687:23: -> pgsql_raise_using_option_name_errcode(
			{
				retval.st = templateLib.getInstanceOf("pgsql_raise_using_option_name_errcode");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pgsql_raise_using_option_name"


	public static class pgsql_raise_level_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pgsql_raise_level"
	// PLSQLPrinter.g:690:1: pgsql_raise_level : ( PGSQL_NOTICE -> pgsql_raise_level_notice(| PGSQL_EXCEPTION -> pgsql_raise_level_exception();
	public final PLSQLPrinter.pgsql_raise_level_return pgsql_raise_level() throws RecognitionException {
		PLSQLPrinter.pgsql_raise_level_return retval = new PLSQLPrinter.pgsql_raise_level_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:691:5: ( PGSQL_NOTICE -> pgsql_raise_level_notice(| PGSQL_EXCEPTION -> pgsql_raise_level_exception()
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==PGSQL_NOTICE) ) {
				alt63=1;
			}
			else if ( (LA63_0==PGSQL_EXCEPTION) ) {
				alt63=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 63, 0, input);
				throw nvae;
			}

			switch (alt63) {
				case 1 :
					// PLSQLPrinter.g:691:9: PGSQL_NOTICE
					{
					match(input,PGSQL_NOTICE,FOLLOW_PGSQL_NOTICE_in_pgsql_raise_level4560); 
					// TEMPLATE REWRITE
					// 691:22: -> pgsql_raise_level_notice(
					{
						retval.st = templateLib.getInstanceOf("pgsql_raise_level_notice");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:692:11: PGSQL_EXCEPTION
					{
					match(input,PGSQL_EXCEPTION,FOLLOW_PGSQL_EXCEPTION_in_pgsql_raise_level4578); 
					// TEMPLATE REWRITE
					// 692:27: -> pgsql_raise_level_exception(
					{
						retval.st = templateLib.getInstanceOf("pgsql_raise_level_exception");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pgsql_raise_level"


	public static class data_manipulation_language_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "data_manipulation_language_statements"
	// PLSQLPrinter.g:697:1: data_manipulation_language_statements : ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st });
	public final PLSQLPrinter.data_manipulation_language_statements_return data_manipulation_language_statements() throws RecognitionException {
		PLSQLPrinter.data_manipulation_language_statements_return retval = new PLSQLPrinter.data_manipulation_language_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope merge_statement136 =null;
		TreeRuleReturnScope lock_table_statement137 =null;
		TreeRuleReturnScope select_statement138 =null;
		TreeRuleReturnScope update_statement139 =null;
		TreeRuleReturnScope delete_statement140 =null;
		TreeRuleReturnScope insert_statement141 =null;

		try {
			// PLSQLPrinter.g:698:5: ( merge_statement -> { $merge_statement.st }| lock_table_statement -> { $lock_table_statement.st }| select_statement -> { $select_statement.st }| update_statement -> { $update_statement.st }| delete_statement -> { $delete_statement.st }| insert_statement -> { $insert_statement.st })
			int alt64=6;
			switch ( input.LA(1) ) {
			case MERGE_VK:
				{
				alt64=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
				{
				alt64=2;
				}
				break;
			case SELECT_STATEMENT:
				{
				alt64=3;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt64=4;
				}
				break;
			case SQL92_RESERVED_DELETE:
				{
				alt64=5;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt64=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 64, 0, input);
				throw nvae;
			}
			switch (alt64) {
				case 1 :
					// PLSQLPrinter.g:698:10: merge_statement
					{
					pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements4606);
					merge_statement136=merge_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 698:26: -> { $merge_statement.st }
					{
						retval.st =  (merge_statement136!=null?((StringTemplate)merge_statement136.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:699:10: lock_table_statement
					{
					pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements4621);
					lock_table_statement137=lock_table_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 699:31: -> { $lock_table_statement.st }
					{
						retval.st =  (lock_table_statement137!=null?((StringTemplate)lock_table_statement137.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:700:10: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements4636);
					select_statement138=select_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 700:27: -> { $select_statement.st }
					{
						retval.st =  (select_statement138!=null?((StringTemplate)select_statement138.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:701:10: update_statement
					{
					pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements4651);
					update_statement139=update_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 701:27: -> { $update_statement.st }
					{
						retval.st =  (update_statement139!=null?((StringTemplate)update_statement139.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:702:10: delete_statement
					{
					pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements4666);
					delete_statement140=delete_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 702:27: -> { $delete_statement.st }
					{
						retval.st =  (delete_statement140!=null?((StringTemplate)delete_statement140.getTemplate()):null) ;
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:703:10: insert_statement
					{
					pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements4681);
					insert_statement141=insert_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 703:27: -> { $insert_statement.st }
					{
						retval.st =  (insert_statement141!=null?((StringTemplate)insert_statement141.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_language_statements"


	public static class select_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "select_statement"
	// PLSQLPrinter.g:706:1: select_statement : ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st);
	public final PLSQLPrinter.select_statement_return select_statement() throws RecognitionException {
		PLSQLPrinter.select_statement_return retval = new PLSQLPrinter.select_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery_factoring_clause142 =null;
		TreeRuleReturnScope subquery143 =null;
		TreeRuleReturnScope order_by_clause144 =null;
		TreeRuleReturnScope for_update_clause145 =null;

		try {
			// PLSQLPrinter.g:707:5: ( ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? ) -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st))
			// PLSQLPrinter.g:707:10: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( order_by_clause )? ( for_update_clause )? )
			{
			match(input,SELECT_STATEMENT,FOLLOW_SELECT_STATEMENT_in_select_statement4706); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:707:29: ( subquery_factoring_clause )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==SQL92_RESERVED_WITH) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// PLSQLPrinter.g:707:29: subquery_factoring_clause
					{
					pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement4708);
					subquery_factoring_clause142=subquery_factoring_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_subquery_in_select_statement4711);
			subquery143=subquery();
			state._fsp--;

			// PLSQLPrinter.g:707:65: ( order_by_clause )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==SQL92_RESERVED_ORDER) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// PLSQLPrinter.g:707:65: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_select_statement4713);
					order_by_clause144=order_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:707:82: ( for_update_clause )?
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==SQL92_RESERVED_FOR) ) {
				alt67=1;
			}
			switch (alt67) {
				case 1 :
					// PLSQLPrinter.g:707:82: for_update_clause
					{
					pushFollow(FOLLOW_for_update_clause_in_select_statement4716);
					for_update_clause145=for_update_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 708:5: -> select_statement(subquery_factoring_clause=$subquery_factoring_clause.stsubquery=$subquery.storder_by_clause=$order_by_clause.stfor_update_clause=$for_update_clause.st)
			{
				retval.st = templateLib.getInstanceOf("select_statement",new STAttrMap().put("subquery_factoring_clause", (subquery_factoring_clause142!=null?((StringTemplate)subquery_factoring_clause142.getTemplate()):null)).put("subquery", (subquery143!=null?((StringTemplate)subquery143.getTemplate()):null)).put("order_by_clause", (order_by_clause144!=null?((StringTemplate)order_by_clause144.getTemplate()):null)).put("for_update_clause", (for_update_clause145!=null?((StringTemplate)for_update_clause145.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "select_statement"


	public static class subquery_factoring_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_factoring_clause"
	// PLSQLPrinter.g:716:1: subquery_factoring_clause : ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ ) -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements);
	public final PLSQLPrinter.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException {
		PLSQLPrinter.subquery_factoring_clause_return retval = new PLSQLPrinter.subquery_factoring_clause_return();
		retval.start = input.LT(1);

		CommonTree RECURSIVE_VK146=null;
		List<Object> list_factoring_elements=null;
		RuleReturnScope factoring_elements = null;
		try {
			// PLSQLPrinter.g:717:5: ( ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ ) -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements))
			// PLSQLPrinter.g:717:10: ^( SQL92_RESERVED_WITH ( RECURSIVE_VK )? (factoring_elements+= factoring_element )+ )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause4819); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:717:32: ( RECURSIVE_VK )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==RECURSIVE_VK) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// PLSQLPrinter.g:717:32: RECURSIVE_VK
					{
					RECURSIVE_VK146=(CommonTree)match(input,RECURSIVE_VK,FOLLOW_RECURSIVE_VK_in_subquery_factoring_clause4821); 
					}
					break;

			}

			// PLSQLPrinter.g:717:64: (factoring_elements+= factoring_element )+
			int cnt69=0;
			loop69:
			while (true) {
				int alt69=2;
				int LA69_0 = input.LA(1);
				if ( (LA69_0==FACTORING) ) {
					alt69=1;
				}

				switch (alt69) {
				case 1 :
					// PLSQLPrinter.g:717:64: factoring_elements+= factoring_element
					{
					pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause4826);
					factoring_elements=factoring_element();
					state._fsp--;

					if (list_factoring_elements==null) list_factoring_elements=new ArrayList<Object>();
					list_factoring_elements.add(factoring_elements.getTemplate());
					}
					break;

				default :
					if ( cnt69 >= 1 ) break loop69;
					EarlyExitException eee = new EarlyExitException(69, input);
					throw eee;
				}
				cnt69++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 718:5: -> subquery_factoring_clause(is_recursive=$RECURSIVE_VK != nullfactoring_elements=$factoring_elements)
			{
				retval.st = templateLib.getInstanceOf("subquery_factoring_clause",new STAttrMap().put("is_recursive", RECURSIVE_VK146 != null).put("factoring_elements", list_factoring_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_factoring_clause"


	public static class factoring_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "factoring_element"
	// PLSQLPrinter.g:721:1: factoring_element : ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? ) -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st);
	public final PLSQLPrinter.factoring_element_return factoring_element() throws RecognitionException {
		PLSQLPrinter.factoring_element_return retval = new PLSQLPrinter.factoring_element_return();
		retval.start = input.LT(1);

		List<Object> list_column_names=null;
		TreeRuleReturnScope query_name147 =null;
		TreeRuleReturnScope subquery148 =null;
		TreeRuleReturnScope order_by_clause149 =null;
		RuleReturnScope column_names = null;
		try {
			// PLSQLPrinter.g:722:5: ( ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? ) -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st))
			// PLSQLPrinter.g:722:10: ^( FACTORING query_name (column_names+= column_name )* subquery ( order_by_clause )? )
			{
			match(input,FACTORING,FOLLOW_FACTORING_in_factoring_element4869); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_name_in_factoring_element4871);
			query_name147=query_name();
			state._fsp--;

			// PLSQLPrinter.g:722:45: (column_names+= column_name )*
			loop70:
			while (true) {
				int alt70=2;
				int LA70_0 = input.LA(1);
				if ( (LA70_0==COLUMN_NAME) ) {
					alt70=1;
				}

				switch (alt70) {
				case 1 :
					// PLSQLPrinter.g:722:45: column_names+= column_name
					{
					pushFollow(FOLLOW_column_name_in_factoring_element4875);
					column_names=column_name();
					state._fsp--;

					if (list_column_names==null) list_column_names=new ArrayList<Object>();
					list_column_names.add(column_names.getTemplate());
					}
					break;

				default :
					break loop70;
				}
			}

			pushFollow(FOLLOW_subquery_in_factoring_element4878);
			subquery148=subquery();
			state._fsp--;

			// PLSQLPrinter.g:722:69: ( order_by_clause )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==SQL92_RESERVED_ORDER) ) {
				alt71=1;
			}
			switch (alt71) {
				case 1 :
					// PLSQLPrinter.g:722:69: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_factoring_element4880);
					order_by_clause149=order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 723:5: -> factoring_element(query_name=$query_name.stcolumn_names=$column_namessubquery=$subquery.storder_by_clause=$order_by_clause.st)
			{
				retval.st = templateLib.getInstanceOf("factoring_element",new STAttrMap().put("query_name", (query_name147!=null?((StringTemplate)query_name147.getTemplate()):null)).put("column_names", list_column_names).put("subquery", (subquery148!=null?((StringTemplate)subquery148.getTemplate()):null)).put("order_by_clause", (order_by_clause149!=null?((StringTemplate)order_by_clause149.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "factoring_element"


	public static class subquery_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery"
	// PLSQLPrinter.g:728:1: subquery : ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts);
	public final PLSQLPrinter.subquery_return subquery() throws RecognitionException {
		PLSQLPrinter.subquery_return retval = new PLSQLPrinter.subquery_return();
		retval.start = input.LT(1);

		List<Object> list_parts=null;
		TreeRuleReturnScope subquery_basic_elements150 =null;
		RuleReturnScope parts = null;
		try {
			// PLSQLPrinter.g:729:5: ( ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* ) -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts))
			// PLSQLPrinter.g:729:10: ^( SUBQUERY subquery_basic_elements (parts+= subquery_operation_part )* )
			{
			match(input,SUBQUERY,FOLLOW_SUBQUERY_in_subquery4960); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_subquery_basic_elements_in_subquery4962);
			subquery_basic_elements150=subquery_basic_elements();
			state._fsp--;

			// PLSQLPrinter.g:729:50: (parts+= subquery_operation_part )*
			loop72:
			while (true) {
				int alt72=2;
				int LA72_0 = input.LA(1);
				if ( (LA72_0==PLSQL_RESERVED_MINUS||LA72_0==SQL92_RESERVED_INTERSECT||LA72_0==SQL92_RESERVED_UNION) ) {
					alt72=1;
				}

				switch (alt72) {
				case 1 :
					// PLSQLPrinter.g:729:50: parts+= subquery_operation_part
					{
					pushFollow(FOLLOW_subquery_operation_part_in_subquery4966);
					parts=subquery_operation_part();
					state._fsp--;

					if (list_parts==null) list_parts=new ArrayList<Object>();
					list_parts.add(parts.getTemplate());
					}
					break;

				default :
					break loop72;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 730:5: -> subquery(subquery_basic_elements=$subquery_basic_elements.stsubquery_operation_parts=$parts)
			{
				retval.st = templateLib.getInstanceOf("subquery",new STAttrMap().put("subquery_basic_elements", (subquery_basic_elements150!=null?((StringTemplate)subquery_basic_elements150.getTemplate()):null)).put("subquery_operation_parts", list_parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery"


	public static class subquery_operation_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_operation_part"
	// PLSQLPrinter.g:733:1: subquery_operation_part : ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st);
	public final PLSQLPrinter.subquery_operation_part_return subquery_operation_part() throws RecognitionException {
		PLSQLPrinter.subquery_operation_part_return retval = new PLSQLPrinter.subquery_operation_part_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ALL151=null;
		TreeRuleReturnScope subquery_basic_elements152 =null;

		 StringTemplate op = null; 
		try {
			// PLSQLPrinter.g:735:5: ( ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st))
			// PLSQLPrinter.g:735:10: ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements )
			{
			// PLSQLPrinter.g:736:13: ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS )
			int alt73=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_UNION:
				{
				alt73=1;
				}
				break;
			case SQL92_RESERVED_INTERSECT:
				{
				alt73=2;
				}
				break;
			case PLSQL_RESERVED_MINUS:
				{
				alt73=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 73, 0, input);
				throw nvae;
			}
			switch (alt73) {
				case 1 :
					// PLSQLPrinter.g:737:15: SQL92_RESERVED_UNION
					{
					match(input,SQL92_RESERVED_UNION,FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part5043); 
					 op = templateLib.getInstanceOf("subquery_operation_part_union"); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:738:16: SQL92_RESERVED_INTERSECT
					{
					match(input,SQL92_RESERVED_INTERSECT,FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part5062); 
					 op = templateLib.getInstanceOf("subquery_operation_part_intersect"); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:739:16: PLSQL_RESERVED_MINUS
					{
					match(input,PLSQL_RESERVED_MINUS,FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part5081); 
					 op = templateLib.getInstanceOf("subquery_operation_part_minus"); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:741:13: ( SQL92_RESERVED_ALL )?
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==SQL92_RESERVED_ALL) ) {
				alt74=1;
			}
			switch (alt74) {
				case 1 :
					// PLSQLPrinter.g:741:13: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL151=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part5111); 
					}
					break;

			}

			pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part5114);
			subquery_basic_elements152=subquery_basic_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 743:5: -> subquery_operation_part(operator=opis_all=$SQL92_RESERVED_ALL != nullsubquery_basic_elements=$subquery_basic_elements.st)
			{
				retval.st = templateLib.getInstanceOf("subquery_operation_part",new STAttrMap().put("operator", op).put("is_all", SQL92_RESERVED_ALL151 != null).put("subquery_basic_elements", (subquery_basic_elements152!=null?((StringTemplate)subquery_basic_elements152.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_operation_part"


	public static class subquery_basic_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_basic_elements"
	// PLSQLPrinter.g:746:1: subquery_basic_elements : ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st));
	public final PLSQLPrinter.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException {
		PLSQLPrinter.subquery_basic_elements_return retval = new PLSQLPrinter.subquery_basic_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_block153 =null;
		TreeRuleReturnScope subquery154 =null;

		try {
			// PLSQLPrinter.g:747:5: ( query_block -> { $query_block.st }| subquery -> in_parens(val=$subquery.st))
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==SQL92_RESERVED_SELECT) ) {
				alt75=1;
			}
			else if ( (LA75_0==SUBQUERY) ) {
				alt75=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}

			switch (alt75) {
				case 1 :
					// PLSQLPrinter.g:747:10: query_block
					{
					pushFollow(FOLLOW_query_block_in_subquery_basic_elements5171);
					query_block153=query_block();
					state._fsp--;

					// TEMPLATE REWRITE
					// 747:22: -> { $query_block.st }
					{
						retval.st =  (query_block153!=null?((StringTemplate)query_block153.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:748:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_subquery_basic_elements5186);
					subquery154=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 749:5: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery154!=null?((StringTemplate)subquery154.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_basic_elements"


	public static class query_block_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_block"
	// PLSQLPrinter.g:752:1: query_block : ^( SQL92_RESERVED_SELECT ( from_clause )? ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st);
	public final PLSQLPrinter.query_block_return query_block() throws RecognitionException {
		PLSQLPrinter.query_block_return retval = new PLSQLPrinter.query_block_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_DISTINCT155=null;
		CommonTree SQL92_RESERVED_UNIQUE156=null;
		CommonTree SQL92_RESERVED_ALL157=null;
		CommonTree ASTERISK158=null;
		List<Object> list_selected=null;
		TreeRuleReturnScope into_clause159 =null;
		TreeRuleReturnScope from_clause160 =null;
		TreeRuleReturnScope where_clause161 =null;
		TreeRuleReturnScope hierarchical_query_clause162 =null;
		TreeRuleReturnScope group_by_clause163 =null;
		TreeRuleReturnScope model_clause164 =null;
		RuleReturnScope selected = null;
		try {
			// PLSQLPrinter.g:753:5: ( ^( SQL92_RESERVED_SELECT ( from_clause )? ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? ) -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st))
			// PLSQLPrinter.g:753:10: ^( SQL92_RESERVED_SELECT ( from_clause )? ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( model_clause )? )
			{
			match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_query_block5222); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:754:13: ( from_clause )?
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==SQL92_RESERVED_FROM) ) {
				alt76=1;
			}
			switch (alt76) {
				case 1 :
					// PLSQLPrinter.g:754:13: from_clause
					{
					pushFollow(FOLLOW_from_clause_in_query_block5237);
					from_clause160=from_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:755:13: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
			int alt77=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_DISTINCT:
					{
					alt77=1;
					}
					break;
				case SQL92_RESERVED_UNIQUE:
					{
					alt77=2;
					}
					break;
				case SQL92_RESERVED_ALL:
					{
					alt77=3;
					}
					break;
			}
			switch (alt77) {
				case 1 :
					// PLSQLPrinter.g:755:14: SQL92_RESERVED_DISTINCT
					{
					SQL92_RESERVED_DISTINCT155=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block5254); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:755:38: SQL92_RESERVED_UNIQUE
					{
					SQL92_RESERVED_UNIQUE156=(CommonTree)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block5256); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:755:60: SQL92_RESERVED_ALL
					{
					SQL92_RESERVED_ALL157=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_query_block5258); 
					}
					break;

			}

			// PLSQLPrinter.g:756:13: ( ASTERISK | ^( SELECT_LIST (selected+= selected_element )+ ) )
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==ASTERISK) ) {
				alt79=1;
			}
			else if ( (LA79_0==SELECT_LIST) ) {
				alt79=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 79, 0, input);
				throw nvae;
			}

			switch (alt79) {
				case 1 :
					// PLSQLPrinter.g:756:18: ASTERISK
					{
					ASTERISK158=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block5280); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:757:18: ^( SELECT_LIST (selected+= selected_element )+ )
					{
					match(input,SELECT_LIST,FOLLOW_SELECT_LIST_in_query_block5300); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:757:40: (selected+= selected_element )+
					int cnt78=0;
					loop78:
					while (true) {
						int alt78=2;
						int LA78_0 = input.LA(1);
						if ( (LA78_0==SELECT_ITEM) ) {
							alt78=1;
						}

						switch (alt78) {
						case 1 :
							// PLSQLPrinter.g:757:40: selected+= selected_element
							{
							pushFollow(FOLLOW_selected_element_in_query_block5304);
							selected=selected_element();
							state._fsp--;

							if (list_selected==null) list_selected=new ArrayList<Object>();
							list_selected.add(selected.getTemplate());
							}
							break;

						default :
							if ( cnt78 >= 1 ) break loop78;
							EarlyExitException eee = new EarlyExitException(78, input);
							throw eee;
						}
						cnt78++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			// PLSQLPrinter.g:759:13: ( into_clause )?
			int alt80=2;
			int LA80_0 = input.LA(1);
			if ( (LA80_0==SQL92_RESERVED_INTO||LA80_0==BULK_VK) ) {
				alt80=1;
			}
			switch (alt80) {
				case 1 :
					// PLSQLPrinter.g:759:13: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_query_block5334);
					into_clause159=into_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:759:26: ( where_clause )?
			int alt81=2;
			int LA81_0 = input.LA(1);
			if ( (LA81_0==SQL92_RESERVED_WHERE) ) {
				alt81=1;
			}
			switch (alt81) {
				case 1 :
					// PLSQLPrinter.g:759:26: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_query_block5337);
					where_clause161=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:759:40: ( hierarchical_query_clause )?
			int alt82=2;
			int LA82_0 = input.LA(1);
			if ( (LA82_0==HIERARCHICAL) ) {
				alt82=1;
			}
			switch (alt82) {
				case 1 :
					// PLSQLPrinter.g:759:40: hierarchical_query_clause
					{
					pushFollow(FOLLOW_hierarchical_query_clause_in_query_block5340);
					hierarchical_query_clause162=hierarchical_query_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:760:13: ( group_by_clause )?
			int alt83=2;
			int LA83_0 = input.LA(1);
			if ( (LA83_0==SQL92_RESERVED_GROUP) ) {
				alt83=1;
			}
			switch (alt83) {
				case 1 :
					// PLSQLPrinter.g:760:13: group_by_clause
					{
					pushFollow(FOLLOW_group_by_clause_in_query_block5356);
					group_by_clause163=group_by_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:760:30: ( model_clause )?
			int alt84=2;
			int LA84_0 = input.LA(1);
			if ( (LA84_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt84=1;
			}
			switch (alt84) {
				case 1 :
					// PLSQLPrinter.g:760:30: model_clause
					{
					pushFollow(FOLLOW_model_clause_in_query_block5359);
					model_clause164=model_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 762:5: -> query_block(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullselected_elements=$selectedinto_clause=$into_clause.stfrom_clause=$from_clause.stwhere_clause=$where_clause.sthierarchical_query_clause=$hierarchical_query_clause.stgroup_by_clause=$group_by_clause.stmodel_clause=$model_clause.st)
			{
				retval.st = templateLib.getInstanceOf("query_block",new STAttrMap().put("is_distinct", SQL92_RESERVED_DISTINCT155 != null).put("is_unique", SQL92_RESERVED_UNIQUE156 != null).put("is_all", SQL92_RESERVED_ALL157 != null).put("is_asterisk", ASTERISK158 != null).put("selected_elements", list_selected).put("into_clause", (into_clause159!=null?((StringTemplate)into_clause159.getTemplate()):null)).put("from_clause", (from_clause160!=null?((StringTemplate)from_clause160.getTemplate()):null)).put("where_clause", (where_clause161!=null?((StringTemplate)where_clause161.getTemplate()):null)).put("hierarchical_query_clause", (hierarchical_query_clause162!=null?((StringTemplate)hierarchical_query_clause162.getTemplate()):null)).put("group_by_clause", (group_by_clause163!=null?((StringTemplate)group_by_clause163.getTemplate()):null)).put("model_clause", (model_clause164!=null?((StringTemplate)model_clause164.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_block"


	public static class selected_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_element"
	// PLSQLPrinter.g:777:1: selected_element : ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.selected_element_return selected_element() throws RecognitionException {
		PLSQLPrinter.selected_element_return retval = new PLSQLPrinter.selected_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression165 =null;
		TreeRuleReturnScope alias166 =null;

		try {
			// PLSQLPrinter.g:778:5: ( ^( SELECT_ITEM expression ( alias )? ) -> selected_element(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:778:10: ^( SELECT_ITEM expression ( alias )? )
			{
			match(input,SELECT_ITEM,FOLLOW_SELECT_ITEM_in_selected_element5588); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_selected_element5590);
			expression165=expression();
			state._fsp--;

			// PLSQLPrinter.g:778:35: ( alias )?
			int alt85=2;
			int LA85_0 = input.LA(1);
			if ( (LA85_0==COLUMN_ALIAS||LA85_0==TABLE_ALIAS) ) {
				alt85=1;
			}
			switch (alt85) {
				case 1 :
					// PLSQLPrinter.g:778:35: alias
					{
					pushFollow(FOLLOW_alias_in_selected_element5592);
					alias166=alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 779:5: -> selected_element(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("selected_element",new STAttrMap().put("expression", (expression165!=null?((StringTemplate)expression165.getTemplate()):null)).put("alias", (alias166!=null?((StringTemplate)alias166.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_element"


	public static class from_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "from_clause"
	// PLSQLPrinter.g:782:1: from_clause : ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs);
	public final PLSQLPrinter.from_clause_return from_clause() throws RecognitionException {
		PLSQLPrinter.from_clause_return retval = new PLSQLPrinter.from_clause_return();
		retval.start = input.LT(1);

		List<Object> list_refs=null;
		RuleReturnScope refs = null;
		try {
			// PLSQLPrinter.g:783:5: ( ^( SQL92_RESERVED_FROM (refs+= table_ref )+ ) -> from_clause(table_refs=$refs))
			// PLSQLPrinter.g:783:10: ^( SQL92_RESERVED_FROM (refs+= table_ref )+ )
			{
			match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_clause5635); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:783:36: (refs+= table_ref )+
			int cnt86=0;
			loop86:
			while (true) {
				int alt86=2;
				int LA86_0 = input.LA(1);
				if ( (LA86_0==TABLE_REF) ) {
					alt86=1;
				}

				switch (alt86) {
				case 1 :
					// PLSQLPrinter.g:783:36: refs+= table_ref
					{
					pushFollow(FOLLOW_table_ref_in_from_clause5639);
					refs=table_ref();
					state._fsp--;

					if (list_refs==null) list_refs=new ArrayList<Object>();
					list_refs.add(refs.getTemplate());
					}
					break;

				default :
					if ( cnt86 >= 1 ) break loop86;
					EarlyExitException eee = new EarlyExitException(86, input);
					throw eee;
				}
				cnt86++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 784:5: -> from_clause(table_refs=$refs)
			{
				retval.st = templateLib.getInstanceOf("from_clause",new STAttrMap().put("table_refs", list_refs));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "from_clause"


	public static class table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref"
	// PLSQLPrinter.g:787:1: table_ref : ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins);
	public final PLSQLPrinter.table_ref_return table_ref() throws RecognitionException {
		PLSQLPrinter.table_ref_return retval = new PLSQLPrinter.table_ref_return();
		retval.start = input.LT(1);

		List<Object> list_joins=null;
		TreeRuleReturnScope table_ref_aux167 =null;
		RuleReturnScope joins = null;
		try {
			// PLSQLPrinter.g:788:5: ( ^( TABLE_REF table_ref_aux (joins+= join_clause )* ) -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins))
			// PLSQLPrinter.g:788:10: ^( TABLE_REF table_ref_aux (joins+= join_clause )* )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_table_ref5677); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_ref_aux_in_table_ref5679);
			table_ref_aux167=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:788:41: (joins+= join_clause )*
			loop87:
			while (true) {
				int alt87=2;
				int LA87_0 = input.LA(1);
				if ( (LA87_0==JOIN_DEF) ) {
					alt87=1;
				}

				switch (alt87) {
				case 1 :
					// PLSQLPrinter.g:788:41: joins+= join_clause
					{
					pushFollow(FOLLOW_join_clause_in_table_ref5683);
					joins=join_clause();
					state._fsp--;

					if (list_joins==null) list_joins=new ArrayList<Object>();
					list_joins.add(joins.getTemplate());
					}
					break;

				default :
					break loop87;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 789:5: -> table_ref(table_ref_aux=$table_ref_aux.stjoin_clauses=$joins)
			{
				retval.st = templateLib.getInstanceOf("table_ref",new STAttrMap().put("table_ref_aux", (table_ref_aux167!=null?((StringTemplate)table_ref_aux167.getTemplate()):null)).put("join_clauses", list_joins));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref"


	public static class table_ref_aux_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_ref_aux"
	// PLSQLPrinter.g:792:1: table_ref_aux : ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st);
	public final PLSQLPrinter.table_ref_aux_return table_ref_aux() throws RecognitionException {
		PLSQLPrinter.table_ref_aux_return retval = new PLSQLPrinter.table_ref_aux_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK168=null;
		TreeRuleReturnScope dml_table_expression_clause169 =null;
		TreeRuleReturnScope pivot_clause170 =null;
		TreeRuleReturnScope unpivot_clause171 =null;
		TreeRuleReturnScope flashback_query_clause172 =null;
		TreeRuleReturnScope alias173 =null;

		try {
			// PLSQLPrinter.g:793:5: ( ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* ) -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st))
			// PLSQLPrinter.g:793:10: ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK | pivot_clause | unpivot_clause )? ( flashback_query_clause )* )
			{
			match(input,TABLE_REF_ELEMENT,FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux5726); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:793:30: ( alias )?
			int alt88=2;
			int LA88_0 = input.LA(1);
			if ( (LA88_0==COLUMN_ALIAS||LA88_0==TABLE_ALIAS) ) {
				alt88=1;
			}
			switch (alt88) {
				case 1 :
					// PLSQLPrinter.g:793:30: alias
					{
					pushFollow(FOLLOW_alias_in_table_ref_aux5728);
					alias173=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux5731);
			dml_table_expression_clause169=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:793:65: ( ONLY_VK | pivot_clause | unpivot_clause )?
			int alt89=4;
			switch ( input.LA(1) ) {
				case ONLY_VK:
					{
					alt89=1;
					}
					break;
				case PIVOT_VK:
					{
					alt89=2;
					}
					break;
				case UNPIVOT_VK:
					{
					alt89=3;
					}
					break;
			}
			switch (alt89) {
				case 1 :
					// PLSQLPrinter.g:793:66: ONLY_VK
					{
					ONLY_VK168=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_table_ref_aux5734); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:793:74: pivot_clause
					{
					pushFollow(FOLLOW_pivot_clause_in_table_ref_aux5736);
					pivot_clause170=pivot_clause();
					state._fsp--;

					}
					break;
				case 3 :
					// PLSQLPrinter.g:793:87: unpivot_clause
					{
					pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux5738);
					unpivot_clause171=unpivot_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:793:104: ( flashback_query_clause )*
			loop90:
			while (true) {
				int alt90=2;
				int LA90_0 = input.LA(1);
				if ( (LA90_0==SQL92_RESERVED_AS||LA90_0==VERSIONS_VK) ) {
					alt90=1;
				}

				switch (alt90) {
				case 1 :
					// PLSQLPrinter.g:793:104: flashback_query_clause
					{
					pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux5742);
					flashback_query_clause172=flashback_query_clause();
					state._fsp--;

					}
					break;

				default :
					break loop90;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 794:5: -> table_ref_aux(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.stpivot_clause=$pivot_clause.stunpivot_clause=$unpivot_clause.stflashback_query_clause=$flashback_query_clause.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("table_ref_aux",new STAttrMap().put("is_only", ONLY_VK168 != null).put("dml_table_expression_clause", (dml_table_expression_clause169!=null?((StringTemplate)dml_table_expression_clause169.getTemplate()):null)).put("pivot_clause", (pivot_clause170!=null?((StringTemplate)pivot_clause170.getTemplate()):null)).put("unpivot_clause", (unpivot_clause171!=null?((StringTemplate)unpivot_clause171.getTemplate()):null)).put("flashback_query_clause", (flashback_query_clause172!=null?((StringTemplate)flashback_query_clause172.getTemplate()):null)).put("alias", (alias173!=null?((StringTemplate)alias173.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_ref_aux"


	public static class join_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_clause"
	// PLSQLPrinter.g:800:1: join_clause : ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st);
	public final PLSQLPrinter.join_clause_return join_clause() throws RecognitionException {
		PLSQLPrinter.join_clause_return retval = new PLSQLPrinter.join_clause_return();
		retval.start = input.LT(1);

		CommonTree CROSS_VK174=null;
		CommonTree NATURAL_VK175=null;
		CommonTree INNER_VK176=null;
		CommonTree LEFT_VK177=null;
		CommonTree RIGHT_VK178=null;
		CommonTree FULL_VK179=null;
		TreeRuleReturnScope qpc1 =null;
		TreeRuleReturnScope qpc2 =null;
		TreeRuleReturnScope table_ref_aux180 =null;
		TreeRuleReturnScope join_on_part181 =null;
		TreeRuleReturnScope join_using_part182 =null;

		try {
			// PLSQLPrinter.g:801:5: ( ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? ) -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st))
			// PLSQLPrinter.g:801:10: ^( JOIN_DEF (qpc1= query_partition_clause )? ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux (qpc2= query_partition_clause )? ( join_on_part | join_using_part )? )
			{
			match(input,JOIN_DEF,FOLLOW_JOIN_DEF_in_join_clause5839); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:802:17: (qpc1= query_partition_clause )?
			int alt91=2;
			int LA91_0 = input.LA(1);
			if ( (LA91_0==PARTITION_VK) ) {
				alt91=1;
			}
			switch (alt91) {
				case 1 :
					// PLSQLPrinter.g:802:17: qpc1= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause5855);
					qpc1=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:803:13: ( CROSS_VK | NATURAL_VK )?
			int alt92=3;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==CROSS_VK) ) {
				alt92=1;
			}
			else if ( (LA92_0==NATURAL_VK) ) {
				alt92=2;
			}
			switch (alt92) {
				case 1 :
					// PLSQLPrinter.g:803:14: CROSS_VK
					{
					CROSS_VK174=(CommonTree)match(input,CROSS_VK,FOLLOW_CROSS_VK_in_join_clause5871); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:803:23: NATURAL_VK
					{
					NATURAL_VK175=(CommonTree)match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_join_clause5873); 
					}
					break;

			}

			// PLSQLPrinter.g:803:36: ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )?
			int alt93=5;
			switch ( input.LA(1) ) {
				case INNER_VK:
					{
					alt93=1;
					}
					break;
				case FULL_VK:
					{
					alt93=2;
					}
					break;
				case LEFT_VK:
					{
					alt93=3;
					}
					break;
				case RIGHT_VK:
					{
					alt93=4;
					}
					break;
			}
			switch (alt93) {
				case 1 :
					// PLSQLPrinter.g:803:37: INNER_VK
					{
					INNER_VK176=(CommonTree)match(input,INNER_VK,FOLLOW_INNER_VK_in_join_clause5878); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:803:46: FULL_VK
					{
					FULL_VK179=(CommonTree)match(input,FULL_VK,FOLLOW_FULL_VK_in_join_clause5880); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:803:54: LEFT_VK
					{
					LEFT_VK177=(CommonTree)match(input,LEFT_VK,FOLLOW_LEFT_VK_in_join_clause5882); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:803:62: RIGHT_VK
					{
					RIGHT_VK178=(CommonTree)match(input,RIGHT_VK,FOLLOW_RIGHT_VK_in_join_clause5884); 
					}
					break;

			}

			pushFollow(FOLLOW_table_ref_aux_in_join_clause5888);
			table_ref_aux180=table_ref_aux();
			state._fsp--;

			// PLSQLPrinter.g:804:17: (qpc2= query_partition_clause )?
			int alt94=2;
			int LA94_0 = input.LA(1);
			if ( (LA94_0==PARTITION_VK) ) {
				alt94=1;
			}
			switch (alt94) {
				case 1 :
					// PLSQLPrinter.g:804:17: qpc2= query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause5904);
					qpc2=query_partition_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:805:13: ( join_on_part | join_using_part )?
			int alt95=3;
			int LA95_0 = input.LA(1);
			if ( (LA95_0==SQL92_RESERVED_ON) ) {
				alt95=1;
			}
			else if ( (LA95_0==PLSQL_NON_RESERVED_USING) ) {
				alt95=2;
			}
			switch (alt95) {
				case 1 :
					// PLSQLPrinter.g:805:14: join_on_part
					{
					pushFollow(FOLLOW_join_on_part_in_join_clause5920);
					join_on_part181=join_on_part();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:805:27: join_using_part
					{
					pushFollow(FOLLOW_join_using_part_in_join_clause5922);
					join_using_part182=join_using_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 806:5: -> join_clause(qpc1=$qpc1.stis_cross=$CROSS_VK != nullis_natural=$NATURAL_VK != nullis_inner=$INNER_VK != nullis_left=$LEFT_VK != nullis_right=$RIGHT_VK != nullis_full=$FULL_VK != nulltable_ref_aux=$table_ref_aux.stqpc2=$qpc2.stjoin_on_part=$join_on_part.stjoin_using_part=$join_using_part.st)
			{
				retval.st = templateLib.getInstanceOf("join_clause",new STAttrMap().put("qpc1", (qpc1!=null?((StringTemplate)qpc1.getTemplate()):null)).put("is_cross", CROSS_VK174 != null).put("is_natural", NATURAL_VK175 != null).put("is_inner", INNER_VK176 != null).put("is_left", LEFT_VK177 != null).put("is_right", RIGHT_VK178 != null).put("is_full", FULL_VK179 != null).put("table_ref_aux", (table_ref_aux180!=null?((StringTemplate)table_ref_aux180.getTemplate()):null)).put("qpc2", (qpc2!=null?((StringTemplate)qpc2.getTemplate()):null)).put("join_on_part", (join_on_part181!=null?((StringTemplate)join_on_part181.getTemplate()):null)).put("join_using_part", (join_using_part182!=null?((StringTemplate)join_using_part182.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_clause"


	public static class join_on_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_on_part"
	// PLSQLPrinter.g:812:1: join_on_part : ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st);
	public final PLSQLPrinter.join_on_part_return join_on_part() throws RecognitionException {
		PLSQLPrinter.join_on_part_return retval = new PLSQLPrinter.join_on_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression183 =null;

		try {
			// PLSQLPrinter.g:813:5: ( ^( SQL92_RESERVED_ON expression ) -> join_on_part(expression=$expression.st))
			// PLSQLPrinter.g:813:10: ^( SQL92_RESERVED_ON expression )
			{
			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_join_on_part6048); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_join_on_part6050);
			expression183=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 814:5: -> join_on_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("join_on_part",new STAttrMap().put("expression", (expression183!=null?((StringTemplate)expression183.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_on_part"


	public static class join_using_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "join_using_part"
	// PLSQLPrinter.g:817:1: join_using_part : ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\";
	public final PLSQLPrinter.join_using_part_return join_using_part() throws RecognitionException {
		PLSQLPrinter.join_using_part_return retval = new PLSQLPrinter.join_using_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:818:5: ( ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) -> template( \"not implemented: join_using_part\")
			// PLSQLPrinter.g:818:10: ^( PLSQL_NON_RESERVED_USING ( column_name )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part6087); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:818:37: ( column_name )+
			int cnt96=0;
			loop96:
			while (true) {
				int alt96=2;
				int LA96_0 = input.LA(1);
				if ( (LA96_0==COLUMN_NAME) ) {
					alt96=1;
				}

				switch (alt96) {
				case 1 :
					// PLSQLPrinter.g:818:37: column_name
					{
					pushFollow(FOLLOW_column_name_in_join_using_part6089);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt96 >= 1 ) break loop96;
					EarlyExitException eee = new EarlyExitException(96, input);
					throw eee;
				}
				cnt96++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 819:5: -> template( \"not implemented: join_using_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: join_using_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "join_using_part"


	public static class query_partition_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause"
	// PLSQLPrinter.g:822:1: query_partition_clause : ^( PARTITION_VK query_partition_clause_impl ) -> query_partition_clause(impl=$query_partition_clause_impl.st);
	public final PLSQLPrinter.query_partition_clause_return query_partition_clause() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_return retval = new PLSQLPrinter.query_partition_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_partition_clause_impl184 =null;

		try {
			// PLSQLPrinter.g:823:5: ( ^( PARTITION_VK query_partition_clause_impl ) -> query_partition_clause(impl=$query_partition_clause_impl.st))
			// PLSQLPrinter.g:823:10: ^( PARTITION_VK query_partition_clause_impl )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_query_partition_clause6126); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_partition_clause_impl_in_query_partition_clause6128);
			query_partition_clause_impl184=query_partition_clause_impl();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 824:5: -> query_partition_clause(impl=$query_partition_clause_impl.st)
			{
				retval.st = templateLib.getInstanceOf("query_partition_clause",new STAttrMap().put("impl", (query_partition_clause_impl184!=null?((StringTemplate)query_partition_clause_impl184.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause"


	public static class query_partition_clause_impl_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_partition_clause_impl"
	// PLSQLPrinter.g:827:1: query_partition_clause_impl : ( subquery -> in_parens(val=$subquery.st)| expression_list -> { $expression_list.st }| ^( QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS (expressions+= expression )+ ) -> query_partition_clause_impl_expressions(expressions=$expressions));
	public final PLSQLPrinter.query_partition_clause_impl_return query_partition_clause_impl() throws RecognitionException {
		PLSQLPrinter.query_partition_clause_impl_return retval = new PLSQLPrinter.query_partition_clause_impl_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		TreeRuleReturnScope subquery185 =null;
		TreeRuleReturnScope expression_list186 =null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:828:5: ( subquery -> in_parens(val=$subquery.st)| expression_list -> { $expression_list.st }| ^( QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS (expressions+= expression )+ ) -> query_partition_clause_impl_expressions(expressions=$expressions))
			int alt98=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt98=1;
				}
				break;
			case EXPR_LIST:
				{
				alt98=2;
				}
				break;
			case QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS:
				{
				alt98=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 98, 0, input);
				throw nvae;
			}
			switch (alt98) {
				case 1 :
					// PLSQLPrinter.g:828:9: subquery
					{
					pushFollow(FOLLOW_subquery_in_query_partition_clause_impl6167);
					subquery185=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 828:18: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery185!=null?((StringTemplate)subquery185.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:829:11: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_query_partition_clause_impl6188);
					expression_list186=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 829:27: -> { $expression_list.st }
					{
						retval.st =  (expression_list186!=null?((StringTemplate)expression_list186.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:830:11: ^( QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS (expressions+= expression )+ )
					{
					match(input,QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS,FOLLOW_QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS_in_query_partition_clause_impl6205); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:830:64: (expressions+= expression )+
					int cnt97=0;
					loop97:
					while (true) {
						int alt97=2;
						int LA97_0 = input.LA(1);
						if ( (LA97_0==EXPR||LA97_0==LOGIC_EXPR) ) {
							alt97=1;
						}

						switch (alt97) {
						case 1 :
							// PLSQLPrinter.g:830:64: expressions+= expression
							{
							pushFollow(FOLLOW_expression_in_query_partition_clause_impl6209);
							expressions=expression();
							state._fsp--;

							if (list_expressions==null) list_expressions=new ArrayList<Object>();
							list_expressions.add(expressions.getTemplate());
							}
							break;

						default :
							if ( cnt97 >= 1 ) break loop97;
							EarlyExitException eee = new EarlyExitException(97, input);
							throw eee;
						}
						cnt97++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 831:11: -> query_partition_clause_impl_expressions(expressions=$expressions)
					{
						retval.st = templateLib.getInstanceOf("query_partition_clause_impl_expressions",new STAttrMap().put("expressions", list_expressions));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_partition_clause_impl"


	public static class flashback_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "flashback_query_clause"
	// PLSQLPrinter.g:834:1: flashback_query_clause : ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\";
	public final PLSQLPrinter.flashback_query_clause_return flashback_query_clause() throws RecognitionException {
		PLSQLPrinter.flashback_query_clause_return retval = new PLSQLPrinter.flashback_query_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:835:5: ( ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) -> template( \"not implemented: flashback_query_clause\")
			// PLSQLPrinter.g:835:10: ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression )
			{
			// PLSQLPrinter.g:835:12: ( VERSIONS_VK | SQL92_RESERVED_AS )
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==VERSIONS_VK) ) {
				alt99=1;
			}
			else if ( (LA99_0==SQL92_RESERVED_AS) ) {
				alt99=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 99, 0, input);
				throw nvae;
			}

			switch (alt99) {
				case 1 :
					// PLSQLPrinter.g:835:13: VERSIONS_VK
					{
					match(input,VERSIONS_VK,FOLLOW_VERSIONS_VK_in_flashback_query_clause6252); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:835:25: SQL92_RESERVED_AS
					{
					match(input,SQL92_RESERVED_AS,FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause6254); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:835:44: ( SCN_VK | TIMESTAMP_VK )?
			int alt100=3;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==SCN_VK) ) {
				alt100=1;
			}
			else if ( (LA100_0==TIMESTAMP_VK) ) {
				alt100=2;
			}
			switch (alt100) {
				case 1 :
					// PLSQLPrinter.g:835:45: SCN_VK
					{
					match(input,SCN_VK,FOLLOW_SCN_VK_in_flashback_query_clause6258); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:835:52: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_flashback_query_clause6260); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_flashback_query_clause6264);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 836:5: -> template( \"not implemented: flashback_query_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: flashback_query_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "flashback_query_clause"


	public static class pivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_clause"
	// PLSQLPrinter.g:839:1: pivot_clause : ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\";
	public final PLSQLPrinter.pivot_clause_return pivot_clause() throws RecognitionException {
		PLSQLPrinter.pivot_clause_return retval = new PLSQLPrinter.pivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:840:5: ( ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) -> template( \"not implemented: pivot_clause\")
			// PLSQLPrinter.g:840:10: ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
			{
			match(input,PIVOT_VK,FOLLOW_PIVOT_VK_in_pivot_clause6301); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:840:21: ( XML_VK )?
			int alt101=2;
			int LA101_0 = input.LA(1);
			if ( (LA101_0==XML_VK) ) {
				alt101=1;
			}
			switch (alt101) {
				case 1 :
					// PLSQLPrinter.g:840:21: XML_VK
					{
					match(input,XML_VK,FOLLOW_XML_VK_in_pivot_clause6303); 
					}
					break;

			}

			// PLSQLPrinter.g:840:29: ( pivot_element )+
			int cnt102=0;
			loop102:
			while (true) {
				int alt102=2;
				int LA102_0 = input.LA(1);
				if ( (LA102_0==PIVOT_ELEMENT) ) {
					alt102=1;
				}

				switch (alt102) {
				case 1 :
					// PLSQLPrinter.g:840:29: pivot_element
					{
					pushFollow(FOLLOW_pivot_element_in_pivot_clause6306);
					pivot_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt102 >= 1 ) break loop102;
					EarlyExitException eee = new EarlyExitException(102, input);
					throw eee;
				}
				cnt102++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause6309);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause6311);
			pivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 841:5: -> template( \"not implemented: pivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_clause"


	public static class pivot_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_element"
	// PLSQLPrinter.g:844:1: pivot_element : ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\";
	public final PLSQLPrinter.pivot_element_return pivot_element() throws RecognitionException {
		PLSQLPrinter.pivot_element_return retval = new PLSQLPrinter.pivot_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:845:5: ( ^( PIVOT_ELEMENT ( alias )? expression ) -> template( \"not implemented: pivot_element\")
			// PLSQLPrinter.g:845:10: ^( PIVOT_ELEMENT ( alias )? expression )
			{
			match(input,PIVOT_ELEMENT,FOLLOW_PIVOT_ELEMENT_in_pivot_element6347); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:845:26: ( alias )?
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( (LA103_0==COLUMN_ALIAS||LA103_0==TABLE_ALIAS) ) {
				alt103=1;
			}
			switch (alt103) {
				case 1 :
					// PLSQLPrinter.g:845:26: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_element6349);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_pivot_element6352);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 846:5: -> template( \"not implemented: pivot_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_element"


	public static class pivot_for_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_for_clause"
	// PLSQLPrinter.g:849:1: pivot_for_clause : ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\";
	public final PLSQLPrinter.pivot_for_clause_return pivot_for_clause() throws RecognitionException {
		PLSQLPrinter.pivot_for_clause_return retval = new PLSQLPrinter.pivot_for_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:850:5: ( ^( SQL92_RESERVED_FOR ( column_name )+ ) -> template( \"not implemented: pivot_for_clause\")
			// PLSQLPrinter.g:850:10: ^( SQL92_RESERVED_FOR ( column_name )+ )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause6388); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:850:31: ( column_name )+
			int cnt104=0;
			loop104:
			while (true) {
				int alt104=2;
				int LA104_0 = input.LA(1);
				if ( (LA104_0==COLUMN_NAME) ) {
					alt104=1;
				}

				switch (alt104) {
				case 1 :
					// PLSQLPrinter.g:850:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_pivot_for_clause6390);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt104 >= 1 ) break loop104;
					EarlyExitException eee = new EarlyExitException(104, input);
					throw eee;
				}
				cnt104++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 851:5: -> template( \"not implemented: pivot_for_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_for_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_for_clause"


	public static class pivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause"
	// PLSQLPrinter.g:854:1: pivot_in_clause : ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\";
	public final PLSQLPrinter.pivot_in_clause_return pivot_in_clause() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_return retval = new PLSQLPrinter.pivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:855:5: ( ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) -> template( \"not implemented: pivot_in_clause\")
			// PLSQLPrinter.g:855:10: ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause6427); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:856:9: ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
			int alt107=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt107=1;
				}
				break;
			case ANY_MODE:
				{
				alt107=2;
				}
				break;
			case ELEMENTS_MODE:
				{
				alt107=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 107, 0, input);
				throw nvae;
			}
			switch (alt107) {
				case 1 :
					// PLSQLPrinter.g:856:14: subquery
					{
					pushFollow(FOLLOW_subquery_in_pivot_in_clause6443);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:857:14: ^( ANY_MODE ( SQL92_RESERVED_ANY )+ )
					{
					match(input,ANY_MODE,FOLLOW_ANY_MODE_in_pivot_in_clause6459); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:857:25: ( SQL92_RESERVED_ANY )+
					int cnt105=0;
					loop105:
					while (true) {
						int alt105=2;
						int LA105_0 = input.LA(1);
						if ( (LA105_0==SQL92_RESERVED_ANY) ) {
							alt105=1;
						}

						switch (alt105) {
						case 1 :
							// PLSQLPrinter.g:857:25: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause6461); 
							}
							break;

						default :
							if ( cnt105 >= 1 ) break loop105;
							EarlyExitException eee = new EarlyExitException(105, input);
							throw eee;
						}
						cnt105++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// PLSQLPrinter.g:858:14: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
					{
					match(input,ELEMENTS_MODE,FOLLOW_ELEMENTS_MODE_in_pivot_in_clause6479); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:858:30: ( pivot_in_clause_element )+
					int cnt106=0;
					loop106:
					while (true) {
						int alt106=2;
						int LA106_0 = input.LA(1);
						if ( (LA106_0==PIVOT_IN_ELEMENT) ) {
							alt106=1;
						}

						switch (alt106) {
						case 1 :
							// PLSQLPrinter.g:858:30: pivot_in_clause_element
							{
							pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause6481);
							pivot_in_clause_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt106 >= 1 ) break loop106;
							EarlyExitException eee = new EarlyExitException(106, input);
							throw eee;
						}
						cnt106++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 861:5: -> template( \"not implemented: pivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause"


	public static class pivot_in_clause_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pivot_in_clause_element"
	// PLSQLPrinter.g:864:1: pivot_in_clause_element : ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\";
	public final PLSQLPrinter.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException {
		PLSQLPrinter.pivot_in_clause_element_return retval = new PLSQLPrinter.pivot_in_clause_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:865:5: ( ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) -> template( \"not implemented: pivot_in_clause_element\")
			// PLSQLPrinter.g:865:10: ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) )
			{
			match(input,PIVOT_IN_ELEMENT,FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element6538); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:865:29: ( alias )?
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==COLUMN_ALIAS||LA108_0==TABLE_ALIAS) ) {
				alt108=1;
			}
			switch (alt108) {
				case 1 :
					// PLSQLPrinter.g:865:29: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_in_clause_element6540);
					alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:865:36: ( expression | expression_list )
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==EXPR||LA109_0==LOGIC_EXPR) ) {
				alt109=1;
			}
			else if ( (LA109_0==EXPR_LIST) ) {
				alt109=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 109, 0, input);
				throw nvae;
			}

			switch (alt109) {
				case 1 :
					// PLSQLPrinter.g:865:37: expression
					{
					pushFollow(FOLLOW_expression_in_pivot_in_clause_element6544);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:865:48: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_pivot_in_clause_element6546);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 866:5: -> template( \"not implemented: pivot_in_clause_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: pivot_in_clause_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pivot_in_clause_element"


	public static class unpivot_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_clause"
	// PLSQLPrinter.g:869:1: unpivot_clause : ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\";
	public final PLSQLPrinter.unpivot_clause_return unpivot_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_clause_return retval = new PLSQLPrinter.unpivot_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:870:5: ( ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) -> template( \"not implemented: unpivot_clause\")
			// PLSQLPrinter.g:870:10: ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause )
			{
			match(input,UNPIVOT_VK,FOLLOW_UNPIVOT_VK_in_unpivot_clause6583); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:870:23: ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )?
			int alt112=2;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==EXCLUDE_VK||LA112_0==INCLUDE_VK) ) {
				alt112=1;
			}
			switch (alt112) {
				case 1 :
					// PLSQLPrinter.g:870:24: ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )?
					{
					// PLSQLPrinter.g:870:24: ( INCLUDE_VK | EXCLUDE_VK )
					int alt110=2;
					int LA110_0 = input.LA(1);
					if ( (LA110_0==INCLUDE_VK) ) {
						alt110=1;
					}
					else if ( (LA110_0==EXCLUDE_VK) ) {
						alt110=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 110, 0, input);
						throw nvae;
					}

					switch (alt110) {
						case 1 :
							// PLSQLPrinter.g:870:25: INCLUDE_VK
							{
							match(input,INCLUDE_VK,FOLLOW_INCLUDE_VK_in_unpivot_clause6587); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:870:36: EXCLUDE_VK
							{
							match(input,EXCLUDE_VK,FOLLOW_EXCLUDE_VK_in_unpivot_clause6589); 
							}
							break;

					}

					// PLSQLPrinter.g:870:48: ( NULLS_VK )?
					int alt111=2;
					int LA111_0 = input.LA(1);
					if ( (LA111_0==NULLS_VK) ) {
						alt111=1;
					}
					switch (alt111) {
						case 1 :
							// PLSQLPrinter.g:870:48: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_unpivot_clause6592); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:870:60: ( column_name )+
			int cnt113=0;
			loop113:
			while (true) {
				int alt113=2;
				int LA113_0 = input.LA(1);
				if ( (LA113_0==COLUMN_NAME) ) {
					alt113=1;
				}

				switch (alt113) {
				case 1 :
					// PLSQLPrinter.g:870:60: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_clause6597);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt113 >= 1 ) break loop113;
					EarlyExitException eee = new EarlyExitException(113, input);
					throw eee;
				}
				cnt113++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause6600);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause6602);
			unpivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 871:5: -> template( \"not implemented: unpivot_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_clause"


	public static class unpivot_in_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_clause"
	// PLSQLPrinter.g:874:1: unpivot_in_clause : ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\";
	public final PLSQLPrinter.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException {
		PLSQLPrinter.unpivot_in_clause_return retval = new PLSQLPrinter.unpivot_in_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:875:5: ( ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) -> template( \"not implemented: unpivot_in_clause\")
			// PLSQLPrinter.g:875:10: ^( SQL92_RESERVED_IN ( unpivot_in_element )+ )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause6638); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:875:30: ( unpivot_in_element )+
			int cnt114=0;
			loop114:
			while (true) {
				int alt114=2;
				int LA114_0 = input.LA(1);
				if ( (LA114_0==UNPIVOT_IN_ELEMENT) ) {
					alt114=1;
				}

				switch (alt114) {
				case 1 :
					// PLSQLPrinter.g:875:30: unpivot_in_element
					{
					pushFollow(FOLLOW_unpivot_in_element_in_unpivot_in_clause6640);
					unpivot_in_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt114 >= 1 ) break loop114;
					EarlyExitException eee = new EarlyExitException(114, input);
					throw eee;
				}
				cnt114++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 876:5: -> template( \"not implemented: unpivot_in_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_clause"


	public static class unpivot_in_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "unpivot_in_element"
	// PLSQLPrinter.g:879:1: unpivot_in_element : ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\";
	public final PLSQLPrinter.unpivot_in_element_return unpivot_in_element() throws RecognitionException {
		PLSQLPrinter.unpivot_in_element_return retval = new PLSQLPrinter.unpivot_in_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:880:5: ( ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) -> template( \"not implemented: unpivot_in_element\")
			// PLSQLPrinter.g:880:10: ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) )
			{
			match(input,UNPIVOT_IN_ELEMENT,FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element6677); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:880:31: ( column_name )+
			int cnt115=0;
			loop115:
			while (true) {
				int alt115=2;
				int LA115_0 = input.LA(1);
				if ( (LA115_0==COLUMN_NAME) ) {
					alt115=1;
				}

				switch (alt115) {
				case 1 :
					// PLSQLPrinter.g:880:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_in_element6679);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt115 >= 1 ) break loop115;
					EarlyExitException eee = new EarlyExitException(115, input);
					throw eee;
				}
				cnt115++;
			}

			match(input,PIVOT_ALIAS,FOLLOW_PIVOT_ALIAS_in_unpivot_in_element6683); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:880:58: ( expression | expression_list )
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==EXPR||LA116_0==LOGIC_EXPR) ) {
				alt116=1;
			}
			else if ( (LA116_0==EXPR_LIST) ) {
				alt116=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 116, 0, input);
				throw nvae;
			}

			switch (alt116) {
				case 1 :
					// PLSQLPrinter.g:880:59: expression
					{
					pushFollow(FOLLOW_expression_in_unpivot_in_element6686);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:880:70: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_unpivot_in_element6688);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 881:5: -> template( \"not implemented: unpivot_in_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: unpivot_in_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unpivot_in_element"


	public static class hierarchical_query_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hierarchical_query_clause"
	// PLSQLPrinter.g:884:1: hierarchical_query_clause : ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st);
	public final PLSQLPrinter.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
		PLSQLPrinter.hierarchical_query_clause_return retval = new PLSQLPrinter.hierarchical_query_clause_return();
		retval.start = input.LT(1);

		CommonTree NOCYCLE_VK187=null;
		TreeRuleReturnScope expression188 =null;
		TreeRuleReturnScope start_part189 =null;

		try {
			// PLSQLPrinter.g:885:5: ( ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st))
			// PLSQLPrinter.g:885:10: ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) )
			{
			match(input,HIERARCHICAL,FOLLOW_HIERARCHICAL_in_hierarchical_query_clause6726); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:885:25: ( start_part )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==PLSQL_RESERVED_START) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// PLSQLPrinter.g:885:25: start_part
					{
					pushFollow(FOLLOW_start_part_in_hierarchical_query_clause6728);
					start_part189=start_part();
					state._fsp--;

					}
					break;

			}

			match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause6732); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:885:62: ( NOCYCLE_VK )?
			int alt118=2;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==NOCYCLE_VK) ) {
				alt118=1;
			}
			switch (alt118) {
				case 1 :
					// PLSQLPrinter.g:885:62: NOCYCLE_VK
					{
					NOCYCLE_VK187=(CommonTree)match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause6734); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_hierarchical_query_clause6737);
			expression188=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 886:5: -> hierarchical_query_clause(is_nocycle=$NOCYCLE_VK != nullcondition=$expression.ststart_part=$start_part.st)
			{
				retval.st = templateLib.getInstanceOf("hierarchical_query_clause",new STAttrMap().put("is_nocycle", NOCYCLE_VK187 != null).put("condition", (expression188!=null?((StringTemplate)expression188.getTemplate()):null)).put("start_part", (start_part189!=null?((StringTemplate)start_part189.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hierarchical_query_clause"


	public static class start_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "start_part"
	// PLSQLPrinter.g:889:1: start_part : ^( PLSQL_RESERVED_START expression ) -> start_part(condition=$expression.st);
	public final PLSQLPrinter.start_part_return start_part() throws RecognitionException {
		PLSQLPrinter.start_part_return retval = new PLSQLPrinter.start_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression190 =null;

		try {
			// PLSQLPrinter.g:890:5: ( ^( PLSQL_RESERVED_START expression ) -> start_part(condition=$expression.st))
			// PLSQLPrinter.g:890:10: ^( PLSQL_RESERVED_START expression )
			{
			match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_part6785); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_start_part6787);
			expression190=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 891:5: -> start_part(condition=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("start_part",new STAttrMap().put("condition", (expression190!=null?((StringTemplate)expression190.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "start_part"


	public static class group_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_clause"
	// PLSQLPrinter.g:894:1: group_by_clause : ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? ) -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st);
	public final PLSQLPrinter.group_by_clause_return group_by_clause() throws RecognitionException {
		PLSQLPrinter.group_by_clause_return retval = new PLSQLPrinter.group_by_clause_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		TreeRuleReturnScope having_clause191 =null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:895:5: ( ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? ) -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st))
			// PLSQLPrinter.g:895:10: ^( SQL92_RESERVED_GROUP (elements+= group_by_element )+ ( having_clause )? )
			{
			match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause6824); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:895:41: (elements+= group_by_element )+
			int cnt119=0;
			loop119:
			while (true) {
				int alt119=2;
				int LA119_0 = input.LA(1);
				if ( (LA119_0==GROUP_BY_ELEMENT) ) {
					alt119=1;
				}

				switch (alt119) {
				case 1 :
					// PLSQLPrinter.g:895:41: elements+= group_by_element
					{
					pushFollow(FOLLOW_group_by_element_in_group_by_clause6828);
					elements=group_by_element();
					state._fsp--;

					if (list_elements==null) list_elements=new ArrayList<Object>();
					list_elements.add(elements.getTemplate());
					}
					break;

				default :
					if ( cnt119 >= 1 ) break loop119;
					EarlyExitException eee = new EarlyExitException(119, input);
					throw eee;
				}
				cnt119++;
			}

			// PLSQLPrinter.g:895:61: ( having_clause )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==SQL92_RESERVED_HAVING) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// PLSQLPrinter.g:895:61: having_clause
					{
					pushFollow(FOLLOW_having_clause_in_group_by_clause6831);
					having_clause191=having_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 896:5: -> group_by_clause(group_by_elements=$elementshaving_clause=$having_clause.st)
			{
				retval.st = templateLib.getInstanceOf("group_by_clause",new STAttrMap().put("group_by_elements", list_elements).put("having_clause", (having_clause191!=null?((StringTemplate)having_clause191.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_clause"


	public static class group_by_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_element"
	// PLSQLPrinter.g:899:1: group_by_element : ^( GROUP_BY_ELEMENT group_by_elements ) -> {$group_by_elements.st};
	public final PLSQLPrinter.group_by_element_return group_by_element() throws RecognitionException {
		PLSQLPrinter.group_by_element_return retval = new PLSQLPrinter.group_by_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope group_by_elements192 =null;

		try {
			// PLSQLPrinter.g:900:5: ( ^( GROUP_BY_ELEMENT group_by_elements ) -> {$group_by_elements.st})
			// PLSQLPrinter.g:900:10: ^( GROUP_BY_ELEMENT group_by_elements )
			{
			match(input,GROUP_BY_ELEMENT,FOLLOW_GROUP_BY_ELEMENT_in_group_by_element6874); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_group_by_elements_in_group_by_element6876);
			group_by_elements192=group_by_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 900:48: -> {$group_by_elements.st}
			{
				retval.st = (group_by_elements192!=null?((StringTemplate)group_by_elements192.getTemplate()):null);
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_element"


	public static class group_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "group_by_elements"
	// PLSQLPrinter.g:903:1: group_by_elements : ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> {$grouping_element.st});
	public final PLSQLPrinter.group_by_elements_return group_by_elements() throws RecognitionException {
		PLSQLPrinter.group_by_elements_return retval = new PLSQLPrinter.group_by_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope grouping_element193 =null;

		try {
			// PLSQLPrinter.g:904:5: ( ^( GROUPING_VK ( groupin_set )+ ) -> template( \"not implemented: group_by_elements\"| grouping_element -> {$grouping_element.st})
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==GROUPING_VK) ) {
				alt122=1;
			}
			else if ( (LA122_0==CUBE_VK||(LA122_0 >= EXPR && LA122_0 <= EXPR_LIST)||LA122_0==LOGIC_EXPR||LA122_0==ROLLUP_VK) ) {
				alt122=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 122, 0, input);
				throw nvae;
			}

			switch (alt122) {
				case 1 :
					// PLSQLPrinter.g:904:10: ^( GROUPING_VK ( groupin_set )+ )
					{
					match(input,GROUPING_VK,FOLLOW_GROUPING_VK_in_group_by_elements6902); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:904:24: ( groupin_set )+
					int cnt121=0;
					loop121:
					while (true) {
						int alt121=2;
						int LA121_0 = input.LA(1);
						if ( (LA121_0==GROUPIN_SET) ) {
							alt121=1;
						}

						switch (alt121) {
						case 1 :
							// PLSQLPrinter.g:904:24: groupin_set
							{
							pushFollow(FOLLOW_groupin_set_in_group_by_elements6904);
							groupin_set();
							state._fsp--;

							}
							break;

						default :
							if ( cnt121 >= 1 ) break loop121;
							EarlyExitException eee = new EarlyExitException(121, input);
							throw eee;
						}
						cnt121++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 905:5: -> template( \"not implemented: group_by_elements\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: group_by_elements");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:906:10: grouping_element
					{
					pushFollow(FOLLOW_grouping_element_in_group_by_elements6931);
					grouping_element193=grouping_element();
					state._fsp--;

					// TEMPLATE REWRITE
					// 906:27: -> {$grouping_element.st}
					{
						retval.st = (grouping_element193!=null?((StringTemplate)grouping_element193.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "group_by_elements"


	public static class groupin_set_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "groupin_set"
	// PLSQLPrinter.g:909:1: groupin_set : ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\";
	public final PLSQLPrinter.groupin_set_return groupin_set() throws RecognitionException {
		PLSQLPrinter.groupin_set_return retval = new PLSQLPrinter.groupin_set_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:910:5: ( ^( GROUPIN_SET grouping_element ) -> template( \"not implemented: groupin_set\")
			// PLSQLPrinter.g:910:10: ^( GROUPIN_SET grouping_element )
			{
			match(input,GROUPIN_SET,FOLLOW_GROUPIN_SET_in_groupin_set6956); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_grouping_element_in_groupin_set6958);
			grouping_element();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 911:5: -> template( \"not implemented: groupin_set\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: groupin_set");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "groupin_set"


	public static class grouping_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "grouping_element"
	// PLSQLPrinter.g:914:1: grouping_element : ( ^( ROLLUP_VK (elements+= grouping_element )+ ) -> rollup_grouping_element(elements=$elements)| ^( CUBE_VK (elements+= grouping_element )+ ) -> cube_grouping_element(elements=$elements)| expression_list -> {$expression_list.st}| expression -> {$expression.st});
	public final PLSQLPrinter.grouping_element_return grouping_element() throws RecognitionException {
		PLSQLPrinter.grouping_element_return retval = new PLSQLPrinter.grouping_element_return();
		retval.start = input.LT(1);

		List<Object> list_elements=null;
		TreeRuleReturnScope expression_list194 =null;
		TreeRuleReturnScope expression195 =null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:915:5: ( ^( ROLLUP_VK (elements+= grouping_element )+ ) -> rollup_grouping_element(elements=$elements)| ^( CUBE_VK (elements+= grouping_element )+ ) -> cube_grouping_element(elements=$elements)| expression_list -> {$expression_list.st}| expression -> {$expression.st})
			int alt125=4;
			switch ( input.LA(1) ) {
			case ROLLUP_VK:
				{
				alt125=1;
				}
				break;
			case CUBE_VK:
				{
				alt125=2;
				}
				break;
			case EXPR_LIST:
				{
				alt125=3;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt125=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 125, 0, input);
				throw nvae;
			}
			switch (alt125) {
				case 1 :
					// PLSQLPrinter.g:915:10: ^( ROLLUP_VK (elements+= grouping_element )+ )
					{
					match(input,ROLLUP_VK,FOLLOW_ROLLUP_VK_in_grouping_element6994); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:915:30: (elements+= grouping_element )+
					int cnt123=0;
					loop123:
					while (true) {
						int alt123=2;
						int LA123_0 = input.LA(1);
						if ( (LA123_0==CUBE_VK||(LA123_0 >= EXPR && LA123_0 <= EXPR_LIST)||LA123_0==LOGIC_EXPR||LA123_0==ROLLUP_VK) ) {
							alt123=1;
						}

						switch (alt123) {
						case 1 :
							// PLSQLPrinter.g:915:30: elements+= grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element6998);
							elements=grouping_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt123 >= 1 ) break loop123;
							EarlyExitException eee = new EarlyExitException(123, input);
							throw eee;
						}
						cnt123++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 916:5: -> rollup_grouping_element(elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("rollup_grouping_element",new STAttrMap().put("elements", list_elements));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:917:10: ^( CUBE_VK (elements+= grouping_element )+ )
					{
					match(input,CUBE_VK,FOLLOW_CUBE_VK_in_grouping_element7027); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:917:28: (elements+= grouping_element )+
					int cnt124=0;
					loop124:
					while (true) {
						int alt124=2;
						int LA124_0 = input.LA(1);
						if ( (LA124_0==CUBE_VK||(LA124_0 >= EXPR && LA124_0 <= EXPR_LIST)||LA124_0==LOGIC_EXPR||LA124_0==ROLLUP_VK) ) {
							alt124=1;
						}

						switch (alt124) {
						case 1 :
							// PLSQLPrinter.g:917:28: elements+= grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element7031);
							elements=grouping_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt124 >= 1 ) break loop124;
							EarlyExitException eee = new EarlyExitException(124, input);
							throw eee;
						}
						cnt124++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 918:5: -> cube_grouping_element(elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("cube_grouping_element",new STAttrMap().put("elements", list_elements));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:919:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_grouping_element7059);
					expression_list194=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 919:26: -> {$expression_list.st}
					{
						retval.st = (expression_list194!=null?((StringTemplate)expression_list194.getTemplate()):null);
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:920:10: expression
					{
					pushFollow(FOLLOW_expression_in_grouping_element7074);
					expression195=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 920:21: -> {$expression.st}
					{
						retval.st = (expression195!=null?((StringTemplate)expression195.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grouping_element"


	public static class having_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "having_clause"
	// PLSQLPrinter.g:923:1: having_clause : ^( SQL92_RESERVED_HAVING expression ) -> having_clause(condition=$expression.st);
	public final PLSQLPrinter.having_clause_return having_clause() throws RecognitionException {
		PLSQLPrinter.having_clause_return retval = new PLSQLPrinter.having_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression196 =null;

		try {
			// PLSQLPrinter.g:924:5: ( ^( SQL92_RESERVED_HAVING expression ) -> having_clause(condition=$expression.st))
			// PLSQLPrinter.g:924:10: ^( SQL92_RESERVED_HAVING expression )
			{
			match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_clause7099); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_having_clause7101);
			expression196=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 925:5: -> having_clause(condition=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("having_clause",new STAttrMap().put("condition", (expression196!=null?((StringTemplate)expression196.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "having_clause"


	public static class model_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_clause"
	// PLSQLPrinter.g:928:1: model_clause : ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\";
	public final PLSQLPrinter.model_clause_return model_clause() throws RecognitionException {
		PLSQLPrinter.model_clause_return retval = new PLSQLPrinter.model_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:929:5: ( ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) -> template( \"not implemented: model_clause\")
			// PLSQLPrinter.g:929:10: ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
			{
			match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause7138); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_main_model_in_model_clause7140);
			main_model();
			state._fsp--;

			// PLSQLPrinter.g:929:48: ( cell_reference_options )*
			loop126:
			while (true) {
				int alt126=2;
				int LA126_0 = input.LA(1);
				if ( (LA126_0==SQL92_RESERVED_UNIQUE||LA126_0==IGNORE_VK||LA126_0==KEEP_VK) ) {
					alt126=1;
				}

				switch (alt126) {
				case 1 :
					// PLSQLPrinter.g:929:48: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_model_clause7142);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop126;
				}
			}

			// PLSQLPrinter.g:929:72: ( return_rows_clause )?
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==RETURN_VK) ) {
				alt127=1;
			}
			switch (alt127) {
				case 1 :
					// PLSQLPrinter.g:929:72: return_rows_clause
					{
					pushFollow(FOLLOW_return_rows_clause_in_model_clause7145);
					return_rows_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:929:92: ( reference_model )*
			loop128:
			while (true) {
				int alt128=2;
				int LA128_0 = input.LA(1);
				if ( (LA128_0==REFERENCE_VK) ) {
					alt128=1;
				}

				switch (alt128) {
				case 1 :
					// PLSQLPrinter.g:929:92: reference_model
					{
					pushFollow(FOLLOW_reference_model_in_model_clause7148);
					reference_model();
					state._fsp--;

					}
					break;

				default :
					break loop128;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 930:5: -> template( \"not implemented: model_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_clause"


	public static class cell_reference_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cell_reference_options"
	// PLSQLPrinter.g:933:1: cell_reference_options : ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\");
	public final PLSQLPrinter.cell_reference_options_return cell_reference_options() throws RecognitionException {
		PLSQLPrinter.cell_reference_options_return retval = new PLSQLPrinter.cell_reference_options_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:934:5: ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) -> template( \"not implemented: cell_reference_options\")
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==IGNORE_VK||LA130_0==KEEP_VK) ) {
				alt130=1;
			}
			else if ( (LA130_0==SQL92_RESERVED_UNIQUE) ) {
				alt130=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 130, 0, input);
				throw nvae;
			}

			switch (alt130) {
				case 1 :
					// PLSQLPrinter.g:934:10: ^( ( IGNORE_VK | KEEP_VK ) NAV_VK )
					{
					if ( input.LA(1)==IGNORE_VK||input.LA(1)==KEEP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					match(input,NAV_VK,FOLLOW_NAV_VK_in_cell_reference_options7191); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:935:10: ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) )
					{
					match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options7204); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:935:34: ( DIMENSION_VK | SINGLE_VK )
					int alt129=2;
					int LA129_0 = input.LA(1);
					if ( (LA129_0==DIMENSION_VK) ) {
						alt129=1;
					}
					else if ( (LA129_0==SINGLE_VK) ) {
						alt129=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 129, 0, input);
						throw nvae;
					}

					switch (alt129) {
						case 1 :
							// PLSQLPrinter.g:935:35: DIMENSION_VK
							{
							match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_cell_reference_options7207); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:935:48: SINGLE_VK
							{
							match(input,SINGLE_VK,FOLLOW_SINGLE_VK_in_cell_reference_options7209); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 936:5: -> template( \"not implemented: cell_reference_options\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: cell_reference_options");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cell_reference_options"


	public static class return_rows_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "return_rows_clause"
	// PLSQLPrinter.g:939:1: return_rows_clause : ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\";
	public final PLSQLPrinter.return_rows_clause_return return_rows_clause() throws RecognitionException {
		PLSQLPrinter.return_rows_clause_return retval = new PLSQLPrinter.return_rows_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:940:5: ( ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) -> template( \"not implemented: return_rows_clause\")
			// PLSQLPrinter.g:940:10: ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_rows_clause7246); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:940:22: ( UPDATED_VK | SQL92_RESERVED_ALL )
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==UPDATED_VK) ) {
				alt131=1;
			}
			else if ( (LA131_0==SQL92_RESERVED_ALL) ) {
				alt131=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 131, 0, input);
				throw nvae;
			}

			switch (alt131) {
				case 1 :
					// PLSQLPrinter.g:940:23: UPDATED_VK
					{
					match(input,UPDATED_VK,FOLLOW_UPDATED_VK_in_return_rows_clause7249); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:940:34: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause7251); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 941:5: -> template( \"not implemented: return_rows_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: return_rows_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_rows_clause"


	public static class reference_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model"
	// PLSQLPrinter.g:944:1: reference_model : ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\";
	public final PLSQLPrinter.reference_model_return reference_model() throws RecognitionException {
		PLSQLPrinter.reference_model_return retval = new PLSQLPrinter.reference_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:945:5: ( ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) -> template( \"not implemented: reference_model\")
			// PLSQLPrinter.g:945:10: ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* )
			{
			match(input,REFERENCE_VK,FOLLOW_REFERENCE_VK_in_reference_model7288); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_reference_model_name_in_reference_model7290);
			reference_model_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_reference_model7292);
			subquery();
			state._fsp--;

			pushFollow(FOLLOW_model_column_clauses_in_reference_model7294);
			model_column_clauses();
			state._fsp--;

			// PLSQLPrinter.g:945:76: ( cell_reference_options )*
			loop132:
			while (true) {
				int alt132=2;
				int LA132_0 = input.LA(1);
				if ( (LA132_0==SQL92_RESERVED_UNIQUE||LA132_0==IGNORE_VK||LA132_0==KEEP_VK) ) {
					alt132=1;
				}

				switch (alt132) {
				case 1 :
					// PLSQLPrinter.g:945:76: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_reference_model7296);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop132;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 946:5: -> template( \"not implemented: reference_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model"


	public static class main_model_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model"
	// PLSQLPrinter.g:949:1: main_model : ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\";
	public final PLSQLPrinter.main_model_return main_model() throws RecognitionException {
		PLSQLPrinter.main_model_return retval = new PLSQLPrinter.main_model_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:950:5: ( ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) -> template( \"not implemented: main_model\")
			// PLSQLPrinter.g:950:10: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
			{
			match(input,MAIN_MODEL,FOLLOW_MAIN_MODEL_in_main_model7333); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:950:23: ( main_model_name )?
			int alt133=2;
			int LA133_0 = input.LA(1);
			if ( (LA133_0==MAIN_MODEL_NAME) ) {
				alt133=1;
			}
			switch (alt133) {
				case 1 :
					// PLSQLPrinter.g:950:23: main_model_name
					{
					pushFollow(FOLLOW_main_model_name_in_main_model7335);
					main_model_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_model_column_clauses_in_main_model7338);
			model_column_clauses();
			state._fsp--;

			pushFollow(FOLLOW_model_rules_clause_in_main_model7340);
			model_rules_clause();
			state._fsp--;

			// PLSQLPrinter.g:950:80: ( cell_reference_options )*
			loop134:
			while (true) {
				int alt134=2;
				int LA134_0 = input.LA(1);
				if ( (LA134_0==SQL92_RESERVED_UNIQUE||LA134_0==IGNORE_VK||LA134_0==KEEP_VK) ) {
					alt134=1;
				}

				switch (alt134) {
				case 1 :
					// PLSQLPrinter.g:950:80: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_main_model7342);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop134;
				}
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 951:5: -> template( \"not implemented: main_model\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model"


	public static class model_column_clauses_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_clauses"
	// PLSQLPrinter.g:954:1: model_column_clauses : ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\";
	public final PLSQLPrinter.model_column_clauses_return model_column_clauses() throws RecognitionException {
		PLSQLPrinter.model_column_clauses_return retval = new PLSQLPrinter.model_column_clauses_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:955:5: ( ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) -> template( \"not implemented: model_column_clauses\")
			// PLSQLPrinter.g:955:10: ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column_clauses7379); 
			match(input, Token.DOWN, null); 
			match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_model_column_clauses7382); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses7384);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input,MEASURES_VK,FOLLOW_MEASURES_VK_in_model_column_clauses7388); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses7390);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:955:92: ( model_column_partition_part )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==PARTITION_VK) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// PLSQLPrinter.g:955:92: model_column_partition_part
					{
					pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses7393);
					model_column_partition_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 956:5: -> template( \"not implemented: model_column_clauses\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_clauses");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_clauses"


	public static class model_column_partition_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_partition_part"
	// PLSQLPrinter.g:959:1: model_column_partition_part : ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\";
	public final PLSQLPrinter.model_column_partition_part_return model_column_partition_part() throws RecognitionException {
		PLSQLPrinter.model_column_partition_part_return retval = new PLSQLPrinter.model_column_partition_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:960:5: ( ^( PARTITION_VK model_column_list ) -> template( \"not implemented: model_column_partition_part\")
			// PLSQLPrinter.g:960:10: ^( PARTITION_VK model_column_list )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_model_column_partition_part7430); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_partition_part7432);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 961:5: -> template( \"not implemented: model_column_partition_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_partition_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_partition_part"


	public static class model_column_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column_list"
	// PLSQLPrinter.g:964:1: model_column_list : ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\";
	public final PLSQLPrinter.model_column_list_return model_column_list() throws RecognitionException {
		PLSQLPrinter.model_column_list_return retval = new PLSQLPrinter.model_column_list_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:965:5: ( ^( MODEL_COLUMNS ( model_column )+ ) -> template( \"not implemented: model_column_list\")
			// PLSQLPrinter.g:965:10: ^( MODEL_COLUMNS ( model_column )+ )
			{
			match(input,MODEL_COLUMNS,FOLLOW_MODEL_COLUMNS_in_model_column_list7468); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:965:26: ( model_column )+
			int cnt136=0;
			loop136:
			while (true) {
				int alt136=2;
				int LA136_0 = input.LA(1);
				if ( (LA136_0==MODEL_COLUMN) ) {
					alt136=1;
				}

				switch (alt136) {
				case 1 :
					// PLSQLPrinter.g:965:26: model_column
					{
					pushFollow(FOLLOW_model_column_in_model_column_list7470);
					model_column();
					state._fsp--;

					}
					break;

				default :
					if ( cnt136 >= 1 ) break loop136;
					EarlyExitException eee = new EarlyExitException(136, input);
					throw eee;
				}
				cnt136++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 966:5: -> template( \"not implemented: model_column_list\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column_list");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column_list"


	public static class model_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_column"
	// PLSQLPrinter.g:969:1: model_column : ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\";
	public final PLSQLPrinter.model_column_return model_column() throws RecognitionException {
		PLSQLPrinter.model_column_return retval = new PLSQLPrinter.model_column_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:970:5: ( ^( MODEL_COLUMN ( alias )? expression ) -> template( \"not implemented: model_column\")
			// PLSQLPrinter.g:970:10: ^( MODEL_COLUMN ( alias )? expression )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column7507); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:970:25: ( alias )?
			int alt137=2;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==COLUMN_ALIAS||LA137_0==TABLE_ALIAS) ) {
				alt137=1;
			}
			switch (alt137) {
				case 1 :
					// PLSQLPrinter.g:970:25: alias
					{
					pushFollow(FOLLOW_alias_in_model_column7509);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_model_column7512);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 971:5: -> template( \"not implemented: model_column\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_column");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_column"


	public static class model_rules_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_clause"
	// PLSQLPrinter.g:974:1: model_rules_clause : ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\";
	public final PLSQLPrinter.model_rules_clause_return model_rules_clause() throws RecognitionException {
		PLSQLPrinter.model_rules_clause_return retval = new PLSQLPrinter.model_rules_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:975:5: ( ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) -> template( \"not implemented: model_rules_clause\")
			// PLSQLPrinter.g:975:10: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
			{
			match(input,MODEL_RULES,FOLLOW_MODEL_RULES_in_model_rules_clause7549); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:975:24: ( model_rules_element )+
			int cnt138=0;
			loop138:
			while (true) {
				int alt138=2;
				int LA138_0 = input.LA(1);
				if ( (LA138_0==MODEL_RULE) ) {
					alt138=1;
				}

				switch (alt138) {
				case 1 :
					// PLSQLPrinter.g:975:24: model_rules_element
					{
					pushFollow(FOLLOW_model_rules_element_in_model_rules_clause7551);
					model_rules_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt138 >= 1 ) break loop138;
					EarlyExitException eee = new EarlyExitException(138, input);
					throw eee;
				}
				cnt138++;
			}

			// PLSQLPrinter.g:975:45: ( model_rules_part )?
			int alt139=2;
			int LA139_0 = input.LA(1);
			if ( (LA139_0==RULES_VK) ) {
				alt139=1;
			}
			switch (alt139) {
				case 1 :
					// PLSQLPrinter.g:975:45: model_rules_part
					{
					pushFollow(FOLLOW_model_rules_part_in_model_rules_clause7554);
					model_rules_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 976:5: -> template( \"not implemented: model_rules_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_clause"


	public static class model_rules_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_part"
	// PLSQLPrinter.g:979:1: model_rules_part : ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\";
	public final PLSQLPrinter.model_rules_part_return model_rules_part() throws RecognitionException {
		PLSQLPrinter.model_rules_part_return retval = new PLSQLPrinter.model_rules_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:980:5: ( ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) -> template( \"not implemented: model_rules_part\")
			// PLSQLPrinter.g:980:10: ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? )
			{
			match(input,RULES_VK,FOLLOW_RULES_VK_in_model_rules_part7591); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:981:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
				int alt141=3;
				int LA141_0 = input.LA(1);
				if ( (LA141_0==SQL92_RESERVED_UPDATE) ) {
					alt141=1;
				}
				else if ( (LA141_0==UPSERT_VK) ) {
					alt141=2;
				}
				switch (alt141) {
					case 1 :
						// PLSQLPrinter.g:981:14: SQL92_RESERVED_UPDATE
						{
						match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part7607); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:981:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
						{
						match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_part7609); 
						// PLSQLPrinter.g:981:46: ( SQL92_RESERVED_ALL )?
						int alt140=2;
						int LA140_0 = input.LA(1);
						if ( (LA140_0==SQL92_RESERVED_ALL) ) {
							alt140=1;
						}
						switch (alt140) {
							case 1 :
								// PLSQLPrinter.g:981:46: SQL92_RESERVED_ALL
								{
								match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part7611); 
								}
								break;

						}

						}
						break;

				}

				// PLSQLPrinter.g:982:13: ( AUTOMATIC_VK | SEQUENTIAL_VK )?
				int alt142=3;
				int LA142_0 = input.LA(1);
				if ( (LA142_0==AUTOMATIC_VK) ) {
					alt142=1;
				}
				else if ( (LA142_0==SEQUENTIAL_VK) ) {
					alt142=2;
				}
				switch (alt142) {
					case 1 :
						// PLSQLPrinter.g:982:14: AUTOMATIC_VK
						{
						match(input,AUTOMATIC_VK,FOLLOW_AUTOMATIC_VK_in_model_rules_part7630); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:982:27: SEQUENTIAL_VK
						{
						match(input,SEQUENTIAL_VK,FOLLOW_SEQUENTIAL_VK_in_model_rules_part7632); 
						}
						break;

				}

				// PLSQLPrinter.g:983:13: ( model_iterate_clause )?
				int alt143=2;
				int LA143_0 = input.LA(1);
				if ( (LA143_0==ITERATE_VK) ) {
					alt143=1;
				}
				switch (alt143) {
					case 1 :
						// PLSQLPrinter.g:983:13: model_iterate_clause
						{
						pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part7649);
						model_iterate_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 985:5: -> template( \"not implemented: model_rules_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_part"


	public static class model_rules_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_rules_element"
	// PLSQLPrinter.g:988:1: model_rules_element : ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\";
	public final PLSQLPrinter.model_rules_element_return model_rules_element() throws RecognitionException {
		PLSQLPrinter.model_rules_element_return retval = new PLSQLPrinter.model_rules_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:989:5: ( ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) -> template( \"not implemented: model_rules_element\")
			// PLSQLPrinter.g:989:10: ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? )
			{
			match(input,MODEL_RULE,FOLLOW_MODEL_RULE_in_model_rules_element7695); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_model_rules_element7711); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_expression_in_model_rules_element7713);
			model_expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_model_rules_element7715);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:991:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
			int alt145=3;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==SQL92_RESERVED_UPDATE) ) {
				alt145=1;
			}
			else if ( (LA145_0==UPSERT_VK) ) {
				alt145=2;
			}
			switch (alt145) {
				case 1 :
					// PLSQLPrinter.g:991:14: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element7732); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:991:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
					{
					match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_element7734); 
					// PLSQLPrinter.g:991:46: ( SQL92_RESERVED_ALL )?
					int alt144=2;
					int LA144_0 = input.LA(1);
					if ( (LA144_0==SQL92_RESERVED_ALL) ) {
						alt144=1;
					}
					switch (alt144) {
						case 1 :
							// PLSQLPrinter.g:991:46: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element7736); 
							}
							break;

					}

					}
					break;

			}

			// PLSQLPrinter.g:992:13: ( order_by_clause )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==SQL92_RESERVED_ORDER) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// PLSQLPrinter.g:992:13: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_model_rules_element7754);
					order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 994:5: -> template( \"not implemented: model_rules_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_rules_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_rules_element"


	public static class model_iterate_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_iterate_clause"
	// PLSQLPrinter.g:997:1: model_iterate_clause : ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\";
	public final PLSQLPrinter.model_iterate_clause_return model_iterate_clause() throws RecognitionException {
		PLSQLPrinter.model_iterate_clause_return retval = new PLSQLPrinter.model_iterate_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:998:5: ( ^( ITERATE_VK expression ( until_part )? ) -> template( \"not implemented: model_iterate_clause\")
			// PLSQLPrinter.g:998:10: ^( ITERATE_VK expression ( until_part )? )
			{
			match(input,ITERATE_VK,FOLLOW_ITERATE_VK_in_model_iterate_clause7800); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_model_iterate_clause7802);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:998:34: ( until_part )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==UNTIL_VK) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// PLSQLPrinter.g:998:34: until_part
					{
					pushFollow(FOLLOW_until_part_in_model_iterate_clause7804);
					until_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 999:5: -> template( \"not implemented: model_iterate_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_iterate_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_iterate_clause"


	public static class until_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "until_part"
	// PLSQLPrinter.g:1002:1: until_part : ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\";
	public final PLSQLPrinter.until_part_return until_part() throws RecognitionException {
		PLSQLPrinter.until_part_return retval = new PLSQLPrinter.until_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1003:5: ( ^( UNTIL_VK expression ) -> template( \"not implemented: until_part\")
			// PLSQLPrinter.g:1003:10: ^( UNTIL_VK expression )
			{
			match(input,UNTIL_VK,FOLLOW_UNTIL_VK_in_until_part7841); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_until_part7843);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1004:5: -> template( \"not implemented: until_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: until_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "until_part"


	public static class order_by_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_clause"
	// PLSQLPrinter.g:1007:1: order_by_clause : ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements);
	public final PLSQLPrinter.order_by_clause_return order_by_clause() throws RecognitionException {
		PLSQLPrinter.order_by_clause_return retval = new PLSQLPrinter.order_by_clause_return();
		retval.start = input.LT(1);

		CommonTree SIBLINGS_VK197=null;
		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1008:5: ( ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) ) -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements))
			// PLSQLPrinter.g:1008:10: ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS (elements+= order_by_elements )+ ) )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause7879); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1008:33: ( SIBLINGS_VK )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==SIBLINGS_VK) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// PLSQLPrinter.g:1008:33: SIBLINGS_VK
					{
					SIBLINGS_VK197=(CommonTree)match(input,SIBLINGS_VK,FOLLOW_SIBLINGS_VK_in_order_by_clause7881); 
					}
					break;

			}

			match(input,ORDER_BY_ELEMENTS,FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause7885); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1008:74: (elements+= order_by_elements )+
			int cnt149=0;
			loop149:
			while (true) {
				int alt149=2;
				int LA149_0 = input.LA(1);
				if ( (LA149_0==ORDER_BY_ELEMENT) ) {
					alt149=1;
				}

				switch (alt149) {
				case 1 :
					// PLSQLPrinter.g:1008:74: elements+= order_by_elements
					{
					pushFollow(FOLLOW_order_by_elements_in_order_by_clause7889);
					elements=order_by_elements();
					state._fsp--;

					if (list_elements==null) list_elements=new ArrayList<Object>();
					list_elements.add(elements.getTemplate());
					}
					break;

				default :
					if ( cnt149 >= 1 ) break loop149;
					EarlyExitException eee = new EarlyExitException(149, input);
					throw eee;
				}
				cnt149++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1009:5: -> order_by_clause(is_siblings=$SIBLINGS_VK != nullelements=$elements)
			{
				retval.st = templateLib.getInstanceOf("order_by_clause",new STAttrMap().put("is_siblings", SIBLINGS_VK197 != null).put("elements", list_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_clause"


	public static class order_by_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "order_by_elements"
	// PLSQLPrinter.g:1012:1: order_by_elements : ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null);
	public final PLSQLPrinter.order_by_elements_return order_by_elements() throws RecognitionException {
		PLSQLPrinter.order_by_elements_return retval = new PLSQLPrinter.order_by_elements_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_ASC199=null;
		CommonTree SQL92_RESERVED_DESC200=null;
		CommonTree FIRST_VK201=null;
		CommonTree LAST_VK202=null;
		TreeRuleReturnScope expression198 =null;

		try {
			// PLSQLPrinter.g:1013:5: ( ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null))
			// PLSQLPrinter.g:1013:10: ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? )
			{
			match(input,ORDER_BY_ELEMENT,FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements7933); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_order_by_elements7935);
			expression198=expression();
			state._fsp--;

			// PLSQLPrinter.g:1013:40: ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )?
			int alt150=3;
			int LA150_0 = input.LA(1);
			if ( (LA150_0==SQL92_RESERVED_ASC) ) {
				alt150=1;
			}
			else if ( (LA150_0==SQL92_RESERVED_DESC) ) {
				alt150=2;
			}
			switch (alt150) {
				case 1 :
					// PLSQLPrinter.g:1013:41: SQL92_RESERVED_ASC
					{
					SQL92_RESERVED_ASC199=(CommonTree)match(input,SQL92_RESERVED_ASC,FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements7938); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1013:60: SQL92_RESERVED_DESC
					{
					SQL92_RESERVED_DESC200=(CommonTree)match(input,SQL92_RESERVED_DESC,FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements7940); 
					}
					break;

			}

			// PLSQLPrinter.g:1013:82: ( NULLS_VK ( FIRST_VK | LAST_VK ) )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==NULLS_VK) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// PLSQLPrinter.g:1013:83: NULLS_VK ( FIRST_VK | LAST_VK )
					{
					match(input,NULLS_VK,FOLLOW_NULLS_VK_in_order_by_elements7945); 
					// PLSQLPrinter.g:1013:92: ( FIRST_VK | LAST_VK )
					int alt151=2;
					int LA151_0 = input.LA(1);
					if ( (LA151_0==FIRST_VK) ) {
						alt151=1;
					}
					else if ( (LA151_0==LAST_VK) ) {
						alt151=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 151, 0, input);
						throw nvae;
					}

					switch (alt151) {
						case 1 :
							// PLSQLPrinter.g:1013:93: FIRST_VK
							{
							FIRST_VK201=(CommonTree)match(input,FIRST_VK,FOLLOW_FIRST_VK_in_order_by_elements7948); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1013:102: LAST_VK
							{
							LAST_VK202=(CommonTree)match(input,LAST_VK,FOLLOW_LAST_VK_in_order_by_elements7950); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1014:5: -> order_by_elements(expression=$expression.stis_asc=$SQL92_RESERVED_ASC != nullis_desc=$SQL92_RESERVED_DESC != nullis_nulls_first=$FIRST_VK != nullis_nulls_last=$LAST_VK != null)
			{
                logger.debug("expression198=" + expression198);
			    retval.st = templateLib.getInstanceOf("order_by_elements",new STAttrMap().put("expression", (expression198!=null?((StringTemplate)expression198.getTemplate()):null)).put("is_asc", SQL92_RESERVED_ASC199 != null).put("is_desc", SQL92_RESERVED_DESC200 != null).put("is_nulls_first", FIRST_VK201 != null).put("is_nulls_last", LAST_VK202 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "order_by_elements"


	public static class for_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_clause"
	// PLSQLPrinter.g:1019:1: for_update_clause : ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st);
	public final PLSQLPrinter.for_update_clause_return for_update_clause() throws RecognitionException {
		PLSQLPrinter.for_update_clause_return retval = new PLSQLPrinter.for_update_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope for_update_of_part203 =null;
		TreeRuleReturnScope for_update_options204 =null;

		try {
			// PLSQLPrinter.g:1020:5: ( ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st))
			// PLSQLPrinter.g:1020:10: ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause8031); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1020:31: ( for_update_of_part )?
				int alt153=2;
				int LA153_0 = input.LA(1);
				if ( (LA153_0==SQL92_RESERVED_OF) ) {
					alt153=1;
				}
				switch (alt153) {
					case 1 :
						// PLSQLPrinter.g:1020:31: for_update_of_part
						{
						pushFollow(FOLLOW_for_update_of_part_in_for_update_clause8033);
						for_update_of_part203=for_update_of_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1020:51: ( for_update_options )?
				int alt154=2;
				int LA154_0 = input.LA(1);
				if ( (LA154_0==PLSQL_RESERVED_NOWAIT||LA154_0==SKIP_VK||LA154_0==WAIT_VK) ) {
					alt154=1;
				}
				switch (alt154) {
					case 1 :
						// PLSQLPrinter.g:1020:51: for_update_options
						{
						pushFollow(FOLLOW_for_update_options_in_for_update_clause8036);
						for_update_options204=for_update_options();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1021:5: -> for_update_clause(for_update_of_part=$for_update_of_part.stfor_update_options=$for_update_options.st)
			{
				retval.st = templateLib.getInstanceOf("for_update_clause",new STAttrMap().put("for_update_of_part", (for_update_of_part203!=null?((StringTemplate)for_update_of_part203.getTemplate()):null)).put("for_update_options", (for_update_options204!=null?((StringTemplate)for_update_options204.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_clause"


	public static class for_update_of_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_of_part"
	// PLSQLPrinter.g:1024:1: for_update_of_part : ^( SQL92_RESERVED_OF (column_names+= column_name )+ ) -> for_update_of_part(column_names=$column_names);
	public final PLSQLPrinter.for_update_of_part_return for_update_of_part() throws RecognitionException {
		PLSQLPrinter.for_update_of_part_return retval = new PLSQLPrinter.for_update_of_part_return();
		retval.start = input.LT(1);

		List<Object> list_column_names=null;
		RuleReturnScope column_names = null;
		try {
			// PLSQLPrinter.g:1025:5: ( ^( SQL92_RESERVED_OF (column_names+= column_name )+ ) -> for_update_of_part(column_names=$column_names))
			// PLSQLPrinter.g:1025:10: ^( SQL92_RESERVED_OF (column_names+= column_name )+ )
			{
			match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part8079); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1025:42: (column_names+= column_name )+
			int cnt155=0;
			loop155:
			while (true) {
				int alt155=2;
				int LA155_0 = input.LA(1);
				if ( (LA155_0==COLUMN_NAME) ) {
					alt155=1;
				}

				switch (alt155) {
				case 1 :
					// PLSQLPrinter.g:1025:42: column_names+= column_name
					{
					pushFollow(FOLLOW_column_name_in_for_update_of_part8083);
					column_names=column_name();
					state._fsp--;

					if (list_column_names==null) list_column_names=new ArrayList<Object>();
					list_column_names.add(column_names.getTemplate());
					}
					break;

				default :
					if ( cnt155 >= 1 ) break loop155;
					EarlyExitException eee = new EarlyExitException(155, input);
					throw eee;
				}
				cnt155++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1026:5: -> for_update_of_part(column_names=$column_names)
			{
				retval.st = templateLib.getInstanceOf("for_update_of_part",new STAttrMap().put("column_names", list_column_names));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_of_part"


	public static class for_update_options_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_update_options"
	// PLSQLPrinter.g:1029:1: for_update_options : ( SKIP_VK -> for_update_options_skip_locked(| PLSQL_RESERVED_NOWAIT -> for_update_options_nowait(| ^( WAIT_VK expression ) -> for_update_options_wait(expression=$expression.st));
	public final PLSQLPrinter.for_update_options_return for_update_options() throws RecognitionException {
		PLSQLPrinter.for_update_options_return retval = new PLSQLPrinter.for_update_options_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression205 =null;

		try {
			// PLSQLPrinter.g:1030:5: ( SKIP_VK -> for_update_options_skip_locked(| PLSQL_RESERVED_NOWAIT -> for_update_options_nowait(| ^( WAIT_VK expression ) -> for_update_options_wait(expression=$expression.st))
			int alt156=3;
			switch ( input.LA(1) ) {
			case SKIP_VK:
				{
				alt156=1;
				}
				break;
			case PLSQL_RESERVED_NOWAIT:
				{
				alt156=2;
				}
				break;
			case WAIT_VK:
				{
				alt156=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				throw nvae;
			}
			switch (alt156) {
				case 1 :
					// PLSQLPrinter.g:1030:10: SKIP_VK
					{
					match(input,SKIP_VK,FOLLOW_SKIP_VK_in_for_update_options8120); 
					// TEMPLATE REWRITE
					// 1030:18: -> for_update_options_skip_locked(
					{
						retval.st = templateLib.getInstanceOf("for_update_options_skip_locked");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1031:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options8137); 
					// TEMPLATE REWRITE
					// 1031:32: -> for_update_options_nowait(
					{
						retval.st = templateLib.getInstanceOf("for_update_options_nowait");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1032:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_for_update_options8155); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_update_options8157);
					expression205=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1032:32: -> for_update_options_wait(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("for_update_options_wait",new STAttrMap().put("expression", (expression205!=null?((StringTemplate)expression205.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_update_options"


	public static class update_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_statement"
	// PLSQLPrinter.g:1037:1: update_statement : ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.update_statement_return update_statement() throws RecognitionException {
		PLSQLPrinter.update_statement_return retval = new PLSQLPrinter.update_statement_return();
		retval.start = input.LT(1);

		List<Object> list_update_elements=null;
		TreeRuleReturnScope general_table_ref206 =null;
		TreeRuleReturnScope where_clause207 =null;
		TreeRuleReturnScope static_returning_clause208 =null;
		TreeRuleReturnScope error_logging_clause209 =null;
		RuleReturnScope update_elements = null;
		try {
			// PLSQLPrinter.g:1038:5: ( ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1038:10: ^( SQL92_RESERVED_UPDATE general_table_ref ^( SET_VK (update_elements+= update_set_elements )+ ) ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement8190); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_update_statement8192);
			general_table_ref206=general_table_ref();
			state._fsp--;

			match(input,SET_VK,FOLLOW_SET_VK_in_update_statement8207); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1039:37: (update_elements+= update_set_elements )+
			int cnt157=0;
			loop157:
			while (true) {
				int alt157=2;
				int LA157_0 = input.LA(1);
				if ( (LA157_0==ASSIGN||LA157_0==VALUE_VK) ) {
					alt157=1;
				}

				switch (alt157) {
				case 1 :
					// PLSQLPrinter.g:1039:37: update_elements+= update_set_elements
					{
					pushFollow(FOLLOW_update_set_elements_in_update_statement8211);
					update_elements=update_set_elements();
					state._fsp--;

					if (list_update_elements==null) list_update_elements=new ArrayList<Object>();
					list_update_elements.add(update_elements.getTemplate());
					}
					break;

				default :
					if ( cnt157 >= 1 ) break loop157;
					EarlyExitException eee = new EarlyExitException(157, input);
					throw eee;
				}
				cnt157++;
			}

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1040:13: ( where_clause )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==SQL92_RESERVED_WHERE) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// PLSQLPrinter.g:1040:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_update_statement8227);
					where_clause207=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1040:27: ( static_returning_clause )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==STATIC_RETURNING) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// PLSQLPrinter.g:1040:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_update_statement8230);
					static_returning_clause208=static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1040:52: ( error_logging_clause )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==LOG_VK) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// PLSQLPrinter.g:1040:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_update_statement8233);
					error_logging_clause209=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1042:5: -> update_statement(general_table_ref=$general_table_ref.stupdate_set_elements=$update_elementswhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("update_statement",new STAttrMap().put("general_table_ref", (general_table_ref206!=null?((StringTemplate)general_table_ref206.getTemplate()):null)).put("update_set_elements", list_update_elements).put("where_clause", (where_clause207!=null?((StringTemplate)where_clause207.getTemplate()):null)).put("static_returning_clause", (static_returning_clause208!=null?((StringTemplate)static_returning_clause208.getTemplate()):null)).put("error_logging_clause", (error_logging_clause209!=null?((StringTemplate)error_logging_clause209.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_statement"


	public static class update_set_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "update_set_elements"
	// PLSQLPrinter.g:1050:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? id= commented_id expression ) -> update_set_element_column_value(column_name=$id.stexpression=$expression.st));
	public final PLSQLPrinter.update_set_elements_return update_set_elements() throws RecognitionException {
		PLSQLPrinter.update_set_elements_return retval = new PLSQLPrinter.update_set_elements_return();
		retval.start = input.LT(1);

		List<Object> list_names=null;
		TreeRuleReturnScope id =null;
		TreeRuleReturnScope column_name210 =null;
		TreeRuleReturnScope expression211 =null;
		TreeRuleReturnScope subquery212 =null;
		TreeRuleReturnScope expression213 =null;
		RuleReturnScope names = null;
		try {
			// PLSQLPrinter.g:1051:5: ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? id= commented_id expression ) -> update_set_element_column_value(column_name=$id.stexpression=$expression.st))
			int alt163=3;
			alt163 = dfa163.predict(input);
			switch (alt163) {
				case 1 :
					// PLSQLPrinter.g:1051:10: ^( ASSIGN column_name expression )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements8339); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_update_set_elements8341);
					column_name210=column_name();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_update_set_elements8343);
					expression211=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1052:5: -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_column_expr",new STAttrMap().put("column_name", (column_name210!=null?((StringTemplate)column_name210.getTemplate()):null)).put("expression", (expression211!=null?((StringTemplate)expression211.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1053:10: ^( ASSIGN (names+= column_name )+ subquery )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements8376); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1053:24: (names+= column_name )+
					int cnt161=0;
					loop161:
					while (true) {
						int alt161=2;
						int LA161_0 = input.LA(1);
						if ( (LA161_0==COLUMN_NAME) ) {
							alt161=1;
						}

						switch (alt161) {
						case 1 :
							// PLSQLPrinter.g:1053:24: names+= column_name
							{
							pushFollow(FOLLOW_column_name_in_update_set_elements8380);
							names=column_name();
							state._fsp--;

							if (list_names==null) list_names=new ArrayList<Object>();
							list_names.add(names.getTemplate());
							}
							break;

						default :
							if ( cnt161 >= 1 ) break loop161;
							EarlyExitException eee = new EarlyExitException(161, input);
							throw eee;
						}
						cnt161++;
					}

					pushFollow(FOLLOW_subquery_in_update_set_elements8383);
					subquery212=subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1054:5: -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_columns_subquery",new STAttrMap().put("column_names", list_names).put("subquery", (subquery212!=null?((StringTemplate)subquery212.getTemplate()):null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1055:10: ^( VALUE_VK ( char_set_name )? id= commented_id expression )
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_update_set_elements8416); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1055:21: ( char_set_name )?
					int alt162=2;
					int LA162_0 = input.LA(1);
					if ( (LA162_0==CHAR_SET_NAME) ) {
						alt162=1;
					}
					switch (alt162) {
						case 1 :
							// PLSQLPrinter.g:1055:21: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_update_set_elements8418);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_commented_id_in_update_set_elements8423);
					id=commented_id();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_update_set_elements8425);
					expression213=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1056:5: -> update_set_element_column_value(column_name=$id.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("update_set_element_column_value",new STAttrMap().put("column_name", (id!=null?((StringTemplate)id.getTemplate()):null)).put("expression", (expression213!=null?((StringTemplate)expression213.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "update_set_elements"


	public static class delete_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "delete_statement"
	// PLSQLPrinter.g:1061:1: delete_statement : ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.delete_statement_return delete_statement() throws RecognitionException {
		PLSQLPrinter.delete_statement_return retval = new PLSQLPrinter.delete_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_table_ref214 =null;
		TreeRuleReturnScope where_clause215 =null;
		TreeRuleReturnScope static_returning_clause216 =null;
		TreeRuleReturnScope error_logging_clause217 =null;

		try {
			// PLSQLPrinter.g:1062:5: ( ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1062:10: ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement8469); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_delete_statement8471);
			general_table_ref214=general_table_ref();
			state._fsp--;

			// PLSQLPrinter.g:1063:13: ( where_clause )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==SQL92_RESERVED_WHERE) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// PLSQLPrinter.g:1063:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_statement8485);
					where_clause215=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1063:27: ( static_returning_clause )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==STATIC_RETURNING) ) {
				alt165=1;
			}
			switch (alt165) {
				case 1 :
					// PLSQLPrinter.g:1063:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_delete_statement8488);
					static_returning_clause216=static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1063:52: ( error_logging_clause )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==LOG_VK) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// PLSQLPrinter.g:1063:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_delete_statement8491);
					error_logging_clause217=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1064:5: -> delete_statement(general_table_ref=$general_table_ref.stwhere_clause=$where_clause.ststatic_returning_clause=$static_returning_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("delete_statement",new STAttrMap().put("general_table_ref", (general_table_ref214!=null?((StringTemplate)general_table_ref214.getTemplate()):null)).put("where_clause", (where_clause215!=null?((StringTemplate)where_clause215.getTemplate()):null)).put("static_returning_clause", (static_returning_clause216!=null?((StringTemplate)static_returning_clause216.getTemplate()):null)).put("error_logging_clause", (error_logging_clause217!=null?((StringTemplate)error_logging_clause217.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "delete_statement"


	public static class insert_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_statement"
	// PLSQLPrinter.g:1069:1: insert_statement : ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) ) ;
	public final PLSQLPrinter.insert_statement_return insert_statement() throws RecognitionException {
		PLSQLPrinter.insert_statement_return retval = new PLSQLPrinter.insert_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope single_table_insert218 =null;
		TreeRuleReturnScope multi_table_insert219 =null;

		try {
			// PLSQLPrinter.g:1070:5: ( ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) ) )
			// PLSQLPrinter.g:1070:10: ^( SQL92_RESERVED_INSERT ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st }) )
			{
			match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement8569); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1071:13: ( single_table_insert -> { $single_table_insert.st }| multi_table_insert -> { $multi_table_insert.st })
			int alt167=2;
			int LA167_0 = input.LA(1);
			if ( (LA167_0==SINGLE_TABLE_MODE) ) {
				alt167=1;
			}
			else if ( (LA167_0==MULTI_TABLE_MODE) ) {
				alt167=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 167, 0, input);
				throw nvae;
			}

			switch (alt167) {
				case 1 :
					// PLSQLPrinter.g:1072:15: single_table_insert
					{
					pushFollow(FOLLOW_single_table_insert_in_insert_statement8599);
					single_table_insert218=single_table_insert();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1072:35: -> { $single_table_insert.st }
					{
						retval.st =  (single_table_insert218!=null?((StringTemplate)single_table_insert218.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1073:20: multi_table_insert
					{
					pushFollow(FOLLOW_multi_table_insert_in_insert_statement8624);
					multi_table_insert219=multi_table_insert();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1073:39: -> { $multi_table_insert.st }
					{
						retval.st =  (multi_table_insert219!=null?((StringTemplate)multi_table_insert219.getTemplate()):null) ;
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_statement"


	public static class single_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "single_table_insert"
	// PLSQLPrinter.g:1080:1: single_table_insert : ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.single_table_insert_return single_table_insert() throws RecognitionException {
		PLSQLPrinter.single_table_insert_return retval = new PLSQLPrinter.single_table_insert_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope insert_into_clause220 =null;
		TreeRuleReturnScope values_clause221 =null;
		TreeRuleReturnScope static_returning_clause222 =null;
		TreeRuleReturnScope select_statement223 =null;
		TreeRuleReturnScope error_logging_clause224 =null;

		try {
			// PLSQLPrinter.g:1081:5: ( ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1081:10: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? )
			{
			match(input,SINGLE_TABLE_MODE,FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert8677); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_single_table_insert8679);
			insert_into_clause220=insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1081:49: ( values_clause ( static_returning_clause )? | select_statement )
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==SQL92_RESERVED_VALUES) ) {
				alt169=1;
			}
			else if ( (LA169_0==SELECT_STATEMENT) ) {
				alt169=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 169, 0, input);
				throw nvae;
			}

			switch (alt169) {
				case 1 :
					// PLSQLPrinter.g:1081:50: values_clause ( static_returning_clause )?
					{
					pushFollow(FOLLOW_values_clause_in_single_table_insert8682);
					values_clause221=values_clause();
					state._fsp--;

					// PLSQLPrinter.g:1081:64: ( static_returning_clause )?
					int alt168=2;
					int LA168_0 = input.LA(1);
					if ( (LA168_0==STATIC_RETURNING) ) {
						alt168=1;
					}
					switch (alt168) {
						case 1 :
							// PLSQLPrinter.g:1081:64: static_returning_clause
							{
							pushFollow(FOLLOW_static_returning_clause_in_single_table_insert8684);
							static_returning_clause222=static_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1081:90: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_single_table_insert8688);
					select_statement223=select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1081:108: ( error_logging_clause )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==LOG_VK) ) {
				alt170=1;
			}
			switch (alt170) {
				case 1 :
					// PLSQLPrinter.g:1081:108: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_single_table_insert8691);
					error_logging_clause224=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1082:5: -> single_table_insert(insert_into_clause=$insert_into_clause.stvalues_clause=$values_clause.ststatic_returning_clause=$static_returning_clause.stselect_statement=$select_statement.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("single_table_insert",new STAttrMap().put("insert_into_clause", (insert_into_clause220!=null?((StringTemplate)insert_into_clause220.getTemplate()):null)).put("values_clause", (values_clause221!=null?((StringTemplate)values_clause221.getTemplate()):null)).put("static_returning_clause", (static_returning_clause222!=null?((StringTemplate)static_returning_clause222.getTemplate()):null)).put("select_statement", (select_statement223!=null?((StringTemplate)select_statement223.getTemplate()):null)).put("error_logging_clause", (error_logging_clause224!=null?((StringTemplate)error_logging_clause224.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "single_table_insert"


	public static class multi_table_insert_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_insert"
	// PLSQLPrinter.g:1088:1: multi_table_insert : ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\";
	public final PLSQLPrinter.multi_table_insert_return multi_table_insert() throws RecognitionException {
		PLSQLPrinter.multi_table_insert_return retval = new PLSQLPrinter.multi_table_insert_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1089:5: ( ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) -> template( \"not implemented: multi_table_insert\")
			// PLSQLPrinter.g:1089:10: ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) )
			{
			match(input,MULTI_TABLE_MODE,FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert8786); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_select_statement_in_multi_table_insert8788);
			select_statement();
			state._fsp--;

			// PLSQLPrinter.g:1089:46: ( conditional_insert_clause | ( multi_table_element )+ )
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==CONDITIONAL_INSERT) ) {
				alt172=1;
			}
			else if ( (LA172_0==TABLE_ELEMENT) ) {
				alt172=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 172, 0, input);
				throw nvae;
			}

			switch (alt172) {
				case 1 :
					// PLSQLPrinter.g:1089:47: conditional_insert_clause
					{
					pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert8791);
					conditional_insert_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1089:73: ( multi_table_element )+
					{
					// PLSQLPrinter.g:1089:73: ( multi_table_element )+
					int cnt171=0;
					loop171:
					while (true) {
						int alt171=2;
						int LA171_0 = input.LA(1);
						if ( (LA171_0==TABLE_ELEMENT) ) {
							alt171=1;
						}

						switch (alt171) {
						case 1 :
							// PLSQLPrinter.g:1089:73: multi_table_element
							{
							pushFollow(FOLLOW_multi_table_element_in_multi_table_insert8793);
							multi_table_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt171 >= 1 ) break loop171;
							EarlyExitException eee = new EarlyExitException(171, input);
							throw eee;
						}
						cnt171++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1090:5: -> template( \"not implemented: multi_table_insert\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_insert");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_insert"


	public static class multi_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "multi_table_element"
	// PLSQLPrinter.g:1093:1: multi_table_element : ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\";
	public final PLSQLPrinter.multi_table_element_return multi_table_element() throws RecognitionException {
		PLSQLPrinter.multi_table_element_return retval = new PLSQLPrinter.multi_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1094:5: ( ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) -> template( \"not implemented: multi_table_element\")
			// PLSQLPrinter.g:1094:10: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
			{
			match(input,TABLE_ELEMENT,FOLLOW_TABLE_ELEMENT_in_multi_table_element8831); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_multi_table_element8833);
			insert_into_clause();
			state._fsp--;

			// PLSQLPrinter.g:1094:45: ( values_clause )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==SQL92_RESERVED_VALUES) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// PLSQLPrinter.g:1094:45: values_clause
					{
					pushFollow(FOLLOW_values_clause_in_multi_table_element8835);
					values_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1094:60: ( error_logging_clause )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==LOG_VK) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// PLSQLPrinter.g:1094:60: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_multi_table_element8838);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1095:5: -> template( \"not implemented: multi_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: multi_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "multi_table_element"


	public static class conditional_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_clause"
	// PLSQLPrinter.g:1098:1: conditional_insert_clause : ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\";
	public final PLSQLPrinter.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException {
		PLSQLPrinter.conditional_insert_clause_return retval = new PLSQLPrinter.conditional_insert_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1099:5: ( ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) -> template( \"not implemented: conditional_insert_clause\")
			// PLSQLPrinter.g:1099:10: ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
			{
			match(input,CONDITIONAL_INSERT,FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause8875); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1099:31: ( SQL92_RESERVED_ALL | FIRST_VK )?
			int alt175=3;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==SQL92_RESERVED_ALL) ) {
				alt175=1;
			}
			else if ( (LA175_0==FIRST_VK) ) {
				alt175=2;
			}
			switch (alt175) {
				case 1 :
					// PLSQLPrinter.g:1099:32: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause8878); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1099:51: FIRST_VK
					{
					match(input,FIRST_VK,FOLLOW_FIRST_VK_in_conditional_insert_clause8880); 
					}
					break;

			}

			// PLSQLPrinter.g:1099:62: ( conditional_insert_when_part )+
			int cnt176=0;
			loop176:
			while (true) {
				int alt176=2;
				int LA176_0 = input.LA(1);
				if ( (LA176_0==SQL92_RESERVED_WHEN) ) {
					alt176=1;
				}

				switch (alt176) {
				case 1 :
					// PLSQLPrinter.g:1099:62: conditional_insert_when_part
					{
					pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause8884);
					conditional_insert_when_part();
					state._fsp--;

					}
					break;

				default :
					if ( cnt176 >= 1 ) break loop176;
					EarlyExitException eee = new EarlyExitException(176, input);
					throw eee;
				}
				cnt176++;
			}

			// PLSQLPrinter.g:1099:92: ( conditional_insert_else_part )?
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==SQL92_RESERVED_ELSE) ) {
				alt177=1;
			}
			switch (alt177) {
				case 1 :
					// PLSQLPrinter.g:1099:92: conditional_insert_else_part
					{
					pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause8887);
					conditional_insert_else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1100:5: -> template( \"not implemented: conditional_insert_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_clause"


	public static class conditional_insert_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_when_part"
	// PLSQLPrinter.g:1103:1: conditional_insert_when_part : ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\";
	public final PLSQLPrinter.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_when_part_return retval = new PLSQLPrinter.conditional_insert_when_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1104:5: ( ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_when_part\")
			// PLSQLPrinter.g:1104:10: ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part8925); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_conditional_insert_when_part8927);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1104:43: ( multi_table_element )+
			int cnt178=0;
			loop178:
			while (true) {
				int alt178=2;
				int LA178_0 = input.LA(1);
				if ( (LA178_0==TABLE_ELEMENT) ) {
					alt178=1;
				}

				switch (alt178) {
				case 1 :
					// PLSQLPrinter.g:1104:43: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part8929);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt178 >= 1 ) break loop178;
					EarlyExitException eee = new EarlyExitException(178, input);
					throw eee;
				}
				cnt178++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1105:5: -> template( \"not implemented: conditional_insert_when_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_when_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_when_part"


	public static class conditional_insert_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "conditional_insert_else_part"
	// PLSQLPrinter.g:1108:1: conditional_insert_else_part : ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\";
	public final PLSQLPrinter.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException {
		PLSQLPrinter.conditional_insert_else_part_return retval = new PLSQLPrinter.conditional_insert_else_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1109:5: ( ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) -> template( \"not implemented: conditional_insert_else_part\")
			// PLSQLPrinter.g:1109:10: ^( SQL92_RESERVED_ELSE ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part8966); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1109:32: ( multi_table_element )+
			int cnt179=0;
			loop179:
			while (true) {
				int alt179=2;
				int LA179_0 = input.LA(1);
				if ( (LA179_0==TABLE_ELEMENT) ) {
					alt179=1;
				}

				switch (alt179) {
				case 1 :
					// PLSQLPrinter.g:1109:32: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part8968);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt179 >= 1 ) break loop179;
					EarlyExitException eee = new EarlyExitException(179, input);
					throw eee;
				}
				cnt179++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1110:5: -> template( \"not implemented: conditional_insert_else_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: conditional_insert_else_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "conditional_insert_else_part"


	public static class insert_into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "insert_into_clause"
	// PLSQLPrinter.g:1113:1: insert_into_clause : ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) ) -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns);
	public final PLSQLPrinter.insert_into_clause_return insert_into_clause() throws RecognitionException {
		PLSQLPrinter.insert_into_clause_return retval = new PLSQLPrinter.insert_into_clause_return();
		retval.start = input.LT(1);

		List<Object> list_columns=null;
		TreeRuleReturnScope general_table_ref225 =null;
		RuleReturnScope columns = null;
		try {
			// PLSQLPrinter.g:1114:5: ( ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) ) -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns))
			// PLSQLPrinter.g:1114:10: ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS (columns+= column_name )* ) )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause9005); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_insert_into_clause9007);
			general_table_ref225=general_table_ref();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_insert_into_clause9010); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1114:67: (columns+= column_name )*
				loop180:
				while (true) {
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==COLUMN_NAME) ) {
						alt180=1;
					}

					switch (alt180) {
					case 1 :
						// PLSQLPrinter.g:1114:67: columns+= column_name
						{
						pushFollow(FOLLOW_column_name_in_insert_into_clause9014);
						columns=column_name();
						state._fsp--;

						if (list_columns==null) list_columns=new ArrayList<Object>();
						list_columns.add(columns.getTemplate());
						}
						break;

					default :
						break loop180;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1115:5: -> insert_into_clause(general_table_ref=$general_table_ref.stcolumns=$columns)
			{
				retval.st = templateLib.getInstanceOf("insert_into_clause",new STAttrMap().put("general_table_ref", (general_table_ref225!=null?((StringTemplate)general_table_ref225.getTemplate()):null)).put("columns", list_columns));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insert_into_clause"


	public static class values_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "values_clause"
	// PLSQLPrinter.g:1118:1: values_clause : ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) ) -> values_clause(expression_or_expression_list=$r.st);
	public final PLSQLPrinter.values_clause_return values_clause() throws RecognitionException {
		PLSQLPrinter.values_clause_return retval = new PLSQLPrinter.values_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope r =null;

		try {
			// PLSQLPrinter.g:1119:5: ( ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) ) -> values_clause(expression_or_expression_list=$r.st))
			// PLSQLPrinter.g:1119:10: ^( SQL92_RESERVED_VALUES (r= expression_list |r= expression ) )
			{
			match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_clause9058); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1119:34: (r= expression_list |r= expression )
			int alt181=2;
			int LA181_0 = input.LA(1);
			if ( (LA181_0==EXPR_LIST) ) {
				alt181=1;
			}
			else if ( (LA181_0==EXPR||LA181_0==LOGIC_EXPR) ) {
				alt181=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 181, 0, input);
				throw nvae;
			}

			switch (alt181) {
				case 1 :
					// PLSQLPrinter.g:1119:35: r= expression_list
					{
					pushFollow(FOLLOW_expression_list_in_values_clause9063);
					r=expression_list();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1119:53: r= expression
					{
					pushFollow(FOLLOW_expression_in_values_clause9067);
					r=expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1120:5: -> values_clause(expression_or_expression_list=$r.st)
			{
				retval.st = templateLib.getInstanceOf("values_clause",new STAttrMap().put("expression_or_expression_list", (r!=null?((StringTemplate)r.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "values_clause"


	public static class merge_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_statement"
	// PLSQLPrinter.g:1124:1: merge_statement : ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st);
	public final PLSQLPrinter.merge_statement_return merge_statement() throws RecognitionException {
		PLSQLPrinter.merge_statement_return retval = new PLSQLPrinter.merge_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope tableview_name226 =null;
		TreeRuleReturnScope alias227 =null;
		TreeRuleReturnScope selected_tableview228 =null;
		TreeRuleReturnScope expression229 =null;
		TreeRuleReturnScope merge_update_clause230 =null;
		TreeRuleReturnScope merge_insert_clause231 =null;
		TreeRuleReturnScope error_logging_clause232 =null;

		try {
			// PLSQLPrinter.g:1125:5: ( ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st))
			// PLSQLPrinter.g:1125:10: ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
			{
			match(input,MERGE_VK,FOLLOW_MERGE_VK_in_merge_statement9106); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1125:21: ( alias )?
			int alt182=2;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==COLUMN_ALIAS||LA182_0==TABLE_ALIAS) ) {
				alt182=1;
			}
			switch (alt182) {
				case 1 :
					// PLSQLPrinter.g:1125:21: alias
					{
					pushFollow(FOLLOW_alias_in_merge_statement9108);
					alias227=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_merge_statement9111);
			tableview_name226=tableview_name();
			state._fsp--;

			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement9127); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_selected_tableview_in_merge_statement9129);
			selected_tableview228=selected_tableview();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_statement9131);
			expression229=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1127:14: ( merge_update_clause )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==MERGE_UPDATE) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// PLSQLPrinter.g:1127:14: merge_update_clause
					{
					pushFollow(FOLLOW_merge_update_clause_in_merge_statement9147);
					merge_update_clause230=merge_update_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1127:35: ( merge_insert_clause )?
			int alt184=2;
			int LA184_0 = input.LA(1);
			if ( (LA184_0==MERGE_INSERT) ) {
				alt184=1;
			}
			switch (alt184) {
				case 1 :
					// PLSQLPrinter.g:1127:35: merge_insert_clause
					{
					pushFollow(FOLLOW_merge_insert_clause_in_merge_statement9150);
					merge_insert_clause231=merge_insert_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1127:56: ( error_logging_clause )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==LOG_VK) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// PLSQLPrinter.g:1127:56: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_merge_statement9153);
					error_logging_clause232=error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1128:5: -> merge_statement(table_name=$tableview_name.sttable_alias=$alias.stselected_tableview=$selected_tableview.stcondition=$expression.stmerge_update_clause=$merge_update_clause.stmerge_insert_clause=$merge_insert_clause.sterror_logging_clause=$error_logging_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_statement",new STAttrMap().put("table_name", (tableview_name226!=null?((StringTemplate)tableview_name226.getTemplate()):null)).put("table_alias", (alias227!=null?((StringTemplate)alias227.getTemplate()):null)).put("selected_tableview", (selected_tableview228!=null?((StringTemplate)selected_tableview228.getTemplate()):null)).put("condition", (expression229!=null?((StringTemplate)expression229.getTemplate()):null)).put("merge_update_clause", (merge_update_clause230!=null?((StringTemplate)merge_update_clause230.getTemplate()):null)).put("merge_insert_clause", (merge_insert_clause231!=null?((StringTemplate)merge_insert_clause231.getTemplate()):null)).put("error_logging_clause", (error_logging_clause232!=null?((StringTemplate)error_logging_clause232.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_statement"


	public static class merge_update_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_clause"
	// PLSQLPrinter.g:1136:1: merge_update_clause : ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st);
	public final PLSQLPrinter.merge_update_clause_return merge_update_clause() throws RecognitionException {
		PLSQLPrinter.merge_update_clause_return retval = new PLSQLPrinter.merge_update_clause_return();
		retval.start = input.LT(1);

		List<Object> list_merge_elements=null;
		TreeRuleReturnScope where_clause233 =null;
		TreeRuleReturnScope merge_update_delete_part234 =null;
		RuleReturnScope merge_elements = null;
		try {
			// PLSQLPrinter.g:1137:5: ( ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st))
			// PLSQLPrinter.g:1137:10: ^( MERGE_UPDATE (merge_elements+= merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
			{
			match(input,MERGE_UPDATE,FOLLOW_MERGE_UPDATE_in_merge_update_clause9254); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1137:39: (merge_elements+= merge_element )+
			int cnt186=0;
			loop186:
			while (true) {
				int alt186=2;
				int LA186_0 = input.LA(1);
				if ( (LA186_0==ASSIGN) ) {
					alt186=1;
				}

				switch (alt186) {
				case 1 :
					// PLSQLPrinter.g:1137:39: merge_elements+= merge_element
					{
					pushFollow(FOLLOW_merge_element_in_merge_update_clause9258);
					merge_elements=merge_element();
					state._fsp--;

					if (list_merge_elements==null) list_merge_elements=new ArrayList<Object>();
					list_merge_elements.add(merge_elements.getTemplate());
					}
					break;

				default :
					if ( cnt186 >= 1 ) break loop186;
					EarlyExitException eee = new EarlyExitException(186, input);
					throw eee;
				}
				cnt186++;
			}

			// PLSQLPrinter.g:1137:56: ( where_clause )?
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==SQL92_RESERVED_WHERE) ) {
				alt187=1;
			}
			switch (alt187) {
				case 1 :
					// PLSQLPrinter.g:1137:56: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_update_clause9261);
					where_clause233=where_clause();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1137:70: ( merge_update_delete_part )?
			int alt188=2;
			int LA188_0 = input.LA(1);
			if ( (LA188_0==SQL92_RESERVED_DELETE) ) {
				alt188=1;
			}
			switch (alt188) {
				case 1 :
					// PLSQLPrinter.g:1137:70: merge_update_delete_part
					{
					pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause9264);
					merge_update_delete_part234=merge_update_delete_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1138:5: -> merge_update_clause(merge_elements=$merge_elementswhere_clause=$where_clause.stmerge_update_delete_part=$merge_update_delete_part.st)
			{
				retval.st = templateLib.getInstanceOf("merge_update_clause",new STAttrMap().put("merge_elements", list_merge_elements).put("where_clause", (where_clause233!=null?((StringTemplate)where_clause233.getTemplate()):null)).put("merge_update_delete_part", (merge_update_delete_part234!=null?((StringTemplate)merge_update_delete_part234.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_clause"


	public static class merge_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_element"
	// PLSQLPrinter.g:1143:1: merge_element : ^( ASSIGN column_name expression ) -> merge_element(column_name=$column_name.stexpression=$expression.st);
	public final PLSQLPrinter.merge_element_return merge_element() throws RecognitionException {
		PLSQLPrinter.merge_element_return retval = new PLSQLPrinter.merge_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope column_name235 =null;
		TreeRuleReturnScope expression236 =null;

		try {
			// PLSQLPrinter.g:1144:5: ( ^( ASSIGN column_name expression ) -> merge_element(column_name=$column_name.stexpression=$expression.st))
			// PLSQLPrinter.g:1144:10: ^( ASSIGN column_name expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_merge_element9333); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_merge_element9335);
			column_name235=column_name();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_element9337);
			expression236=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1145:5: -> merge_element(column_name=$column_name.stexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("merge_element",new STAttrMap().put("column_name", (column_name235!=null?((StringTemplate)column_name235.getTemplate()):null)).put("expression", (expression236!=null?((StringTemplate)expression236.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_element"


	public static class merge_update_delete_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_update_delete_part"
	// PLSQLPrinter.g:1148:1: merge_update_delete_part : ^( SQL92_RESERVED_DELETE where_clause ) -> merge_update_delete_part(where_clause=$where_clause.st);
	public final PLSQLPrinter.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException {
		PLSQLPrinter.merge_update_delete_part_return retval = new PLSQLPrinter.merge_update_delete_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope where_clause237 =null;

		try {
			// PLSQLPrinter.g:1149:5: ( ^( SQL92_RESERVED_DELETE where_clause ) -> merge_update_delete_part(where_clause=$where_clause.st))
			// PLSQLPrinter.g:1149:10: ^( SQL92_RESERVED_DELETE where_clause )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part9379); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_where_clause_in_merge_update_delete_part9381);
			where_clause237=where_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1150:5: -> merge_update_delete_part(where_clause=$where_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_update_delete_part",new STAttrMap().put("where_clause", (where_clause237!=null?((StringTemplate)where_clause237.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_update_delete_part"


	public static class merge_insert_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "merge_insert_clause"
	// PLSQLPrinter.g:1153:1: merge_insert_clause : ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? ) -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st);
	public final PLSQLPrinter.merge_insert_clause_return merge_insert_clause() throws RecognitionException {
		PLSQLPrinter.merge_insert_clause_return retval = new PLSQLPrinter.merge_insert_clause_return();
		retval.start = input.LT(1);

		List<Object> list_columns=null;
		TreeRuleReturnScope expression_list238 =null;
		TreeRuleReturnScope where_clause239 =null;
		RuleReturnScope columns = null;
		try {
			// PLSQLPrinter.g:1154:5: ( ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? ) -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st))
			// PLSQLPrinter.g:1154:10: ^( MERGE_INSERT ^( COLUMNS (columns+= column_name )* ) expression_list ( where_clause )? )
			{
			match(input,MERGE_INSERT,FOLLOW_MERGE_INSERT_in_merge_insert_clause9418); 
			match(input, Token.DOWN, null); 
			match(input,COLUMNS,FOLLOW_COLUMNS_in_merge_insert_clause9421); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1154:42: (columns+= column_name )*
				loop189:
				while (true) {
					int alt189=2;
					int LA189_0 = input.LA(1);
					if ( (LA189_0==COLUMN_NAME) ) {
						alt189=1;
					}

					switch (alt189) {
					case 1 :
						// PLSQLPrinter.g:1154:42: columns+= column_name
						{
						pushFollow(FOLLOW_column_name_in_merge_insert_clause9425);
						columns=column_name();
						state._fsp--;

						if (list_columns==null) list_columns=new ArrayList<Object>();
						list_columns.add(columns.getTemplate());
						}
						break;

					default :
						break loop189;
					}
				}

				match(input, Token.UP, null); 
			}

			pushFollow(FOLLOW_expression_list_in_merge_insert_clause9429);
			expression_list238=expression_list();
			state._fsp--;

			// PLSQLPrinter.g:1154:74: ( where_clause )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==SQL92_RESERVED_WHERE) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// PLSQLPrinter.g:1154:74: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_insert_clause9431);
					where_clause239=where_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1155:5: -> merge_insert_clause(columns=$columnsexpression_list=$expression_list.stwhere_clause=$where_clause.st)
			{
				retval.st = templateLib.getInstanceOf("merge_insert_clause",new STAttrMap().put("columns", list_columns).put("expression_list", (expression_list238!=null?((StringTemplate)expression_list238.getTemplate()):null)).put("where_clause", (where_clause239!=null?((StringTemplate)where_clause239.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "merge_insert_clause"


	public static class selected_tableview_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "selected_tableview"
	// PLSQLPrinter.g:1158:1: selected_tableview : ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) ) ;
	public final PLSQLPrinter.selected_tableview_return selected_tableview() throws RecognitionException {
		PLSQLPrinter.selected_tableview_return retval = new PLSQLPrinter.selected_tableview_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope tableview_name240 =null;
		TreeRuleReturnScope alias241 =null;
		TreeRuleReturnScope select_statement242 =null;

		try {
			// PLSQLPrinter.g:1159:5: ( ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) ) )
			// PLSQLPrinter.g:1159:10: ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)) )
			{
			match(input,SELECTED_TABLEVIEW,FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview9480); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1160:13: ( alias )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==COLUMN_ALIAS||LA191_0==TABLE_ALIAS) ) {
				alt191=1;
			}
			switch (alt191) {
				case 1 :
					// PLSQLPrinter.g:1160:13: alias
					{
					pushFollow(FOLLOW_alias_in_selected_tableview9494);
					alias241=alias();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1161:13: ( tableview_name -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)| select_statement -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st))
			int alt192=2;
			int LA192_0 = input.LA(1);
			if ( (LA192_0==TABLEVIEW_NAME) ) {
				alt192=1;
			}
			else if ( (LA192_0==SELECT_STATEMENT) ) {
				alt192=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 192, 0, input);
				throw nvae;
			}

			switch (alt192) {
				case 1 :
					// PLSQLPrinter.g:1162:15: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_selected_tableview9525);
					tableview_name240=tableview_name();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1163:17: -> selected_tableview_table(name=$tableview_name.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("selected_tableview_table",new STAttrMap().put("name", (tableview_name240!=null?((StringTemplate)tableview_name240.getTemplate()):null)).put("alias", (alias241!=null?((StringTemplate)alias241.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1164:17: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_selected_tableview9573);
					select_statement242=select_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1165:17: -> selected_tableview_select_statement(select_statement=$select_statement.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("selected_tableview_select_statement",new STAttrMap().put("select_statement", (select_statement242!=null?((StringTemplate)select_statement242.getTemplate()):null)).put("alias", (alias241!=null?((StringTemplate)alias241.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selected_tableview"


	public static class lock_table_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_statement"
	// PLSQLPrinter.g:1172:1: lock_table_statement : ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\";
	public final PLSQLPrinter.lock_table_statement_return lock_table_statement() throws RecognitionException {
		PLSQLPrinter.lock_table_statement_return retval = new PLSQLPrinter.lock_table_statement_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1173:5: ( ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) -> template( \"not implemented: lock_table_statement\")
			// PLSQLPrinter.g:1173:10: ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
			{
			match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement9652); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1173:32: ( lock_table_element )+
			int cnt193=0;
			loop193:
			while (true) {
				int alt193=2;
				int LA193_0 = input.LA(1);
				if ( (LA193_0==LOCK_TABLE_ELEMENT) ) {
					alt193=1;
				}

				switch (alt193) {
				case 1 :
					// PLSQLPrinter.g:1173:32: lock_table_element
					{
					pushFollow(FOLLOW_lock_table_element_in_lock_table_statement9654);
					lock_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt193 >= 1 ) break loop193;
					EarlyExitException eee = new EarlyExitException(193, input);
					throw eee;
				}
				cnt193++;
			}

			pushFollow(FOLLOW_lock_mode_in_lock_table_statement9657);
			lock_mode();
			state._fsp--;

			// PLSQLPrinter.g:1173:62: ( wait_nowait_part )?
			int alt194=2;
			int LA194_0 = input.LA(1);
			if ( (LA194_0==PLSQL_RESERVED_NOWAIT||LA194_0==WAIT_VK) ) {
				alt194=1;
			}
			switch (alt194) {
				case 1 :
					// PLSQLPrinter.g:1173:62: wait_nowait_part
					{
					pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement9659);
					wait_nowait_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1174:5: -> template( \"not implemented: lock_table_statement\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_statement");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_statement"


	public static class wait_nowait_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "wait_nowait_part"
	// PLSQLPrinter.g:1177:1: wait_nowait_part : ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\");
	public final PLSQLPrinter.wait_nowait_part_return wait_nowait_part() throws RecognitionException {
		PLSQLPrinter.wait_nowait_part_return retval = new PLSQLPrinter.wait_nowait_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1178:5: ( ^( WAIT_VK expression ) -> template( \"not implemented: wait_nowait_part\"| PLSQL_RESERVED_NOWAIT -> template( \"not implemented: wait_nowait_part\")
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==WAIT_VK) ) {
				alt195=1;
			}
			else if ( (LA195_0==PLSQL_RESERVED_NOWAIT) ) {
				alt195=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 195, 0, input);
				throw nvae;
			}

			switch (alt195) {
				case 1 :
					// PLSQLPrinter.g:1178:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_wait_nowait_part9696); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_wait_nowait_part9698);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1179:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1180:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part9724); 
					// TEMPLATE REWRITE
					// 1181:5: -> template( \"not implemented: wait_nowait_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: wait_nowait_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "wait_nowait_part"


	public static class lock_table_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_table_element"
	// PLSQLPrinter.g:1186:1: lock_table_element : ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\";
	public final PLSQLPrinter.lock_table_element_return lock_table_element() throws RecognitionException {
		PLSQLPrinter.lock_table_element_return retval = new PLSQLPrinter.lock_table_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1187:5: ( ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) -> template( \"not implemented: lock_table_element\")
			// PLSQLPrinter.g:1187:10: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
			{
			match(input,LOCK_TABLE_ELEMENT,FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element9761); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_lock_table_element9763);
			tableview_name();
			state._fsp--;

			// PLSQLPrinter.g:1187:46: ( partition_extension_clause )?
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==PARTITION_VK||LA196_0==SUBPARTITION_VK) ) {
				alt196=1;
			}
			switch (alt196) {
				case 1 :
					// PLSQLPrinter.g:1187:46: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element9765);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1188:5: -> template( \"not implemented: lock_table_element\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: lock_table_element");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_table_element"


	public static class lock_mode_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "lock_mode"
	// PLSQLPrinter.g:1191:1: lock_mode : ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\");
	public final PLSQLPrinter.lock_mode_return lock_mode() throws RecognitionException {
		PLSQLPrinter.lock_mode_return retval = new PLSQLPrinter.lock_mode_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1192:5: ( ROW_VK PLSQL_RESERVED_SHARE -> template( \"not implemented: lock_mode\"| ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\"| PLSQL_RESERVED_EXCLUSIVE -> template( \"not implemented: lock_mode\")
			int alt198=5;
			switch ( input.LA(1) ) {
			case ROW_VK:
				{
				int LA198_1 = input.LA(2);
				if ( (LA198_1==PLSQL_RESERVED_SHARE) ) {
					alt198=1;
				}
				else if ( (LA198_1==PLSQL_RESERVED_EXCLUSIVE) ) {
					alt198=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 198, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_SHARE:
				{
				int LA198_2 = input.LA(2);
				if ( (LA198_2==ROW_VK) ) {
					alt198=4;
				}
				else if ( (LA198_2==UP||LA198_2==PLSQL_RESERVED_NOWAIT||LA198_2==SQL92_RESERVED_UPDATE||LA198_2==WAIT_VK) ) {
					alt198=3;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 198, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_EXCLUSIVE:
				{
				alt198=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 198, 0, input);
				throw nvae;
			}
			switch (alt198) {
				case 1 :
					// PLSQLPrinter.g:1192:10: ROW_VK PLSQL_RESERVED_SHARE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9801); 
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9803); 
					// TEMPLATE REWRITE
					// 1193:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1194:10: ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9828); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9830); 
					// TEMPLATE REWRITE
					// 1195:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1196:10: PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )?
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9855); 
					// PLSQLPrinter.g:1196:31: ( SQL92_RESERVED_UPDATE )?
					int alt197=2;
					int LA197_0 = input.LA(1);
					if ( (LA197_0==SQL92_RESERVED_UPDATE) ) {
						alt197=1;
					}
					switch (alt197) {
						case 1 :
							// PLSQLPrinter.g:1196:31: SQL92_RESERVED_UPDATE
							{
							match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode9857); 
							}
							break;

					}

					// TEMPLATE REWRITE
					// 1197:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1198:10: PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9883); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9885); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9887); 
					// TEMPLATE REWRITE
					// 1199:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1200:10: PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9912); 
					// TEMPLATE REWRITE
					// 1201:5: -> template( \"not implemented: lock_mode\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: lock_mode");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lock_mode"


	public static class general_table_ref_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_table_ref"
	// PLSQLPrinter.g:1207:1: general_table_ref : ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st);
	public final PLSQLPrinter.general_table_ref_return general_table_ref() throws RecognitionException {
		PLSQLPrinter.general_table_ref_return retval = new PLSQLPrinter.general_table_ref_return();
		retval.start = input.LT(1);

		CommonTree ONLY_VK243=null;
		TreeRuleReturnScope dml_table_expression_clause244 =null;
		TreeRuleReturnScope alias245 =null;

		try {
			// PLSQLPrinter.g:1208:5: ( ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st))
			// PLSQLPrinter.g:1208:10: ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_general_table_ref9950); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1208:22: ( alias )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==COLUMN_ALIAS||LA199_0==TABLE_ALIAS) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// PLSQLPrinter.g:1208:22: alias
					{
					pushFollow(FOLLOW_alias_in_general_table_ref9952);
					alias245=alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref9955);
			dml_table_expression_clause244=dml_table_expression_clause();
			state._fsp--;

			// PLSQLPrinter.g:1208:57: ( ONLY_VK )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==ONLY_VK) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// PLSQLPrinter.g:1208:57: ONLY_VK
					{
					ONLY_VK243=(CommonTree)match(input,ONLY_VK,FOLLOW_ONLY_VK_in_general_table_ref9957); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1209:5: -> general_table_ref(is_only=$ONLY_VK != nulldml_table_expression_clause=$dml_table_expression_clause.sttable_alias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("general_table_ref",new STAttrMap().put("is_only", ONLY_VK243 != null).put("dml_table_expression_clause", (dml_table_expression_clause244!=null?((StringTemplate)dml_table_expression_clause244.getTemplate()):null)).put("table_alias", (alias245!=null?((StringTemplate)alias245.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_table_ref"


	public static class static_returning_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "static_returning_clause"
	// PLSQLPrinter.g:1215:1: static_returning_clause : ^( STATIC_RETURNING (expressions+= expression )+ into_clause ) -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st);
	public final PLSQLPrinter.static_returning_clause_return static_returning_clause() throws RecognitionException {
		PLSQLPrinter.static_returning_clause_return retval = new PLSQLPrinter.static_returning_clause_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		TreeRuleReturnScope into_clause246 =null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1216:5: ( ^( STATIC_RETURNING (expressions+= expression )+ into_clause ) -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st))
			// PLSQLPrinter.g:1216:10: ^( STATIC_RETURNING (expressions+= expression )+ into_clause )
			{
			match(input,STATIC_RETURNING,FOLLOW_STATIC_RETURNING_in_static_returning_clause10042); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1216:40: (expressions+= expression )+
			int cnt201=0;
			loop201:
			while (true) {
				int alt201=2;
				int LA201_0 = input.LA(1);
				if ( (LA201_0==EXPR||LA201_0==LOGIC_EXPR) ) {
					alt201=1;
				}

				switch (alt201) {
				case 1 :
					// PLSQLPrinter.g:1216:40: expressions+= expression
					{
					pushFollow(FOLLOW_expression_in_static_returning_clause10046);
					expressions=expression();
					state._fsp--;

					if (list_expressions==null) list_expressions=new ArrayList<Object>();
					list_expressions.add(expressions.getTemplate());
					}
					break;

				default :
					if ( cnt201 >= 1 ) break loop201;
					EarlyExitException eee = new EarlyExitException(201, input);
					throw eee;
				}
				cnt201++;
			}

			pushFollow(FOLLOW_into_clause_in_static_returning_clause10049);
			into_clause246=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1217:5: -> static_returning_clause(expressions=$expressionsinto_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("static_returning_clause",new STAttrMap().put("expressions", list_expressions).put("into_clause", (into_clause246!=null?((StringTemplate)into_clause246.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "static_returning_clause"


	public static class error_logging_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_clause"
	// PLSQLPrinter.g:1220:1: error_logging_clause : ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\";
	public final PLSQLPrinter.error_logging_clause_return error_logging_clause() throws RecognitionException {
		PLSQLPrinter.error_logging_clause_return retval = new PLSQLPrinter.error_logging_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1221:5: ( ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) -> template( \"not implemented: error_logging_clause\")
			// PLSQLPrinter.g:1221:10: ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? )
			{
			match(input,LOG_VK,FOLLOW_LOG_VK_in_error_logging_clause10091); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1221:19: ( error_logging_into_part )?
				int alt202=2;
				int LA202_0 = input.LA(1);
				if ( (LA202_0==SQL92_RESERVED_INTO) ) {
					alt202=1;
				}
				switch (alt202) {
					case 1 :
						// PLSQLPrinter.g:1221:19: error_logging_into_part
						{
						pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause10093);
						error_logging_into_part();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1221:44: ( expression )?
				int alt203=2;
				int LA203_0 = input.LA(1);
				if ( (LA203_0==EXPR||LA203_0==LOGIC_EXPR) ) {
					alt203=1;
				}
				switch (alt203) {
					case 1 :
						// PLSQLPrinter.g:1221:44: expression
						{
						pushFollow(FOLLOW_expression_in_error_logging_clause10096);
						expression();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1221:56: ( error_logging_reject_part )?
				int alt204=2;
				int LA204_0 = input.LA(1);
				if ( (LA204_0==REJECT_VK) ) {
					alt204=1;
				}
				switch (alt204) {
					case 1 :
						// PLSQLPrinter.g:1221:56: error_logging_reject_part
						{
						pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause10099);
						error_logging_reject_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1222:5: -> template( \"not implemented: error_logging_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_clause"


	public static class error_logging_into_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_into_part"
	// PLSQLPrinter.g:1225:1: error_logging_into_part : ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\";
	public final PLSQLPrinter.error_logging_into_part_return error_logging_into_part() throws RecognitionException {
		PLSQLPrinter.error_logging_into_part_return retval = new PLSQLPrinter.error_logging_into_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1226:5: ( ^( SQL92_RESERVED_INTO tableview_name ) -> template( \"not implemented: error_logging_into_part\")
			// PLSQLPrinter.g:1226:10: ^( SQL92_RESERVED_INTO tableview_name )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part10136); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_error_logging_into_part10138);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1227:5: -> template( \"not implemented: error_logging_into_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_into_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_into_part"


	public static class error_logging_reject_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "error_logging_reject_part"
	// PLSQLPrinter.g:1230:1: error_logging_reject_part : ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\";
	public final PLSQLPrinter.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException {
		PLSQLPrinter.error_logging_reject_part_return retval = new PLSQLPrinter.error_logging_reject_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1231:5: ( ^( REJECT_VK ( UNLIMITED_VK | expression ) ) -> template( \"not implemented: error_logging_reject_part\")
			// PLSQLPrinter.g:1231:10: ^( REJECT_VK ( UNLIMITED_VK | expression ) )
			{
			match(input,REJECT_VK,FOLLOW_REJECT_VK_in_error_logging_reject_part10174); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1231:22: ( UNLIMITED_VK | expression )
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==UNLIMITED_VK) ) {
				alt205=1;
			}
			else if ( (LA205_0==EXPR||LA205_0==LOGIC_EXPR) ) {
				alt205=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 205, 0, input);
				throw nvae;
			}

			switch (alt205) {
				case 1 :
					// PLSQLPrinter.g:1231:23: UNLIMITED_VK
					{
					match(input,UNLIMITED_VK,FOLLOW_UNLIMITED_VK_in_error_logging_reject_part10177); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1231:36: expression
					{
					pushFollow(FOLLOW_expression_in_error_logging_reject_part10179);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1232:5: -> template( \"not implemented: error_logging_reject_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: error_logging_reject_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "error_logging_reject_part"


	public static class dml_table_expression_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "dml_table_expression_clause"
	// PLSQLPrinter.g:1235:1: dml_table_expression_clause : ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st));
	public final PLSQLPrinter.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException {
		PLSQLPrinter.dml_table_expression_clause_return retval = new PLSQLPrinter.dml_table_expression_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope table_collection_expression247 =null;
		TreeRuleReturnScope select_statement248 =null;
		TreeRuleReturnScope subquery_restriction_clause249 =null;
		TreeRuleReturnScope tableview_name250 =null;
		TreeRuleReturnScope sample_clause251 =null;
		TreeRuleReturnScope general_element252 =null;
		TreeRuleReturnScope standard_function253 =null;
		TreeRuleReturnScope table_ref254 =null;

		try {
			// PLSQLPrinter.g:1236:5: ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) ) | table_ref -> in_parens(val=$table_ref.st))
			int alt209=2;
			int LA209_0 = input.LA(1);
			if ( (LA209_0==TABLE_EXPRESSION) ) {
				alt209=1;
			}
			else if ( (LA209_0==TABLE_REF) ) {
				alt209=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 209, 0, input);
				throw nvae;
			}

			switch (alt209) {
				case 1 :
					// PLSQLPrinter.g:1236:10: ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st }) )
					{
					match(input,TABLE_EXPRESSION,FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause10216); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1237:9: ( ^( COLLECTION_MODE table_collection_expression ) -> { $table_collection_expression.st }| ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)| ^( DIRECT_MODE tableview_name ( sample_clause )? ) -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)| general_element -> { $general_element.st }| standard_function -> { $standard_function.st })
					int alt208=5;
					switch ( input.LA(1) ) {
					case COLLECTION_MODE:
						{
						alt208=1;
						}
						break;
					case SELECT_MODE:
						{
						alt208=2;
						}
						break;
					case DIRECT_MODE:
						{
						alt208=3;
						}
						break;
					case CASCATED_ELEMENT:
						{
						alt208=4;
						}
						break;
					case CAST_VK:
					case CHR_VK:
					case COLLECT_VK:
					case COUNT_VK:
					case DECOMPOSE_VK:
					case EXTRACT_VK:
					case FIRST_VALUE_VK:
					case FUNCTION_ENABLING_OVER:
					case FUNCTION_ENABLING_USING:
					case FUNCTION_ENABLING_WITHIN_OR_OVER:
					case LAST_VALUE_VK:
					case PREDICTION_FUNCTION:
					case TRANSLATE_VK:
					case TREAT_VK:
					case TRIM_VK:
					case XMLAGG_VK:
					case XMLCAST_VK:
					case XMLCOLATTVAL_VK:
					case XMLELEMENT_VK:
					case XMLEXISTS_VK:
					case XMLFOREST_VK:
					case XMLPARSE_VK:
					case XMLPI_VK:
					case XMLQUERY_VK:
					case XMLROOT_VK:
					case XMLSERIALIZE_VK:
					case XMLTABLE_VK:
						{
						alt208=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 208, 0, input);
						throw nvae;
					}
					switch (alt208) {
						case 1 :
							// PLSQLPrinter.g:1237:14: ^( COLLECTION_MODE table_collection_expression )
							{
							match(input,COLLECTION_MODE,FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause10233); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_table_collection_expression_in_dml_table_expression_clause10235);
							table_collection_expression247=table_collection_expression();
							state._fsp--;

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1237:61: -> { $table_collection_expression.st }
							{
								retval.st =  (table_collection_expression247!=null?((StringTemplate)table_collection_expression247.getTemplate()):null) ;
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:1238:14: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
							{
							match(input,SELECT_MODE,FOLLOW_SELECT_MODE_in_dml_table_expression_clause10256); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause10258);
							select_statement248=select_statement();
							state._fsp--;

							// PLSQLPrinter.g:1238:45: ( subquery_restriction_clause )?
							int alt206=2;
							int LA206_0 = input.LA(1);
							if ( (LA206_0==SQL92_RESERVED_WITH) ) {
								alt206=1;
							}
							switch (alt206) {
								case 1 :
									// PLSQLPrinter.g:1238:45: subquery_restriction_clause
									{
									pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause10260);
									subquery_restriction_clause249=subquery_restriction_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1239:15: -> dml_table_expression_clause_select(select_statement=$select_statement.stsubquery_restriction_clause=$subquery_restriction_clause.st)
							{
								retval.st = templateLib.getInstanceOf("dml_table_expression_clause_select",new STAttrMap().put("select_statement", (select_statement248!=null?((StringTemplate)select_statement248.getTemplate()):null)).put("subquery_restriction_clause", (subquery_restriction_clause249!=null?((StringTemplate)subquery_restriction_clause249.getTemplate()):null)));
							}



							}
							break;
						case 3 :
							// PLSQLPrinter.g:1242:14: ^( DIRECT_MODE tableview_name ( sample_clause )? )
							{
							match(input,DIRECT_MODE,FOLLOW_DIRECT_MODE_in_dml_table_expression_clause10349); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause10351);
							tableview_name250=tableview_name();
							state._fsp--;

							// PLSQLPrinter.g:1242:43: ( sample_clause )?
							int alt207=2;
							int LA207_0 = input.LA(1);
							if ( (LA207_0==SAMPLE_VK) ) {
								alt207=1;
							}
							switch (alt207) {
								case 1 :
									// PLSQLPrinter.g:1242:43: sample_clause
									{
									pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause10353);
									sample_clause251=sample_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							// TEMPLATE REWRITE
							// 1243:15: -> dml_table_expression_clause_direct(table_or_view_name=$tableview_name.stsample_clause=$sample_clause.st)
							{
								retval.st = templateLib.getInstanceOf("dml_table_expression_clause_direct",new STAttrMap().put("table_or_view_name", (tableview_name250!=null?((StringTemplate)tableview_name250.getTemplate()):null)).put("sample_clause", (sample_clause251!=null?((StringTemplate)sample_clause251.getTemplate()):null)));
							}



							}
							break;
						case 4 :
							// PLSQLPrinter.g:1244:14: general_element
							{
							pushFollow(FOLLOW_general_element_in_dml_table_expression_clause10398);
							general_element252=general_element();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1244:30: -> { $general_element.st }
							{
								retval.st =  (general_element252!=null?((StringTemplate)general_element252.getTemplate()):null) ;
							}



							}
							break;
						case 5 :
							// PLSQLPrinter.g:1245:14: standard_function
							{
							pushFollow(FOLLOW_standard_function_in_dml_table_expression_clause10417);
							standard_function253=standard_function();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1245:32: -> { $standard_function.st }
							{
								retval.st =  (standard_function253!=null?((StringTemplate)standard_function253.getTemplate()):null) ;
							}



							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1248:14: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_dml_table_expression_clause10456);
					table_ref254=table_ref();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1248:24: -> in_parens(val=$table_ref.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (table_ref254!=null?((StringTemplate)table_ref254.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_table_expression_clause"


	public static class table_collection_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_collection_expression"
	// PLSQLPrinter.g:1251:1: table_collection_expression : ( expression -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)| subquery -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)| ^( OUTER_JOIN_SIGN expression ) -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)| ^( OUTER_JOIN_SIGN subquery ) -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true));
	public final PLSQLPrinter.table_collection_expression_return table_collection_expression() throws RecognitionException {
		PLSQLPrinter.table_collection_expression_return retval = new PLSQLPrinter.table_collection_expression_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression255 =null;
		TreeRuleReturnScope subquery256 =null;
		TreeRuleReturnScope expression257 =null;
		TreeRuleReturnScope subquery258 =null;

		try {
			// PLSQLPrinter.g:1252:5: ( expression -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)| subquery -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)| ^( OUTER_JOIN_SIGN expression ) -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)| ^( OUTER_JOIN_SIGN subquery ) -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true))
			int alt210=4;
			switch ( input.LA(1) ) {
			case EXPR:
			case LOGIC_EXPR:
				{
				alt210=1;
				}
				break;
			case SUBQUERY:
				{
				alt210=2;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				int LA210_3 = input.LA(2);
				if ( (LA210_3==DOWN) ) {
					int LA210_4 = input.LA(3);
					if ( (LA210_4==EXPR||LA210_4==LOGIC_EXPR) ) {
						alt210=3;
					}
					else if ( (LA210_4==SUBQUERY) ) {
						alt210=4;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 210, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 210, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 210, 0, input);
				throw nvae;
			}
			switch (alt210) {
				case 1 :
					// PLSQLPrinter.g:1252:9: expression
					{
					pushFollow(FOLLOW_expression_in_table_collection_expression10484);
					expression255=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1253:5: -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=false)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (expression255!=null?((StringTemplate)expression255.getTemplate()):null)).put("is_outer_join", false));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1254:9: subquery
					{
					pushFollow(FOLLOW_subquery_in_table_collection_expression10513);
					subquery256=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1255:5: -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=false)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (subquery256!=null?((StringTemplate)subquery256.getTemplate()):null)).put("is_outer_join", false));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1256:9: ^( OUTER_JOIN_SIGN expression )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression10543); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_table_collection_expression10545);
					expression257=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1257:5: -> table_collection_expression(expression_or_subquery=$expression.stis_outer_join=true)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (expression257!=null?((StringTemplate)expression257.getTemplate()):null)).put("is_outer_join", true));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1258:9: ^( OUTER_JOIN_SIGN subquery )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression10576); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_subquery_in_table_collection_expression10578);
					subquery258=subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1259:5: -> table_collection_expression(expression_or_subquery=$subquery.stis_outer_join=true)
					{
						retval.st = templateLib.getInstanceOf("table_collection_expression",new STAttrMap().put("expression_or_subquery", (subquery258!=null?((StringTemplate)subquery258.getTemplate()):null)).put("is_outer_join", true));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_collection_expression"


	public static class subquery_restriction_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "subquery_restriction_clause"
	// PLSQLPrinter.g:1262:1: subquery_restriction_clause : ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\";
	public final PLSQLPrinter.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException {
		PLSQLPrinter.subquery_restriction_clause_return retval = new PLSQLPrinter.subquery_restriction_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1263:5: ( ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) -> template( \"not implemented: subquery_restriction_clause\")
			// PLSQLPrinter.g:1263:10: ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause10619); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1263:32: ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? )
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==READ_VK) ) {
				alt212=1;
			}
			else if ( (LA212_0==SQL92_RESERVED_CHECK) ) {
				alt212=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 212, 0, input);
				throw nvae;
			}

			switch (alt212) {
				case 1 :
					// PLSQLPrinter.g:1263:33: READ_VK
					{
					match(input,READ_VK,FOLLOW_READ_VK_in_subquery_restriction_clause10622); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1263:41: SQL92_RESERVED_CHECK ( constraint_name )?
					{
					match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause10624); 
					// PLSQLPrinter.g:1263:62: ( constraint_name )?
					int alt211=2;
					int LA211_0 = input.LA(1);
					if ( (LA211_0==CONSTRAINT_NAME) ) {
						alt211=1;
					}
					switch (alt211) {
						case 1 :
							// PLSQLPrinter.g:1263:62: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause10626);
							constraint_name();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1264:5: -> template( \"not implemented: subquery_restriction_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: subquery_restriction_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subquery_restriction_clause"


	public static class sample_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sample_clause"
	// PLSQLPrinter.g:1267:1: sample_clause : ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\";
	public final PLSQLPrinter.sample_clause_return sample_clause() throws RecognitionException {
		PLSQLPrinter.sample_clause_return retval = new PLSQLPrinter.sample_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1268:5: ( ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) -> template( \"not implemented: sample_clause\")
			// PLSQLPrinter.g:1268:10: ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? )
			{
			match(input,SAMPLE_VK,FOLLOW_SAMPLE_VK_in_sample_clause10664); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1268:22: ( BLOCK_VK )?
			int alt213=2;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==BLOCK_VK) ) {
				alt213=1;
			}
			switch (alt213) {
				case 1 :
					// PLSQLPrinter.g:1268:22: BLOCK_VK
					{
					match(input,BLOCK_VK,FOLLOW_BLOCK_VK_in_sample_clause10666); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_sample_clause10669);
			expression();
			state._fsp--;

			// PLSQLPrinter.g:1268:43: ( seed_part )?
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==SEED_VK) ) {
				alt214=1;
			}
			switch (alt214) {
				case 1 :
					// PLSQLPrinter.g:1268:43: seed_part
					{
					pushFollow(FOLLOW_seed_part_in_sample_clause10671);
					seed_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1269:5: -> template( \"not implemented: sample_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sample_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sample_clause"


	public static class seed_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "seed_part"
	// PLSQLPrinter.g:1272:1: seed_part : ^( SEED_VK expression ) -> template( \"not implemented: seed_part\";
	public final PLSQLPrinter.seed_part_return seed_part() throws RecognitionException {
		PLSQLPrinter.seed_part_return retval = new PLSQLPrinter.seed_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1273:5: ( ^( SEED_VK expression ) -> template( \"not implemented: seed_part\")
			// PLSQLPrinter.g:1273:10: ^( SEED_VK expression )
			{
			match(input,SEED_VK,FOLLOW_SEED_VK_in_seed_part10709); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_seed_part10711);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1274:5: -> template( \"not implemented: seed_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: seed_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seed_part"


	public static class cursor_manipulation_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_manipulation_statements"
	// PLSQLPrinter.g:1283:1: cursor_manipulation_statements : ( close_statement -> { $close_statement.st }| open_statement -> { $open_statement.st }| fetch_statement -> { $fetch_statement.st }| open_for_statement -> { $open_for_statement.st });
	public final PLSQLPrinter.cursor_manipulation_statements_return cursor_manipulation_statements() throws RecognitionException {
		PLSQLPrinter.cursor_manipulation_statements_return retval = new PLSQLPrinter.cursor_manipulation_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope close_statement259 =null;
		TreeRuleReturnScope open_statement260 =null;
		TreeRuleReturnScope fetch_statement261 =null;
		TreeRuleReturnScope open_for_statement262 =null;

		try {
			// PLSQLPrinter.g:1284:5: ( close_statement -> { $close_statement.st }| open_statement -> { $open_statement.st }| fetch_statement -> { $fetch_statement.st }| open_for_statement -> { $open_for_statement.st })
			int alt215=4;
			switch ( input.LA(1) ) {
			case CLOSE_VK:
				{
				alt215=1;
				}
				break;
			case OPEN_VK:
				{
				alt215=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
				{
				alt215=3;
				}
				break;
			case OPEN_FOR:
				{
				alt215=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 215, 0, input);
				throw nvae;
			}
			switch (alt215) {
				case 1 :
					// PLSQLPrinter.g:1284:10: close_statement
					{
					pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements10752);
					close_statement259=close_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1284:26: -> { $close_statement.st }
					{
						retval.st =  (close_statement259!=null?((StringTemplate)close_statement259.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1285:10: open_statement
					{
					pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements10767);
					open_statement260=open_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1285:25: -> { $open_statement.st }
					{
						retval.st =  (open_statement260!=null?((StringTemplate)open_statement260.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1286:10: fetch_statement
					{
					pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements10782);
					fetch_statement261=fetch_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1286:26: -> { $fetch_statement.st }
					{
						retval.st =  (fetch_statement261!=null?((StringTemplate)fetch_statement261.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1287:10: open_for_statement
					{
					pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements10797);
					open_for_statement262=open_for_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1287:29: -> { $open_for_statement.st }
					{
						retval.st =  (open_for_statement262!=null?((StringTemplate)open_for_statement262.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_manipulation_statements"


	public static class close_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "close_statement"
	// PLSQLPrinter.g:1290:1: close_statement : ^( CLOSE_VK cursor_name ) -> close_statement(cursor_name=$cursor_name.st);
	public final PLSQLPrinter.close_statement_return close_statement() throws RecognitionException {
		PLSQLPrinter.close_statement_return retval = new PLSQLPrinter.close_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name263 =null;

		try {
			// PLSQLPrinter.g:1291:5: ( ^( CLOSE_VK cursor_name ) -> close_statement(cursor_name=$cursor_name.st))
			// PLSQLPrinter.g:1291:11: ^( CLOSE_VK cursor_name )
			{
			match(input,CLOSE_VK,FOLLOW_CLOSE_VK_in_close_statement10823); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_close_statement10825);
			cursor_name263=cursor_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1292:5: -> close_statement(cursor_name=$cursor_name.st)
			{
				retval.st = templateLib.getInstanceOf("close_statement",new STAttrMap().put("cursor_name", (cursor_name263!=null?((StringTemplate)cursor_name263.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_statement"


	public static class open_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_statement"
	// PLSQLPrinter.g:1295:1: open_statement : ^( OPEN_VK cursor_name ( expression_list )? ) -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st);
	public final PLSQLPrinter.open_statement_return open_statement() throws RecognitionException {
		PLSQLPrinter.open_statement_return retval = new PLSQLPrinter.open_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name264 =null;
		TreeRuleReturnScope expression_list265 =null;

		try {
			// PLSQLPrinter.g:1296:5: ( ^( OPEN_VK cursor_name ( expression_list )? ) -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st))
			// PLSQLPrinter.g:1296:10: ^( OPEN_VK cursor_name ( expression_list )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_statement10863); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_open_statement10865);
			cursor_name264=cursor_name();
			state._fsp--;

			// PLSQLPrinter.g:1296:32: ( expression_list )?
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==EXPR_LIST) ) {
				alt216=1;
			}
			switch (alt216) {
				case 1 :
					// PLSQLPrinter.g:1296:32: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_open_statement10867);
					expression_list265=expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1297:5: -> open_statement(cursor_name=$cursor_name.stexpression_list=$expression_list.st)
			{
				retval.st = templateLib.getInstanceOf("open_statement",new STAttrMap().put("cursor_name", (cursor_name264!=null?((StringTemplate)cursor_name264.getTemplate()):null)).put("expression_list", (expression_list265!=null?((StringTemplate)expression_list265.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_statement"


	public static class fetch_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "fetch_statement"
	// PLSQLPrinter.g:1300:1: fetch_statement : ^( SQL92_RESERVED_FETCH cursor_name into_clause ) -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st);
	public final PLSQLPrinter.fetch_statement_return fetch_statement() throws RecognitionException {
		PLSQLPrinter.fetch_statement_return retval = new PLSQLPrinter.fetch_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope cursor_name266 =null;
		TreeRuleReturnScope into_clause267 =null;

		try {
			// PLSQLPrinter.g:1301:5: ( ^( SQL92_RESERVED_FETCH cursor_name into_clause ) -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st))
			// PLSQLPrinter.g:1301:10: ^( SQL92_RESERVED_FETCH cursor_name into_clause )
			{
			match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement10910); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_fetch_statement10912);
			cursor_name266=cursor_name();
			state._fsp--;

			pushFollow(FOLLOW_into_clause_in_fetch_statement10914);
			into_clause267=into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1302:5: -> fetch_statement(cursor_name=$cursor_name.stinto_clause=$into_clause.st)
			{
				retval.st = templateLib.getInstanceOf("fetch_statement",new STAttrMap().put("cursor_name", (cursor_name266!=null?((StringTemplate)cursor_name266.getTemplate()):null)).put("into_clause", (into_clause267!=null?((StringTemplate)into_clause267.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fetch_statement"


	public static class open_for_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "open_for_statement"
	// PLSQLPrinter.g:1305:1: open_for_statement : ^( OPEN_FOR variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? ) -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st);
	public final PLSQLPrinter.open_for_statement_return open_for_statement() throws RecognitionException {
		PLSQLPrinter.open_for_statement_return retval = new PLSQLPrinter.open_for_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope e_or_s =null;
		TreeRuleReturnScope variable_name268 =null;
		TreeRuleReturnScope using_clause269 =null;

		try {
			// PLSQLPrinter.g:1306:5: ( ^( OPEN_FOR variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? ) -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st))
			// PLSQLPrinter.g:1306:10: ^( OPEN_FOR variable_name (e_or_s= expression |e_or_s= select_statement ) ( using_clause )? )
			{
			match(input,OPEN_FOR,FOLLOW_OPEN_FOR_in_open_for_statement10956); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_open_for_statement10958);
			variable_name268=variable_name();
			state._fsp--;

			// PLSQLPrinter.g:1306:35: (e_or_s= expression |e_or_s= select_statement )
			int alt217=2;
			int LA217_0 = input.LA(1);
			if ( (LA217_0==EXPR||LA217_0==LOGIC_EXPR) ) {
				alt217=1;
			}
			else if ( (LA217_0==SELECT_STATEMENT) ) {
				alt217=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 217, 0, input);
				throw nvae;
			}

			switch (alt217) {
				case 1 :
					// PLSQLPrinter.g:1306:36: e_or_s= expression
					{
					pushFollow(FOLLOW_expression_in_open_for_statement10963);
					e_or_s=expression();
					state._fsp--;

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1306:54: e_or_s= select_statement
					{
					pushFollow(FOLLOW_select_statement_in_open_for_statement10967);
					e_or_s=select_statement();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:1306:79: ( using_clause )?
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==PLSQL_NON_RESERVED_USING) ) {
				alt218=1;
			}
			switch (alt218) {
				case 1 :
					// PLSQLPrinter.g:1306:79: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_open_for_statement10970);
					using_clause269=using_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1307:5: -> open_for_statement(cursor_name=$variable_name.stexpression_or_select_statement=$e_or_s.stusing_clause=$using_clause.st)
			{
				retval.st = templateLib.getInstanceOf("open_for_statement",new STAttrMap().put("cursor_name", (variable_name268!=null?((StringTemplate)variable_name268.getTemplate()):null)).put("expression_or_select_statement", (e_or_s!=null?((StringTemplate)e_or_s.getTemplate()):null)).put("using_clause", (using_clause269!=null?((StringTemplate)using_clause269.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_for_statement"


	public static class transaction_control_statements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "transaction_control_statements"
	// PLSQLPrinter.g:1314:1: transaction_control_statements : ( set_transaction_command -> { $set_transaction_command.st }| set_constraint_command -> { $set_constraint_command.st }| commit_statement -> { $commit_statement.st }| rollback_statement -> { $rollback_statement.st }| savepoint_statement -> { $savepoint_statement.st });
	public final PLSQLPrinter.transaction_control_statements_return transaction_control_statements() throws RecognitionException {
		PLSQLPrinter.transaction_control_statements_return retval = new PLSQLPrinter.transaction_control_statements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope set_transaction_command270 =null;
		TreeRuleReturnScope set_constraint_command271 =null;
		TreeRuleReturnScope commit_statement272 =null;
		TreeRuleReturnScope rollback_statement273 =null;
		TreeRuleReturnScope savepoint_statement274 =null;

		try {
			// PLSQLPrinter.g:1315:5: ( set_transaction_command -> { $set_transaction_command.st }| set_constraint_command -> { $set_constraint_command.st }| commit_statement -> { $commit_statement.st }| rollback_statement -> { $rollback_statement.st }| savepoint_statement -> { $savepoint_statement.st })
			int alt219=5;
			switch ( input.LA(1) ) {
			case SET_TRANSACTION:
				{
				alt219=1;
				}
				break;
			case SET_CONSTRAINT:
				{
				alt219=2;
				}
				break;
			case COMMIT_VK:
				{
				alt219=3;
				}
				break;
			case ROLLBACK_VK:
				{
				alt219=4;
				}
				break;
			case SAVEPOINT_VK:
				{
				alt219=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 219, 0, input);
				throw nvae;
			}
			switch (alt219) {
				case 1 :
					// PLSQLPrinter.g:1315:10: set_transaction_command
					{
					pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements11021);
					set_transaction_command270=set_transaction_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1315:34: -> { $set_transaction_command.st }
					{
						retval.st =  (set_transaction_command270!=null?((StringTemplate)set_transaction_command270.getTemplate()):null) ;
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1316:10: set_constraint_command
					{
					pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements11036);
					set_constraint_command271=set_constraint_command();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1316:33: -> { $set_constraint_command.st }
					{
						retval.st =  (set_constraint_command271!=null?((StringTemplate)set_constraint_command271.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1317:10: commit_statement
					{
					pushFollow(FOLLOW_commit_statement_in_transaction_control_statements11051);
					commit_statement272=commit_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1317:27: -> { $commit_statement.st }
					{
						retval.st =  (commit_statement272!=null?((StringTemplate)commit_statement272.getTemplate()):null) ;
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1318:10: rollback_statement
					{
					pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements11066);
					rollback_statement273=rollback_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1318:29: -> { $rollback_statement.st }
					{
						retval.st =  (rollback_statement273!=null?((StringTemplate)rollback_statement273.getTemplate()):null) ;
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1319:10: savepoint_statement
					{
					pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements11081);
					savepoint_statement274=savepoint_statement();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1319:30: -> { $savepoint_statement.st }
					{
						retval.st =  (savepoint_statement274!=null?((StringTemplate)savepoint_statement274.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transaction_control_statements"


	public static class set_transaction_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_transaction_command"
	// PLSQLPrinter.g:1322:1: set_transaction_command : ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\";
	public final PLSQLPrinter.set_transaction_command_return set_transaction_command() throws RecognitionException {
		PLSQLPrinter.set_transaction_command_return retval = new PLSQLPrinter.set_transaction_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1323:5: ( ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) -> template( \"not implemented: set_transaction_command\")
			// PLSQLPrinter.g:1323:10: ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? )
			{
			match(input,SET_TRANSACTION,FOLLOW_SET_TRANSACTION_in_set_transaction_command11106); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1323:28: ( CHAR_STRING )?
				int alt220=2;
				int LA220_0 = input.LA(1);
				if ( (LA220_0==CHAR_STRING) ) {
					alt220=1;
				}
				switch (alt220) {
					case 1 :
						// PLSQLPrinter.g:1323:28: CHAR_STRING
						{
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_set_transaction_command11108); 
						}
						break;

				}

				// PLSQLPrinter.g:1324:13: ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )?
				int alt223=4;
				switch ( input.LA(1) ) {
					case READ_VK:
						{
						alt223=1;
						}
						break;
					case ISOLATION_VK:
						{
						alt223=2;
						}
						break;
					case ROLLBACK_VK:
						{
						alt223=3;
						}
						break;
				}
				switch (alt223) {
					case 1 :
						// PLSQLPrinter.g:1324:18: ^( READ_VK ( ONLY_VK | WRITE_VK ) )
						{
						match(input,READ_VK,FOLLOW_READ_VK_in_set_transaction_command11129); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1324:28: ( ONLY_VK | WRITE_VK )
						int alt221=2;
						int LA221_0 = input.LA(1);
						if ( (LA221_0==ONLY_VK) ) {
							alt221=1;
						}
						else if ( (LA221_0==WRITE_VK) ) {
							alt221=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 221, 0, input);
							throw nvae;
						}

						switch (alt221) {
							case 1 :
								// PLSQLPrinter.g:1324:29: ONLY_VK
								{
								match(input,ONLY_VK,FOLLOW_ONLY_VK_in_set_transaction_command11132); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1324:37: WRITE_VK
								{
								match(input,WRITE_VK,FOLLOW_WRITE_VK_in_set_transaction_command11134); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1325:18: ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) )
						{
						match(input,ISOLATION_VK,FOLLOW_ISOLATION_VK_in_set_transaction_command11156); 
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1325:33: ( SERIALIZABLE_VK | COMMITTED_VK )
						int alt222=2;
						int LA222_0 = input.LA(1);
						if ( (LA222_0==SERIALIZABLE_VK) ) {
							alt222=1;
						}
						else if ( (LA222_0==COMMITTED_VK) ) {
							alt222=2;
						}

						else {
							NoViableAltException nvae =
								new NoViableAltException("", 222, 0, input);
							throw nvae;
						}

						switch (alt222) {
							case 1 :
								// PLSQLPrinter.g:1325:34: SERIALIZABLE_VK
								{
								match(input,SERIALIZABLE_VK,FOLLOW_SERIALIZABLE_VK_in_set_transaction_command11159); 
								}
								break;
							case 2 :
								// PLSQLPrinter.g:1325:50: COMMITTED_VK
								{
								match(input,COMMITTED_VK,FOLLOW_COMMITTED_VK_in_set_transaction_command11161); 
								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;
					case 3 :
						// PLSQLPrinter.g:1326:18: ^( ROLLBACK_VK rollback_segment_name )
						{
						match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_set_transaction_command11183); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command11185);
						rollback_segment_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1329:5: -> template( \"not implemented: set_transaction_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_transaction_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_transaction_command"


	public static class set_constraint_command_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "set_constraint_command"
	// PLSQLPrinter.g:1332:1: set_constraint_command : ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\";
	public final PLSQLPrinter.set_constraint_command_return set_constraint_command() throws RecognitionException {
		PLSQLPrinter.set_constraint_command_return retval = new PLSQLPrinter.set_constraint_command_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1333:5: ( ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) -> template( \"not implemented: set_constraint_command\")
			// PLSQLPrinter.g:1333:10: ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) )
			{
			match(input,SET_CONSTRAINT,FOLLOW_SET_CONSTRAINT_in_set_constraint_command11246); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1333:27: ( SQL92_RESERVED_ALL | ( constraint_name )+ )
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==SQL92_RESERVED_ALL) ) {
				alt225=1;
			}
			else if ( (LA225_0==CONSTRAINT_NAME) ) {
				alt225=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 225, 0, input);
				throw nvae;
			}

			switch (alt225) {
				case 1 :
					// PLSQLPrinter.g:1333:28: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command11249); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1333:47: ( constraint_name )+
					{
					// PLSQLPrinter.g:1333:47: ( constraint_name )+
					int cnt224=0;
					loop224:
					while (true) {
						int alt224=2;
						int LA224_0 = input.LA(1);
						if ( (LA224_0==CONSTRAINT_NAME) ) {
							alt224=1;
						}

						switch (alt224) {
						case 1 :
							// PLSQLPrinter.g:1333:47: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_set_constraint_command11251);
							constraint_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt224 >= 1 ) break loop224;
							EarlyExitException eee = new EarlyExitException(224, input);
							throw eee;
						}
						cnt224++;
					}

					}
					break;

			}

			// PLSQLPrinter.g:1333:65: ( IMMEDIATE_VK | DEFERRED_VK )
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==IMMEDIATE_VK) ) {
				alt226=1;
			}
			else if ( (LA226_0==DEFERRED_VK) ) {
				alt226=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 226, 0, input);
				throw nvae;
			}

			switch (alt226) {
				case 1 :
					// PLSQLPrinter.g:1333:66: IMMEDIATE_VK
					{
					match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_set_constraint_command11256); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1333:79: DEFERRED_VK
					{
					match(input,DEFERRED_VK,FOLLOW_DEFERRED_VK_in_set_constraint_command11258); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1334:5: -> template( \"not implemented: set_constraint_command\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: set_constraint_command");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_constraint_command"


	public static class commit_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_statement"
	// PLSQLPrinter.g:1337:1: commit_statement : ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? ) -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st);
	public final PLSQLPrinter.commit_statement_return commit_statement() throws RecognitionException {
		PLSQLPrinter.commit_statement_return retval = new PLSQLPrinter.commit_statement_return();
		retval.start = input.LT(1);

		CommonTree WORK_VK275=null;
		TreeRuleReturnScope additional =null;

		try {
			// PLSQLPrinter.g:1338:5: ( ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? ) -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st))
			// PLSQLPrinter.g:1338:11: ^( COMMIT_VK ( WORK_VK )? (additional= commit_comment |additional= commit_force )? )
			{
			match(input,COMMIT_VK,FOLLOW_COMMIT_VK_in_commit_statement11296); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1338:23: ( WORK_VK )?
				int alt227=2;
				int LA227_0 = input.LA(1);
				if ( (LA227_0==WORK_VK) ) {
					alt227=1;
				}
				switch (alt227) {
					case 1 :
						// PLSQLPrinter.g:1338:23: WORK_VK
						{
						WORK_VK275=(CommonTree)match(input,WORK_VK,FOLLOW_WORK_VK_in_commit_statement11298); 
						}
						break;

				}

				// PLSQLPrinter.g:1339:13: (additional= commit_comment |additional= commit_force )?
				int alt228=3;
				int LA228_0 = input.LA(1);
				if ( (LA228_0==COMMENT_VK) ) {
					alt228=1;
				}
				else if ( (LA228_0==FORCE_VK) ) {
					alt228=2;
				}
				switch (alt228) {
					case 1 :
						// PLSQLPrinter.g:1340:15: additional= commit_comment
						{
						pushFollow(FOLLOW_commit_comment_in_commit_statement11331);
						additional=commit_comment();
						state._fsp--;

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1341:17: additional= commit_force
						{
						pushFollow(FOLLOW_commit_force_in_commit_statement11351);
						additional=commit_force();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1345:5: -> commit_statement(is_work=$WORK_VK != nulladditional=$additional.st)
			{
				retval.st = templateLib.getInstanceOf("commit_statement",new STAttrMap().put("is_work", WORK_VK275 != null).put("additional", (additional!=null?((StringTemplate)additional.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_statement"


	public static class commit_comment_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_comment"
	// PLSQLPrinter.g:1348:1: commit_comment : ^( COMMENT_VK comment_expr= expression ) ( write_clause )? -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st);
	public final PLSQLPrinter.commit_comment_return commit_comment() throws RecognitionException {
		PLSQLPrinter.commit_comment_return retval = new PLSQLPrinter.commit_comment_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope comment_expr =null;
		TreeRuleReturnScope write_clause276 =null;

		try {
			// PLSQLPrinter.g:1349:5: ( ^( COMMENT_VK comment_expr= expression ) ( write_clause )? -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st))
			// PLSQLPrinter.g:1349:9: ^( COMMENT_VK comment_expr= expression ) ( write_clause )?
			{
			match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_commit_comment11442); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_commit_comment11446);
			comment_expr=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// PLSQLPrinter.g:1349:47: ( write_clause )?
			int alt229=2;
			int LA229_0 = input.LA(1);
			if ( (LA229_0==WRITE_VK) ) {
				alt229=1;
			}
			switch (alt229) {
				case 1 :
					// PLSQLPrinter.g:1349:47: write_clause
					{
					pushFollow(FOLLOW_write_clause_in_commit_comment11449);
					write_clause276=write_clause();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 1350:5: -> commit_comment(comment_expr=$expression.stwrite_clause=$write_clause.st)
			{
				retval.st = templateLib.getInstanceOf("commit_comment",new STAttrMap().put("comment_expr", (comment_expr!=null?((StringTemplate)comment_expr.getTemplate()):null)).put("write_clause", (write_clause276!=null?((StringTemplate)write_clause276.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_comment"


	public static class commit_force_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commit_force"
	// PLSQLPrinter.g:1353:1: commit_force : ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) ) ;
	public final PLSQLPrinter.commit_force_return commit_force() throws RecognitionException {
		PLSQLPrinter.commit_force_return retval = new PLSQLPrinter.commit_force_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expr1 =null;
		TreeRuleReturnScope expr2 =null;

		try {
			// PLSQLPrinter.g:1354:5: ( ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) ) )
			// PLSQLPrinter.g:1354:9: ^( FORCE_VK ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)) )
			{
			match(input,FORCE_VK,FOLLOW_FORCE_VK_in_commit_force11493); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1355:11: ( CORRUPT_XID_VK expr1= expression -> commit_statement_force_2(expression=$expr1.st)| CORRUPT_XID_ALL_VK -> commit_statement_force_3(|expr1= expression (expr2= expression )? -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st))
			int alt231=3;
			switch ( input.LA(1) ) {
			case CORRUPT_XID_VK:
				{
				alt231=1;
				}
				break;
			case CORRUPT_XID_ALL_VK:
				{
				alt231=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt231=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 231, 0, input);
				throw nvae;
			}
			switch (alt231) {
				case 1 :
					// PLSQLPrinter.g:1356:13: CORRUPT_XID_VK expr1= expression
					{
					match(input,CORRUPT_XID_VK,FOLLOW_CORRUPT_XID_VK_in_commit_force11519); 
					pushFollow(FOLLOW_expression_in_commit_force11523);
					expr1=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1356:45: -> commit_statement_force_2(expression=$expr1.st)
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_2",new STAttrMap().put("expression", (expr1!=null?((StringTemplate)expr1.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1357:15: CORRUPT_XID_ALL_VK
					{
					match(input,CORRUPT_XID_ALL_VK,FOLLOW_CORRUPT_XID_ALL_VK_in_commit_force11548); 
					// TEMPLATE REWRITE
					// 1357:34: -> commit_statement_force_3(
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_3");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1358:15: expr1= expression (expr2= expression )?
					{
					pushFollow(FOLLOW_expression_in_commit_force11572);
					expr1=expression();
					state._fsp--;

					// PLSQLPrinter.g:1358:37: (expr2= expression )?
					int alt230=2;
					int LA230_0 = input.LA(1);
					if ( (LA230_0==EXPR||LA230_0==LOGIC_EXPR) ) {
						alt230=1;
					}
					switch (alt230) {
						case 1 :
							// PLSQLPrinter.g:1358:37: expr2= expression
							{
							pushFollow(FOLLOW_expression_in_commit_force11576);
							expr2=expression();
							state._fsp--;

							}
							break;

					}

					// TEMPLATE REWRITE
					// 1358:50: -> commit_statement_force_1(expr1=$expr1.stexpr2=$expr2.st)
					{
						retval.st = templateLib.getInstanceOf("commit_statement_force_1",new STAttrMap().put("expr1", (expr1!=null?((StringTemplate)expr1.getTemplate()):null)).put("expr2", (expr2!=null?((StringTemplate)expr2.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_force"


	public static class write_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "write_clause"
	// PLSQLPrinter.g:1363:1: write_clause : ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null);
	public final PLSQLPrinter.write_clause_return write_clause() throws RecognitionException {
		PLSQLPrinter.write_clause_return retval = new PLSQLPrinter.write_clause_return();
		retval.start = input.LT(1);

		CommonTree WAIT_VK277=null;
		CommonTree PLSQL_RESERVED_NOWAIT278=null;
		CommonTree IMMEDIATE_VK279=null;
		CommonTree BATCH_VK280=null;

		try {
			// PLSQLPrinter.g:1364:5: ( ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null))
			// PLSQLPrinter.g:1364:10: ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? )
			{
			match(input,WRITE_VK,FOLLOW_WRITE_VK_in_write_clause11634); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1364:21: ( WAIT_VK | PLSQL_RESERVED_NOWAIT )?
				int alt232=3;
				int LA232_0 = input.LA(1);
				if ( (LA232_0==WAIT_VK) ) {
					alt232=1;
				}
				else if ( (LA232_0==PLSQL_RESERVED_NOWAIT) ) {
					alt232=2;
				}
				switch (alt232) {
					case 1 :
						// PLSQLPrinter.g:1364:22: WAIT_VK
						{
						WAIT_VK277=(CommonTree)match(input,WAIT_VK,FOLLOW_WAIT_VK_in_write_clause11637); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1364:30: PLSQL_RESERVED_NOWAIT
						{
						PLSQL_RESERVED_NOWAIT278=(CommonTree)match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause11639); 
						}
						break;

				}

				// PLSQLPrinter.g:1364:54: ( IMMEDIATE_VK | BATCH_VK )?
				int alt233=3;
				int LA233_0 = input.LA(1);
				if ( (LA233_0==IMMEDIATE_VK) ) {
					alt233=1;
				}
				else if ( (LA233_0==BATCH_VK) ) {
					alt233=2;
				}
				switch (alt233) {
					case 1 :
						// PLSQLPrinter.g:1364:55: IMMEDIATE_VK
						{
						IMMEDIATE_VK279=(CommonTree)match(input,IMMEDIATE_VK,FOLLOW_IMMEDIATE_VK_in_write_clause11644); 
						}
						break;
					case 2 :
						// PLSQLPrinter.g:1364:68: BATCH_VK
						{
						BATCH_VK280=(CommonTree)match(input,BATCH_VK,FOLLOW_BATCH_VK_in_write_clause11646); 
						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1365:5: -> commit_statement_write_clause(is_wait=$WAIT_VK != nullis_nowait=$PLSQL_RESERVED_NOWAIT != nullis_immediate=$IMMEDIATE_VK != nullis_batch=$BATCH_VK != null)
			{
				retval.st = templateLib.getInstanceOf("commit_statement_write_clause",new STAttrMap().put("is_wait", WAIT_VK277 != null).put("is_nowait", PLSQL_RESERVED_NOWAIT278 != null).put("is_immediate", IMMEDIATE_VK279 != null).put("is_batch", BATCH_VK280 != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "write_clause"


	public static class rollback_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_statement"
	// PLSQLPrinter.g:1370:1: rollback_statement : ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text);
	public final PLSQLPrinter.rollback_statement_return rollback_statement() throws RecognitionException {
		PLSQLPrinter.rollback_statement_return retval = new PLSQLPrinter.rollback_statement_return();
		retval.start = input.LT(1);

		CommonTree WORK_VK281=null;
		CommonTree SQL92_RESERVED_TO282=null;
		CommonTree FORCE_VK284=null;
		CommonTree CHAR_STRING285=null;
		TreeRuleReturnScope savepoint_name283 =null;

		try {
			// PLSQLPrinter.g:1371:5: ( ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text))
			// PLSQLPrinter.g:1371:11: ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? )
			{
			match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_rollback_statement11722); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1371:25: ( WORK_VK )?
				int alt234=2;
				int LA234_0 = input.LA(1);
				if ( (LA234_0==WORK_VK) ) {
					alt234=1;
				}
				switch (alt234) {
					case 1 :
						// PLSQLPrinter.g:1371:25: WORK_VK
						{
						WORK_VK281=(CommonTree)match(input,WORK_VK,FOLLOW_WORK_VK_in_rollback_statement11724); 
						}
						break;

				}

				// PLSQLPrinter.g:1372:15: ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )?
				int alt235=3;
				int LA235_0 = input.LA(1);
				if ( (LA235_0==SQL92_RESERVED_TO) ) {
					alt235=1;
				}
				else if ( (LA235_0==FORCE_VK) ) {
					alt235=2;
				}
				switch (alt235) {
					case 1 :
						// PLSQLPrinter.g:1372:20: ^( SQL92_RESERVED_TO savepoint_name )
						{
						SQL92_RESERVED_TO282=(CommonTree)match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_rollback_statement11748); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_savepoint_name_in_rollback_statement11750);
						savepoint_name283=savepoint_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// PLSQLPrinter.g:1373:20: ^( FORCE_VK CHAR_STRING )
						{
						FORCE_VK284=(CommonTree)match(input,FORCE_VK,FOLLOW_FORCE_VK_in_rollback_statement11773); 
						match(input, Token.DOWN, null); 
						CHAR_STRING285=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_rollback_statement11775); 
						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1376:9: -> rollback_statement(is_work=$WORK_VK != nullis_to_savepoint=$SQL92_RESERVED_TO != nullsavepoint_name=$savepoint_name.stis_force=$FORCE_VK !=nullforce_string=$CHAR_STRING.text)
			{
				retval.st = templateLib.getInstanceOf("rollback_statement",new STAttrMap().put("is_work", WORK_VK281 != null).put("is_to_savepoint", SQL92_RESERVED_TO282 != null).put("savepoint_name", (savepoint_name283!=null?((StringTemplate)savepoint_name283.getTemplate()):null)).put("is_force", FORCE_VK284 !=null).put("force_string", (CHAR_STRING285!=null?CHAR_STRING285.getText():null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_statement"


	public static class savepoint_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_statement"
	// PLSQLPrinter.g:1381:1: savepoint_statement : ^( SAVEPOINT_VK savepoint_name ) -> savepoint_statement(name=$savepoint_name.st);
	public final PLSQLPrinter.savepoint_statement_return savepoint_statement() throws RecognitionException {
		PLSQLPrinter.savepoint_statement_return retval = new PLSQLPrinter.savepoint_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope savepoint_name286 =null;

		try {
			// PLSQLPrinter.g:1382:5: ( ^( SAVEPOINT_VK savepoint_name ) -> savepoint_statement(name=$savepoint_name.st))
			// PLSQLPrinter.g:1382:10: ^( SAVEPOINT_VK savepoint_name )
			{
			match(input,SAVEPOINT_VK,FOLLOW_SAVEPOINT_VK_in_savepoint_statement11890); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_savepoint_name_in_savepoint_statement11892);
			savepoint_name286=savepoint_name();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1383:5: -> savepoint_statement(name=$savepoint_name.st)
			{
				retval.st = templateLib.getInstanceOf("savepoint_statement",new STAttrMap().put("name", (savepoint_name286!=null?((StringTemplate)savepoint_name286.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_statement"


	public static class pipe_row_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "pipe_row_statement"
	// PLSQLPrinter.g:1386:1: pipe_row_statement : ^( PIPE_ROW expression ) -> pipe_row_statement(expression=$expression.st);
	public final PLSQLPrinter.pipe_row_statement_return pipe_row_statement() throws RecognitionException {
		PLSQLPrinter.pipe_row_statement_return retval = new PLSQLPrinter.pipe_row_statement_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression287 =null;

		try {
			// PLSQLPrinter.g:1387:5: ( ^( PIPE_ROW expression ) -> pipe_row_statement(expression=$expression.st))
			// PLSQLPrinter.g:1387:10: ^( PIPE_ROW expression )
			{
			match(input,PIPE_ROW,FOLLOW_PIPE_ROW_in_pipe_row_statement11934); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_pipe_row_statement11936);
			expression287=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1388:5: -> pipe_row_statement(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("pipe_row_statement",new STAttrMap().put("expression", (expression287!=null?((StringTemplate)expression287.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pipe_row_statement"


	public static class expression_list_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_list"
	// PLSQLPrinter.g:1395:1: expression_list : ^( EXPR_LIST (expressions+= expression )* ) -> expression_list(expressions=$expressions);
	public final PLSQLPrinter.expression_list_return expression_list() throws RecognitionException {
		PLSQLPrinter.expression_list_return retval = new PLSQLPrinter.expression_list_return();
		retval.start = input.LT(1);

		List<Object> list_expressions=null;
		RuleReturnScope expressions = null;
		try {
			// PLSQLPrinter.g:1396:5: ( ^( EXPR_LIST (expressions+= expression )* ) -> expression_list(expressions=$expressions))
			// PLSQLPrinter.g:1396:10: ^( EXPR_LIST (expressions+= expression )* )
			{
			match(input,EXPR_LIST,FOLLOW_EXPR_LIST_in_expression_list11977); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1396:33: (expressions+= expression )*
				loop236:
				while (true) {
					int alt236=2;
					int LA236_0 = input.LA(1);
					if ( (LA236_0==EXPR||LA236_0==LOGIC_EXPR) ) {
						alt236=1;
					}

					switch (alt236) {
					case 1 :
						// PLSQLPrinter.g:1396:33: expressions+= expression
						{
						pushFollow(FOLLOW_expression_in_expression_list11981);
						expressions=expression();
						state._fsp--;

						if (list_expressions==null) list_expressions=new ArrayList<Object>();
						list_expressions.add(expressions.getTemplate());
						}
						break;

					default :
						break loop236;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1397:5: -> expression_list(expressions=$expressions)
			{
				retval.st = templateLib.getInstanceOf("expression_list",new STAttrMap().put("expressions", list_expressions));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_list"


	public static class expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression"
	// PLSQLPrinter.g:1400:1: expression : ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st});
	public final PLSQLPrinter.expression_return expression() throws RecognitionException {
		PLSQLPrinter.expression_return retval = new PLSQLPrinter.expression_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression_element288 =null;
		TreeRuleReturnScope expression_element289 =null;

		try {
			// PLSQLPrinter.g:1401:5: ( ^( LOGIC_EXPR expression_element ) -> {$expression_element.st}| ^( EXPR expression_element ) -> {$expression_element.st})
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==LOGIC_EXPR) ) {
				alt237=1;
			}
			else if ( (LA237_0==EXPR) ) {
				alt237=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 237, 0, input);
				throw nvae;
			}

			switch (alt237) {
				case 1 :
					// PLSQLPrinter.g:1401:10: ^( LOGIC_EXPR expression_element )
					{
					match(input,LOGIC_EXPR,FOLLOW_LOGIC_EXPR_in_expression12019); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression12021);
					expression_element288=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1401:43: -> {$expression_element.st}
					{
						retval.st = (expression_element288!=null?((StringTemplate)expression_element288.getTemplate()):null);
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1402:10: ^( EXPR expression_element )
					{
					match(input,EXPR,FOLLOW_EXPR_in_expression12038); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression12040);
					expression_element289=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1402:38: -> {$expression_element.st}
					{
						retval.st = (expression_element289!=null?((StringTemplate)expression_element289.getTemplate()):null);
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression"


	public static class expression_element_return extends TreeRuleReturnScope {
		public int priority;
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "expression_element"
	// PLSQLPrinter.g:1405:1: expression_element returns [int priority] : ( ^( (t= SQL92_RESERVED_OR |t= SQL92_RESERVED_AND |t= EQUALS_OP |t= NOT_EQUAL_OP |t= LESS_THAN_OP |t= GREATER_THAN_OP |t= LESS_THAN_OR_EQUALS_OP |t= GREATER_THAN_OR_EQUALS_OP |t= CONCATENATION_OP |t= PLUS_SIGN |t= MINUS_SIGN |t= ASTERISK |t= SOLIDUS |t= PERCENT |t= MOD_VK |t= DIV_VK ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.stomit_parens_1=omit1omit_parens_2=omit2)| ^(t= SQL92_RESERVED_NOT expr= expression_element ) -> expression_element_not(expr=$expr.stomit_parens=omit1)| ^( (t= IS_NOT_NULL |t= IS_NULL |t= IS_NOT_NAN |t= IS_NAN |t= IS_NOT_PRESENT |t= IS_PRESENT |t= IS_NOT_INFINITE |t= IS_INFINITE |t= IS_NOT_A_SET |t= IS_A_SET |t= IS_NOT_EMPTY |t= IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.stomit_parens=omit1)| ^(t= IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^(t= IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( (t= MEMBER_VK |t= SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^(t= NOT_IN expr= expression_element in_elements ) -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)| ^(t= SQL92_RESERVED_IN expr= expression_element in_elements ) -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)| ^(t= NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^(t= SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( (t= SQL92_RESERVED_LIKE |t= LIKEC_VK |t= LIKE2_VK |t= LIKE4_VK |t= NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? ) -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.stomit_parens_text=omit1omit_parens_pattern=omit2omit_parens_escape=omit3)| ^(t= PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^(t= UNARY_PLUS arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=\"+\"is_spaced=falsearg=$arg.stomit_parens=omit1)| ^(t= UNARY_MINUS arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=\"-\"is_spaced=falsearg=$arg.stomit_parens=omit1)| ^(t= SQL92_RESERVED_PRIOR arg= expression_element ) -> expression_element_prior(expr=$arg.st)| ^(t= NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^(t= SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^(t= STANDARD_FUNCTION standard_function ) -> { $standard_function.st }| ^( (t= SOME_VK |t= SQL92_RESERVED_EXISTS |t= SQL92_RESERVED_ALL |t= SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) ) -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$t.type == SOME_VKis_any=$t.type == SQL92_RESERVED_ANYis_all=$t.type == SQL92_RESERVED_ALLis_exists=$t.type == SQL92_RESERVED_EXISTS)| ^(t= VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^(t= DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^(t= KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^(t= DOT_ASTERISK tableview_name ) -> expression_element_dot_star(tableview_name=$tableview_name.st)| ^( (t= PERCENT_FOUND_VK |t= PERCENT_NOTFOUND_VK |t= PERCENT_ROWCOUNT_VK |t= PERCENT_ISOPEN_VK ) cursor_name ) -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)| ^(t= OUTER_JOIN_SIGN expr= expression_element ) -> expression_element_outer_join_sign(expr=$expr.st)| case_statement[false] -> { $case_statement.st }| constant -> { $constant.st }| general_element -> { $general_element.st }| hosted_variable_name -> { $hosted_variable_name.st }| subquery -> in_parens(val=$subquery.st));
	public final PLSQLPrinter.expression_element_return expression_element() throws RecognitionException {
		PLSQLPrinter.expression_element_return retval = new PLSQLPrinter.expression_element_return();
		retval.start = input.LT(1);

		CommonTree t=null;
		TreeRuleReturnScope arg1 =null;
		TreeRuleReturnScope arg2 =null;
		TreeRuleReturnScope expr =null;
		TreeRuleReturnScope arg =null;
		TreeRuleReturnScope expr_low =null;
		TreeRuleReturnScope expr_high =null;
		TreeRuleReturnScope text =null;
		TreeRuleReturnScope pattern =null;
		TreeRuleReturnScope escape =null;
		TreeRuleReturnScope s_or_e =null;
		TreeRuleReturnScope in_elements290 =null;
		TreeRuleReturnScope in_elements291 =null;
		TreeRuleReturnScope standard_function292 =null;
		TreeRuleReturnScope tableview_name293 =null;
		TreeRuleReturnScope cursor_name294 =null;
		TreeRuleReturnScope case_statement295 =null;
		TreeRuleReturnScope constant296 =null;
		TreeRuleReturnScope general_element297 =null;
		TreeRuleReturnScope hosted_variable_name298 =null;
		TreeRuleReturnScope subquery299 =null;


		  String op = null;
		  boolean omit1 = false;
		  boolean omit2 = false;
		  boolean omit3 = false;
		  retval.priority = -1;

		try {
			// PLSQLPrinter.g:1413:5: ( ^( (t= SQL92_RESERVED_OR |t= SQL92_RESERVED_AND |t= EQUALS_OP |t= NOT_EQUAL_OP |t= LESS_THAN_OP |t= GREATER_THAN_OP |t= LESS_THAN_OR_EQUALS_OP |t= GREATER_THAN_OR_EQUALS_OP |t= CONCATENATION_OP |t= PLUS_SIGN |t= MINUS_SIGN |t= ASTERISK |t= SOLIDUS |t= PERCENT |t= MOD_VK |t= DIV_VK ) arg1= expression_element arg2= expression_element ) -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.stomit_parens_1=omit1omit_parens_2=omit2)| ^(t= SQL92_RESERVED_NOT expr= expression_element ) -> expression_element_not(expr=$expr.stomit_parens=omit1)| ^( (t= IS_NOT_NULL |t= IS_NULL |t= IS_NOT_NAN |t= IS_NAN |t= IS_NOT_PRESENT |t= IS_PRESENT |t= IS_NOT_INFINITE |t= IS_INFINITE |t= IS_NOT_A_SET |t= IS_A_SET |t= IS_NOT_EMPTY |t= IS_EMPTY ) arg= expression_element ) -> expression_element_generic_suffix_unary_op(op=oparg=$arg.stomit_parens=omit1)| ^(t= IS_NOT_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^(t= IS_OF_TYPE expression_element ( type_spec )+ ) -> template( \"not implemented: expression_element\"| ^( (t= MEMBER_VK |t= SUBMULTISET_VK ) expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^(t= NOT_IN expr= expression_element in_elements ) -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)| ^(t= SQL92_RESERVED_IN expr= expression_element in_elements ) -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)| ^(t= NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^(t= SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element ) -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)| ^( (t= SQL92_RESERVED_LIKE |t= LIKEC_VK |t= LIKE2_VK |t= LIKE4_VK |t= NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? ) -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.stomit_parens_text=omit1omit_parens_pattern=omit2omit_parens_escape=omit3)| ^(t= PIPE_VK expression_element expression_element ) -> template( \"not implemented: expression_element\"| ^(t= UNARY_PLUS arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=\"+\"is_spaced=falsearg=$arg.stomit_parens=omit1)| ^(t= UNARY_MINUS arg= expression_element ) -> expression_element_generic_prefix_unary_op(op=\"-\"is_spaced=falsearg=$arg.stomit_parens=omit1)| ^(t= SQL92_RESERVED_PRIOR arg= expression_element ) -> expression_element_prior(expr=$arg.st)| ^(t= NEW_VK expression ) -> template( \"not implemented: expression_element\"| ^(t= SQL92_RESERVED_DISTINCT expression_element ) -> template( \"not implemented: expression_element\"| ^(t= STANDARD_FUNCTION standard_function ) -> { $standard_function.st }| ^( (t= SOME_VK |t= SQL92_RESERVED_EXISTS |t= SQL92_RESERVED_ALL |t= SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) ) -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$t.type == SOME_VKis_any=$t.type == SQL92_RESERVED_ANYis_all=$t.type == SQL92_RESERVED_ALLis_exists=$t.type == SQL92_RESERVED_EXISTS)| ^(t= VECTOR_EXPR ( expression_element )+ ) -> template( \"not implemented: expression_element\"| ^(t= DATETIME_OP expression_element datetime_element ) -> template( \"not implemented: expression_element\"| model_expression -> template( \"not implemented: expression_element\"| ^(t= KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) -> template( \"not implemented: expression_element\"| ^(t= DOT_ASTERISK tableview_name ) -> expression_element_dot_star(tableview_name=$tableview_name.st)| ^( (t= PERCENT_FOUND_VK |t= PERCENT_NOTFOUND_VK |t= PERCENT_ROWCOUNT_VK |t= PERCENT_ISOPEN_VK ) cursor_name ) -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)| ^(t= OUTER_JOIN_SIGN expr= expression_element ) -> expression_element_outer_join_sign(expr=$expr.st)| case_statement[false] -> { $case_statement.st }| constant -> { $constant.st }| general_element -> { $general_element.st }| hosted_variable_name -> { $hosted_variable_name.st }| subquery -> in_parens(val=$subquery.st))
			int alt251=31;
			switch ( input.LA(1) ) {
			case ASTERISK:
			case CONCATENATION_OP:
			case EQUALS_OP:
			case GREATER_THAN_OP:
			case GREATER_THAN_OR_EQUALS_OP:
			case LESS_THAN_OP:
			case LESS_THAN_OR_EQUALS_OP:
			case MINUS_SIGN:
			case NOT_EQUAL_OP:
			case PERCENT:
			case PLUS_SIGN:
			case SOLIDUS:
			case SQL92_RESERVED_AND:
			case SQL92_RESERVED_OR:
			case DIV_VK:
			case MOD_VK:
				{
				alt251=1;
				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt251=2;
				}
				break;
			case IS_A_SET:
			case IS_EMPTY:
			case IS_INFINITE:
			case IS_NAN:
			case IS_NOT_A_SET:
			case IS_NOT_EMPTY:
			case IS_NOT_INFINITE:
			case IS_NOT_NAN:
			case IS_NOT_NULL:
			case IS_NOT_PRESENT:
			case IS_NULL:
			case IS_PRESENT:
				{
				alt251=3;
				}
				break;
			case IS_NOT_OF_TYPE:
				{
				alt251=4;
				}
				break;
			case IS_OF_TYPE:
				{
				alt251=5;
				}
				break;
			case MEMBER_VK:
			case SUBMULTISET_VK:
				{
				alt251=6;
				}
				break;
			case NOT_IN:
				{
				alt251=7;
				}
				break;
			case SQL92_RESERVED_IN:
				{
				alt251=8;
				}
				break;
			case NOT_BETWEEN:
				{
				alt251=9;
				}
				break;
			case SQL92_RESERVED_BETWEEN:
				{
				alt251=10;
				}
				break;
			case SQL92_RESERVED_LIKE:
			case LIKE2_VK:
			case LIKE4_VK:
			case LIKEC_VK:
			case NOT_LIKE:
				{
				alt251=11;
				}
				break;
			case PIPE_VK:
				{
				alt251=12;
				}
				break;
			case UNARY_PLUS:
				{
				alt251=13;
				}
				break;
			case UNARY_MINUS:
				{
				alt251=14;
				}
				break;
			case SQL92_RESERVED_PRIOR:
				{
				alt251=15;
				}
				break;
			case NEW_VK:
				{
				alt251=16;
				}
				break;
			case SQL92_RESERVED_DISTINCT:
				{
				alt251=17;
				}
				break;
			case STANDARD_FUNCTION:
				{
				alt251=18;
				}
				break;
			case SQL92_RESERVED_ALL:
			case SQL92_RESERVED_ANY:
			case SQL92_RESERVED_EXISTS:
			case SOME_VK:
				{
				alt251=19;
				}
				break;
			case VECTOR_EXPR:
				{
				alt251=20;
				}
				break;
			case DATETIME_OP:
				{
				alt251=21;
				}
				break;
			case MODEL_EXPRESSION:
				{
				alt251=22;
				}
				break;
			case KEEP_VK:
				{
				alt251=23;
				}
				break;
			case DOT_ASTERISK:
				{
				alt251=24;
				}
				break;
			case PERCENT_FOUND_VK:
			case PERCENT_ISOPEN_VK:
			case PERCENT_NOTFOUND_VK:
			case PERCENT_ROWCOUNT_VK:
				{
				alt251=25;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				alt251=26;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt251=27;
				}
				break;
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case EXACT_NUM_LIT:
			case SQL92_RESERVED_DEFAULT:
			case SQL92_RESERVED_FALSE:
			case SQL92_RESERVED_NULL:
			case SQL92_RESERVED_TRUE:
			case UNSIGNED_INTEGER:
			case CONSTANT_NEGATED:
			case DBTIMEZONE_VK:
			case MAXVALUE_VK:
			case MINVALUE_VK:
			case SESSIONTIMEZONE_VK:
			case PGSQL_TYPED_LITERAL:
				{
				alt251=28;
				}
				break;
			case CASCATED_ELEMENT:
				{
				alt251=29;
				}
				break;
			case HOSTED_VARIABLE_NAME:
				{
				alt251=30;
				}
				break;
			case SUBQUERY:
				{
				alt251=31;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 251, 0, input);
				throw nvae;
			}
			switch (alt251) {
				case 1 :
					// PLSQLPrinter.g:1413:10: ^( (t= SQL92_RESERVED_OR |t= SQL92_RESERVED_AND |t= EQUALS_OP |t= NOT_EQUAL_OP |t= LESS_THAN_OP |t= GREATER_THAN_OP |t= LESS_THAN_OR_EQUALS_OP |t= GREATER_THAN_OR_EQUALS_OP |t= CONCATENATION_OP |t= PLUS_SIGN |t= MINUS_SIGN |t= ASTERISK |t= SOLIDUS |t= PERCENT |t= MOD_VK |t= DIV_VK ) arg1= expression_element arg2= expression_element )
					{
					// PLSQLPrinter.g:1414:11: (t= SQL92_RESERVED_OR |t= SQL92_RESERVED_AND |t= EQUALS_OP |t= NOT_EQUAL_OP |t= LESS_THAN_OP |t= GREATER_THAN_OP |t= LESS_THAN_OR_EQUALS_OP |t= GREATER_THAN_OR_EQUALS_OP |t= CONCATENATION_OP |t= PLUS_SIGN |t= MINUS_SIGN |t= ASTERISK |t= SOLIDUS |t= PERCENT |t= MOD_VK |t= DIV_VK )
					int alt238=16;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_OR:
						{
						alt238=1;
						}
						break;
					case SQL92_RESERVED_AND:
						{
						alt238=2;
						}
						break;
					case EQUALS_OP:
						{
						alt238=3;
						}
						break;
					case NOT_EQUAL_OP:
						{
						alt238=4;
						}
						break;
					case LESS_THAN_OP:
						{
						alt238=5;
						}
						break;
					case GREATER_THAN_OP:
						{
						alt238=6;
						}
						break;
					case LESS_THAN_OR_EQUALS_OP:
						{
						alt238=7;
						}
						break;
					case GREATER_THAN_OR_EQUALS_OP:
						{
						alt238=8;
						}
						break;
					case CONCATENATION_OP:
						{
						alt238=9;
						}
						break;
					case PLUS_SIGN:
						{
						alt238=10;
						}
						break;
					case MINUS_SIGN:
						{
						alt238=11;
						}
						break;
					case ASTERISK:
						{
						alt238=12;
						}
						break;
					case SOLIDUS:
						{
						alt238=13;
						}
						break;
					case PERCENT:
						{
						alt238=14;
						}
						break;
					case MOD_VK:
						{
						alt238=15;
						}
						break;
					case DIV_VK:
						{
						alt238=16;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 238, 0, input);
						throw nvae;
					}
					switch (alt238) {
						case 1 :
							// PLSQLPrinter.g:1415:13: t= SQL92_RESERVED_OR
							{
							t=(CommonTree)match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_expression_element12103); 
							 op = "or"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1416:15: t= SQL92_RESERVED_AND
							{
							t=(CommonTree)match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_expression_element12123); 
							 op = "and"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1417:15: t= EQUALS_OP
							{
							t=(CommonTree)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_expression_element12143); 
							 op = "="; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1418:15: t= NOT_EQUAL_OP
							{
							t=(CommonTree)match(input,NOT_EQUAL_OP,FOLLOW_NOT_EQUAL_OP_in_expression_element12163); 
							 op = "<>"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1419:15: t= LESS_THAN_OP
							{
							t=(CommonTree)match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_expression_element12183); 
							 op = "<"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1420:15: t= GREATER_THAN_OP
							{
							t=(CommonTree)match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_expression_element12203); 
							 op = ">"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1421:15: t= LESS_THAN_OR_EQUALS_OP
							{
							t=(CommonTree)match(input,LESS_THAN_OR_EQUALS_OP,FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element12223); 
							 op = "<="; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1422:15: t= GREATER_THAN_OR_EQUALS_OP
							{
							t=(CommonTree)match(input,GREATER_THAN_OR_EQUALS_OP,FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element12243); 
							 op = ">="; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1423:15: t= CONCATENATION_OP
							{
							t=(CommonTree)match(input,CONCATENATION_OP,FOLLOW_CONCATENATION_OP_in_expression_element12263); 
							 op = "||"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1424:15: t= PLUS_SIGN
							{
							t=(CommonTree)match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_expression_element12283); 
							 op = "+"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1425:15: t= MINUS_SIGN
							{
							t=(CommonTree)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_expression_element12303); 
							 op = "-"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1426:15: t= ASTERISK
							{
							t=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_expression_element12323); 
							 op = "*"; 
							}
							break;
						case 13 :
							// PLSQLPrinter.g:1427:15: t= SOLIDUS
							{
							t=(CommonTree)match(input,SOLIDUS,FOLLOW_SOLIDUS_in_expression_element12343); 
							 op = "/"; 
							}
							break;
						case 14 :
							// PLSQLPrinter.g:1428:15: t= PERCENT
							{
							t=(CommonTree)match(input,PERCENT,FOLLOW_PERCENT_in_expression_element12363); 
							 op = "%"; 
							}
							break;
						case 15 :
							// PLSQLPrinter.g:1429:15: t= MOD_VK
							{
							t=(CommonTree)match(input,MOD_VK,FOLLOW_MOD_VK_in_expression_element12383); 
							 op = "mod"; 
							}
							break;
						case 16 :
							// PLSQLPrinter.g:1430:15: t= DIV_VK
							{
							t=(CommonTree)match(input,DIV_VK,FOLLOW_DIV_VK_in_expression_element12403); 
							 op = "div"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element12431);
					arg1=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element12435);
					arg2=expression_element();
					state._fsp--;


					retval.priority = getPriority((t!=null?t.getType():0));
					omit1 = canOmitParens(retval.priority, (arg1!=null?((PLSQLPrinter.expression_element_return)arg1).priority:0));
					omit2 = canOmitParensNonAssoc(retval.priority, (arg2!=null?((PLSQLPrinter.expression_element_return)arg2).priority:0));
					          
					match(input, Token.UP, null); 

					
					//convert col||'literal'||.. to coalesce(col::text,'')||'literal'||..
					//(because PG anything||null then null)
					if("||".equals(op))
					{		
						logger.debug("arg1=" + arg1 + ", arg2=" + arg2); 
						transformJointEleCoalesce(arg1);
						transformJointEleCoalesce(arg2);
					}
					
					
					// TEMPLATE REWRITE
					// 1439:5: -> expression_element_generic_binop(op=oparg1=$arg1.starg2=$arg2.stomit_parens_1=omit1omit_parens_2=omit2)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_binop",new STAttrMap().put("op", op).put("arg1", (arg1!=null?((StringTemplate)arg1.getTemplate()):null)).put("arg2", (arg2!=null?((StringTemplate)arg2.getTemplate()):null)).put("omit_parens_1", omit1).put("omit_parens_2", omit2));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1440:10: ^(t= SQL92_RESERVED_NOT expr= expression_element )
					{
					t=(CommonTree)match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_expression_element12507); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element12511);
					expr=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 


					            retval.priority = getPriority((t!=null?t.getType():0));
					            omit1 = canOmitParens(retval.priority, (expr!=null?((PLSQLPrinter.expression_element_return)expr).priority:0));
					          
					// TEMPLATE REWRITE
					// 1445:5: -> expression_element_not(expr=$expr.stomit_parens=omit1)
					{
						retval.st = templateLib.getInstanceOf("expression_element_not",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("omit_parens", omit1));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1446:10: ^( (t= IS_NOT_NULL |t= IS_NULL |t= IS_NOT_NAN |t= IS_NAN |t= IS_NOT_PRESENT |t= IS_PRESENT |t= IS_NOT_INFINITE |t= IS_INFINITE |t= IS_NOT_A_SET |t= IS_A_SET |t= IS_NOT_EMPTY |t= IS_EMPTY ) arg= expression_element )
					{
					// PLSQLPrinter.g:1447:13: (t= IS_NOT_NULL |t= IS_NULL |t= IS_NOT_NAN |t= IS_NAN |t= IS_NOT_PRESENT |t= IS_PRESENT |t= IS_NOT_INFINITE |t= IS_INFINITE |t= IS_NOT_A_SET |t= IS_A_SET |t= IS_NOT_EMPTY |t= IS_EMPTY )
					int alt239=12;
					switch ( input.LA(1) ) {
					case IS_NOT_NULL:
						{
						alt239=1;
						}
						break;
					case IS_NULL:
						{
						alt239=2;
						}
						break;
					case IS_NOT_NAN:
						{
						alt239=3;
						}
						break;
					case IS_NAN:
						{
						alt239=4;
						}
						break;
					case IS_NOT_PRESENT:
						{
						alt239=5;
						}
						break;
					case IS_PRESENT:
						{
						alt239=6;
						}
						break;
					case IS_NOT_INFINITE:
						{
						alt239=7;
						}
						break;
					case IS_INFINITE:
						{
						alt239=8;
						}
						break;
					case IS_NOT_A_SET:
						{
						alt239=9;
						}
						break;
					case IS_A_SET:
						{
						alt239=10;
						}
						break;
					case IS_NOT_EMPTY:
						{
						alt239=11;
						}
						break;
					case IS_EMPTY:
						{
						alt239=12;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 239, 0, input);
						throw nvae;
					}
					switch (alt239) {
						case 1 :
							// PLSQLPrinter.g:1448:15: t= IS_NOT_NULL
							{
							t=(CommonTree)match(input,IS_NOT_NULL,FOLLOW_IS_NOT_NULL_in_expression_element12587); 
							 op = "is not null"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1449:17: t= IS_NULL
							{
							t=(CommonTree)match(input,IS_NULL,FOLLOW_IS_NULL_in_expression_element12609); 
							 op = "is null"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1450:17: t= IS_NOT_NAN
							{
							t=(CommonTree)match(input,IS_NOT_NAN,FOLLOW_IS_NOT_NAN_in_expression_element12631); 
							 op = "is not nan"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1451:17: t= IS_NAN
							{
							t=(CommonTree)match(input,IS_NAN,FOLLOW_IS_NAN_in_expression_element12653); 
							 op = "is nan"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1452:17: t= IS_NOT_PRESENT
							{
							t=(CommonTree)match(input,IS_NOT_PRESENT,FOLLOW_IS_NOT_PRESENT_in_expression_element12675); 
							 op = "is not present"; 
							}
							break;
						case 6 :
							// PLSQLPrinter.g:1453:17: t= IS_PRESENT
							{
							t=(CommonTree)match(input,IS_PRESENT,FOLLOW_IS_PRESENT_in_expression_element12697); 
							 op = "is present"; 
							}
							break;
						case 7 :
							// PLSQLPrinter.g:1454:17: t= IS_NOT_INFINITE
							{
							t=(CommonTree)match(input,IS_NOT_INFINITE,FOLLOW_IS_NOT_INFINITE_in_expression_element12719); 
							 op = "is not infinite"; 
							}
							break;
						case 8 :
							// PLSQLPrinter.g:1455:17: t= IS_INFINITE
							{
							t=(CommonTree)match(input,IS_INFINITE,FOLLOW_IS_INFINITE_in_expression_element12741); 
							 op = "is infinite"; 
							}
							break;
						case 9 :
							// PLSQLPrinter.g:1456:17: t= IS_NOT_A_SET
							{
							t=(CommonTree)match(input,IS_NOT_A_SET,FOLLOW_IS_NOT_A_SET_in_expression_element12763); 
							 op = "is not a set"; 
							}
							break;
						case 10 :
							// PLSQLPrinter.g:1457:17: t= IS_A_SET
							{
							t=(CommonTree)match(input,IS_A_SET,FOLLOW_IS_A_SET_in_expression_element12785); 
							 op = "is a set"; 
							}
							break;
						case 11 :
							// PLSQLPrinter.g:1458:17: t= IS_NOT_EMPTY
							{
							t=(CommonTree)match(input,IS_NOT_EMPTY,FOLLOW_IS_NOT_EMPTY_in_expression_element12807); 
							 op = "is not empty"; 
							}
							break;
						case 12 :
							// PLSQLPrinter.g:1459:17: t= IS_EMPTY
							{
							t=(CommonTree)match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_expression_element12829); 
							 op = "is empty"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element12861);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 


					retval.priority = getPriority((t!=null?t.getType():0));
					omit1 = canOmitParens(retval.priority, (arg!=null?((PLSQLPrinter.expression_element_return)arg).priority:0));
					          
				    logger.debug("op=" + op + ", agr=" + arg + ", omit1=" + omit1);
					
					// TEMPLATE REWRITE
					// 1467:5: -> expression_element_generic_suffix_unary_op(op=oparg=$arg.stomit_parens=omit1)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_suffix_unary_op",new STAttrMap().put("op", op).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)).put("omit_parens", omit1));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1468:10: ^(t= IS_NOT_OF_TYPE expression_element ( type_spec )+ )
					{
					t=(CommonTree)match(input,IS_NOT_OF_TYPE,FOLLOW_IS_NOT_OF_TYPE_in_expression_element12924); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element12926);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1468:48: ( type_spec )+
					int cnt240=0;
					loop240:
					while (true) {
						int alt240=2;
						int LA240_0 = input.LA(1);
						if ( (LA240_0==CUSTOM_TYPE||LA240_0==INTERVAL_DATATYPE||LA240_0==NATIVE_DATATYPE) ) {
							alt240=1;
						}

						switch (alt240) {
						case 1 :
							// PLSQLPrinter.g:1468:48: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element12928);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt240 >= 1 ) break loop240;
							EarlyExitException eee = new EarlyExitException(240, input);
							throw eee;
						}
						cnt240++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1469:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1470:10: ^(t= IS_OF_TYPE expression_element ( type_spec )+ )
					{
					t=(CommonTree)match(input,IS_OF_TYPE,FOLLOW_IS_OF_TYPE_in_expression_element12958); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element12960);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1470:44: ( type_spec )+
					int cnt241=0;
					loop241:
					while (true) {
						int alt241=2;
						int LA241_0 = input.LA(1);
						if ( (LA241_0==CUSTOM_TYPE||LA241_0==INTERVAL_DATATYPE||LA241_0==NATIVE_DATATYPE) ) {
							alt241=1;
						}

						switch (alt241) {
						case 1 :
							// PLSQLPrinter.g:1470:44: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element12962);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt241 >= 1 ) break loop241;
							EarlyExitException eee = new EarlyExitException(241, input);
							throw eee;
						}
						cnt241++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1471:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1473:10: ^( (t= MEMBER_VK |t= SUBMULTISET_VK ) expression_element expression_element )
					{
					// PLSQLPrinter.g:1473:12: (t= MEMBER_VK |t= SUBMULTISET_VK )
					int alt242=2;
					int LA242_0 = input.LA(1);
					if ( (LA242_0==MEMBER_VK) ) {
						alt242=1;
					}
					else if ( (LA242_0==SUBMULTISET_VK) ) {
						alt242=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 242, 0, input);
						throw nvae;
					}

					switch (alt242) {
						case 1 :
							// PLSQLPrinter.g:1473:13: t= MEMBER_VK
							{
							t=(CommonTree)match(input,MEMBER_VK,FOLLOW_MEMBER_VK_in_expression_element12994); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1473:25: t= SUBMULTISET_VK
							{
							t=(CommonTree)match(input,SUBMULTISET_VK,FOLLOW_SUBMULTISET_VK_in_expression_element12998); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13001);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element13003);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1474:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1476:10: ^(t= NOT_IN expr= expression_element in_elements )
					{
					t=(CommonTree)match(input,NOT_IN,FOLLOW_NOT_IN_in_expression_element13033); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13037);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element13039);
					in_elements290=in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1477:5: -> expression_element_not_in(expr=$expr.stin_elements=$in_elements.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_not_in",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("in_elements", (in_elements290!=null?((StringTemplate)in_elements290.getTemplate()):null)));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1478:10: ^(t= SQL92_RESERVED_IN expr= expression_element in_elements )
					{
					t=(CommonTree)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_expression_element13074); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13078);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element13080);
					in_elements291=in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1479:5: -> expression_element_in(expr=$expr.stin_elements=$in_elements.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_in",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("in_elements", (in_elements291!=null?((StringTemplate)in_elements291.getTemplate()):null)));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:1480:10: ^(t= NOT_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element )
					{
					t=(CommonTree)match(input,NOT_BETWEEN,FOLLOW_NOT_BETWEEN_in_expression_element13115); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13119);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element13123);
					expr_low=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element13127);
					expr_high=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1481:5: -> expression_element_between(expr=$expr.stis_not=trueexpr_low=$expr_low.stexpr_high=$expr_high.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_between",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("is_not", true).put("expr_low", (expr_low!=null?((StringTemplate)expr_low.getTemplate()):null)).put("expr_high", (expr_high!=null?((StringTemplate)expr_high.getTemplate()):null)));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1482:10: ^(t= SQL92_RESERVED_BETWEEN expr= expression_element expr_low= expression_element expr_high= expression_element )
					{
					t=(CommonTree)match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element13172); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13176);
					expr=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element13180);
					expr_low=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element13184);
					expr_high=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1483:5: -> expression_element_between(expr=$expr.stis_not=falseexpr_low=$expr_low.stexpr_high=$expr_high.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_between",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("is_not", false).put("expr_low", (expr_low!=null?((StringTemplate)expr_low.getTemplate()):null)).put("expr_high", (expr_high!=null?((StringTemplate)expr_high.getTemplate()):null)));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:1484:10: ^( (t= SQL92_RESERVED_LIKE |t= LIKEC_VK |t= LIKE2_VK |t= LIKE4_VK |t= NOT_LIKE ) text= expression_element pattern= expression_element (escape= expression_element )? )
					{
					// PLSQLPrinter.g:1485:13: (t= SQL92_RESERVED_LIKE |t= LIKEC_VK |t= LIKE2_VK |t= LIKE4_VK |t= NOT_LIKE )
					int alt243=5;
					switch ( input.LA(1) ) {
					case SQL92_RESERVED_LIKE:
						{
						alt243=1;
						}
						break;
					case LIKEC_VK:
						{
						alt243=2;
						}
						break;
					case LIKE2_VK:
						{
						alt243=3;
						}
						break;
					case LIKE4_VK:
						{
						alt243=4;
						}
						break;
					case NOT_LIKE:
						{
						alt243=5;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 243, 0, input);
						throw nvae;
					}
					switch (alt243) {
						case 1 :
							// PLSQLPrinter.g:1486:15: t= SQL92_RESERVED_LIKE
							{
							t=(CommonTree)match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_expression_element13258); 
							 op = "like"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1487:17: t= LIKEC_VK
							{
							t=(CommonTree)match(input,LIKEC_VK,FOLLOW_LIKEC_VK_in_expression_element13280); 
							 op = "likec"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1488:17: t= LIKE2_VK
							{
							t=(CommonTree)match(input,LIKE2_VK,FOLLOW_LIKE2_VK_in_expression_element13302); 
							 op = "like2"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1489:17: t= LIKE4_VK
							{
							t=(CommonTree)match(input,LIKE4_VK,FOLLOW_LIKE4_VK_in_expression_element13324); 
							 op = "like4"; 
							}
							break;
						case 5 :
							// PLSQLPrinter.g:1490:17: t= NOT_LIKE
							{
							t=(CommonTree)match(input,NOT_LIKE,FOLLOW_NOT_LIKE_in_expression_element13346); 
							 op = "not like"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13378);
					text=expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element13394);
					pattern=expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1494:19: (escape= expression_element )?
					int alt244=2;
					int LA244_0 = input.LA(1);
					if ( (LA244_0==APPROXIMATE_NUM_LIT||LA244_0==ASTERISK||LA244_0==CHAR_STRING||LA244_0==CONCATENATION_OP||(LA244_0 >= EQUALS_OP && LA244_0 <= EXACT_NUM_LIT)||(LA244_0 >= GREATER_THAN_OP && LA244_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA244_0 >= LESS_THAN_OP && LA244_0 <= LESS_THAN_OR_EQUALS_OP)||LA244_0==MINUS_SIGN||LA244_0==NOT_EQUAL_OP||LA244_0==PERCENT||LA244_0==PLUS_SIGN||LA244_0==SOLIDUS||LA244_0==SQL92_RESERVED_ALL||(LA244_0 >= SQL92_RESERVED_AND && LA244_0 <= SQL92_RESERVED_ANY)||LA244_0==SQL92_RESERVED_BETWEEN||LA244_0==SQL92_RESERVED_DEFAULT||LA244_0==SQL92_RESERVED_DISTINCT||(LA244_0 >= SQL92_RESERVED_EXISTS && LA244_0 <= SQL92_RESERVED_FALSE)||LA244_0==SQL92_RESERVED_IN||(LA244_0 >= SQL92_RESERVED_LIKE && LA244_0 <= SQL92_RESERVED_NULL)||LA244_0==SQL92_RESERVED_OR||LA244_0==SQL92_RESERVED_PRIOR||LA244_0==SQL92_RESERVED_TRUE||LA244_0==UNSIGNED_INTEGER||LA244_0==CASCATED_ELEMENT||LA244_0==CONSTANT_NEGATED||LA244_0==DATETIME_OP||LA244_0==DBTIMEZONE_VK||LA244_0==DIV_VK||LA244_0==DOT_ASTERISK||LA244_0==HOSTED_VARIABLE_NAME||(LA244_0 >= IS_A_SET && LA244_0 <= IS_PRESENT)||LA244_0==KEEP_VK||(LA244_0 >= LIKE2_VK && LA244_0 <= LIKEC_VK)||LA244_0==MAXVALUE_VK||LA244_0==MEMBER_VK||LA244_0==MINVALUE_VK||LA244_0==MODEL_EXPRESSION||LA244_0==MOD_VK||LA244_0==NEW_VK||LA244_0==NOT_BETWEEN||(LA244_0 >= NOT_IN && LA244_0 <= NOT_LIKE)||LA244_0==OUTER_JOIN_SIGN||(LA244_0 >= PERCENT_FOUND_VK && LA244_0 <= PERCENT_ROWCOUNT_VK)||LA244_0==PIPE_VK||LA244_0==SEARCHED_CASE||LA244_0==SESSIONTIMEZONE_VK||LA244_0==SIMPLE_CASE||LA244_0==SOME_VK||LA244_0==STANDARD_FUNCTION||LA244_0==SUBMULTISET_VK||LA244_0==SUBQUERY||(LA244_0 >= UNARY_MINUS && LA244_0 <= UNARY_PLUS)||LA244_0==VECTOR_EXPR||LA244_0==PGSQL_TYPED_LITERAL) ) {
						alt244=1;
					}
					switch (alt244) {
						case 1 :
							// PLSQLPrinter.g:1494:19: escape= expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element13410);
							escape=expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 


					            retval.priority = getPriority((t!=null?t.getType():0));
					            omit1 = canOmitParens(retval.priority, (text!=null?((PLSQLPrinter.expression_element_return)text).priority:0));
					            omit2 = canOmitParens(retval.priority, (pattern!=null?((PLSQLPrinter.expression_element_return)pattern).priority:0));
					            omit3 = canOmitParens(retval.priority, (escape!=null?((PLSQLPrinter.expression_element_return)escape).priority:0));
					          
					// TEMPLATE REWRITE
					// 1502:5: -> expression_element_like(text=$text.stlike_op=oppattern=$pattern.stescape_char=$escape.stomit_parens_text=omit1omit_parens_pattern=omit2omit_parens_escape=omit3)
					{
						retval.st = templateLib.getInstanceOf("expression_element_like",new STAttrMap().put("text", (text!=null?((StringTemplate)text.getTemplate()):null)).put("like_op", op).put("pattern", (pattern!=null?((StringTemplate)pattern.getTemplate()):null)).put("escape_char", (escape!=null?((StringTemplate)escape.getTemplate()):null)).put("omit_parens_text", omit1).put("omit_parens_pattern", omit2).put("omit_parens_escape", omit3));
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:1506:10: ^(t= PIPE_VK expression_element expression_element )
					{
					t=(CommonTree)match(input,PIPE_VK,FOLLOW_PIPE_VK_in_expression_element13520); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13522);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element13524);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1507:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:1509:10: ^(t= UNARY_PLUS arg= expression_element )
					{
					t=(CommonTree)match(input,UNARY_PLUS,FOLLOW_UNARY_PLUS_in_expression_element13554); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13558);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 


					            retval.priority = getPriority((t!=null?t.getType():0));
					            omit1 = canOmitParens(retval.priority, (arg!=null?((PLSQLPrinter.expression_element_return)arg).priority:0));
					          
					// TEMPLATE REWRITE
					// 1514:5: -> expression_element_generic_prefix_unary_op(op=\"+\"is_spaced=falsearg=$arg.stomit_parens=omit1)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_prefix_unary_op",new STAttrMap().put("op", "+").put("is_spaced", false).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)).put("omit_parens", omit1));
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:1515:10: ^(t= UNARY_MINUS arg= expression_element )
					{
					t=(CommonTree)match(input,UNARY_MINUS,FOLLOW_UNARY_MINUS_in_expression_element13615); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13619);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 


					            retval.priority = getPriority((t!=null?t.getType():0));
					            omit1 = canOmitParens(retval.priority, (arg!=null?((PLSQLPrinter.expression_element_return)arg).priority:0));
					          
					// TEMPLATE REWRITE
					// 1520:5: -> expression_element_generic_prefix_unary_op(op=\"-\"is_spaced=falsearg=$arg.stomit_parens=omit1)
					{
						retval.st = templateLib.getInstanceOf("expression_element_generic_prefix_unary_op",new STAttrMap().put("op", "-").put("is_spaced", false).put("arg", (arg!=null?((StringTemplate)arg.getTemplate()):null)).put("omit_parens", omit1));
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:1521:10: ^(t= SQL92_RESERVED_PRIOR arg= expression_element )
					{
					t=(CommonTree)match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element13676); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13680);
					arg=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1522:5: -> expression_element_prior(expr=$arg.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_prior",new STAttrMap().put("expr", (arg!=null?((StringTemplate)arg.getTemplate()):null)));
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:1523:10: ^(t= NEW_VK expression )
					{
					t=(CommonTree)match(input,NEW_VK,FOLLOW_NEW_VK_in_expression_element13710); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_expression_element13712);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1524:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:1525:10: ^(t= SQL92_RESERVED_DISTINCT expression_element )
					{
					t=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element13741); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13743);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1526:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:1527:10: ^(t= STANDARD_FUNCTION standard_function )
					{
					t=(CommonTree)match(input,STANDARD_FUNCTION,FOLLOW_STANDARD_FUNCTION_in_expression_element13772); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_standard_function_in_expression_element13774);
					standard_function292=standard_function();
					state._fsp--;

					match(input, Token.UP, null); 


					            retval.priority = getPriority((t!=null?t.getType():0));
					          
					// TEMPLATE REWRITE
					// 1531:5: -> { $standard_function.st }
					{
						retval.st =  (standard_function292!=null?((StringTemplate)standard_function292.getTemplate()):null) ;
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:1532:10: ^( (t= SOME_VK |t= SQL92_RESERVED_EXISTS |t= SQL92_RESERVED_ALL |t= SQL92_RESERVED_ANY ) (s_or_e= subquery |s_or_e= expression ) )
					{
					// PLSQLPrinter.g:1532:12: (t= SOME_VK |t= SQL92_RESERVED_EXISTS |t= SQL92_RESERVED_ALL |t= SQL92_RESERVED_ANY )
					int alt245=4;
					switch ( input.LA(1) ) {
					case SOME_VK:
						{
						alt245=1;
						}
						break;
					case SQL92_RESERVED_EXISTS:
						{
						alt245=2;
						}
						break;
					case SQL92_RESERVED_ALL:
						{
						alt245=3;
						}
						break;
					case SQL92_RESERVED_ANY:
						{
						alt245=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 245, 0, input);
						throw nvae;
					}
					switch (alt245) {
						case 1 :
							// PLSQLPrinter.g:1532:13: t= SOME_VK
							{
							t=(CommonTree)match(input,SOME_VK,FOLLOW_SOME_VK_in_expression_element13812); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1532:23: t= SQL92_RESERVED_EXISTS
							{
							t=(CommonTree)match(input,SQL92_RESERVED_EXISTS,FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element13816); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1532:47: t= SQL92_RESERVED_ALL
							{
							t=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_expression_element13820); 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1532:68: t= SQL92_RESERVED_ANY
							{
							t=(CommonTree)match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_expression_element13824); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1532:90: (s_or_e= subquery |s_or_e= expression )
					int alt246=2;
					int LA246_0 = input.LA(1);
					if ( (LA246_0==SUBQUERY) ) {
						alt246=1;
					}
					else if ( (LA246_0==EXPR||LA246_0==LOGIC_EXPR) ) {
						alt246=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 246, 0, input);
						throw nvae;
					}

					switch (alt246) {
						case 1 :
							// PLSQLPrinter.g:1532:91: s_or_e= subquery
							{
							pushFollow(FOLLOW_subquery_in_expression_element13830);
							s_or_e=subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1532:107: s_or_e= expression
							{
							pushFollow(FOLLOW_expression_in_expression_element13834);
							s_or_e=expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 


					            retval.priority = getPriority((t!=null?t.getType():0));
					          
					// TEMPLATE REWRITE
					// 1536:5: -> expression_element_quantified_expr(subquery_or_expression=$s_or_e.stis_some=$t.type == SOME_VKis_any=$t.type == SQL92_RESERVED_ANYis_all=$t.type == SQL92_RESERVED_ALLis_exists=$t.type == SQL92_RESERVED_EXISTS)
					{
						retval.st = templateLib.getInstanceOf("expression_element_quantified_expr",new STAttrMap().put("subquery_or_expression", (s_or_e!=null?((StringTemplate)s_or_e.getTemplate()):null)).put("is_some", (t!=null?t.getType():0) == SOME_VK).put("is_any", (t!=null?t.getType():0) == SQL92_RESERVED_ANY).put("is_all", (t!=null?t.getType():0) == SQL92_RESERVED_ALL).put("is_exists", (t!=null?t.getType():0) == SQL92_RESERVED_EXISTS));
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:1539:10: ^(t= VECTOR_EXPR ( expression_element )+ )
					{
					t=(CommonTree)match(input,VECTOR_EXPR,FOLLOW_VECTOR_EXPR_in_expression_element13918); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1539:26: ( expression_element )+
					int cnt247=0;
					loop247:
					while (true) {
						int alt247=2;
						int LA247_0 = input.LA(1);
						if ( (LA247_0==APPROXIMATE_NUM_LIT||LA247_0==ASTERISK||LA247_0==CHAR_STRING||LA247_0==CONCATENATION_OP||(LA247_0 >= EQUALS_OP && LA247_0 <= EXACT_NUM_LIT)||(LA247_0 >= GREATER_THAN_OP && LA247_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA247_0 >= LESS_THAN_OP && LA247_0 <= LESS_THAN_OR_EQUALS_OP)||LA247_0==MINUS_SIGN||LA247_0==NOT_EQUAL_OP||LA247_0==PERCENT||LA247_0==PLUS_SIGN||LA247_0==SOLIDUS||LA247_0==SQL92_RESERVED_ALL||(LA247_0 >= SQL92_RESERVED_AND && LA247_0 <= SQL92_RESERVED_ANY)||LA247_0==SQL92_RESERVED_BETWEEN||LA247_0==SQL92_RESERVED_DEFAULT||LA247_0==SQL92_RESERVED_DISTINCT||(LA247_0 >= SQL92_RESERVED_EXISTS && LA247_0 <= SQL92_RESERVED_FALSE)||LA247_0==SQL92_RESERVED_IN||(LA247_0 >= SQL92_RESERVED_LIKE && LA247_0 <= SQL92_RESERVED_NULL)||LA247_0==SQL92_RESERVED_OR||LA247_0==SQL92_RESERVED_PRIOR||LA247_0==SQL92_RESERVED_TRUE||LA247_0==UNSIGNED_INTEGER||LA247_0==CASCATED_ELEMENT||LA247_0==CONSTANT_NEGATED||LA247_0==DATETIME_OP||LA247_0==DBTIMEZONE_VK||LA247_0==DIV_VK||LA247_0==DOT_ASTERISK||LA247_0==HOSTED_VARIABLE_NAME||(LA247_0 >= IS_A_SET && LA247_0 <= IS_PRESENT)||LA247_0==KEEP_VK||(LA247_0 >= LIKE2_VK && LA247_0 <= LIKEC_VK)||LA247_0==MAXVALUE_VK||LA247_0==MEMBER_VK||LA247_0==MINVALUE_VK||LA247_0==MODEL_EXPRESSION||LA247_0==MOD_VK||LA247_0==NEW_VK||LA247_0==NOT_BETWEEN||(LA247_0 >= NOT_IN && LA247_0 <= NOT_LIKE)||LA247_0==OUTER_JOIN_SIGN||(LA247_0 >= PERCENT_FOUND_VK && LA247_0 <= PERCENT_ROWCOUNT_VK)||LA247_0==PIPE_VK||LA247_0==SEARCHED_CASE||LA247_0==SESSIONTIMEZONE_VK||LA247_0==SIMPLE_CASE||LA247_0==SOME_VK||LA247_0==STANDARD_FUNCTION||LA247_0==SUBMULTISET_VK||LA247_0==SUBQUERY||(LA247_0 >= UNARY_MINUS && LA247_0 <= UNARY_PLUS)||LA247_0==VECTOR_EXPR||LA247_0==PGSQL_TYPED_LITERAL) ) {
							alt247=1;
						}

						switch (alt247) {
						case 1 :
							// PLSQLPrinter.g:1539:26: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element13920);
							expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt247 >= 1 ) break loop247;
							EarlyExitException eee = new EarlyExitException(247, input);
							throw eee;
						}
						cnt247++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1540:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:1542:10: ^(t= DATETIME_OP expression_element datetime_element )
					{
					t=(CommonTree)match(input,DATETIME_OP,FOLLOW_DATETIME_OP_in_expression_element13951); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element13953);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_datetime_element_in_expression_element13955);
					datetime_element();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1543:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:1544:10: model_expression
					{
					pushFollow(FOLLOW_model_expression_in_expression_element13981);
					model_expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1545:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:1546:10: ^(t= KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? )
					{
					t=(CommonTree)match(input,KEEP_VK,FOLLOW_KEEP_VK_in_expression_element14009); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element14011);
					expression_element();
					state._fsp--;

					match(input,DENSE_RANK_VK,FOLLOW_DENSE_RANK_VK_in_expression_element14013); 
					// PLSQLPrinter.g:1546:55: ( FIRST_VK | LAST_VK )
					int alt248=2;
					int LA248_0 = input.LA(1);
					if ( (LA248_0==FIRST_VK) ) {
						alt248=1;
					}
					else if ( (LA248_0==LAST_VK) ) {
						alt248=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 248, 0, input);
						throw nvae;
					}

					switch (alt248) {
						case 1 :
							// PLSQLPrinter.g:1546:56: FIRST_VK
							{
							match(input,FIRST_VK,FOLLOW_FIRST_VK_in_expression_element14016); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1546:65: LAST_VK
							{
							match(input,LAST_VK,FOLLOW_LAST_VK_in_expression_element14018); 
							}
							break;

					}

					pushFollow(FOLLOW_order_by_clause_in_expression_element14021);
					order_by_clause();
					state._fsp--;

					// PLSQLPrinter.g:1546:90: ( over_clause )?
					int alt249=2;
					int LA249_0 = input.LA(1);
					if ( (LA249_0==OVER_VK) ) {
						alt249=1;
					}
					switch (alt249) {
						case 1 :
							// PLSQLPrinter.g:1546:90: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_expression_element14023);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1547:5: -> template( \"not implemented: expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: expression_element");
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:1549:10: ^(t= DOT_ASTERISK tableview_name )
					{
					t=(CommonTree)match(input,DOT_ASTERISK,FOLLOW_DOT_ASTERISK_in_expression_element14054); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_tableview_name_in_expression_element14056);
					tableview_name293=tableview_name();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1550:5: -> expression_element_dot_star(tableview_name=$tableview_name.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_dot_star",new STAttrMap().put("tableview_name", (tableview_name293!=null?((StringTemplate)tableview_name293.getTemplate()):null)));
					}



					}
					break;
				case 25 :
					// PLSQLPrinter.g:1551:10: ^( (t= PERCENT_FOUND_VK |t= PERCENT_NOTFOUND_VK |t= PERCENT_ROWCOUNT_VK |t= PERCENT_ISOPEN_VK ) cursor_name )
					{
					// PLSQLPrinter.g:1552:13: (t= PERCENT_FOUND_VK |t= PERCENT_NOTFOUND_VK |t= PERCENT_ROWCOUNT_VK |t= PERCENT_ISOPEN_VK )
					int alt250=4;
					switch ( input.LA(1) ) {
					case PERCENT_FOUND_VK:
						{
						alt250=1;
						}
						break;
					case PERCENT_NOTFOUND_VK:
						{
						alt250=2;
						}
						break;
					case PERCENT_ROWCOUNT_VK:
						{
						alt250=3;
						}
						break;
					case PERCENT_ISOPEN_VK:
						{
						alt250=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 250, 0, input);
						throw nvae;
					}
					switch (alt250) {
						case 1 :
							// PLSQLPrinter.g:1553:15: t= PERCENT_FOUND_VK
							{
							t=(CommonTree)match(input,PERCENT_FOUND_VK,FOLLOW_PERCENT_FOUND_VK_in_expression_element14115); 
							 op = "%FOUND"; 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1554:16: t= PERCENT_NOTFOUND_VK
							{
							t=(CommonTree)match(input,PERCENT_NOTFOUND_VK,FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element14136); 
							 op = "%NOTFOUND"; 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1555:16: t= PERCENT_ROWCOUNT_VK
							{
							t=(CommonTree)match(input,PERCENT_ROWCOUNT_VK,FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element14157); 
							 op = "%ROWCOUNT"; 
							}
							break;
						case 4 :
							// PLSQLPrinter.g:1556:16: t= PERCENT_ISOPEN_VK
							{
							t=(CommonTree)match(input,PERCENT_ISOPEN_VK,FOLLOW_PERCENT_ISOPEN_VK_in_expression_element14178); 
							 op = "%ISOPEN"; 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_name_in_expression_element14208);
					cursor_name294=cursor_name();
					state._fsp--;

					match(input, Token.UP, null); 


					            retval.priority = getPriority((t!=null?t.getType():0));
					          
					// TEMPLATE REWRITE
					// 1563:5: -> expression_element_cursor_op(op=opcursor_name=$cursor_name.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_cursor_op",new STAttrMap().put("op", op).put("cursor_name", (cursor_name294!=null?((StringTemplate)cursor_name294.getTemplate()):null)));
					}



					}
					break;
				case 26 :
					// PLSQLPrinter.g:1564:10: ^(t= OUTER_JOIN_SIGN expr= expression_element )
					{
					t=(CommonTree)match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_expression_element14266); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element14270);
					expr=expression_element();
					state._fsp--;

					match(input, Token.UP, null); 


					            retval.priority = getPriority((t!=null?t.getType():0));
					          
					// TEMPLATE REWRITE
					// 1568:5: -> expression_element_outer_join_sign(expr=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("expression_element_outer_join_sign",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;
				case 27 :
					// PLSQLPrinter.g:1570:10: case_statement[false]
					{
					pushFollow(FOLLOW_case_statement_in_expression_element14310);
					case_statement295=case_statement(false);
					state._fsp--;


					            retval.priority = getPriority(SEARCHED_CASE);
					          
					// TEMPLATE REWRITE
					// 1574:11: -> { $case_statement.st }
					{
						retval.st =  (case_statement295!=null?((StringTemplate)case_statement295.getTemplate()):null) ;
					}



					}
					break;
				case 28 :
					// PLSQLPrinter.g:1575:10: constant
					{
					pushFollow(FOLLOW_constant_in_expression_element14348);
					constant296=constant();
					state._fsp--;


					            retval.priority = getPriority(UNSIGNED_INTEGER);
					          
					// TEMPLATE REWRITE
					// 1579:11: -> { $constant.st }
					{
						retval.st =  (constant296!=null?((StringTemplate)constant296.getTemplate()):null) ;
					}



					}
					break;
				case 29 :
					// PLSQLPrinter.g:1580:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_expression_element14385);
					general_element297=general_element();
					state._fsp--;


					            retval.priority = getPriority(CASCATED_ELEMENT);
					          
					// TEMPLATE REWRITE
					// 1584:11: -> { $general_element.st }
					{
						retval.st =  (general_element297!=null?((StringTemplate)general_element297.getTemplate()):null) ;
					}



					}
					break;
				case 30 :
					// PLSQLPrinter.g:1585:10: hosted_variable_name
					{
					pushFollow(FOLLOW_hosted_variable_name_in_expression_element14422);
					hosted_variable_name298=hosted_variable_name();
					state._fsp--;


					            retval.priority = getPriority(HOSTED_VARIABLE_NAME);
					          
					// TEMPLATE REWRITE
					// 1589:11: -> { $hosted_variable_name.st }
					{
						retval.st =  (hosted_variable_name298!=null?((StringTemplate)hosted_variable_name298.getTemplate()):null) ;
					}



					}
					break;
				case 31 :
					// PLSQLPrinter.g:1590:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_expression_element14459);
					subquery299=subquery();
					state._fsp--;


					            retval.priority = getPriority(UNSIGNED_INTEGER); // a hack since subquery is already in parens
					          
					// TEMPLATE REWRITE
					// 1594:11: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery299!=null?((StringTemplate)subquery299.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "expression_element"

    private void transformJointEleCoalesce(TreeRuleReturnScope arg)
    {
    	//col||'literal'||.. -> coalesce(col::text,'')||'literal'||..
    	if(arg!=null && arg.getTemplate()!=null && arg.getTemplate() instanceof StringTemplate)
		{
			StringTemplate st = (StringTemplate) arg.getTemplate();
			if("general_element".equals(st.getName()))//or string_literal 
			{
				List<StringTemplate> parts = (List<StringTemplate>) st.getAttribute("parts");
				for(StringTemplate stp : parts)
				{
				     stp.getAttributes().put("val", "coalesce("+stp.getAttribute("val")+"::text,'')");
				}
			}
		}
    }
	
	
	public static class in_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "in_elements"
	// PLSQLPrinter.g:1597:1: in_elements : ( subquery -> in_parens(val=$subquery.st)| expression -> { $expression.st }| expression_list -> { $expression_list.st });
	public final PLSQLPrinter.in_elements_return in_elements() throws RecognitionException {
		PLSQLPrinter.in_elements_return retval = new PLSQLPrinter.in_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope subquery300 =null;
		TreeRuleReturnScope expression301 =null;
		TreeRuleReturnScope expression_list302 =null;

		try {
			// PLSQLPrinter.g:1598:5: ( subquery -> in_parens(val=$subquery.st)| expression -> { $expression.st }| expression_list -> { $expression_list.st })
			int alt252=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt252=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt252=2;
				}
				break;
			case EXPR_LIST:
				{
				alt252=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 252, 0, input);
				throw nvae;
			}
			switch (alt252) {
				case 1 :
					// PLSQLPrinter.g:1598:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_in_elements14510);
					subquery300=subquery();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1598:19: -> in_parens(val=$subquery.st)
					{
						retval.st = templateLib.getInstanceOf("in_parens",new STAttrMap().put("val", (subquery300!=null?((StringTemplate)subquery300.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1599:10: expression
					{
					pushFollow(FOLLOW_expression_in_in_elements14530);
					expression301=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1599:21: -> { $expression.st }
					{
						retval.st =  (expression301!=null?((StringTemplate)expression301.getTemplate()):null) ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1600:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_in_elements14545);
					expression_list302=expression_list();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1600:26: -> { $expression_list.st }
					{
						retval.st =  (expression_list302!=null?((StringTemplate)expression_list302.getTemplate()):null) ;
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "in_elements"


	public static class datetime_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "datetime_element"
	// PLSQLPrinter.g:1603:1: datetime_element : ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\");
	public final PLSQLPrinter.datetime_element_return datetime_element() throws RecognitionException {
		PLSQLPrinter.datetime_element_return retval = new PLSQLPrinter.datetime_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1604:5: ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) -> template( \"not implemented: datetime_element\"| ^( DAY_VK SECOND_VK ( expression )* ) -> template( \"not implemented: datetime_element\"| ^( YEAR_VK MONTH_VK expression ) -> template( \"not implemented: datetime_element\")
			int alt255=3;
			switch ( input.LA(1) ) {
			case AT_VK:
				{
				alt255=1;
				}
				break;
			case DAY_VK:
				{
				alt255=2;
				}
				break;
			case YEAR_VK:
				{
				alt255=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 255, 0, input);
				throw nvae;
			}
			switch (alt255) {
				case 1 :
					// PLSQLPrinter.g:1604:10: ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) )
					{
					match(input,AT_VK,FOLLOW_AT_VK_in_datetime_element14570); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_datetime_element14572);
					expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1604:37: ( LOCAL_VK | TIME_VK expression )
					int alt253=2;
					int LA253_0 = input.LA(1);
					if ( (LA253_0==LOCAL_VK) ) {
						alt253=1;
					}
					else if ( (LA253_0==TIME_VK) ) {
						alt253=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 253, 0, input);
						throw nvae;
					}

					switch (alt253) {
						case 1 :
							// PLSQLPrinter.g:1604:38: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_datetime_element14575); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1604:47: TIME_VK expression
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_datetime_element14577); 
							pushFollow(FOLLOW_expression_in_datetime_element14579);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1605:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1606:10: ^( DAY_VK SECOND_VK ( expression )* )
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_datetime_element14607); 
					match(input, Token.DOWN, null); 
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_datetime_element14609); 
					// PLSQLPrinter.g:1606:29: ( expression )*
					loop254:
					while (true) {
						int alt254=2;
						int LA254_0 = input.LA(1);
						if ( (LA254_0==EXPR||LA254_0==LOGIC_EXPR) ) {
							alt254=1;
						}

						switch (alt254) {
						case 1 :
							// PLSQLPrinter.g:1606:29: expression
							{
							pushFollow(FOLLOW_expression_in_datetime_element14611);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop254;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1607:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1608:10: ^( YEAR_VK MONTH_VK expression )
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_datetime_element14639); 
					match(input, Token.DOWN, null); 
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_datetime_element14641); 
					pushFollow(FOLLOW_expression_in_datetime_element14643);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1609:5: -> template( \"not implemented: datetime_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: datetime_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "datetime_element"


	public static class model_expression_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression"
	// PLSQLPrinter.g:1612:1: model_expression : ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\";
	public final PLSQLPrinter.model_expression_return model_expression() throws RecognitionException {
		PLSQLPrinter.model_expression_return retval = new PLSQLPrinter.model_expression_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1613:5: ( ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) -> template( \"not implemented: model_expression\")
			// PLSQLPrinter.g:1613:10: ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ )
			{
			match(input,MODEL_EXPRESSION,FOLLOW_MODEL_EXPRESSION_in_model_expression14679); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_element_in_model_expression14681);
			expression_element();
			state._fsp--;

			// PLSQLPrinter.g:1613:48: ( model_expression_element )+
			int cnt256=0;
			loop256:
			while (true) {
				int alt256=2;
				int LA256_0 = input.LA(1);
				if ( (LA256_0==SQL92_RESERVED_ANY||LA256_0==EXPR||(LA256_0 >= FOR_MULTI_COLUMN && LA256_0 <= FOR_SINGLE_COLUMN)||LA256_0==LOGIC_EXPR) ) {
					alt256=1;
				}

				switch (alt256) {
				case 1 :
					// PLSQLPrinter.g:1613:48: model_expression_element
					{
					pushFollow(FOLLOW_model_expression_element_in_model_expression14683);
					model_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt256 >= 1 ) break loop256;
					EarlyExitException eee = new EarlyExitException(256, input);
					throw eee;
				}
				cnt256++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1614:5: -> template( \"not implemented: model_expression\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: model_expression");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression"


	public static class model_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "model_expression_element"
	// PLSQLPrinter.g:1617:1: model_expression_element : ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\");
	public final PLSQLPrinter.model_expression_element_return model_expression_element() throws RecognitionException {
		PLSQLPrinter.model_expression_element_return retval = new PLSQLPrinter.model_expression_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1618:5: ( SQL92_RESERVED_ANY -> template( \"not implemented: model_expression_element\"| expression -> template( \"not implemented: model_expression_element\"| ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) -> template( \"not implemented: model_expression_element\"| ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) -> template( \"not implemented: model_expression_element\")
			int alt261=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt261=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt261=2;
				}
				break;
			case FOR_SINGLE_COLUMN:
				{
				alt261=3;
				}
				break;
			case FOR_MULTI_COLUMN:
				{
				alt261=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 261, 0, input);
				throw nvae;
			}
			switch (alt261) {
				case 1 :
					// PLSQLPrinter.g:1618:10: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element14719); 
					// TEMPLATE REWRITE
					// 1619:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1620:10: expression
					{
					pushFollow(FOLLOW_expression_in_model_expression_element14744);
					expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1621:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1622:10: ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? )
					{
					match(input,FOR_SINGLE_COLUMN,FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element14770); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_model_expression_element14772);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_for_single_column_element_in_model_expression_element14774);
					for_single_column_element();
					state._fsp--;

					// PLSQLPrinter.g:1622:68: ( for_like_part )?
					int alt257=2;
					int LA257_0 = input.LA(1);
					if ( (LA257_0==SQL92_RESERVED_LIKE) ) {
						alt257=1;
					}
					switch (alt257) {
						case 1 :
							// PLSQLPrinter.g:1622:68: for_like_part
							{
							pushFollow(FOLLOW_for_like_part_in_model_expression_element14776);
							for_like_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1623:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1624:10: ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) )
					{
					match(input,FOR_MULTI_COLUMN,FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element14804); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1624:29: ( column_name )+
					int cnt258=0;
					loop258:
					while (true) {
						int alt258=2;
						int LA258_0 = input.LA(1);
						if ( (LA258_0==COLUMN_NAME) ) {
							alt258=1;
						}

						switch (alt258) {
						case 1 :
							// PLSQLPrinter.g:1624:29: column_name
							{
							pushFollow(FOLLOW_column_name_in_model_expression_element14806);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt258 >= 1 ) break loop258;
							EarlyExitException eee = new EarlyExitException(258, input);
							throw eee;
						}
						cnt258++;
					}

					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_model_expression_element14810); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1624:62: ( subquery | ( expression_list )+ )
					int alt260=2;
					int LA260_0 = input.LA(1);
					if ( (LA260_0==SUBQUERY) ) {
						alt260=1;
					}
					else if ( (LA260_0==EXPR_LIST) ) {
						alt260=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 260, 0, input);
						throw nvae;
					}

					switch (alt260) {
						case 1 :
							// PLSQLPrinter.g:1624:63: subquery
							{
							pushFollow(FOLLOW_subquery_in_model_expression_element14813);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1624:72: ( expression_list )+
							{
							// PLSQLPrinter.g:1624:72: ( expression_list )+
							int cnt259=0;
							loop259:
							while (true) {
								int alt259=2;
								int LA259_0 = input.LA(1);
								if ( (LA259_0==EXPR_LIST) ) {
									alt259=1;
								}

								switch (alt259) {
								case 1 :
									// PLSQLPrinter.g:1624:72: expression_list
									{
									pushFollow(FOLLOW_expression_list_in_model_expression_element14815);
									expression_list();
									state._fsp--;

									}
									break;

								default :
									if ( cnt259 >= 1 ) break loop259;
									EarlyExitException eee = new EarlyExitException(259, input);
									throw eee;
								}
								cnt259++;
							}

							}
							break;

					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1625:5: -> template( \"not implemented: model_expression_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: model_expression_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "model_expression_element"


	public static class for_single_column_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_single_column_element"
	// PLSQLPrinter.g:1628:1: for_single_column_element : ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\");
	public final PLSQLPrinter.for_single_column_element_return for_single_column_element() throws RecognitionException {
		PLSQLPrinter.for_single_column_element_return retval = new PLSQLPrinter.for_single_column_element_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1629:5: ( ^( SQL92_RESERVED_IN expression_list ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_FROM expression ) -> template( \"not implemented: for_single_column_element\"| ^( SQL92_RESERVED_TO expression ) -> template( \"not implemented: for_single_column_element\"| ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) -> template( \"not implemented: for_single_column_element\")
			int alt263=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_IN:
				{
				alt263=1;
				}
				break;
			case SQL92_RESERVED_FROM:
				{
				alt263=2;
				}
				break;
			case SQL92_RESERVED_TO:
				{
				alt263=3;
				}
				break;
			case DECREMENT_VK:
			case INCREMENT_VK:
				{
				alt263=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 263, 0, input);
				throw nvae;
			}
			switch (alt263) {
				case 1 :
					// PLSQLPrinter.g:1629:10: ^( SQL92_RESERVED_IN expression_list )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element14854); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_list_in_for_single_column_element14856);
					expression_list();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1630:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1631:10: ^( SQL92_RESERVED_FROM expression )
					{
					match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element14883); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element14885);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1632:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1633:10: ^( SQL92_RESERVED_TO expression )
					{
					match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element14913); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element14915);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1634:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1635:10: ^( ( INCREMENT_VK | DECREMENT_VK ) expression )
					{
					// PLSQLPrinter.g:1635:12: ( INCREMENT_VK | DECREMENT_VK )
					int alt262=2;
					int LA262_0 = input.LA(1);
					if ( (LA262_0==INCREMENT_VK) ) {
						alt262=1;
					}
					else if ( (LA262_0==DECREMENT_VK) ) {
						alt262=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 262, 0, input);
						throw nvae;
					}

					switch (alt262) {
						case 1 :
							// PLSQLPrinter.g:1635:13: INCREMENT_VK
							{
							match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_for_single_column_element14944); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1635:26: DECREMENT_VK
							{
							match(input,DECREMENT_VK,FOLLOW_DECREMENT_VK_in_for_single_column_element14946); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element14949);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1636:5: -> template( \"not implemented: for_single_column_element\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: for_single_column_element");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_single_column_element"


	public static class for_like_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "for_like_part"
	// PLSQLPrinter.g:1639:1: for_like_part : ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\";
	public final PLSQLPrinter.for_like_part_return for_like_part() throws RecognitionException {
		PLSQLPrinter.for_like_part_return retval = new PLSQLPrinter.for_like_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1640:5: ( ^( SQL92_RESERVED_LIKE expression ) -> template( \"not implemented: for_like_part\")
			// PLSQLPrinter.g:1640:10: ^( SQL92_RESERVED_LIKE expression )
			{
			match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part14986); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_for_like_part14988);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1641:5: -> template( \"not implemented: for_like_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: for_like_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_like_part"


	public static class case_statement_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_statement"
	// PLSQLPrinter.g:1644:1: case_statement[boolean is_statement] : ( ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_simple(expression=$expression.stis_statement=$is_statementcase_when_parts=$partscase_else_part=$case_else_part.st)| ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_searched(case_when_parts=$partsis_statement=$is_statementcase_else_part=$case_else_part.st));
	public final PLSQLPrinter.case_statement_return case_statement(boolean is_statement) throws RecognitionException {
		PLSQLPrinter.case_statement_return retval = new PLSQLPrinter.case_statement_return();
		retval.start = input.LT(1);

		List<Object> list_parts=null;
		TreeRuleReturnScope expression303 =null;
		TreeRuleReturnScope case_else_part304 =null;
		TreeRuleReturnScope case_else_part305 =null;
		RuleReturnScope parts = null;
		try {
			// PLSQLPrinter.g:1645:5: ( ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_simple(expression=$expression.stis_statement=$is_statementcase_when_parts=$partscase_else_part=$case_else_part.st)| ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? ) -> case_statement_searched(case_when_parts=$partsis_statement=$is_statementcase_else_part=$case_else_part.st))
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==SIMPLE_CASE) ) {
				alt268=1;
			}
			else if ( (LA268_0==SEARCHED_CASE) ) {
				alt268=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 268, 0, input);
				throw nvae;
			}

			switch (alt268) {
				case 1 :
					// PLSQLPrinter.g:1645:10: ^( SIMPLE_CASE expression (parts+= case_when_part )+ ( case_else_part )? )
					{
					match(input,SIMPLE_CASE,FOLLOW_SIMPLE_CASE_in_case_statement15025); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_case_statement15027);
					expression303=expression();
					state._fsp--;

					// PLSQLPrinter.g:1645:40: (parts+= case_when_part )+
					int cnt264=0;
					loop264:
					while (true) {
						int alt264=2;
						int LA264_0 = input.LA(1);
						if ( (LA264_0==SQL92_RESERVED_WHEN) ) {
							alt264=1;
						}

						switch (alt264) {
						case 1 :
							// PLSQLPrinter.g:1645:40: parts+= case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement15031);
							parts=case_when_part();
							state._fsp--;

							if (list_parts==null) list_parts=new ArrayList<Object>();
							list_parts.add(parts.getTemplate());
							}
							break;

						default :
							if ( cnt264 >= 1 ) break loop264;
							EarlyExitException eee = new EarlyExitException(264, input);
							throw eee;
						}
						cnt264++;
					}

					// PLSQLPrinter.g:1645:58: ( case_else_part )?
					int alt265=2;
					int LA265_0 = input.LA(1);
					if ( (LA265_0==SQL92_RESERVED_ELSE) ) {
						alt265=1;
					}
					switch (alt265) {
						case 1 :
							// PLSQLPrinter.g:1645:58: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement15034);
							case_else_part304=case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1646:5: -> case_statement_simple(expression=$expression.stis_statement=$is_statementcase_when_parts=$partscase_else_part=$case_else_part.st)
					{
						retval.st = templateLib.getInstanceOf("case_statement_simple",new STAttrMap().put("expression", (expression303!=null?((StringTemplate)expression303.getTemplate()):null)).put("is_statement", is_statement).put("case_when_parts", list_parts).put("case_else_part", (case_else_part304!=null?((StringTemplate)case_else_part304.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1647:10: ^( SEARCHED_CASE (parts+= case_when_part )+ ( case_else_part )? )
					{
					match(input,SEARCHED_CASE,FOLLOW_SEARCHED_CASE_in_case_statement15080); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1647:31: (parts+= case_when_part )+
					int cnt266=0;
					loop266:
					while (true) {
						int alt266=2;
						int LA266_0 = input.LA(1);
						if ( (LA266_0==SQL92_RESERVED_WHEN) ) {
							alt266=1;
						}

						switch (alt266) {
						case 1 :
							// PLSQLPrinter.g:1647:31: parts+= case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement15084);
							parts=case_when_part();
							state._fsp--;

							if (list_parts==null) list_parts=new ArrayList<Object>();
							list_parts.add(parts.getTemplate());
							}
							break;

						default :
							if ( cnt266 >= 1 ) break loop266;
							EarlyExitException eee = new EarlyExitException(266, input);
							throw eee;
						}
						cnt266++;
					}

					// PLSQLPrinter.g:1647:49: ( case_else_part )?
					int alt267=2;
					int LA267_0 = input.LA(1);
					if ( (LA267_0==SQL92_RESERVED_ELSE) ) {
						alt267=1;
					}
					switch (alt267) {
						case 1 :
							// PLSQLPrinter.g:1647:49: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement15087);
							case_else_part305=case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1648:5: -> case_statement_searched(case_when_parts=$partsis_statement=$is_statementcase_else_part=$case_else_part.st)
					{
						retval.st = templateLib.getInstanceOf("case_statement_searched",new STAttrMap().put("case_when_parts", list_parts).put("is_statement", is_statement).put("case_else_part", (case_else_part305!=null?((StringTemplate)case_else_part305.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_statement"


	public static class case_when_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_when_part"
	// PLSQLPrinter.g:1653:1: case_when_part : ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) ) ;
	public final PLSQLPrinter.case_when_part_return case_when_part() throws RecognitionException {
		PLSQLPrinter.case_when_part_return retval = new PLSQLPrinter.case_when_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope condition =null;
		TreeRuleReturnScope then_expr =null;
		TreeRuleReturnScope seq_of_statements306 =null;

		try {
			// PLSQLPrinter.g:1654:5: ( ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) ) )
			// PLSQLPrinter.g:1654:10: ^( SQL92_RESERVED_WHEN condition= expression ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)) )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part15138); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_case_when_part15142);
			condition=expression();
			state._fsp--;

			// PLSQLPrinter.g:1655:13: ( seq_of_statements -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)|then_expr= expression -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st))
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==STATEMENTS) ) {
				alt269=1;
			}
			else if ( (LA269_0==EXPR||LA269_0==LOGIC_EXPR) ) {
				alt269=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 269, 0, input);
				throw nvae;
			}

			switch (alt269) {
				case 1 :
					// PLSQLPrinter.g:1656:15: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_when_part15172);
					seq_of_statements306=seq_of_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1656:33: -> case_when_part_statements(condition=$condition.stseq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("case_when_part_statements",new STAttrMap().put("condition", (condition!=null?((StringTemplate)condition.getTemplate()):null)).put("seq_of_statements", (seq_of_statements306!=null?((StringTemplate)seq_of_statements306.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1657:17: then_expr= expression
					{
					pushFollow(FOLLOW_expression_in_case_when_part15206);
					then_expr=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1657:38: -> case_when_part_expression(condition=$condition.stexpression=$then_expr.st)
					{
						retval.st = templateLib.getInstanceOf("case_when_part_expression",new STAttrMap().put("condition", (condition!=null?((StringTemplate)condition.getTemplate()):null)).put("expression", (then_expr!=null?((StringTemplate)then_expr.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_when_part"


	public static class case_else_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "case_else_part"
	// PLSQLPrinter.g:1662:1: case_else_part : ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) ) ;
	public final PLSQLPrinter.case_else_part_return case_else_part() throws RecognitionException {
		PLSQLPrinter.case_else_part_return retval = new PLSQLPrinter.case_else_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope seq_of_statements307 =null;
		TreeRuleReturnScope expression308 =null;

		try {
			// PLSQLPrinter.g:1663:5: ( ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) ) )
			// PLSQLPrinter.g:1663:10: ^( SQL92_RESERVED_ELSE ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st)) )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part15267); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1664:13: ( seq_of_statements -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)| expression -> case_else_part_expression(expression=$expression.st))
			int alt270=2;
			int LA270_0 = input.LA(1);
			if ( (LA270_0==STATEMENTS) ) {
				alt270=1;
			}
			else if ( (LA270_0==EXPR||LA270_0==LOGIC_EXPR) ) {
				alt270=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 270, 0, input);
				throw nvae;
			}

			switch (alt270) {
				case 1 :
					// PLSQLPrinter.g:1665:15: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_else_part15297);
					seq_of_statements307=seq_of_statements();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1665:33: -> case_else_part_statements(seq_of_statements=$seq_of_statements.st)
					{
						retval.st = templateLib.getInstanceOf("case_else_part_statements",new STAttrMap().put("seq_of_statements", (seq_of_statements307!=null?((StringTemplate)seq_of_statements307.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1666:17: expression
					{
					pushFollow(FOLLOW_expression_in_case_else_part15324);
					expression308=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1666:28: -> case_else_part_expression(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("case_else_part_expression",new STAttrMap().put("expression", (expression308!=null?((StringTemplate)expression308.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "case_else_part"


	public static class standard_function_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "standard_function"
	// PLSQLPrinter.g:1672:1: standard_function : ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)| ^( XMLCAST_VK expression type_spec ) -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)| ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec ) -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK extract_part expression ) -> standard_function_extract(part=$extract_part.stexpression=$expression.st)| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression ) -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? ) -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)| ^( XMLAGG_VK expression ( order_by_clause )? ) -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)| ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* ) -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* ) -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)| ^( XMLPI_VK ( NAME_VK ( char_set_name )? id= commented_id | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\");
	public final PLSQLPrinter.standard_function_return standard_function() throws RecognitionException {
		PLSQLPrinter.standard_function_return retval = new PLSQLPrinter.standard_function_return();
		retval.start = input.LT(1);

		CommonTree FUNCTION_ENABLING_OVER309=null;
		CommonTree SQL92_RESERVED_DISTINCT312=null;
		CommonTree SQL92_RESERVED_UNIQUE313=null;
		CommonTree SQL92_RESERVED_ALL314=null;
		CommonTree ASTERISK315=null;
		CommonTree FUNCTION_ENABLING_WITHIN_OR_OVER321=null;
		CommonTree DOCUMENT_VK329=null;
		CommonTree CONTENT_VK330=null;
		CommonTree WELLFORMED_VK332=null;
		CommonTree ENTITYESCAPING_VK338=null;
		CommonTree NOENTITYESCAPING_VK339=null;
		CommonTree NAME_VK340=null;
		CommonTree EVALNAME_VK341=null;
		List<Object> list_xml_table_columns=null;
		List<Object> list_value_exprs=null;
		TreeRuleReturnScope s_or_e =null;
		TreeRuleReturnScope expr =null;
		TreeRuleReturnScope expr_from =null;
		TreeRuleReturnScope expr_to =null;
		TreeRuleReturnScope text_expr =null;
		TreeRuleReturnScope trim_char_expr =null;
		TreeRuleReturnScope id =null;
		TreeRuleReturnScope function_argument310 =null;
		TreeRuleReturnScope over_clause311 =null;
		TreeRuleReturnScope expression316 =null;
		TreeRuleReturnScope over_clause317 =null;
		TreeRuleReturnScope expression318 =null;
		TreeRuleReturnScope type_spec319 =null;
		TreeRuleReturnScope type_spec320 =null;
		TreeRuleReturnScope function_argument322 =null;
		TreeRuleReturnScope within_clause323 =null;
		TreeRuleReturnScope over_clause324 =null;
		TreeRuleReturnScope extract_part325 =null;
		TreeRuleReturnScope expression326 =null;
		TreeRuleReturnScope expression327 =null;
		TreeRuleReturnScope order_by_clause328 =null;
		TreeRuleReturnScope expression331 =null;
		TreeRuleReturnScope expression333 =null;
		TreeRuleReturnScope xml_param_version_part334 =null;
		TreeRuleReturnScope xmlroot_param_standalone_part335 =null;
		TreeRuleReturnScope xml_namespaces_clause336 =null;
		TreeRuleReturnScope xml_passing_clause337 =null;
		TreeRuleReturnScope expression342 =null;
		TreeRuleReturnScope xml_attributes_clause343 =null;
		RuleReturnScope xml_table_columns = null;
		RuleReturnScope value_exprs = null;
		 StringTemplate trimKind = null; 
		try {
			// PLSQLPrinter.g:1674:5: ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)| ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? ) -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)| ^( XMLCAST_VK expression type_spec ) -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)| ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec ) -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)| ^( CHR_VK expression NCHAR_CS_VK ) -> template( \"not implemented: standard_function\"| ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) -> template( \"not implemented: standard_function\"| ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) -> template( \"not implemented: standard_function\"| ^( EXTRACT_VK extract_part expression ) -> standard_function_extract(part=$extract_part.stexpression=$expression.st)| ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) -> template( \"not implemented: standard_function\"| ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) -> template( \"not implemented: standard_function\"| ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression ) -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)| ^( TREAT_VK expression ( REF_VK )? type_spec ) -> template( \"not implemented: standard_function\"| ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? ) -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)| ^( XMLAGG_VK expression ( order_by_clause )? ) -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)| ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) -> template( \"not implemented: standard_function\"| ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) -> template( \"not implemented: standard_function\"| ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)| ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) -> template( \"not implemented: standard_function\"| ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)| ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* ) -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)| ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* ) -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)| ^( XMLPI_VK ( NAME_VK ( char_set_name )? id= commented_id | EVALNAME_VK expression ) ( expression )? ) -> template( \"not implemented: standard_function\"| ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) -> template( \"not implemented: standard_function\")
			int alt315=25;
			switch ( input.LA(1) ) {
			case FUNCTION_ENABLING_OVER:
				{
				alt315=1;
				}
				break;
			case FUNCTION_ENABLING_USING:
				{
				alt315=2;
				}
				break;
			case COUNT_VK:
				{
				alt315=3;
				}
				break;
			case XMLCAST_VK:
				{
				alt315=4;
				}
				break;
			case CAST_VK:
				{
				alt315=5;
				}
				break;
			case CHR_VK:
				{
				alt315=6;
				}
				break;
			case COLLECT_VK:
				{
				alt315=7;
				}
				break;
			case FUNCTION_ENABLING_WITHIN_OR_OVER:
				{
				alt315=8;
				}
				break;
			case DECOMPOSE_VK:
				{
				alt315=9;
				}
				break;
			case EXTRACT_VK:
				{
				alt315=10;
				}
				break;
			case FIRST_VALUE_VK:
			case LAST_VALUE_VK:
				{
				alt315=11;
				}
				break;
			case PREDICTION_FUNCTION:
				{
				alt315=12;
				}
				break;
			case TRANSLATE_VK:
				{
				alt315=13;
				}
				break;
			case TREAT_VK:
				{
				alt315=14;
				}
				break;
			case TRIM_VK:
				{
				alt315=15;
				}
				break;
			case XMLAGG_VK:
				{
				alt315=16;
				}
				break;
			case XMLCOLATTVAL_VK:
			case XMLFOREST_VK:
				{
				alt315=17;
				}
				break;
			case XMLEXISTS_VK:
				{
				alt315=18;
				}
				break;
			case XMLPARSE_VK:
				{
				alt315=19;
				}
				break;
			case XMLQUERY_VK:
				{
				alt315=20;
				}
				break;
			case XMLROOT_VK:
				{
				alt315=21;
				}
				break;
			case XMLTABLE_VK:
				{
				alt315=22;
				}
				break;
			case XMLELEMENT_VK:
				{
				alt315=23;
				}
				break;
			case XMLPI_VK:
				{
				alt315=24;
				}
				break;
			case XMLSERIALIZE_VK:
				{
				alt315=25;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 315, 0, input);
				throw nvae;
			}
			switch (alt315) {
				case 1 :
					// PLSQLPrinter.g:1674:10: ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? )
					{
					FUNCTION_ENABLING_OVER309=(CommonTree)match(input,FUNCTION_ENABLING_OVER,FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function15386); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function15388);
					function_argument310=function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1674:53: ( over_clause )?
					int alt271=2;
					int LA271_0 = input.LA(1);
					if ( (LA271_0==OVER_VK) ) {
						alt271=1;
					}
					switch (alt271) {
						case 1 :
							// PLSQLPrinter.g:1674:53: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function15390);
							over_clause311=over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1675:5: -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_enabling_over",new STAttrMap().put("function_name", (FUNCTION_ENABLING_OVER309!=null?FUNCTION_ENABLING_OVER309.getText():null)).put("function_arguments", (function_argument310!=null?((StringTemplate)function_argument310.getTemplate()):null)).put("over_clause", (over_clause311!=null?((StringTemplate)over_clause311.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1677:10: ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? )
					{
					match(input,FUNCTION_ENABLING_USING,FOLLOW_FUNCTION_ENABLING_USING_in_standard_function15440); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function15442);
					function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1677:54: ( using_clause )?
					int alt272=2;
					int LA272_0 = input.LA(1);
					if ( (LA272_0==PLSQL_NON_RESERVED_USING) ) {
						alt272=1;
					}
					switch (alt272) {
						case 1 :
							// PLSQLPrinter.g:1677:54: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function15444);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1678:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1679:10: ^( COUNT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )? ( ASTERISK | expression ) ( over_clause )? )
					{
					match(input,COUNT_VK,FOLLOW_COUNT_VK_in_standard_function15472); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1679:21: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE | SQL92_RESERVED_ALL )?
					int alt273=4;
					switch ( input.LA(1) ) {
						case SQL92_RESERVED_DISTINCT:
							{
							alt273=1;
							}
							break;
						case SQL92_RESERVED_UNIQUE:
							{
							alt273=2;
							}
							break;
						case SQL92_RESERVED_ALL:
							{
							alt273=3;
							}
							break;
					}
					switch (alt273) {
						case 1 :
							// PLSQLPrinter.g:1679:22: SQL92_RESERVED_DISTINCT
							{
							SQL92_RESERVED_DISTINCT312=(CommonTree)match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function15475); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1679:46: SQL92_RESERVED_UNIQUE
							{
							SQL92_RESERVED_UNIQUE313=(CommonTree)match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function15477); 
							}
							break;
						case 3 :
							// PLSQLPrinter.g:1679:68: SQL92_RESERVED_ALL
							{
							SQL92_RESERVED_ALL314=(CommonTree)match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_standard_function15479); 
							}
							break;

					}

					// PLSQLPrinter.g:1679:89: ( ASTERISK | expression )
					int alt274=2;
					int LA274_0 = input.LA(1);
					if ( (LA274_0==ASTERISK) ) {
						alt274=1;
					}
					else if ( (LA274_0==EXPR||LA274_0==LOGIC_EXPR) ) {
						alt274=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 274, 0, input);
						throw nvae;
					}

					switch (alt274) {
						case 1 :
							// PLSQLPrinter.g:1679:91: ASTERISK
							{
							ASTERISK315=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function15485); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1679:102: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function15489);
							expression316=expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1679:115: ( over_clause )?
					int alt275=2;
					int LA275_0 = input.LA(1);
					if ( (LA275_0==OVER_VK) ) {
						alt275=1;
					}
					switch (alt275) {
						case 1 :
							// PLSQLPrinter.g:1679:115: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function15493);
							over_clause317=over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1680:5: -> standard_function_count(is_distinct=$SQL92_RESERVED_DISTINCT != nullis_unique=$SQL92_RESERVED_UNIQUE != nullis_all=$SQL92_RESERVED_ALL != nullis_asterisk=$ASTERISK != nullexpression=$expression.stover_clause=$over_clause.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_count",new STAttrMap().put("is_distinct", SQL92_RESERVED_DISTINCT312 != null).put("is_unique", SQL92_RESERVED_UNIQUE313 != null).put("is_all", SQL92_RESERVED_ALL314 != null).put("is_asterisk", ASTERISK315 != null).put("expression", (expression316!=null?((StringTemplate)expression316.getTemplate()):null)).put("over_clause", (over_clause317!=null?((StringTemplate)over_clause317.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1684:10: ^( XMLCAST_VK expression type_spec )
					{
					match(input,XMLCAST_VK,FOLLOW_XMLCAST_VK_in_standard_function15584); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function15586);
					expression318=expression();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_standard_function15588);
					type_spec319=type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1685:5: -> standard_function_xmlcast(expression=$expression.sttype_spec=$type_spec.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_xmlcast",new STAttrMap().put("expression", (expression318!=null?((StringTemplate)expression318.getTemplate()):null)).put("type_spec", (type_spec319!=null?((StringTemplate)type_spec319.getTemplate()):null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1686:10: ^( CAST_VK (s_or_e= subquery |s_or_e= expression ) type_spec )
					{
					match(input,CAST_VK,FOLLOW_CAST_VK_in_standard_function15621); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1686:20: (s_or_e= subquery |s_or_e= expression )
					int alt276=2;
					int LA276_0 = input.LA(1);
					if ( (LA276_0==SUBQUERY) ) {
						alt276=1;
					}
					else if ( (LA276_0==EXPR||LA276_0==LOGIC_EXPR) ) {
						alt276=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 276, 0, input);
						throw nvae;
					}

					switch (alt276) {
						case 1 :
							// PLSQLPrinter.g:1686:21: s_or_e= subquery
							{
							pushFollow(FOLLOW_subquery_in_standard_function15626);
							s_or_e=subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1686:37: s_or_e= expression
							{
							pushFollow(FOLLOW_expression_in_standard_function15630);
							s_or_e=expression();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function15633);
					type_spec320=type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1687:5: -> standard_function_cast(subquery_or_expression=$s_or_e.sttype_spec=$type_spec.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_cast",new STAttrMap().put("subquery_or_expression", (s_or_e!=null?((StringTemplate)s_or_e.getTemplate()):null)).put("type_spec", (type_spec320!=null?((StringTemplate)type_spec320.getTemplate()):null)));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1688:10: ^( CHR_VK expression NCHAR_CS_VK )
					{
					match(input,CHR_VK,FOLLOW_CHR_VK_in_standard_function15666); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function15668);
					expression();
					state._fsp--;

					match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function15670); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1689:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1690:10: ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? )
					{
					match(input,COLLECT_VK,FOLLOW_COLLECT_VK_in_standard_function15697); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1690:23: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
					int alt277=3;
					int LA277_0 = input.LA(1);
					if ( (LA277_0==SQL92_RESERVED_DISTINCT) ) {
						alt277=1;
					}
					else if ( (LA277_0==SQL92_RESERVED_UNIQUE) ) {
						alt277=2;
					}
					switch (alt277) {
						case 1 :
							// PLSQLPrinter.g:1690:24: SQL92_RESERVED_DISTINCT
							{
							match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function15700); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1690:48: SQL92_RESERVED_UNIQUE
							{
							match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function15702); 
							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_standard_function15706);
					column_name();
					state._fsp--;

					// PLSQLPrinter.g:1690:84: ( collect_order_by_part )?
					int alt278=2;
					int LA278_0 = input.LA(1);
					if ( (LA278_0==SQL92_RESERVED_ORDER) ) {
						alt278=1;
					}
					switch (alt278) {
						case 1 :
							// PLSQLPrinter.g:1690:84: collect_order_by_part
							{
							pushFollow(FOLLOW_collect_order_by_part_in_standard_function15708);
							collect_order_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1691:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1692:10: ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)) )
					{
					FUNCTION_ENABLING_WITHIN_OR_OVER321=(CommonTree)match(input,FUNCTION_ENABLING_WITHIN_OR_OVER,FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function15736); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function15750);
					function_argument322=function_argument();
					state._fsp--;

					// PLSQLPrinter.g:1694:13: ( within_clause -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)| over_clause -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st))
					int alt279=2;
					int LA279_0 = input.LA(1);
					if ( (LA279_0==WITHIN_VK) ) {
						alt279=1;
					}
					else if ( (LA279_0==OVER_VK) ) {
						alt279=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 279, 0, input);
						throw nvae;
					}

					switch (alt279) {
						case 1 :
							// PLSQLPrinter.g:1695:15: within_clause
							{
							pushFollow(FOLLOW_within_clause_in_standard_function15780);
							within_clause323=within_clause();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1696:15: -> standard_function_enabling_within(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stwithin_clause=$within_clause.st)
							{
								retval.st = templateLib.getInstanceOf("standard_function_enabling_within",new STAttrMap().put("function_name", (FUNCTION_ENABLING_WITHIN_OR_OVER321!=null?FUNCTION_ENABLING_WITHIN_OR_OVER321.getText():null)).put("function_arguments", (function_argument322!=null?((StringTemplate)function_argument322.getTemplate()):null)).put("within_clause", (within_clause323!=null?((StringTemplate)within_clause323.getTemplate()):null)));
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:1699:17: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function15868);
							over_clause324=over_clause();
							state._fsp--;

							// TEMPLATE REWRITE
							// 1700:15: -> standard_function_enabling_over(function_name=$FUNCTION_ENABLING_WITHIN_OR_OVER.textfunction_arguments=$function_argument.stover_clause=$over_clause.st)
							{
								retval.st = templateLib.getInstanceOf("standard_function_enabling_over",new STAttrMap().put("function_name", (FUNCTION_ENABLING_WITHIN_OR_OVER321!=null?FUNCTION_ENABLING_WITHIN_OR_OVER321.getText():null)).put("function_arguments", (function_argument322!=null?((StringTemplate)function_argument322.getTemplate()):null)).put("over_clause", (over_clause324!=null?((StringTemplate)over_clause324.getTemplate()):null)));
							}



							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 9 :
					// PLSQLPrinter.g:1705:10: ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? )
					{
					match(input,DECOMPOSE_VK,FOLLOW_DECOMPOSE_VK_in_standard_function15977); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function15979);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1705:36: ( CANONICAL_VK | COMPATIBILITY_VK )?
					int alt280=3;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==CANONICAL_VK) ) {
						alt280=1;
					}
					else if ( (LA280_0==COMPATIBILITY_VK) ) {
						alt280=2;
					}
					switch (alt280) {
						case 1 :
							// PLSQLPrinter.g:1705:37: CANONICAL_VK
							{
							match(input,CANONICAL_VK,FOLLOW_CANONICAL_VK_in_standard_function15982); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1705:50: COMPATIBILITY_VK
							{
							match(input,COMPATIBILITY_VK,FOLLOW_COMPATIBILITY_VK_in_standard_function15984); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1706:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1707:10: ^( EXTRACT_VK extract_part expression )
					{
					match(input,EXTRACT_VK,FOLLOW_EXTRACT_VK_in_standard_function16014); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_extract_part_in_standard_function16016);
					extract_part325=extract_part();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function16018);
					expression326=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1708:5: -> standard_function_extract(part=$extract_part.stexpression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_extract",new STAttrMap().put("part", (extract_part325!=null?((StringTemplate)extract_part325.getTemplate()):null)).put("expression", (expression326!=null?((StringTemplate)expression326.getTemplate()):null)));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:1709:10: ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause )
					{
					// PLSQLPrinter.g:1709:12: ( FIRST_VALUE_VK | LAST_VALUE_VK )
					int alt281=2;
					int LA281_0 = input.LA(1);
					if ( (LA281_0==FIRST_VALUE_VK) ) {
						alt281=1;
					}
					else if ( (LA281_0==LAST_VALUE_VK) ) {
						alt281=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 281, 0, input);
						throw nvae;
					}

					switch (alt281) {
						case 1 :
							// PLSQLPrinter.g:1709:13: FIRST_VALUE_VK
							{
							match(input,FIRST_VALUE_VK,FOLLOW_FIRST_VALUE_VK_in_standard_function16052); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1709:28: LAST_VALUE_VK
							{
							match(input,LAST_VALUE_VK,FOLLOW_LAST_VALUE_VK_in_standard_function16054); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function16057);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1709:54: ( NULLS_VK )?
					int alt282=2;
					int LA282_0 = input.LA(1);
					if ( (LA282_0==NULLS_VK) ) {
						alt282=1;
					}
					switch (alt282) {
						case 1 :
							// PLSQLPrinter.g:1709:54: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_standard_function16059); 
							}
							break;

					}

					pushFollow(FOLLOW_over_clause_in_standard_function16062);
					over_clause();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1710:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:1711:10: ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? )
					{
					match(input,PREDICTION_FUNCTION,FOLLOW_PREDICTION_FUNCTION_in_standard_function16090); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1711:32: ( expression )+
					int cnt283=0;
					loop283:
					while (true) {
						int alt283=2;
						int LA283_0 = input.LA(1);
						if ( (LA283_0==EXPR||LA283_0==LOGIC_EXPR) ) {
							alt283=1;
						}

						switch (alt283) {
						case 1 :
							// PLSQLPrinter.g:1711:32: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function16092);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt283 >= 1 ) break loop283;
							EarlyExitException eee = new EarlyExitException(283, input);
							throw eee;
						}
						cnt283++;
					}

					// PLSQLPrinter.g:1711:44: ( cost_matrix_clause )?
					int alt284=2;
					int LA284_0 = input.LA(1);
					if ( (LA284_0==COST_VK) ) {
						alt284=1;
					}
					switch (alt284) {
						case 1 :
							// PLSQLPrinter.g:1711:44: cost_matrix_clause
							{
							pushFollow(FOLLOW_cost_matrix_clause_in_standard_function16095);
							cost_matrix_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1711:64: ( using_clause )?
					int alt285=2;
					int LA285_0 = input.LA(1);
					if ( (LA285_0==PLSQL_NON_RESERVED_USING) ) {
						alt285=1;
					}
					switch (alt285) {
						case 1 :
							// PLSQLPrinter.g:1711:64: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function16098);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1712:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:1713:10: ^( TRANSLATE_VK expr= expression expr_from= expression expr_to= expression )
					{
					match(input,TRANSLATE_VK,FOLLOW_TRANSLATE_VK_in_standard_function16126); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function16132);
					expr=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function16136);
					expr_from=expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_standard_function16140);
					expr_to=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1714:5: -> standard_function_translate(expr=$expr.stexpr_from=$expr_from.stexpr_to=$expr_to.st)
					{
						retval.st = templateLib.getInstanceOf("standard_function_translate",new STAttrMap().put("expr", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("expr_from", (expr_from!=null?((StringTemplate)expr_from.getTemplate()):null)).put("expr_to", (expr_to!=null?((StringTemplate)expr_to.getTemplate()):null)));
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:1715:10: ^( TREAT_VK expression ( REF_VK )? type_spec )
					{
					match(input,TREAT_VK,FOLLOW_TREAT_VK_in_standard_function16178); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function16180);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1715:32: ( REF_VK )?
					int alt286=2;
					int LA286_0 = input.LA(1);
					if ( (LA286_0==REF_VK) ) {
						alt286=1;
					}
					switch (alt286) {
						case 1 :
							// PLSQLPrinter.g:1715:32: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_standard_function16182); 
							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function16185);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1716:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 15 :
					// PLSQLPrinter.g:1717:10: ^( TRIM_VK text_expr= expression_element (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )? )
					{
					match(input,TRIM_VK,FOLLOW_TRIM_VK_in_standard_function16212); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_standard_function16228);
					text_expr=expression_element();
					state._fsp--;

					// PLSQLPrinter.g:1719:13: (trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )? )?
					int alt288=2;
					int LA288_0 = input.LA(1);
					if ( (LA288_0==APPROXIMATE_NUM_LIT||LA288_0==ASTERISK||LA288_0==CHAR_STRING||LA288_0==CONCATENATION_OP||(LA288_0 >= EQUALS_OP && LA288_0 <= EXACT_NUM_LIT)||(LA288_0 >= GREATER_THAN_OP && LA288_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA288_0 >= LESS_THAN_OP && LA288_0 <= LESS_THAN_OR_EQUALS_OP)||LA288_0==MINUS_SIGN||LA288_0==NOT_EQUAL_OP||LA288_0==PERCENT||LA288_0==PLUS_SIGN||LA288_0==SOLIDUS||LA288_0==SQL92_RESERVED_ALL||(LA288_0 >= SQL92_RESERVED_AND && LA288_0 <= SQL92_RESERVED_ANY)||LA288_0==SQL92_RESERVED_BETWEEN||LA288_0==SQL92_RESERVED_DEFAULT||LA288_0==SQL92_RESERVED_DISTINCT||(LA288_0 >= SQL92_RESERVED_EXISTS && LA288_0 <= SQL92_RESERVED_FALSE)||LA288_0==SQL92_RESERVED_IN||(LA288_0 >= SQL92_RESERVED_LIKE && LA288_0 <= SQL92_RESERVED_NULL)||LA288_0==SQL92_RESERVED_OR||LA288_0==SQL92_RESERVED_PRIOR||LA288_0==SQL92_RESERVED_TRUE||LA288_0==UNSIGNED_INTEGER||LA288_0==CASCATED_ELEMENT||LA288_0==CONSTANT_NEGATED||LA288_0==DATETIME_OP||LA288_0==DBTIMEZONE_VK||LA288_0==DIV_VK||LA288_0==DOT_ASTERISK||LA288_0==HOSTED_VARIABLE_NAME||(LA288_0 >= IS_A_SET && LA288_0 <= IS_PRESENT)||LA288_0==KEEP_VK||(LA288_0 >= LIKE2_VK && LA288_0 <= LIKEC_VK)||LA288_0==MAXVALUE_VK||LA288_0==MEMBER_VK||LA288_0==MINVALUE_VK||LA288_0==MODEL_EXPRESSION||LA288_0==MOD_VK||LA288_0==NEW_VK||LA288_0==NOT_BETWEEN||(LA288_0 >= NOT_IN && LA288_0 <= NOT_LIKE)||LA288_0==OUTER_JOIN_SIGN||(LA288_0 >= PERCENT_FOUND_VK && LA288_0 <= PERCENT_ROWCOUNT_VK)||LA288_0==PIPE_VK||LA288_0==SEARCHED_CASE||LA288_0==SESSIONTIMEZONE_VK||LA288_0==SIMPLE_CASE||LA288_0==SOME_VK||LA288_0==STANDARD_FUNCTION||LA288_0==SUBMULTISET_VK||LA288_0==SUBQUERY||(LA288_0 >= UNARY_MINUS && LA288_0 <= UNARY_PLUS)||LA288_0==VECTOR_EXPR||LA288_0==PGSQL_TYPED_LITERAL) ) {
						alt288=1;
					}
					switch (alt288) {
						case 1 :
							// PLSQLPrinter.g:1720:15: trim_char_expr= expression_element ( LEADING_VK | TRAILING_VK | BOTH_VK )?
							{
							pushFollow(FOLLOW_expression_element_in_standard_function16260);
							trim_char_expr=expression_element();
							state._fsp--;

							// PLSQLPrinter.g:1721:15: ( LEADING_VK | TRAILING_VK | BOTH_VK )?
							int alt287=4;
							switch ( input.LA(1) ) {
								case LEADING_VK:
									{
									alt287=1;
									}
									break;
								case TRAILING_VK:
									{
									alt287=2;
									}
									break;
								case BOTH_VK:
									{
									alt287=3;
									}
									break;
							}
							switch (alt287) {
								case 1 :
									// PLSQLPrinter.g:1722:17: LEADING_VK
									{
									match(input,LEADING_VK,FOLLOW_LEADING_VK_in_standard_function16294); 
									 trimKind = templateLib.getInstanceOf("trim_kind_leading"); 
									}
									break;
								case 2 :
									// PLSQLPrinter.g:1723:19: TRAILING_VK
									{
									match(input,TRAILING_VK,FOLLOW_TRAILING_VK_in_standard_function16316); 
									 trimKind = templateLib.getInstanceOf("trim_kind_trailing"); 
									}
									break;
								case 3 :
									// PLSQLPrinter.g:1724:19: BOTH_VK
									{
									match(input,BOTH_VK,FOLLOW_BOTH_VK_in_standard_function16338); 
									 trimKind = templateLib.getInstanceOf("trim_kind_both"); 
									}
									break;

							}

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1728:5: -> standard_function_trim(text_expr=$text_expr.sttrim_char_expr=$trim_char_expr.sttrim_kind=trimKind)
					{
						retval.st = templateLib.getInstanceOf("standard_function_trim",new STAttrMap().put("text_expr", (text_expr!=null?((StringTemplate)text_expr.getTemplate()):null)).put("trim_char_expr", (trim_char_expr!=null?((StringTemplate)trim_char_expr.getTemplate()):null)).put("trim_kind", trimKind));
					}



					}
					break;
				case 16 :
					// PLSQLPrinter.g:1730:10: ^( XMLAGG_VK expression ( order_by_clause )? )
					{
					match(input,XMLAGG_VK,FOLLOW_XMLAGG_VK_in_standard_function16423); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function16425);
					expression327=expression();
					state._fsp--;

					// PLSQLPrinter.g:1730:33: ( order_by_clause )?
					int alt289=2;
					int LA289_0 = input.LA(1);
					if ( (LA289_0==SQL92_RESERVED_ORDER) ) {
						alt289=1;
					}
					switch (alt289) {
						case 1 :
							// PLSQLPrinter.g:1730:33: order_by_clause
							{
							pushFollow(FOLLOW_order_by_clause_in_standard_function16427);
							order_by_clause328=order_by_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1731:5: -> xmlagg(expression=$expression.storder_by_clause=$order_by_clause.st)
					{
						retval.st = templateLib.getInstanceOf("xmlagg",new STAttrMap().put("expression", (expression327!=null?((StringTemplate)expression327.getTemplate()):null)).put("order_by_clause", (order_by_clause328!=null?((StringTemplate)order_by_clause328.getTemplate()):null)));
					}



					}
					break;
				case 17 :
					// PLSQLPrinter.g:1732:10: ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ )
					{
					// PLSQLPrinter.g:1732:12: ( XMLCOLATTVAL_VK | XMLFOREST_VK )
					int alt290=2;
					int LA290_0 = input.LA(1);
					if ( (LA290_0==XMLCOLATTVAL_VK) ) {
						alt290=1;
					}
					else if ( (LA290_0==XMLFOREST_VK) ) {
						alt290=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 290, 0, input);
						throw nvae;
					}

					switch (alt290) {
						case 1 :
							// PLSQLPrinter.g:1732:13: XMLCOLATTVAL_VK
							{
							match(input,XMLCOLATTVAL_VK,FOLLOW_XMLCOLATTVAL_VK_in_standard_function16462); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1732:29: XMLFOREST_VK
							{
							match(input,XMLFOREST_VK,FOLLOW_XMLFOREST_VK_in_standard_function16464); 
							}
							break;

					}

					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1732:43: ( xml_multiuse_expression_element )+
					int cnt291=0;
					loop291:
					while (true) {
						int alt291=2;
						int LA291_0 = input.LA(1);
						if ( (LA291_0==XML_ELEMENT) ) {
							alt291=1;
						}

						switch (alt291) {
						case 1 :
							// PLSQLPrinter.g:1732:43: xml_multiuse_expression_element
							{
							pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function16467);
							xml_multiuse_expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt291 >= 1 ) break loop291;
							EarlyExitException eee = new EarlyExitException(291, input);
							throw eee;
						}
						cnt291++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1733:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 18 :
					// PLSQLPrinter.g:1734:10: ^( XMLEXISTS_VK expression ( xml_passing_clause )? )
					{
					match(input,XMLEXISTS_VK,FOLLOW_XMLEXISTS_VK_in_standard_function16495); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function16497);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1734:36: ( xml_passing_clause )?
					int alt292=2;
					int LA292_0 = input.LA(1);
					if ( (LA292_0==PASSING_VK) ) {
						alt292=1;
					}
					switch (alt292) {
						case 1 :
							// PLSQLPrinter.g:1734:36: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function16499);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1735:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 19 :
					// PLSQLPrinter.g:1736:10: ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? )
					{
					match(input,XMLPARSE_VK,FOLLOW_XMLPARSE_VK_in_standard_function16527); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1736:24: ( DOCUMENT_VK | CONTENT_VK )
					int alt293=2;
					int LA293_0 = input.LA(1);
					if ( (LA293_0==DOCUMENT_VK) ) {
						alt293=1;
					}
					else if ( (LA293_0==CONTENT_VK) ) {
						alt293=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 293, 0, input);
						throw nvae;
					}

					switch (alt293) {
						case 1 :
							// PLSQLPrinter.g:1736:25: DOCUMENT_VK
							{
							DOCUMENT_VK329=(CommonTree)match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function16530); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1736:37: CONTENT_VK
							{
							CONTENT_VK330=(CommonTree)match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function16532); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function16535);
					expression331=expression();
					state._fsp--;

					// PLSQLPrinter.g:1736:60: ( WELLFORMED_VK )?
					int alt294=2;
					int LA294_0 = input.LA(1);
					if ( (LA294_0==WELLFORMED_VK) ) {
						alt294=1;
					}
					switch (alt294) {
						case 1 :
							// PLSQLPrinter.g:1736:60: WELLFORMED_VK
							{
							WELLFORMED_VK332=(CommonTree)match(input,WELLFORMED_VK,FOLLOW_WELLFORMED_VK_in_standard_function16537); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1737:5: -> xml_parse(is_document=$DOCUMENT_VK != nullis_content=$CONTENT_VK != nullexpression=$expression.stis_wellformed=$WELLFORMED_VK != null)
					{
						retval.st = templateLib.getInstanceOf("xml_parse",new STAttrMap().put("is_document", DOCUMENT_VK329 != null).put("is_content", CONTENT_VK330 != null).put("expression", (expression331!=null?((StringTemplate)expression331.getTemplate()):null)).put("is_wellformed", WELLFORMED_VK332 != null));
					}



					}
					break;
				case 20 :
					// PLSQLPrinter.g:1740:10: ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? )
					{
					match(input,XMLQUERY_VK,FOLLOW_XMLQUERY_VK_in_standard_function16602); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function16604);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1740:35: ( xml_passing_clause )?
					int alt295=2;
					int LA295_0 = input.LA(1);
					if ( (LA295_0==PASSING_VK) ) {
						alt295=1;
					}
					switch (alt295) {
						case 1 :
							// PLSQLPrinter.g:1740:35: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function16606);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1740:55: ( SQL92_RESERVED_NULL )?
					int alt296=2;
					int LA296_0 = input.LA(1);
					if ( (LA296_0==SQL92_RESERVED_NULL) ) {
						alt296=1;
					}
					switch (alt296) {
						case 1 :
							// PLSQLPrinter.g:1740:55: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_standard_function16609); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1741:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 21 :
					// PLSQLPrinter.g:1742:10: ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? )
					{
					match(input,XMLROOT_VK,FOLLOW_XMLROOT_VK_in_standard_function16637); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function16639);
					expression333=expression();
					state._fsp--;

					pushFollow(FOLLOW_xml_param_version_part_in_standard_function16641);
					xml_param_version_part334=xml_param_version_part();
					state._fsp--;

					// PLSQLPrinter.g:1742:57: ( xmlroot_param_standalone_part )?
					int alt297=2;
					int LA297_0 = input.LA(1);
					if ( (LA297_0==STANDALONE_VK) ) {
						alt297=1;
					}
					switch (alt297) {
						case 1 :
							// PLSQLPrinter.g:1742:57: xmlroot_param_standalone_part
							{
							pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function16643);
							xmlroot_param_standalone_part335=xmlroot_param_standalone_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1743:5: -> xmlroot(expression=$expression.stxml_param_version_part=$xml_param_version_part.stxmlroot_param_standalone_part=$xmlroot_param_standalone_part.st)
					{
						retval.st = templateLib.getInstanceOf("xmlroot",new STAttrMap().put("expression", (expression333!=null?((StringTemplate)expression333.getTemplate()):null)).put("xml_param_version_part", (xml_param_version_part334!=null?((StringTemplate)xml_param_version_part334.getTemplate()):null)).put("xmlroot_param_standalone_part", (xmlroot_param_standalone_part335!=null?((StringTemplate)xmlroot_param_standalone_part335.getTemplate()):null)));
					}



					}
					break;
				case 22 :
					// PLSQLPrinter.g:1746:10: ^( XMLTABLE_VK ( xml_namespaces_clause )? expr= expression ( xml_passing_clause )? (xml_table_columns+= xml_table_column )* )
					{
					match(input,XMLTABLE_VK,FOLLOW_XMLTABLE_VK_in_standard_function16703); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1746:24: ( xml_namespaces_clause )?
					int alt298=2;
					int LA298_0 = input.LA(1);
					if ( (LA298_0==XMLNAMESPACES_VK) ) {
						alt298=1;
					}
					switch (alt298) {
						case 1 :
							// PLSQLPrinter.g:1746:24: xml_namespaces_clause
							{
							pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function16705);
							xml_namespaces_clause336=xml_namespaces_clause();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function16710);
					expr=expression();
					state._fsp--;

					// PLSQLPrinter.g:1746:63: ( xml_passing_clause )?
					int alt299=2;
					int LA299_0 = input.LA(1);
					if ( (LA299_0==PASSING_VK) ) {
						alt299=1;
					}
					switch (alt299) {
						case 1 :
							// PLSQLPrinter.g:1746:63: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function16712);
							xml_passing_clause337=xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1746:100: (xml_table_columns+= xml_table_column )*
					loop300:
					while (true) {
						int alt300=2;
						int LA300_0 = input.LA(1);
						if ( (LA300_0==XML_COLUMN) ) {
							alt300=1;
						}

						switch (alt300) {
						case 1 :
							// PLSQLPrinter.g:1746:100: xml_table_columns+= xml_table_column
							{
							pushFollow(FOLLOW_xml_table_column_in_standard_function16717);
							xml_table_columns=xml_table_column();
							state._fsp--;

							if (list_xml_table_columns==null) list_xml_table_columns=new ArrayList<Object>();
							list_xml_table_columns.add(xml_table_columns.getTemplate());
							}
							break;

						default :
							break loop300;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1747:5: -> xmltable(xml_namespaces_clause=$xml_namespaces_clause.stxquery_expression=$expr.stxml_passing_clause=$xml_passing_clause.stxml_table_columns=$xml_table_columns)
					{
						retval.st = templateLib.getInstanceOf("xmltable",new STAttrMap().put("xml_namespaces_clause", (xml_namespaces_clause336!=null?((StringTemplate)xml_namespaces_clause336.getTemplate()):null)).put("xquery_expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)).put("xml_passing_clause", (xml_passing_clause337!=null?((StringTemplate)xml_passing_clause337.getTemplate()):null)).put("xml_table_columns", list_xml_table_columns));
					}



					}
					break;
				case 23 :
					// PLSQLPrinter.g:1750:10: ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? (value_exprs+= xmlelement_value_expr )* )
					{
					match(input,XMLELEMENT_VK,FOLLOW_XMLELEMENT_VK_in_standard_function16782); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1751:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
					int alt301=3;
					int LA301_0 = input.LA(1);
					if ( (LA301_0==ENTITYESCAPING_VK) ) {
						alt301=1;
					}
					else if ( (LA301_0==NOENTITYESCAPING_VK) ) {
						alt301=2;
					}
					switch (alt301) {
						case 1 :
							// PLSQLPrinter.g:1751:14: ENTITYESCAPING_VK
							{
							ENTITYESCAPING_VK338=(CommonTree)match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_standard_function16797); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1751:32: NOENTITYESCAPING_VK
							{
							NOENTITYESCAPING_VK339=(CommonTree)match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_standard_function16799); 
							}
							break;

					}

					// PLSQLPrinter.g:1752:13: ( NAME_VK | EVALNAME_VK )?
					int alt302=3;
					int LA302_0 = input.LA(1);
					if ( (LA302_0==NAME_VK) ) {
						alt302=1;
					}
					else if ( (LA302_0==EVALNAME_VK) ) {
						alt302=2;
					}
					switch (alt302) {
						case 1 :
							// PLSQLPrinter.g:1752:14: NAME_VK
							{
							NAME_VK340=(CommonTree)match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function16816); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1752:22: EVALNAME_VK
							{
							EVALNAME_VK341=(CommonTree)match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function16818); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function16822);
					expression342=expression();
					state._fsp--;

					// PLSQLPrinter.g:1753:13: ( xml_attributes_clause )?
					int alt303=2;
					int LA303_0 = input.LA(1);
					if ( (LA303_0==XMLATTRIBUTES_VK) ) {
						alt303=1;
					}
					switch (alt303) {
						case 1 :
							// PLSQLPrinter.g:1753:13: xml_attributes_clause
							{
							pushFollow(FOLLOW_xml_attributes_clause_in_standard_function16836);
							xml_attributes_clause343=xml_attributes_clause();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1753:47: (value_exprs+= xmlelement_value_expr )*
					loop304:
					while (true) {
						int alt304=2;
						int LA304_0 = input.LA(1);
						if ( (LA304_0==EXPR||LA304_0==LOGIC_EXPR) ) {
							alt304=1;
						}

						switch (alt304) {
						case 1 :
							// PLSQLPrinter.g:1753:47: value_exprs+= xmlelement_value_expr
							{
							pushFollow(FOLLOW_xmlelement_value_expr_in_standard_function16841);
							value_exprs=xmlelement_value_expr();
							state._fsp--;

							if (list_value_exprs==null) list_value_exprs=new ArrayList<Object>();
							list_value_exprs.add(value_exprs.getTemplate());
							}
							break;

						default :
							break loop304;
						}
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1755:5: -> xmlelement(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_name=$NAME_VK != nullis_evalname=$EVALNAME_VK != nullexpression=$expression.stxml_attributes_clause=$xml_attributes_clause.stvalue_expressions=$value_exprs)
					{
						retval.st = templateLib.getInstanceOf("xmlelement",new STAttrMap().put("is_entity_escaping", ENTITYESCAPING_VK338 != null).put("is_no_entity_escaping", NOENTITYESCAPING_VK339 != null).put("is_name", NAME_VK340 != null).put("is_evalname", EVALNAME_VK341 != null).put("expression", (expression342!=null?((StringTemplate)expression342.getTemplate()):null)).put("xml_attributes_clause", (xml_attributes_clause343!=null?((StringTemplate)xml_attributes_clause343.getTemplate()):null)).put("value_expressions", list_value_exprs));
					}



					}
					break;
				case 24 :
					// PLSQLPrinter.g:1759:10: ^( XMLPI_VK ( NAME_VK ( char_set_name )? id= commented_id | EVALNAME_VK expression ) ( expression )? )
					{
					match(input,XMLPI_VK,FOLLOW_XMLPI_VK_in_standard_function16940); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1760:17: ( NAME_VK ( char_set_name )? id= commented_id | EVALNAME_VK expression )
					int alt306=2;
					int LA306_0 = input.LA(1);
					if ( (LA306_0==NAME_VK) ) {
						alt306=1;
					}
					else if ( (LA306_0==EVALNAME_VK) ) {
						alt306=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 306, 0, input);
						throw nvae;
					}

					switch (alt306) {
						case 1 :
							// PLSQLPrinter.g:1760:22: NAME_VK ( char_set_name )? id= commented_id
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function16963); 
							// PLSQLPrinter.g:1760:30: ( char_set_name )?
							int alt305=2;
							int LA305_0 = input.LA(1);
							if ( (LA305_0==CHAR_SET_NAME) ) {
								alt305=1;
							}
							switch (alt305) {
								case 1 :
									// PLSQLPrinter.g:1760:30: char_set_name
									{
									pushFollow(FOLLOW_char_set_name_in_standard_function16965);
									char_set_name();
									state._fsp--;

									}
									break;

							}

							pushFollow(FOLLOW_commented_id_in_standard_function16970);
							id=commented_id();
							state._fsp--;

							}
							break;
						case 2 :
							// PLSQLPrinter.g:1761:22: EVALNAME_VK expression
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function16993); 
							pushFollow(FOLLOW_expression_in_standard_function16995);
							expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1763:17: ( expression )?
					int alt307=2;
					int LA307_0 = input.LA(1);
					if ( (LA307_0==EXPR||LA307_0==LOGIC_EXPR) ) {
						alt307=1;
					}
					switch (alt307) {
						case 1 :
							// PLSQLPrinter.g:1763:17: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function17031);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1765:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;
				case 25 :
					// PLSQLPrinter.g:1766:10: ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? )
					{
					match(input,XMLSERIALIZE_VK,FOLLOW_XMLSERIALIZE_VK_in_standard_function17068); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1767:17: ( DOCUMENT_VK | CONTENT_VK )
					int alt308=2;
					int LA308_0 = input.LA(1);
					if ( (LA308_0==DOCUMENT_VK) ) {
						alt308=1;
					}
					else if ( (LA308_0==CONTENT_VK) ) {
						alt308=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 308, 0, input);
						throw nvae;
					}

					switch (alt308) {
						case 1 :
							// PLSQLPrinter.g:1767:18: DOCUMENT_VK
							{
							match(input,DOCUMENT_VK,FOLLOW_DOCUMENT_VK_in_standard_function17087); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:1767:30: CONTENT_VK
							{
							match(input,CONTENT_VK,FOLLOW_CONTENT_VK_in_standard_function17089); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function17108);
					expression();
					state._fsp--;

					// PLSQLPrinter.g:1768:28: ( type_spec )?
					int alt309=2;
					int LA309_0 = input.LA(1);
					if ( (LA309_0==CUSTOM_TYPE||LA309_0==INTERVAL_DATATYPE||LA309_0==NATIVE_DATATYPE) ) {
						alt309=1;
					}
					switch (alt309) {
						case 1 :
							// PLSQLPrinter.g:1768:28: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_standard_function17110);
							type_spec();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1769:17: ( xmlserialize_param_enconding_part )?
					int alt310=2;
					int LA310_0 = input.LA(1);
					if ( (LA310_0==ENCODING_VK) ) {
						alt310=1;
					}
					switch (alt310) {
						case 1 :
							// PLSQLPrinter.g:1769:17: xmlserialize_param_enconding_part
							{
							pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function17129);
							xmlserialize_param_enconding_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1770:17: ( xml_param_version_part )?
					int alt311=2;
					int LA311_0 = input.LA(1);
					if ( (LA311_0==VERSION_VK) ) {
						alt311=1;
					}
					switch (alt311) {
						case 1 :
							// PLSQLPrinter.g:1770:17: xml_param_version_part
							{
							pushFollow(FOLLOW_xml_param_version_part_in_standard_function17148);
							xml_param_version_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1771:17: ( xmlserialize_param_ident_part )?
					int alt312=2;
					int LA312_0 = input.LA(1);
					if ( (LA312_0==INDENT_VK||LA312_0==NO_VK) ) {
						alt312=1;
					}
					switch (alt312) {
						case 1 :
							// PLSQLPrinter.g:1771:17: xmlserialize_param_ident_part
							{
							pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function17167);
							xmlserialize_param_ident_part();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1772:17: ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )?
					int alt314=2;
					int LA314_0 = input.LA(1);
					if ( (LA314_0==HIDE_VK||LA314_0==SHOW_VK) ) {
						alt314=1;
					}
					switch (alt314) {
						case 1 :
							// PLSQLPrinter.g:1772:18: ( HIDE_VK | SHOW_VK ) DEFAULTS_VK
							{
							// PLSQLPrinter.g:1772:18: ( HIDE_VK | SHOW_VK )
							int alt313=2;
							int LA313_0 = input.LA(1);
							if ( (LA313_0==HIDE_VK) ) {
								alt313=1;
							}
							else if ( (LA313_0==SHOW_VK) ) {
								alt313=2;
							}

							else {
								NoViableAltException nvae =
									new NoViableAltException("", 313, 0, input);
								throw nvae;
							}

							switch (alt313) {
								case 1 :
									// PLSQLPrinter.g:1772:19: HIDE_VK
									{
									match(input,HIDE_VK,FOLLOW_HIDE_VK_in_standard_function17188); 
									}
									break;
								case 2 :
									// PLSQLPrinter.g:1772:27: SHOW_VK
									{
									match(input,SHOW_VK,FOLLOW_SHOW_VK_in_standard_function17190); 
									}
									break;

							}

							match(input,DEFAULTS_VK,FOLLOW_DEFAULTS_VK_in_standard_function17193); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1774:5: -> template( \"not implemented: standard_function\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: standard_function");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "standard_function"


	public static class extract_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "extract_part"
	// PLSQLPrinter.g:1777:1: extract_part : ( YEAR_VK -> string_literal(val=\"year\")| MONTH_VK -> string_literal(val=\"month\")| DAY_VK -> string_literal(val=\"day\")| HOUR_VK -> string_literal(val=\"hour\")| MINUTE_VK -> string_literal(val=\"minute\")| SECOND_VK -> string_literal(val=\"second\")| TIMEZONE_HOUR_VK -> string_literal(val=\"timezone_hour\")| TIMEZONE_MINUTE_VK -> string_literal(val=\"timezone_minute\")| TIMEZONE_ABBR_VK -> string_literal(val=\"timezone_abbr\")| TIMEZONE_REGION_VK -> string_literal(val=\"timezone_region\"));
	public final PLSQLPrinter.extract_part_return extract_part() throws RecognitionException {
		PLSQLPrinter.extract_part_return retval = new PLSQLPrinter.extract_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1778:5: ( YEAR_VK -> string_literal(val=\"year\")| MONTH_VK -> string_literal(val=\"month\")| DAY_VK -> string_literal(val=\"day\")| HOUR_VK -> string_literal(val=\"hour\")| MINUTE_VK -> string_literal(val=\"minute\")| SECOND_VK -> string_literal(val=\"second\")| TIMEZONE_HOUR_VK -> string_literal(val=\"timezone_hour\")| TIMEZONE_MINUTE_VK -> string_literal(val=\"timezone_minute\")| TIMEZONE_ABBR_VK -> string_literal(val=\"timezone_abbr\")| TIMEZONE_REGION_VK -> string_literal(val=\"timezone_region\"))
			int alt316=10;
			switch ( input.LA(1) ) {
			case YEAR_VK:
				{
				alt316=1;
				}
				break;
			case MONTH_VK:
				{
				alt316=2;
				}
				break;
			case DAY_VK:
				{
				alt316=3;
				}
				break;
			case HOUR_VK:
				{
				alt316=4;
				}
				break;
			case MINUTE_VK:
				{
				alt316=5;
				}
				break;
			case SECOND_VK:
				{
				alt316=6;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt316=7;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt316=8;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt316=9;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt316=10;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 316, 0, input);
				throw nvae;
			}
			switch (alt316) {
				case 1 :
					// PLSQLPrinter.g:1779:9: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_extract_part17248); 
					// TEMPLATE REWRITE
					// 1779:17: -> string_literal(val=\"year\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "year"));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1780:11: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_extract_part17269); 
					// TEMPLATE REWRITE
					// 1780:20: -> string_literal(val=\"month\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "month"));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1781:11: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_extract_part17290); 
					// TEMPLATE REWRITE
					// 1781:18: -> string_literal(val=\"day\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "day"));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1782:11: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_extract_part17311); 
					// TEMPLATE REWRITE
					// 1782:19: -> string_literal(val=\"hour\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "hour"));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:1783:11: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_extract_part17332); 
					// TEMPLATE REWRITE
					// 1783:21: -> string_literal(val=\"minute\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "minute"));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:1784:11: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_extract_part17353); 
					// TEMPLATE REWRITE
					// 1784:21: -> string_literal(val=\"second\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "second"));
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:1785:11: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_extract_part17374); 
					// TEMPLATE REWRITE
					// 1785:28: -> string_literal(val=\"timezone_hour\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_hour"));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:1786:11: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_extract_part17395); 
					// TEMPLATE REWRITE
					// 1786:30: -> string_literal(val=\"timezone_minute\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_minute"));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:1787:11: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_extract_part17416); 
					// TEMPLATE REWRITE
					// 1787:28: -> string_literal(val=\"timezone_abbr\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_abbr"));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:1788:11: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_extract_part17437); 
					// TEMPLATE REWRITE
					// 1788:30: -> string_literal(val=\"timezone_region\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "timezone_region"));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "extract_part"


	public static class xmlelement_value_expr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlelement_value_expr"
	// PLSQLPrinter.g:1791:1: xmlelement_value_expr : expression ( alias )? -> xmlelement_value_expr(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.xmlelement_value_expr_return xmlelement_value_expr() throws RecognitionException {
		PLSQLPrinter.xmlelement_value_expr_return retval = new PLSQLPrinter.xmlelement_value_expr_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression344 =null;
		TreeRuleReturnScope alias345 =null;

		try {
			// PLSQLPrinter.g:1792:5: ( expression ( alias )? -> xmlelement_value_expr(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:1792:9: expression ( alias )?
			{
			pushFollow(FOLLOW_expression_in_xmlelement_value_expr17469);
			expression344=expression();
			state._fsp--;

			// PLSQLPrinter.g:1792:20: ( alias )?
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==COLUMN_ALIAS||LA317_0==TABLE_ALIAS) ) {
				alt317=1;
			}
			switch (alt317) {
				case 1 :
					// PLSQLPrinter.g:1792:20: alias
					{
					pushFollow(FOLLOW_alias_in_xmlelement_value_expr17471);
					alias345=alias();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 1793:5: -> xmlelement_value_expr(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("xmlelement_value_expr",new STAttrMap().put("expression", (expression344!=null?((StringTemplate)expression344.getTemplate()):null)).put("alias", (alias345!=null?((StringTemplate)alias345.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlelement_value_expr"


	public static class over_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "over_clause"
	// PLSQLPrinter.g:1796:1: over_clause : ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st);
	public final PLSQLPrinter.over_clause_return over_clause() throws RecognitionException {
		PLSQLPrinter.over_clause_return retval = new PLSQLPrinter.over_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope query_partition_clause346 =null;
		TreeRuleReturnScope order_by_clause347 =null;
		TreeRuleReturnScope windowing_clause348 =null;

		try {
			// PLSQLPrinter.g:1797:5: ( ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st))
			// PLSQLPrinter.g:1797:10: ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? )
			{
			match(input,OVER_VK,FOLLOW_OVER_VK_in_over_clause17512); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1797:20: ( query_partition_clause )?
				int alt318=2;
				int LA318_0 = input.LA(1);
				if ( (LA318_0==PARTITION_VK) ) {
					alt318=1;
				}
				switch (alt318) {
					case 1 :
						// PLSQLPrinter.g:1797:20: query_partition_clause
						{
						pushFollow(FOLLOW_query_partition_clause_in_over_clause17514);
						query_partition_clause346=query_partition_clause();
						state._fsp--;

						}
						break;

				}

				// PLSQLPrinter.g:1797:44: ( order_by_clause ( windowing_clause )? )?
				int alt320=2;
				int LA320_0 = input.LA(1);
				if ( (LA320_0==SQL92_RESERVED_ORDER) ) {
					alt320=1;
				}
				switch (alt320) {
					case 1 :
						// PLSQLPrinter.g:1797:45: order_by_clause ( windowing_clause )?
						{
						pushFollow(FOLLOW_order_by_clause_in_over_clause17518);
						order_by_clause347=order_by_clause();
						state._fsp--;

						// PLSQLPrinter.g:1797:61: ( windowing_clause )?
						int alt319=2;
						int LA319_0 = input.LA(1);
						if ( (LA319_0==RANGE_VK||LA319_0==ROWS_VK) ) {
							alt319=1;
						}
						switch (alt319) {
							case 1 :
								// PLSQLPrinter.g:1797:61: windowing_clause
								{
								pushFollow(FOLLOW_windowing_clause_in_over_clause17520);
								windowing_clause348=windowing_clause();
								state._fsp--;

								}
								break;

						}

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1798:5: -> over_clause(query_partition_clause=$query_partition_clause.storder_by_clause=$order_by_clause.stwindowing_clause=$windowing_clause.st)
			{
				retval.st = templateLib.getInstanceOf("over_clause",new STAttrMap().put("query_partition_clause", (query_partition_clause346!=null?((StringTemplate)query_partition_clause346.getTemplate()):null)).put("order_by_clause", (order_by_clause347!=null?((StringTemplate)order_by_clause347.getTemplate()):null)).put("windowing_clause", (windowing_clause348!=null?((StringTemplate)windowing_clause348.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "over_clause"


	public static class windowing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_clause"
	// PLSQLPrinter.g:1803:1: windowing_clause : ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) ) -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st);
	public final PLSQLPrinter.windowing_clause_return windowing_clause() throws RecognitionException {
		PLSQLPrinter.windowing_clause_return retval = new PLSQLPrinter.windowing_clause_return();
		retval.start = input.LT(1);

		CommonTree ROWS_VK349=null;
		CommonTree RANGE_VK350=null;
		CommonTree SQL92_RESERVED_BETWEEN351=null;
		TreeRuleReturnScope e1 =null;
		TreeRuleReturnScope e2 =null;

		try {
			// PLSQLPrinter.g:1804:5: ( ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) ) -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st))
			// PLSQLPrinter.g:1804:10: ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements ) )
			{
			// PLSQLPrinter.g:1804:12: ( ROWS_VK | RANGE_VK )
			int alt321=2;
			int LA321_0 = input.LA(1);
			if ( (LA321_0==ROWS_VK) ) {
				alt321=1;
			}
			else if ( (LA321_0==RANGE_VK) ) {
				alt321=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 321, 0, input);
				throw nvae;
			}

			switch (alt321) {
				case 1 :
					// PLSQLPrinter.g:1804:13: ROWS_VK
					{
					ROWS_VK349=(CommonTree)match(input,ROWS_VK,FOLLOW_ROWS_VK_in_windowing_clause17592); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1804:21: RANGE_VK
					{
					RANGE_VK350=(CommonTree)match(input,RANGE_VK,FOLLOW_RANGE_VK_in_windowing_clause17594); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1805:13: ( ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements ) |e1= windowing_elements )
			int alt322=2;
			int LA322_0 = input.LA(1);
			if ( (LA322_0==SQL92_RESERVED_BETWEEN) ) {
				alt322=1;
			}
			else if ( (LA322_0==CURRENT_VK||LA322_0==FOLLOWING_VK||LA322_0==PRECEDING_VK||LA322_0==UNBOUNDED_VK) ) {
				alt322=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 322, 0, input);
				throw nvae;
			}

			switch (alt322) {
				case 1 :
					// PLSQLPrinter.g:1805:18: ^( SQL92_RESERVED_BETWEEN e1= windowing_elements e2= windowing_elements )
					{
					SQL92_RESERVED_BETWEEN351=(CommonTree)match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause17615); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause17619);
					e1=windowing_elements();
					state._fsp--;

					pushFollow(FOLLOW_windowing_elements_in_windowing_clause17623);
					e2=windowing_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1806:18: e1= windowing_elements
					{
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause17645);
					e1=windowing_elements();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1809:5: -> windowing_clause(is_rows=$ROWS_VK != nullis_range=$RANGE_VK != nullis_between=$SQL92_RESERVED_BETWEEN != nullwindowing_element_1=$e1.stwindowing_element_2=$e2.st)
			{
				retval.st = templateLib.getInstanceOf("windowing_clause",new STAttrMap().put("is_rows", ROWS_VK349 != null).put("is_range", RANGE_VK350 != null).put("is_between", SQL92_RESERVED_BETWEEN351 != null).put("windowing_element_1", (e1!=null?((StringTemplate)e1.getTemplate()):null)).put("windowing_element_2", (e2!=null?((StringTemplate)e2.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_clause"


	public static class windowing_elements_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "windowing_elements"
	// PLSQLPrinter.g:1814:1: windowing_elements : ( ^( UNBOUNDED_VK PRECEDING_VK ) -> windowing_elements_unbounded_preceding(| ^( CURRENT_VK ROW_VK ) -> windowing_elements_current_row(| ^( PRECEDING_VK expr= expression ) -> windowing_elements_rows_preceding(expression=$expr.st)| ^( FOLLOWING_VK expr= expression ) -> windowing_elements_rows_following(expression=$expr.st));
	public final PLSQLPrinter.windowing_elements_return windowing_elements() throws RecognitionException {
		PLSQLPrinter.windowing_elements_return retval = new PLSQLPrinter.windowing_elements_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expr =null;

		try {
			// PLSQLPrinter.g:1815:5: ( ^( UNBOUNDED_VK PRECEDING_VK ) -> windowing_elements_unbounded_preceding(| ^( CURRENT_VK ROW_VK ) -> windowing_elements_current_row(| ^( PRECEDING_VK expr= expression ) -> windowing_elements_rows_preceding(expression=$expr.st)| ^( FOLLOWING_VK expr= expression ) -> windowing_elements_rows_following(expression=$expr.st))
			int alt323=4;
			switch ( input.LA(1) ) {
			case UNBOUNDED_VK:
				{
				alt323=1;
				}
				break;
			case CURRENT_VK:
				{
				alt323=2;
				}
				break;
			case PRECEDING_VK:
				{
				alt323=3;
				}
				break;
			case FOLLOWING_VK:
				{
				alt323=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 323, 0, input);
				throw nvae;
			}
			switch (alt323) {
				case 1 :
					// PLSQLPrinter.g:1815:10: ^( UNBOUNDED_VK PRECEDING_VK )
					{
					match(input,UNBOUNDED_VK,FOLLOW_UNBOUNDED_VK_in_windowing_elements17746); 
					match(input, Token.DOWN, null); 
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements17748); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1815:39: -> windowing_elements_unbounded_preceding(
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_unbounded_preceding");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1816:10: ^( CURRENT_VK ROW_VK )
					{
					match(input,CURRENT_VK,FOLLOW_CURRENT_VK_in_windowing_elements17767); 
					match(input, Token.DOWN, null); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_windowing_elements17769); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1816:31: -> windowing_elements_current_row(
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_current_row");
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:1817:10: ^( PRECEDING_VK expr= expression )
					{
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements17788); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements17792);
					expr=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1817:42: -> windowing_elements_rows_preceding(expression=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_rows_preceding",new STAttrMap().put("expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:1818:10: ^( FOLLOWING_VK expr= expression )
					{
					match(input,FOLLOWING_VK,FOLLOW_FOLLOWING_VK_in_windowing_elements17814); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements17818);
					expr=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1818:42: -> windowing_elements_rows_following(expression=$expr.st)
					{
						retval.st = templateLib.getInstanceOf("windowing_elements_rows_following",new STAttrMap().put("expression", (expr!=null?((StringTemplate)expr.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "windowing_elements"


	public static class using_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_clause"
	// PLSQLPrinter.g:1821:1: using_clause : ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ ) -> using_clause(using_elements=$using_elements);
	public final PLSQLPrinter.using_clause_return using_clause() throws RecognitionException {
		PLSQLPrinter.using_clause_return retval = new PLSQLPrinter.using_clause_return();
		retval.start = input.LT(1);

		List<Object> list_using_elements=null;
		RuleReturnScope using_elements = null;
		try {
			// PLSQLPrinter.g:1822:5: ( ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ ) -> using_clause(using_elements=$using_elements))
			// PLSQLPrinter.g:1822:10: ^( PLSQL_NON_RESERVED_USING (using_elements+= using_element )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause17849); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1822:51: (using_elements+= using_element )+
			int cnt324=0;
			loop324:
			while (true) {
				int alt324=2;
				int LA324_0 = input.LA(1);
				if ( (LA324_0==ASTERISK||LA324_0==ELEMENT) ) {
					alt324=1;
				}

				switch (alt324) {
				case 1 :
					// PLSQLPrinter.g:1822:51: using_elements+= using_element
					{
					pushFollow(FOLLOW_using_element_in_using_clause17853);
					using_elements=using_element();
					state._fsp--;

					if (list_using_elements==null) list_using_elements=new ArrayList<Object>();
					list_using_elements.add(using_elements.getTemplate());
					}
					break;

				default :
					if ( cnt324 >= 1 ) break loop324;
					EarlyExitException eee = new EarlyExitException(324, input);
					throw eee;
				}
				cnt324++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1823:5: -> using_clause(using_elements=$using_elements)
			{
				retval.st = templateLib.getInstanceOf("using_clause",new STAttrMap().put("using_elements", list_using_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_clause"


	public static class using_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "using_element"
	// PLSQLPrinter.g:1826:1: using_element : ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)| ASTERISK -> using_element_asterisk();
	public final PLSQLPrinter.using_element_return using_element() throws RecognitionException {
		PLSQLPrinter.using_element_return retval = new PLSQLPrinter.using_element_return();
		retval.start = input.LT(1);

		CommonTree SQL92_RESERVED_IN352=null;
		CommonTree OUT_VK353=null;
		TreeRuleReturnScope expression354 =null;
		TreeRuleReturnScope alias355 =null;

		try {
			// PLSQLPrinter.g:1827:5: ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)| ASTERISK -> using_element_asterisk()
			int alt328=2;
			int LA328_0 = input.LA(1);
			if ( (LA328_0==ELEMENT) ) {
				alt328=1;
			}
			else if ( (LA328_0==ASTERISK) ) {
				alt328=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 328, 0, input);
				throw nvae;
			}

			switch (alt328) {
				case 1 :
					// PLSQLPrinter.g:1827:10: ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? )
					{
					match(input,ELEMENT,FOLLOW_ELEMENT_in_using_element17891); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1827:20: ( SQL92_RESERVED_IN )?
					int alt325=2;
					int LA325_0 = input.LA(1);
					if ( (LA325_0==SQL92_RESERVED_IN) ) {
						alt325=1;
					}
					switch (alt325) {
						case 1 :
							// PLSQLPrinter.g:1827:20: SQL92_RESERVED_IN
							{
							SQL92_RESERVED_IN352=(CommonTree)match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_using_element17893); 
							}
							break;

					}

					// PLSQLPrinter.g:1827:39: ( OUT_VK )?
					int alt326=2;
					int LA326_0 = input.LA(1);
					if ( (LA326_0==OUT_VK) ) {
						alt326=1;
					}
					switch (alt326) {
						case 1 :
							// PLSQLPrinter.g:1827:39: OUT_VK
							{
							OUT_VK353=(CommonTree)match(input,OUT_VK,FOLLOW_OUT_VK_in_using_element17896); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_using_element17899);
					expression354=expression();
					state._fsp--;

					// PLSQLPrinter.g:1827:58: ( alias )?
					int alt327=2;
					int LA327_0 = input.LA(1);
					if ( (LA327_0==COLUMN_ALIAS||LA327_0==TABLE_ALIAS) ) {
						alt327=1;
					}
					switch (alt327) {
						case 1 :
							// PLSQLPrinter.g:1827:58: alias
							{
							pushFollow(FOLLOW_alias_in_using_element17901);
							alias355=alias();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1828:5: -> using_element_element(is_in=$SQL92_RESERVED_IN != nullis_out=$OUT_VK != nullexpression=$expression.stalias=$alias.st)
					{
						retval.st = templateLib.getInstanceOf("using_element_element",new STAttrMap().put("is_in", SQL92_RESERVED_IN352 != null).put("is_out", OUT_VK353 != null).put("expression", (expression354!=null?((StringTemplate)expression354.getTemplate()):null)).put("alias", (alias355!=null?((StringTemplate)alias355.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1831:10: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_using_element17965); 
					// TEMPLATE REWRITE
					// 1832:5: -> using_element_asterisk(
					{
						retval.st = templateLib.getInstanceOf("using_element_asterisk");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_element"


	public static class collect_order_by_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collect_order_by_part"
	// PLSQLPrinter.g:1835:1: collect_order_by_part : ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\";
	public final PLSQLPrinter.collect_order_by_part_return collect_order_by_part() throws RecognitionException {
		PLSQLPrinter.collect_order_by_part_return retval = new PLSQLPrinter.collect_order_by_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1836:5: ( ^( SQL92_RESERVED_ORDER expression ) -> template( \"not implemented: collect_order_by_part\")
			// PLSQLPrinter.g:1836:10: ^( SQL92_RESERVED_ORDER expression )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part17998); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_collect_order_by_part18000);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1837:5: -> template( \"not implemented: collect_order_by_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: collect_order_by_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collect_order_by_part"


	public static class within_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "within_clause"
	// PLSQLPrinter.g:1840:1: within_clause : ^( WITHIN_VK order_by_clause ) -> within_clause(order_by_clause=$order_by_clause.st);
	public final PLSQLPrinter.within_clause_return within_clause() throws RecognitionException {
		PLSQLPrinter.within_clause_return retval = new PLSQLPrinter.within_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope order_by_clause356 =null;

		try {
			// PLSQLPrinter.g:1841:5: ( ^( WITHIN_VK order_by_clause ) -> within_clause(order_by_clause=$order_by_clause.st))
			// PLSQLPrinter.g:1841:10: ^( WITHIN_VK order_by_clause )
			{
			match(input,WITHIN_VK,FOLLOW_WITHIN_VK_in_within_clause18036); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_order_by_clause_in_within_clause18038);
			order_by_clause356=order_by_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1842:5: -> within_clause(order_by_clause=$order_by_clause.st)
			{
				retval.st = templateLib.getInstanceOf("within_clause",new STAttrMap().put("order_by_clause", (order_by_clause356!=null?((StringTemplate)order_by_clause356.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "within_clause"


	public static class cost_matrix_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_matrix_clause"
	// PLSQLPrinter.g:1845:1: cost_matrix_clause : ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\";
	public final PLSQLPrinter.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException {
		PLSQLPrinter.cost_matrix_clause_return retval = new PLSQLPrinter.cost_matrix_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1846:5: ( ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) -> template( \"not implemented: cost_matrix_clause\")
			// PLSQLPrinter.g:1846:10: ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) )
			{
			match(input,COST_VK,FOLLOW_COST_VK_in_cost_matrix_clause18075); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1847:13: ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list )
			int alt331=2;
			int LA331_0 = input.LA(1);
			if ( (LA331_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt331=1;
			}
			else if ( (LA331_0==COST_CLASS_NAME) ) {
				alt331=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 331, 0, input);
				throw nvae;
			}

			switch (alt331) {
				case 1 :
					// PLSQLPrinter.g:1847:18: PLSQL_NON_RESERVED_MODEL ( AUTO_VK )?
					{
					match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause18094); 
					// PLSQLPrinter.g:1847:43: ( AUTO_VK )?
					int alt329=2;
					int LA329_0 = input.LA(1);
					if ( (LA329_0==AUTO_VK) ) {
						alt329=1;
					}
					switch (alt329) {
						case 1 :
							// PLSQLPrinter.g:1847:43: AUTO_VK
							{
							match(input,AUTO_VK,FOLLOW_AUTO_VK_in_cost_matrix_clause18096); 
							}
							break;

					}

					}
					break;
				case 2 :
					// PLSQLPrinter.g:1848:18: ( cost_class_name )+ expression_list
					{
					// PLSQLPrinter.g:1848:18: ( cost_class_name )+
					int cnt330=0;
					loop330:
					while (true) {
						int alt330=2;
						int LA330_0 = input.LA(1);
						if ( (LA330_0==COST_CLASS_NAME) ) {
							alt330=1;
						}

						switch (alt330) {
						case 1 :
							// PLSQLPrinter.g:1848:18: cost_class_name
							{
							pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause18116);
							cost_class_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt330 >= 1 ) break loop330;
							EarlyExitException eee = new EarlyExitException(330, input);
							throw eee;
						}
						cnt330++;
					}

					pushFollow(FOLLOW_expression_list_in_cost_matrix_clause18119);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1851:5: -> template( \"not implemented: cost_matrix_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: cost_matrix_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_matrix_clause"


	public static class xml_passing_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause"
	// PLSQLPrinter.g:1854:1: xml_passing_clause : ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr ) -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs);
	public final PLSQLPrinter.xml_passing_clause_return xml_passing_clause() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_return retval = new PLSQLPrinter.xml_passing_clause_return();
		retval.start = input.LT(1);

		CommonTree VALUE_VK357=null;
		List<Object> list_exprs=null;
		RuleReturnScope exprs = null;
		try {
			// PLSQLPrinter.g:1855:5: ( ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr ) -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs))
			// PLSQLPrinter.g:1855:10: ^( PASSING_VK ( VALUE_VK )? exprs+= xml_passing_clause_expr )
			{
			match(input,PASSING_VK,FOLLOW_PASSING_VK_in_xml_passing_clause18178); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1855:23: ( VALUE_VK )?
			int alt332=2;
			int LA332_0 = input.LA(1);
			if ( (LA332_0==VALUE_VK) ) {
				alt332=1;
			}
			switch (alt332) {
				case 1 :
					// PLSQLPrinter.g:1855:23: VALUE_VK
					{
					VALUE_VK357=(CommonTree)match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_passing_clause18180); 
					}
					break;

			}

			pushFollow(FOLLOW_xml_passing_clause_expr_in_xml_passing_clause18185);
			exprs=xml_passing_clause_expr();
			state._fsp--;

			if (list_exprs==null) list_exprs=new ArrayList<Object>();
			list_exprs.add(exprs.getTemplate());
			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1856:5: -> xml_passing_clause(is_by_value=$VALUE_VK != nullxml_passing_clause_expressions=$exprs)
			{
				retval.st = templateLib.getInstanceOf("xml_passing_clause",new STAttrMap().put("is_by_value", VALUE_VK357 != null).put("xml_passing_clause_expressions", list_exprs));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause"


	public static class xml_passing_clause_expr_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_passing_clause_expr"
	// PLSQLPrinter.g:1859:1: xml_passing_clause_expr : expression ( alias )? -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st);
	public final PLSQLPrinter.xml_passing_clause_expr_return xml_passing_clause_expr() throws RecognitionException {
		PLSQLPrinter.xml_passing_clause_expr_return retval = new PLSQLPrinter.xml_passing_clause_expr_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression358 =null;
		TreeRuleReturnScope alias359 =null;

		try {
			// PLSQLPrinter.g:1860:5: ( expression ( alias )? -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st))
			// PLSQLPrinter.g:1860:9: expression ( alias )?
			{
			pushFollow(FOLLOW_expression_in_xml_passing_clause_expr18229);
			expression358=expression();
			state._fsp--;

			// PLSQLPrinter.g:1860:20: ( alias )?
			int alt333=2;
			int LA333_0 = input.LA(1);
			if ( (LA333_0==COLUMN_ALIAS||LA333_0==TABLE_ALIAS) ) {
				alt333=1;
			}
			switch (alt333) {
				case 1 :
					// PLSQLPrinter.g:1860:20: alias
					{
					pushFollow(FOLLOW_alias_in_xml_passing_clause_expr18231);
					alias359=alias();
					state._fsp--;

					}
					break;

			}

			// TEMPLATE REWRITE
			// 1861:5: -> xml_passing_clause_expr(expression=$expression.stalias=$alias.st)
			{
				retval.st = templateLib.getInstanceOf("xml_passing_clause_expr",new STAttrMap().put("expression", (expression358!=null?((StringTemplate)expression358.getTemplate()):null)).put("alias", (alias359!=null?((StringTemplate)alias359.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_passing_clause_expr"


	public static class xml_attributes_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_attributes_clause"
	// PLSQLPrinter.g:1864:1: xml_attributes_clause : ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ ) -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements);
	public final PLSQLPrinter.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException {
		PLSQLPrinter.xml_attributes_clause_return retval = new PLSQLPrinter.xml_attributes_clause_return();
		retval.start = input.LT(1);

		CommonTree ENTITYESCAPING_VK360=null;
		CommonTree NOENTITYESCAPING_VK361=null;
		CommonTree SCHEMACHECK_VK362=null;
		CommonTree NOSCHEMACHECK_VK363=null;
		List<Object> list_xml_multiuse_expression_elements=null;
		RuleReturnScope xml_multiuse_expression_elements = null;
		try {
			// PLSQLPrinter.g:1865:5: ( ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ ) -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements))
			// PLSQLPrinter.g:1865:10: ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+ )
			{
			match(input,XMLATTRIBUTES_VK,FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause18272); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1866:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
			int alt334=3;
			int LA334_0 = input.LA(1);
			if ( (LA334_0==ENTITYESCAPING_VK) ) {
				alt334=1;
			}
			else if ( (LA334_0==NOENTITYESCAPING_VK) ) {
				alt334=2;
			}
			switch (alt334) {
				case 1 :
					// PLSQLPrinter.g:1866:14: ENTITYESCAPING_VK
					{
					ENTITYESCAPING_VK360=(CommonTree)match(input,ENTITYESCAPING_VK,FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause18287); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1866:32: NOENTITYESCAPING_VK
					{
					NOENTITYESCAPING_VK361=(CommonTree)match(input,NOENTITYESCAPING_VK,FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause18289); 
					}
					break;

			}

			// PLSQLPrinter.g:1867:13: ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )?
			int alt335=3;
			int LA335_0 = input.LA(1);
			if ( (LA335_0==SCHEMACHECK_VK) ) {
				alt335=1;
			}
			else if ( (LA335_0==NOSCHEMACHECK_VK) ) {
				alt335=2;
			}
			switch (alt335) {
				case 1 :
					// PLSQLPrinter.g:1867:14: SCHEMACHECK_VK
					{
					SCHEMACHECK_VK362=(CommonTree)match(input,SCHEMACHECK_VK,FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause18306); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1867:29: NOSCHEMACHECK_VK
					{
					NOSCHEMACHECK_VK363=(CommonTree)match(input,NOSCHEMACHECK_VK,FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause18308); 
					}
					break;

			}

			// PLSQLPrinter.g:1868:45: (xml_multiuse_expression_elements+= xml_multiuse_expression_element )+
			int cnt336=0;
			loop336:
			while (true) {
				int alt336=2;
				int LA336_0 = input.LA(1);
				if ( (LA336_0==XML_ELEMENT) ) {
					alt336=1;
				}

				switch (alt336) {
				case 1 :
					// PLSQLPrinter.g:1868:45: xml_multiuse_expression_elements+= xml_multiuse_expression_element
					{
					pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause18326);
					xml_multiuse_expression_elements=xml_multiuse_expression_element();
					state._fsp--;

					if (list_xml_multiuse_expression_elements==null) list_xml_multiuse_expression_elements=new ArrayList<Object>();
					list_xml_multiuse_expression_elements.add(xml_multiuse_expression_elements.getTemplate());
					}
					break;

				default :
					if ( cnt336 >= 1 ) break loop336;
					EarlyExitException eee = new EarlyExitException(336, input);
					throw eee;
				}
				cnt336++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1870:5: -> xml_attributes_clause(is_entity_escaping=$ENTITYESCAPING_VK != nullis_no_entity_escaping=$NOENTITYESCAPING_VK != nullis_schema_check=$SCHEMACHECK_VK != nullis_no_schema_check=$NOSCHEMACHECK_VK != nullxml_multiuse_expression_elements=$xml_multiuse_expression_elements)
			{
				retval.st = templateLib.getInstanceOf("xml_attributes_clause",new STAttrMap().put("is_entity_escaping", ENTITYESCAPING_VK360 != null).put("is_no_entity_escaping", NOENTITYESCAPING_VK361 != null).put("is_schema_check", SCHEMACHECK_VK362 != null).put("is_no_schema_check", NOSCHEMACHECK_VK363 != null).put("xml_multiuse_expression_elements", list_xml_multiuse_expression_elements));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_attributes_clause"


	public static class xml_namespaces_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_namespaces_clause"
	// PLSQLPrinter.g:1876:1: xml_namespaces_clause : ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\";
	public final PLSQLPrinter.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException {
		PLSQLPrinter.xml_namespaces_clause_return retval = new PLSQLPrinter.xml_namespaces_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1877:5: ( ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) -> template( \"not implemented: xml_namespaces_clause\")
			// PLSQLPrinter.g:1877:10: ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? )
			{
			match(input,XMLNAMESPACES_VK,FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause18424); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:1878:13: ( expression ( alias )? )*
				loop338:
				while (true) {
					int alt338=2;
					int LA338_0 = input.LA(1);
					if ( (LA338_0==EXPR||LA338_0==LOGIC_EXPR) ) {
						alt338=1;
					}

					switch (alt338) {
					case 1 :
						// PLSQLPrinter.g:1878:14: expression ( alias )?
						{
						pushFollow(FOLLOW_expression_in_xml_namespaces_clause18439);
						expression();
						state._fsp--;

						// PLSQLPrinter.g:1878:25: ( alias )?
						int alt337=2;
						int LA337_0 = input.LA(1);
						if ( (LA337_0==COLUMN_ALIAS||LA337_0==TABLE_ALIAS) ) {
							alt337=1;
						}
						switch (alt337) {
							case 1 :
								// PLSQLPrinter.g:1878:25: alias
								{
								pushFollow(FOLLOW_alias_in_xml_namespaces_clause18441);
								alias();
								state._fsp--;

								}
								break;

						}

						}
						break;

					default :
						break loop338;
					}
				}

				// PLSQLPrinter.g:1878:34: ( xml_general_default_part )?
				int alt339=2;
				int LA339_0 = input.LA(1);
				if ( (LA339_0==SQL92_RESERVED_DEFAULT) ) {
					alt339=1;
				}
				switch (alt339) {
					case 1 :
						// PLSQLPrinter.g:1878:34: xml_general_default_part
						{
						pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause18446);
						xml_general_default_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 1880:5: -> template( \"not implemented: xml_namespaces_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xml_namespaces_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_namespaces_clause"


	public static class xml_table_column_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_table_column"
	// PLSQLPrinter.g:1883:1: xml_table_column : ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) ) ;
	public final PLSQLPrinter.xml_table_column_return xml_table_column() throws RecognitionException {
		PLSQLPrinter.xml_table_column_return retval = new PLSQLPrinter.xml_table_column_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope xml_column_name364 =null;
		TreeRuleReturnScope type_spec365 =null;
		TreeRuleReturnScope expression366 =null;
		TreeRuleReturnScope xml_general_default_part367 =null;

		try {
			// PLSQLPrinter.g:1884:5: ( ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) ) )
			// PLSQLPrinter.g:1884:10: ^( XML_COLUMN xml_column_name ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)) )
			{
			match(input,XML_COLUMN,FOLLOW_XML_COLUMN_in_xml_table_column18492); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_xml_column_name_in_xml_table_column18494);
			xml_column_name364=xml_column_name();
			state._fsp--;

			// PLSQLPrinter.g:1885:13: ( ORDINALITY_VK -> xml_table_column_ordinality(name=$xml_column_name.st)| type_spec ( expression )? ( xml_general_default_part )? -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st))
			int alt342=2;
			int LA342_0 = input.LA(1);
			if ( (LA342_0==ORDINALITY_VK) ) {
				alt342=1;
			}
			else if ( (LA342_0==CUSTOM_TYPE||LA342_0==INTERVAL_DATATYPE||LA342_0==NATIVE_DATATYPE) ) {
				alt342=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 342, 0, input);
				throw nvae;
			}

			switch (alt342) {
				case 1 :
					// PLSQLPrinter.g:1886:15: ORDINALITY_VK
					{
					match(input,ORDINALITY_VK,FOLLOW_ORDINALITY_VK_in_xml_table_column18524); 
					// TEMPLATE REWRITE
					// 1886:29: -> xml_table_column_ordinality(name=$xml_column_name.st)
					{
						retval.st = templateLib.getInstanceOf("xml_table_column_ordinality",new STAttrMap().put("name", (xml_column_name364!=null?((StringTemplate)xml_column_name364.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1887:17: type_spec ( expression )? ( xml_general_default_part )?
					{
					pushFollow(FOLLOW_type_spec_in_xml_table_column18551);
					type_spec365=type_spec();
					state._fsp--;

					// PLSQLPrinter.g:1887:27: ( expression )?
					int alt340=2;
					int LA340_0 = input.LA(1);
					if ( (LA340_0==EXPR||LA340_0==LOGIC_EXPR) ) {
						alt340=1;
					}
					switch (alt340) {
						case 1 :
							// PLSQLPrinter.g:1887:27: expression
							{
							pushFollow(FOLLOW_expression_in_xml_table_column18553);
							expression366=expression();
							state._fsp--;

							}
							break;

					}

					// PLSQLPrinter.g:1887:39: ( xml_general_default_part )?
					int alt341=2;
					int LA341_0 = input.LA(1);
					if ( (LA341_0==SQL92_RESERVED_DEFAULT) ) {
						alt341=1;
					}
					switch (alt341) {
						case 1 :
							// PLSQLPrinter.g:1887:39: xml_general_default_part
							{
							pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column18556);
							xml_general_default_part367=xml_general_default_part();
							state._fsp--;

							}
							break;

					}

					// TEMPLATE REWRITE
					// 1888:15: -> xml_table_column_typespec(name=$xml_column_name.sttype_spec=$type_spec.stpath_expr=$expression.stxml_general_default_part=$xml_general_default_part.st)
					{
						retval.st = templateLib.getInstanceOf("xml_table_column_typespec",new STAttrMap().put("name", (xml_column_name364!=null?((StringTemplate)xml_column_name364.getTemplate()):null)).put("type_spec", (type_spec365!=null?((StringTemplate)type_spec365.getTemplate()):null)).put("path_expr", (expression366!=null?((StringTemplate)expression366.getTemplate()):null)).put("xml_general_default_part", (xml_general_default_part367!=null?((StringTemplate)xml_general_default_part367.getTemplate()):null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_table_column"


	public static class xml_general_default_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_general_default_part"
	// PLSQLPrinter.g:1895:1: xml_general_default_part : ^( SQL92_RESERVED_DEFAULT expression ) -> xml_general_default_part(expression=$expression.st);
	public final PLSQLPrinter.xml_general_default_part_return xml_general_default_part() throws RecognitionException {
		PLSQLPrinter.xml_general_default_part_return retval = new PLSQLPrinter.xml_general_default_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression368 =null;

		try {
			// PLSQLPrinter.g:1896:5: ( ^( SQL92_RESERVED_DEFAULT expression ) -> xml_general_default_part(expression=$expression.st))
			// PLSQLPrinter.g:1896:10: ^( SQL92_RESERVED_DEFAULT expression )
			{
			match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part18679); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_general_default_part18681);
			expression368=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1897:5: -> xml_general_default_part(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("xml_general_default_part",new STAttrMap().put("expression", (expression368!=null?((StringTemplate)expression368.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_general_default_part"


	public static class xml_multiuse_expression_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_multiuse_expression_element"
	// PLSQLPrinter.g:1900:1: xml_multiuse_expression_element : ^( XML_ELEMENT expression ( xml_alias )? ) -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st);
	public final PLSQLPrinter.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException {
		PLSQLPrinter.xml_multiuse_expression_element_return retval = new PLSQLPrinter.xml_multiuse_expression_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression369 =null;
		TreeRuleReturnScope xml_alias370 =null;

		try {
			// PLSQLPrinter.g:1901:5: ( ^( XML_ELEMENT expression ( xml_alias )? ) -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st))
			// PLSQLPrinter.g:1901:10: ^( XML_ELEMENT expression ( xml_alias )? )
			{
			match(input,XML_ELEMENT,FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element18718); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element18720);
			expression369=expression();
			state._fsp--;

			// PLSQLPrinter.g:1901:35: ( xml_alias )?
			int alt343=2;
			int LA343_0 = input.LA(1);
			if ( (LA343_0==XML_ALIAS) ) {
				alt343=1;
			}
			switch (alt343) {
				case 1 :
					// PLSQLPrinter.g:1901:35: xml_alias
					{
					pushFollow(FOLLOW_xml_alias_in_xml_multiuse_expression_element18722);
					xml_alias370=xml_alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1902:5: -> xml_multiuse_expression_element(expression=$expression.stxml_alias=$xml_alias.st)
			{
				retval.st = templateLib.getInstanceOf("xml_multiuse_expression_element",new STAttrMap().put("expression", (expression369!=null?((StringTemplate)expression369.getTemplate()):null)).put("xml_alias", (xml_alias370!=null?((StringTemplate)xml_alias370.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_multiuse_expression_element"


	public static class xml_alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_alias"
	// PLSQLPrinter.g:1905:1: xml_alias : ( ^( XML_ALIAS id= commented_id ) -> xml_alias_id(id=$id.st)| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> xml_alias_evalname(expression=$expression.st));
	public final PLSQLPrinter.xml_alias_return xml_alias() throws RecognitionException {
		PLSQLPrinter.xml_alias_return retval = new PLSQLPrinter.xml_alias_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;
		TreeRuleReturnScope expression371 =null;

		try {
			// PLSQLPrinter.g:1906:5: ( ^( XML_ALIAS id= commented_id ) -> xml_alias_id(id=$id.st)| ^( XML_ALIAS ^( EVALNAME_VK expression ) ) -> xml_alias_evalname(expression=$expression.st))
			int alt344=2;
			int LA344_0 = input.LA(1);
			if ( (LA344_0==XML_ALIAS) ) {
				int LA344_1 = input.LA(2);
				if ( (LA344_1==DOWN) ) {
					int LA344_2 = input.LA(3);
					if ( (LA344_2==EVALNAME_VK) ) {
						alt344=2;
					}
					else if ( (LA344_2==ID) ) {
						alt344=1;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 344, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 344, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 344, 0, input);
				throw nvae;
			}

			switch (alt344) {
				case 1 :
					// PLSQLPrinter.g:1906:10: ^( XML_ALIAS id= commented_id )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias18765); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_commented_id_in_xml_alias18769);
					id=commented_id();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1906:39: -> xml_alias_id(id=$id.st)
					{
						retval.st = templateLib.getInstanceOf("xml_alias_id",new STAttrMap().put("id", (id!=null?((StringTemplate)id.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1907:10: ^( XML_ALIAS ^( EVALNAME_VK expression ) )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias18791); 
					match(input, Token.DOWN, null); 
					match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_xml_alias18794); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_xml_alias18796);
					expression371=expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1908:5: -> xml_alias_evalname(expression=$expression.st)
					{
						retval.st = templateLib.getInstanceOf("xml_alias_evalname",new STAttrMap().put("expression", (expression371!=null?((StringTemplate)expression371.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_alias"


	public static class xml_param_version_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_param_version_part"
	// PLSQLPrinter.g:1911:1: xml_param_version_part : ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) ) ;
	public final PLSQLPrinter.xml_param_version_part_return xml_param_version_part() throws RecognitionException {
		PLSQLPrinter.xml_param_version_part_return retval = new PLSQLPrinter.xml_param_version_part_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression372 =null;

		try {
			// PLSQLPrinter.g:1912:5: ( ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) ) )
			// PLSQLPrinter.g:1912:10: ^( VERSION_VK ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st}) )
			{
			match(input,VERSION_VK,FOLLOW_VERSION_VK_in_xml_param_version_part18834); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1913:13: ( NO_VK VALUE_VK -> xml_param_version_part_novalue(| expression -> {$expression.st})
			int alt345=2;
			int LA345_0 = input.LA(1);
			if ( (LA345_0==NO_VK) ) {
				alt345=1;
			}
			else if ( (LA345_0==EXPR||LA345_0==LOGIC_EXPR) ) {
				alt345=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 345, 0, input);
				throw nvae;
			}

			switch (alt345) {
				case 1 :
					// PLSQLPrinter.g:1914:15: NO_VK VALUE_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xml_param_version_part18864); 
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_param_version_part18866); 
					// TEMPLATE REWRITE
					// 1914:30: -> xml_param_version_part_novalue(
					{
						retval.st = templateLib.getInstanceOf("xml_param_version_part_novalue");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1915:17: expression
					{
					pushFollow(FOLLOW_expression_in_xml_param_version_part18890);
					expression372=expression();
					state._fsp--;

					// TEMPLATE REWRITE
					// 1915:28: -> {$expression.st}
					{
						retval.st = (expression372!=null?((StringTemplate)expression372.getTemplate()):null);
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_param_version_part"


	public static class xmlroot_param_standalone_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlroot_param_standalone_part"
	// PLSQLPrinter.g:1920:1: xmlroot_param_standalone_part : ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) ) ;
	public final PLSQLPrinter.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException {
		PLSQLPrinter.xmlroot_param_standalone_part_return retval = new PLSQLPrinter.xmlroot_param_standalone_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1921:5: ( ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) ) )
			// PLSQLPrinter.g:1921:10: ^( STANDALONE_VK ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() ) )
			{
			match(input,STANDALONE_VK,FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part18941); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1922:13: ( YES_VK -> xmlroot_param_standalone_part_yes(| NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no() )
			int alt347=2;
			int LA347_0 = input.LA(1);
			if ( (LA347_0==YES_VK) ) {
				alt347=1;
			}
			else if ( (LA347_0==NO_VK) ) {
				alt347=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 347, 0, input);
				throw nvae;
			}

			switch (alt347) {
				case 1 :
					// PLSQLPrinter.g:1923:15: YES_VK
					{
					match(input,YES_VK,FOLLOW_YES_VK_in_xmlroot_param_standalone_part18971); 
					// TEMPLATE REWRITE
					// 1923:22: -> xmlroot_param_standalone_part_yes(
					{
						retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_yes");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1924:17: NO_VK ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no()
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlroot_param_standalone_part18995); 
					// PLSQLPrinter.g:1925:17: ( VALUE_VK -> xmlroot_param_standalone_part_no_value(| -> xmlroot_param_standalone_part_no()
					int alt346=2;
					int LA346_0 = input.LA(1);
					if ( (LA346_0==VALUE_VK) ) {
						alt346=1;
					}
					else if ( (LA346_0==UP) ) {
						alt346=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 346, 0, input);
						throw nvae;
					}

					switch (alt346) {
						case 1 :
							// PLSQLPrinter.g:1926:19: VALUE_VK
							{
							match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part19033); 
							// TEMPLATE REWRITE
							// 1926:28: -> xmlroot_param_standalone_part_no_value(
							{
								retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_no_value");
							}



							}
							break;
						case 2 :
							// PLSQLPrinter.g:1927:22: 
							{
							// TEMPLATE REWRITE
							// 1927:22: -> xmlroot_param_standalone_part_no(
							{
								retval.st = templateLib.getInstanceOf("xmlroot_param_standalone_part_no");
							}



							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlroot_param_standalone_part"


	public static class xmlserialize_param_enconding_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_enconding_part"
	// PLSQLPrinter.g:1933:1: xmlserialize_param_enconding_part : ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\";
	public final PLSQLPrinter.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_enconding_part_return retval = new PLSQLPrinter.xmlserialize_param_enconding_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1934:5: ( ^( ENCODING_VK expression ) -> template( \"not implemented: xmlserialize_param_enconding_part\")
			// PLSQLPrinter.g:1934:10: ^( ENCODING_VK expression )
			{
			match(input,ENCODING_VK,FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part19131); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xmlserialize_param_enconding_part19133);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1935:5: -> template( \"not implemented: xmlserialize_param_enconding_part\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_enconding_part");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_enconding_part"


	public static class xmlserialize_param_ident_part_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xmlserialize_param_ident_part"
	// PLSQLPrinter.g:1938:1: xmlserialize_param_ident_part : ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\");
	public final PLSQLPrinter.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException {
		PLSQLPrinter.xmlserialize_param_ident_part_return retval = new PLSQLPrinter.xmlserialize_param_ident_part_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1939:5: ( NO_VK INDENT_VK -> template( \"not implemented: xmlserialize_param_ident_part\"| ^( INDENT_VK ( expression )? ) -> template( \"not implemented: xmlserialize_param_ident_part\")
			int alt349=2;
			int LA349_0 = input.LA(1);
			if ( (LA349_0==NO_VK) ) {
				alt349=1;
			}
			else if ( (LA349_0==INDENT_VK) ) {
				alt349=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 349, 0, input);
				throw nvae;
			}

			switch (alt349) {
				case 1 :
					// PLSQLPrinter.g:1939:10: NO_VK INDENT_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlserialize_param_ident_part19168); 
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part19170); 
					// TEMPLATE REWRITE
					// 1940:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1941:10: ^( INDENT_VK ( expression )? )
					{
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part19196); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// PLSQLPrinter.g:1941:22: ( expression )?
						int alt348=2;
						int LA348_0 = input.LA(1);
						if ( (LA348_0==EXPR||LA348_0==LOGIC_EXPR) ) {
							alt348=1;
						}
						switch (alt348) {
							case 1 :
								// PLSQLPrinter.g:1941:22: expression
								{
								pushFollow(FOLLOW_expression_in_xmlserialize_param_ident_part19198);
								expression();
								state._fsp--;

								}
								break;

						}

						match(input, Token.UP, null); 
					}

					// TEMPLATE REWRITE
					// 1942:5: -> template( \"not implemented: xmlserialize_param_ident_part\"
					{
						retval.st = new StringTemplate(templateLib, "not implemented: xmlserialize_param_ident_part");
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xmlserialize_param_ident_part"


	public static class partition_extension_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "partition_extension_clause"
	// PLSQLPrinter.g:1949:1: partition_extension_clause : ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\";
	public final PLSQLPrinter.partition_extension_clause_return partition_extension_clause() throws RecognitionException {
		PLSQLPrinter.partition_extension_clause_return retval = new PLSQLPrinter.partition_extension_clause_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:1950:5: ( ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) -> template( \"not implemented: partition_extension_clause\")
			// PLSQLPrinter.g:1950:10: ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list )
			{
			// PLSQLPrinter.g:1950:12: ( SUBPARTITION_VK | PARTITION_VK )
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==SUBPARTITION_VK) ) {
				alt350=1;
			}
			else if ( (LA350_0==PARTITION_VK) ) {
				alt350=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 350, 0, input);
				throw nvae;
			}

			switch (alt350) {
				case 1 :
					// PLSQLPrinter.g:1950:13: SUBPARTITION_VK
					{
					match(input,SUBPARTITION_VK,FOLLOW_SUBPARTITION_VK_in_partition_extension_clause19240); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:1950:29: PARTITION_VK
					{
					match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_extension_clause19242); 
					}
					break;

			}

			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_list_in_partition_extension_clause19245);
			expression_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1951:5: -> template( \"not implemented: partition_extension_clause\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: partition_extension_clause");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_extension_clause"


	public static class alias_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "alias"
	// PLSQLPrinter.g:1954:1: alias : ( ^( COLUMN_ALIAS ( char_set_name )? id= commented_id ) -> column_alias(name=$id.st)| ^( TABLE_ALIAS ( char_set_name )? id= commented_id ) -> table_alias(name=$id.st));
	public final PLSQLPrinter.alias_return alias() throws RecognitionException {
		PLSQLPrinter.alias_return retval = new PLSQLPrinter.alias_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:1955:5: ( ^( COLUMN_ALIAS ( char_set_name )? id= commented_id ) -> column_alias(name=$id.st)| ^( TABLE_ALIAS ( char_set_name )? id= commented_id ) -> table_alias(name=$id.st))
			int alt353=2;
			int LA353_0 = input.LA(1);
			if ( (LA353_0==COLUMN_ALIAS) ) {
				alt353=1;
			}
			else if ( (LA353_0==TABLE_ALIAS) ) {
				alt353=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 353, 0, input);
				throw nvae;
			}

			switch (alt353) {
				case 1 :
					// PLSQLPrinter.g:1955:10: ^( COLUMN_ALIAS ( char_set_name )? id= commented_id )
					{
					match(input,COLUMN_ALIAS,FOLLOW_COLUMN_ALIAS_in_alias19281); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1955:25: ( char_set_name )?
					int alt351=2;
					int LA351_0 = input.LA(1);
					if ( (LA351_0==CHAR_SET_NAME) ) {
						alt351=1;
					}
					switch (alt351) {
						case 1 :
							// PLSQLPrinter.g:1955:25: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_alias19283);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_commented_id_in_alias19288);
					id=commented_id();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1956:5: -> column_alias(name=$id.st)
					{
						retval.st = templateLib.getInstanceOf("column_alias",new STAttrMap().put("name", (id!=null?((StringTemplate)id.getTemplate()):null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1957:10: ^( TABLE_ALIAS ( char_set_name )? id= commented_id )
					{
					match(input,TABLE_ALIAS,FOLLOW_TABLE_ALIAS_in_alias19316); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1957:24: ( char_set_name )?
					int alt352=2;
					int LA352_0 = input.LA(1);
					if ( (LA352_0==CHAR_SET_NAME) ) {
						alt352=1;
					}
					switch (alt352) {
						case 1 :
							// PLSQLPrinter.g:1957:24: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_alias19318);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_commented_id_in_alias19323);
					id=commented_id();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1958:5: -> table_alias(name=$id.st)
					{
						retval.st = templateLib.getInstanceOf("table_alias",new STAttrMap().put("name", (id!=null?((StringTemplate)id.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alias"


	public static class where_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "where_clause"
	// PLSQLPrinter.g:1961:1: where_clause : ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st);
	public final PLSQLPrinter.where_clause_return where_clause() throws RecognitionException {
		PLSQLPrinter.where_clause_return retval = new PLSQLPrinter.where_clause_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression373 =null;

		try {
			// PLSQLPrinter.g:1962:5: ( ^( SQL92_RESERVED_WHERE expression ) -> where_clause(expression=$expression.st))
			// PLSQLPrinter.g:1962:10: ^( SQL92_RESERVED_WHERE expression )
			{
			match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_clause19360); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_where_clause19362);
			expression373=expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1963:5: -> where_clause(expression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("where_clause",new STAttrMap().put("expression", (expression373!=null?((StringTemplate)expression373.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "where_clause"


	public static class into_clause_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "into_clause"
	// PLSQLPrinter.g:1966:1: into_clause : ( ^( SQL92_RESERVED_INTO ( PGSQL_STRICT )? (elements+= general_element )+ ) -> into_clause(is_bulk_collect=falseis_strict=$PGSQL_STRICT != nullgeneral_elements=$elements)| ^( BULK_VK (elements+= general_element )+ ) -> into_clause(is_bulk_collect=trueis_strict=falsegeneral_elements=$elements));
	public final PLSQLPrinter.into_clause_return into_clause() throws RecognitionException {
		PLSQLPrinter.into_clause_return retval = new PLSQLPrinter.into_clause_return();
		retval.start = input.LT(1);

		CommonTree PGSQL_STRICT374=null;
		List<Object> list_elements=null;
		RuleReturnScope elements = null;
		try {
			// PLSQLPrinter.g:1967:5: ( ^( SQL92_RESERVED_INTO ( PGSQL_STRICT )? (elements+= general_element )+ ) -> into_clause(is_bulk_collect=falseis_strict=$PGSQL_STRICT != nullgeneral_elements=$elements)| ^( BULK_VK (elements+= general_element )+ ) -> into_clause(is_bulk_collect=trueis_strict=falsegeneral_elements=$elements))
			int alt357=2;
			int LA357_0 = input.LA(1);
			if ( (LA357_0==SQL92_RESERVED_INTO) ) {
				alt357=1;
			}
			else if ( (LA357_0==BULK_VK) ) {
				alt357=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 357, 0, input);
				throw nvae;
			}

			switch (alt357) {
				case 1 :
					// PLSQLPrinter.g:1967:10: ^( SQL92_RESERVED_INTO ( PGSQL_STRICT )? (elements+= general_element )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_clause19399); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1967:32: ( PGSQL_STRICT )?
					int alt354=2;
					int LA354_0 = input.LA(1);
					if ( (LA354_0==PGSQL_STRICT) ) {
						alt354=1;
					}
					switch (alt354) {
						case 1 :
							// PLSQLPrinter.g:1967:32: PGSQL_STRICT
							{
							PGSQL_STRICT374=(CommonTree)match(input,PGSQL_STRICT,FOLLOW_PGSQL_STRICT_in_into_clause19401); 
							}
							break;

					}

					// PLSQLPrinter.g:1967:54: (elements+= general_element )+
					int cnt355=0;
					loop355:
					while (true) {
						int alt355=2;
						int LA355_0 = input.LA(1);
						if ( (LA355_0==CASCATED_ELEMENT) ) {
							alt355=1;
						}

						switch (alt355) {
						case 1 :
							// PLSQLPrinter.g:1967:54: elements+= general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause19406);
							elements=general_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt355 >= 1 ) break loop355;
							EarlyExitException eee = new EarlyExitException(355, input);
							throw eee;
						}
						cnt355++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1968:5: -> into_clause(is_bulk_collect=falseis_strict=$PGSQL_STRICT != nullgeneral_elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("into_clause",new STAttrMap().put("is_bulk_collect", false).put("is_strict", PGSQL_STRICT374 != null).put("general_elements", list_elements));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:1969:10: ^( BULK_VK (elements+= general_element )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_into_clause19446); 
					match(input, Token.DOWN, null); 
					// PLSQLPrinter.g:1969:28: (elements+= general_element )+
					int cnt356=0;
					loop356:
					while (true) {
						int alt356=2;
						int LA356_0 = input.LA(1);
						if ( (LA356_0==CASCATED_ELEMENT) ) {
							alt356=1;
						}

						switch (alt356) {
						case 1 :
							// PLSQLPrinter.g:1969:28: elements+= general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause19450);
							elements=general_element();
							state._fsp--;

							if (list_elements==null) list_elements=new ArrayList<Object>();
							list_elements.add(elements.getTemplate());
							}
							break;

						default :
							if ( cnt356 >= 1 ) break loop356;
							EarlyExitException eee = new EarlyExitException(356, input);
							throw eee;
						}
						cnt356++;
					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 1970:5: -> into_clause(is_bulk_collect=trueis_strict=falsegeneral_elements=$elements)
					{
						retval.st = templateLib.getInstanceOf("into_clause",new STAttrMap().put("is_bulk_collect", true).put("is_strict", false).put("general_elements", list_elements));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "into_clause"


	public static class xml_column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "xml_column_name"
	// PLSQLPrinter.g:1977:1: xml_column_name : ^( XML_COLUMN_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.xml_column_name_return xml_column_name() throws RecognitionException {
		PLSQLPrinter.xml_column_name_return retval = new PLSQLPrinter.xml_column_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:1978:5: ( ^( XML_COLUMN_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:1978:10: ^( XML_COLUMN_NAME ( char_set_name )? id= commented_id )
			{
			match(input,XML_COLUMN_NAME,FOLLOW_XML_COLUMN_NAME_in_xml_column_name19503); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1978:28: ( char_set_name )?
			int alt358=2;
			int LA358_0 = input.LA(1);
			if ( (LA358_0==CHAR_SET_NAME) ) {
				alt358=1;
			}
			switch (alt358) {
				case 1 :
					// PLSQLPrinter.g:1978:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_xml_column_name19505);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_xml_column_name19510);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1978:60: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "xml_column_name"


	public static class cost_class_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cost_class_name"
	// PLSQLPrinter.g:1981:1: cost_class_name : ^( COST_CLASS_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.cost_class_name_return cost_class_name() throws RecognitionException {
		PLSQLPrinter.cost_class_name_return retval = new PLSQLPrinter.cost_class_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:1982:5: ( ^( COST_CLASS_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:1982:10: ^( COST_CLASS_NAME ( char_set_name )? id= commented_id )
			{
			match(input,COST_CLASS_NAME,FOLLOW_COST_CLASS_NAME_in_cost_class_name19541); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1982:28: ( char_set_name )?
			int alt359=2;
			int LA359_0 = input.LA(1);
			if ( (LA359_0==CHAR_SET_NAME) ) {
				alt359=1;
			}
			switch (alt359) {
				case 1 :
					// PLSQLPrinter.g:1982:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cost_class_name19543);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_cost_class_name19548);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1982:60: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cost_class_name"


	public static class attribute_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "attribute_name"
	// PLSQLPrinter.g:1985:1: attribute_name : ^( ATTRIBUTE_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.attribute_name_return attribute_name() throws RecognitionException {
		PLSQLPrinter.attribute_name_return retval = new PLSQLPrinter.attribute_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:1986:5: ( ^( ATTRIBUTE_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:1986:10: ^( ATTRIBUTE_NAME ( char_set_name )? id= commented_id )
			{
			match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name19579); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1986:27: ( char_set_name )?
			int alt360=2;
			int LA360_0 = input.LA(1);
			if ( (LA360_0==CHAR_SET_NAME) ) {
				alt360=1;
			}
			switch (alt360) {
				case 1 :
					// PLSQLPrinter.g:1986:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_attribute_name19581);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_attribute_name19586);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1986:59: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_name"


	public static class savepoint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "savepoint_name"
	// PLSQLPrinter.g:1989:1: savepoint_name : ^( SAVEPOINT_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.savepoint_name_return savepoint_name() throws RecognitionException {
		PLSQLPrinter.savepoint_name_return retval = new PLSQLPrinter.savepoint_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:1990:5: ( ^( SAVEPOINT_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:1990:10: ^( SAVEPOINT_NAME ( char_set_name )? id= commented_id )
			{
			match(input,SAVEPOINT_NAME,FOLLOW_SAVEPOINT_NAME_in_savepoint_name19617); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1990:27: ( char_set_name )?
			int alt361=2;
			int LA361_0 = input.LA(1);
			if ( (LA361_0==CHAR_SET_NAME) ) {
				alt361=1;
			}
			switch (alt361) {
				case 1 :
					// PLSQLPrinter.g:1990:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_savepoint_name19619);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_savepoint_name19624);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1990:59: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_name"


	public static class rollback_segment_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "rollback_segment_name"
	// PLSQLPrinter.g:1993:1: rollback_segment_name : ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.rollback_segment_name_return rollback_segment_name() throws RecognitionException {
		PLSQLPrinter.rollback_segment_name_return retval = new PLSQLPrinter.rollback_segment_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:1994:5: ( ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:1994:10: ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? id= commented_id )
			{
			match(input,ROLLBACK_SEGMENT_NAME,FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name19655); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1994:34: ( char_set_name )?
			int alt362=2;
			int LA362_0 = input.LA(1);
			if ( (LA362_0==CHAR_SET_NAME) ) {
				alt362=1;
			}
			switch (alt362) {
				case 1 :
					// PLSQLPrinter.g:1994:34: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_rollback_segment_name19657);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_rollback_segment_name19662);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1994:66: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_segment_name"


	public static class table_var_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "table_var_name"
	// PLSQLPrinter.g:1998:1: table_var_name : ^( TABLE_VAR_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.table_var_name_return table_var_name() throws RecognitionException {
		PLSQLPrinter.table_var_name_return retval = new PLSQLPrinter.table_var_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:1999:5: ( ^( TABLE_VAR_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:1999:10: ^( TABLE_VAR_NAME ( char_set_name )? id= commented_id )
			{
			match(input,TABLE_VAR_NAME,FOLLOW_TABLE_VAR_NAME_in_table_var_name19694); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:1999:27: ( char_set_name )?
			int alt363=2;
			int LA363_0 = input.LA(1);
			if ( (LA363_0==CHAR_SET_NAME) ) {
				alt363=1;
			}
			switch (alt363) {
				case 1 :
					// PLSQLPrinter.g:1999:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_table_var_name19696);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_table_var_name19701);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 1999:59: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_name"


	public static class schema_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "schema_name"
	// PLSQLPrinter.g:2002:1: schema_name : ^( SCHEMA_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.schema_name_return schema_name() throws RecognitionException {
		PLSQLPrinter.schema_name_return retval = new PLSQLPrinter.schema_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2003:5: ( ^( SCHEMA_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2003:10: ^( SCHEMA_NAME ( char_set_name )? id= commented_id )
			{
			match(input,SCHEMA_NAME,FOLLOW_SCHEMA_NAME_in_schema_name19732); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2003:24: ( char_set_name )?
			int alt364=2;
			int LA364_0 = input.LA(1);
			if ( (LA364_0==CHAR_SET_NAME) ) {
				alt364=1;
			}
			switch (alt364) {
				case 1 :
					// PLSQLPrinter.g:2003:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_schema_name19734);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_schema_name19739);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2003:56: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "schema_name"


	public static class routine_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "routine_name"
	// PLSQLPrinter.g:2006:1: routine_name : ^( ROUTINE_NAME ( char_set_name )? ( commented_id )+ ( link_name )? ) -> template( \"not implemented: routine_name\";
	public final PLSQLPrinter.routine_name_return routine_name() throws RecognitionException {
		PLSQLPrinter.routine_name_return retval = new PLSQLPrinter.routine_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2007:5: ( ^( ROUTINE_NAME ( char_set_name )? ( commented_id )+ ( link_name )? ) -> template( \"not implemented: routine_name\")
			// PLSQLPrinter.g:2007:10: ^( ROUTINE_NAME ( char_set_name )? ( commented_id )+ ( link_name )? )
			{
			match(input,ROUTINE_NAME,FOLLOW_ROUTINE_NAME_in_routine_name19770); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2007:25: ( char_set_name )?
			int alt365=2;
			int LA365_0 = input.LA(1);
			if ( (LA365_0==CHAR_SET_NAME) ) {
				alt365=1;
			}
			switch (alt365) {
				case 1 :
					// PLSQLPrinter.g:2007:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_routine_name19772);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2007:40: ( commented_id )+
			int cnt366=0;
			loop366:
			while (true) {
				int alt366=2;
				int LA366_0 = input.LA(1);
				if ( (LA366_0==ID) ) {
					alt366=1;
				}

				switch (alt366) {
				case 1 :
					// PLSQLPrinter.g:2007:40: commented_id
					{
					pushFollow(FOLLOW_commented_id_in_routine_name19775);
					commented_id();
					state._fsp--;

					}
					break;

				default :
					if ( cnt366 >= 1 ) break loop366;
					EarlyExitException eee = new EarlyExitException(366, input);
					throw eee;
				}
				cnt366++;
			}

			// PLSQLPrinter.g:2007:54: ( link_name )?
			int alt367=2;
			int LA367_0 = input.LA(1);
			if ( (LA367_0==LINK_NAME) ) {
				alt367=1;
			}
			switch (alt367) {
				case 1 :
					// PLSQLPrinter.g:2007:54: link_name
					{
					pushFollow(FOLLOW_link_name_in_routine_name19778);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2008:5: -> template( \"not implemented: routine_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: routine_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "routine_name"


	public static class package_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "package_name"
	// PLSQLPrinter.g:2011:1: package_name : ^( PACKAGE_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.package_name_return package_name() throws RecognitionException {
		PLSQLPrinter.package_name_return retval = new PLSQLPrinter.package_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2012:5: ( ^( PACKAGE_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2012:10: ^( PACKAGE_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,PACKAGE_NAME,FOLLOW_PACKAGE_NAME_in_package_name19815); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2012:25: ( char_set_name )?
			int alt368=2;
			int LA368_0 = input.LA(1);
			if ( (LA368_0==CHAR_SET_NAME) ) {
				alt368=1;
			}
			switch (alt368) {
				case 1 :
					// PLSQLPrinter.g:2012:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_package_name19817);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2012:43: (ids+= commented_id )+
			int cnt369=0;
			loop369:
			while (true) {
				int alt369=2;
				int LA369_0 = input.LA(1);
				if ( (LA369_0==ID) ) {
					alt369=1;
				}

				switch (alt369) {
				case 1 :
					// PLSQLPrinter.g:2012:43: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_package_name19822);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt369 >= 1 ) break loop369;
					EarlyExitException eee = new EarlyExitException(369, input);
					throw eee;
				}
				cnt369++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2013:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_name"


	public static class implementation_type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "implementation_type_name"
	// PLSQLPrinter.g:2016:1: implementation_type_name : ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.implementation_type_name_return implementation_type_name() throws RecognitionException {
		PLSQLPrinter.implementation_type_name_return retval = new PLSQLPrinter.implementation_type_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2017:5: ( ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2017:10: ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,IMPLEMENTATION_TYPE_NAME,FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name19860); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2017:37: ( char_set_name )?
			int alt370=2;
			int LA370_0 = input.LA(1);
			if ( (LA370_0==CHAR_SET_NAME) ) {
				alt370=1;
			}
			switch (alt370) {
				case 1 :
					// PLSQLPrinter.g:2017:37: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_implementation_type_name19862);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2017:55: (ids+= commented_id )+
			int cnt371=0;
			loop371:
			while (true) {
				int alt371=2;
				int LA371_0 = input.LA(1);
				if ( (LA371_0==ID) ) {
					alt371=1;
				}

				switch (alt371) {
				case 1 :
					// PLSQLPrinter.g:2017:55: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_implementation_type_name19867);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt371 >= 1 ) break loop371;
					EarlyExitException eee = new EarlyExitException(371, input);
					throw eee;
				}
				cnt371++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2018:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "implementation_type_name"


	public static class parameter_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "parameter_name"
	// PLSQLPrinter.g:2021:1: parameter_name : ^( PARAMETER_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.parameter_name_return parameter_name() throws RecognitionException {
		PLSQLPrinter.parameter_name_return retval = new PLSQLPrinter.parameter_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2022:5: ( ^( PARAMETER_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2022:10: ^( PARAMETER_NAME ( char_set_name )? id= commented_id )
			{
			match(input,PARAMETER_NAME,FOLLOW_PARAMETER_NAME_in_parameter_name19905); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2022:27: ( char_set_name )?
			int alt372=2;
			int LA372_0 = input.LA(1);
			if ( (LA372_0==CHAR_SET_NAME) ) {
				alt372=1;
			}
			switch (alt372) {
				case 1 :
					// PLSQLPrinter.g:2022:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_parameter_name19907);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_parameter_name19912);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2023:5: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_name"


	public static class reference_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "reference_model_name"
	// PLSQLPrinter.g:2026:1: reference_model_name : ^( REFERENCE_MODEL_NAME ( char_set_name )? id= commented_id ) -> template( \"not implemented: reference_model_name\";
	public final PLSQLPrinter.reference_model_name_return reference_model_name() throws RecognitionException {
		PLSQLPrinter.reference_model_name_return retval = new PLSQLPrinter.reference_model_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2027:5: ( ^( REFERENCE_MODEL_NAME ( char_set_name )? id= commented_id ) -> template( \"not implemented: reference_model_name\")
			// PLSQLPrinter.g:2027:10: ^( REFERENCE_MODEL_NAME ( char_set_name )? id= commented_id )
			{
			match(input,REFERENCE_MODEL_NAME,FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name19949); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2027:33: ( char_set_name )?
			int alt373=2;
			int LA373_0 = input.LA(1);
			if ( (LA373_0==CHAR_SET_NAME) ) {
				alt373=1;
			}
			switch (alt373) {
				case 1 :
					// PLSQLPrinter.g:2027:33: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_reference_model_name19951);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_reference_model_name19956);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2028:5: -> template( \"not implemented: reference_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: reference_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reference_model_name"


	public static class main_model_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "main_model_name"
	// PLSQLPrinter.g:2031:1: main_model_name : ^( MAIN_MODEL_NAME ( char_set_name )? id= commented_id ) -> template( \"not implemented: main_model_name\";
	public final PLSQLPrinter.main_model_name_return main_model_name() throws RecognitionException {
		PLSQLPrinter.main_model_name_return retval = new PLSQLPrinter.main_model_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2032:5: ( ^( MAIN_MODEL_NAME ( char_set_name )? id= commented_id ) -> template( \"not implemented: main_model_name\")
			// PLSQLPrinter.g:2032:10: ^( MAIN_MODEL_NAME ( char_set_name )? id= commented_id )
			{
			match(input,MAIN_MODEL_NAME,FOLLOW_MAIN_MODEL_NAME_in_main_model_name19992); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2032:28: ( char_set_name )?
			int alt374=2;
			int LA374_0 = input.LA(1);
			if ( (LA374_0==CHAR_SET_NAME) ) {
				alt374=1;
			}
			switch (alt374) {
				case 1 :
					// PLSQLPrinter.g:2032:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_main_model_name19994);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_main_model_name19999);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2033:5: -> template( \"not implemented: main_model_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: main_model_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "main_model_name"


	public static class query_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "query_name"
	// PLSQLPrinter.g:2036:1: query_name : ^( QUERY_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.query_name_return query_name() throws RecognitionException {
		PLSQLPrinter.query_name_return retval = new PLSQLPrinter.query_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2037:5: ( ^( QUERY_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2037:10: ^( QUERY_NAME ( char_set_name )? id= commented_id )
			{
			match(input,QUERY_NAME,FOLLOW_QUERY_NAME_in_query_name20035); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2037:23: ( char_set_name )?
			int alt375=2;
			int LA375_0 = input.LA(1);
			if ( (LA375_0==CHAR_SET_NAME) ) {
				alt375=1;
			}
			switch (alt375) {
				case 1 :
					// PLSQLPrinter.g:2037:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_query_name20037);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_query_name20042);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2037:55: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "query_name"


	public static class constraint_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constraint_name"
	// PLSQLPrinter.g:2040:1: constraint_name : ^( CONSTRAINT_NAME ( char_set_name )? ( commented_id )+ ( link_name )? ) -> template( \"not implemented: constraint_name\";
	public final PLSQLPrinter.constraint_name_return constraint_name() throws RecognitionException {
		PLSQLPrinter.constraint_name_return retval = new PLSQLPrinter.constraint_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2041:5: ( ^( CONSTRAINT_NAME ( char_set_name )? ( commented_id )+ ( link_name )? ) -> template( \"not implemented: constraint_name\")
			// PLSQLPrinter.g:2041:10: ^( CONSTRAINT_NAME ( char_set_name )? ( commented_id )+ ( link_name )? )
			{
			match(input,CONSTRAINT_NAME,FOLLOW_CONSTRAINT_NAME_in_constraint_name20073); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2041:28: ( char_set_name )?
			int alt376=2;
			int LA376_0 = input.LA(1);
			if ( (LA376_0==CHAR_SET_NAME) ) {
				alt376=1;
			}
			switch (alt376) {
				case 1 :
					// PLSQLPrinter.g:2041:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_constraint_name20075);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2041:43: ( commented_id )+
			int cnt377=0;
			loop377:
			while (true) {
				int alt377=2;
				int LA377_0 = input.LA(1);
				if ( (LA377_0==ID) ) {
					alt377=1;
				}

				switch (alt377) {
				case 1 :
					// PLSQLPrinter.g:2041:43: commented_id
					{
					pushFollow(FOLLOW_commented_id_in_constraint_name20078);
					commented_id();
					state._fsp--;

					}
					break;

				default :
					if ( cnt377 >= 1 ) break loop377;
					EarlyExitException eee = new EarlyExitException(377, input);
					throw eee;
				}
				cnt377++;
			}

			// PLSQLPrinter.g:2041:57: ( link_name )?
			int alt378=2;
			int LA378_0 = input.LA(1);
			if ( (LA378_0==LINK_NAME) ) {
				alt378=1;
			}
			switch (alt378) {
				case 1 :
					// PLSQLPrinter.g:2041:57: link_name
					{
					pushFollow(FOLLOW_link_name_in_constraint_name20081);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2042:5: -> template( \"not implemented: constraint_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: constraint_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_name"


	public static class label_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "label_name"
	// PLSQLPrinter.g:2045:1: label_name : ^( LABEL_NAME id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.label_name_return label_name() throws RecognitionException {
		PLSQLPrinter.label_name_return retval = new PLSQLPrinter.label_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2046:5: ( ^( LABEL_NAME id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2046:10: ^( LABEL_NAME id= commented_id )
			{
			match(input,LABEL_NAME,FOLLOW_LABEL_NAME_in_label_name20118); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_commented_id_in_label_name20122);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2046:40: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "label_name"


	public static class type_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_name"
	// PLSQLPrinter.g:2049:1: type_name : ^( TYPE_NAME (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.type_name_return type_name() throws RecognitionException {
		PLSQLPrinter.type_name_return retval = new PLSQLPrinter.type_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2050:5: ( ^( TYPE_NAME (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2050:10: ^( TYPE_NAME (ids+= commented_id )+ )
			{
			match(input,TYPE_NAME,FOLLOW_TYPE_NAME_in_type_name20153); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2050:25: (ids+= commented_id )+
			int cnt379=0;
			loop379:
			while (true) {
				int alt379=2;
				int LA379_0 = input.LA(1);
				if ( (LA379_0==ID) ) {
					alt379=1;
				}

				switch (alt379) {
				case 1 :
					// PLSQLPrinter.g:2050:25: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_type_name20157);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt379 >= 1 ) break loop379;
					EarlyExitException eee = new EarlyExitException(379, input);
					throw eee;
				}
				cnt379++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2051:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_name"


	public static class sequence_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "sequence_name"
	// PLSQLPrinter.g:2054:1: sequence_name : ^( SEQUENCE_NAME ( commented_id )+ ) -> template( \"not implemented: sequence_name\";
	public final PLSQLPrinter.sequence_name_return sequence_name() throws RecognitionException {
		PLSQLPrinter.sequence_name_return retval = new PLSQLPrinter.sequence_name_return();
		retval.start = input.LT(1);

		try {
			// PLSQLPrinter.g:2055:5: ( ^( SEQUENCE_NAME ( commented_id )+ ) -> template( \"not implemented: sequence_name\")
			// PLSQLPrinter.g:2055:10: ^( SEQUENCE_NAME ( commented_id )+ )
			{
			match(input,SEQUENCE_NAME,FOLLOW_SEQUENCE_NAME_in_sequence_name20195); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2055:26: ( commented_id )+
			int cnt380=0;
			loop380:
			while (true) {
				int alt380=2;
				int LA380_0 = input.LA(1);
				if ( (LA380_0==ID) ) {
					alt380=1;
				}

				switch (alt380) {
				case 1 :
					// PLSQLPrinter.g:2055:26: commented_id
					{
					pushFollow(FOLLOW_commented_id_in_sequence_name20197);
					commented_id();
					state._fsp--;

					}
					break;

				default :
					if ( cnt380 >= 1 ) break loop380;
					EarlyExitException eee = new EarlyExitException(380, input);
					throw eee;
				}
				cnt380++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2056:5: -> template( \"not implemented: sequence_name\"
			{
				retval.st = new StringTemplate(templateLib, "not implemented: sequence_name");
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_name"


	public static class exception_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "exception_name"
	// PLSQLPrinter.g:2059:1: exception_name : ^( EXCEPTION_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.exception_name_return exception_name() throws RecognitionException {
		PLSQLPrinter.exception_name_return retval = new PLSQLPrinter.exception_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2060:5: ( ^( EXCEPTION_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2060:10: ^( EXCEPTION_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,EXCEPTION_NAME,FOLLOW_EXCEPTION_NAME_in_exception_name20234); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2060:27: ( char_set_name )?
			int alt381=2;
			int LA381_0 = input.LA(1);
			if ( (LA381_0==CHAR_SET_NAME) ) {
				alt381=1;
			}
			switch (alt381) {
				case 1 :
					// PLSQLPrinter.g:2060:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_exception_name20236);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2060:45: (ids+= commented_id )+
			int cnt382=0;
			loop382:
			while (true) {
				int alt382=2;
				int LA382_0 = input.LA(1);
				if ( (LA382_0==ID) ) {
					alt382=1;
				}

				switch (alt382) {
				case 1 :
					// PLSQLPrinter.g:2060:45: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_exception_name20241);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt382 >= 1 ) break loop382;
					EarlyExitException eee = new EarlyExitException(382, input);
					throw eee;
				}
				cnt382++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2061:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_name"


	public static class function_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_name"
	// PLSQLPrinter.g:2064:1: function_name : ^( FUNCTION_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.function_name_return function_name() throws RecognitionException {
		PLSQLPrinter.function_name_return retval = new PLSQLPrinter.function_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2065:5: ( ^( FUNCTION_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2065:10: ^( FUNCTION_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_function_name20279); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2065:26: ( char_set_name )?
			int alt383=2;
			int LA383_0 = input.LA(1);
			if ( (LA383_0==CHAR_SET_NAME) ) {
				alt383=1;
			}
			switch (alt383) {
				case 1 :
					// PLSQLPrinter.g:2065:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_function_name20281);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2065:44: (ids+= commented_id )+
			int cnt384=0;
			loop384:
			while (true) {
				int alt384=2;
				int LA384_0 = input.LA(1);
				if ( (LA384_0==ID) ) {
					alt384=1;
				}

				switch (alt384) {
				case 1 :
					// PLSQLPrinter.g:2065:44: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_function_name20286);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt384 >= 1 ) break loop384;
					EarlyExitException eee = new EarlyExitException(384, input);
					throw eee;
				}
				cnt384++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2066:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_name"


	public static class procedure_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "procedure_name"
	// PLSQLPrinter.g:2069:1: procedure_name : ^( PROCEDURE_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.procedure_name_return procedure_name() throws RecognitionException {
		PLSQLPrinter.procedure_name_return retval = new PLSQLPrinter.procedure_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2070:5: ( ^( PROCEDURE_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2070:10: ^( PROCEDURE_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,PROCEDURE_NAME,FOLLOW_PROCEDURE_NAME_in_procedure_name20324); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2070:27: ( char_set_name )?
			int alt385=2;
			int LA385_0 = input.LA(1);
			if ( (LA385_0==CHAR_SET_NAME) ) {
				alt385=1;
			}
			switch (alt385) {
				case 1 :
					// PLSQLPrinter.g:2070:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_procedure_name20326);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2070:45: (ids+= commented_id )+
			int cnt386=0;
			loop386:
			while (true) {
				int alt386=2;
				int LA386_0 = input.LA(1);
				if ( (LA386_0==ID) ) {
					alt386=1;
				}

				switch (alt386) {
				case 1 :
					// PLSQLPrinter.g:2070:45: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_procedure_name20331);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt386 >= 1 ) break loop386;
					EarlyExitException eee = new EarlyExitException(386, input);
					throw eee;
				}
				cnt386++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2071:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_name"


	public static class trigger_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "trigger_name"
	// PLSQLPrinter.g:2074:1: trigger_name : ^( TRIGGER_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.trigger_name_return trigger_name() throws RecognitionException {
		PLSQLPrinter.trigger_name_return retval = new PLSQLPrinter.trigger_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2075:5: ( ^( TRIGGER_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2075:10: ^( TRIGGER_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,TRIGGER_NAME,FOLLOW_TRIGGER_NAME_in_trigger_name20369); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2075:25: ( char_set_name )?
			int alt387=2;
			int LA387_0 = input.LA(1);
			if ( (LA387_0==CHAR_SET_NAME) ) {
				alt387=1;
			}
			switch (alt387) {
				case 1 :
					// PLSQLPrinter.g:2075:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_trigger_name20371);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2075:43: (ids+= commented_id )+
			int cnt388=0;
			loop388:
			while (true) {
				int alt388=2;
				int LA388_0 = input.LA(1);
				if ( (LA388_0==ID) ) {
					alt388=1;
				}

				switch (alt388) {
				case 1 :
					// PLSQLPrinter.g:2075:43: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_trigger_name20376);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt388 >= 1 ) break loop388;
					EarlyExitException eee = new EarlyExitException(388, input);
					throw eee;
				}
				cnt388++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2076:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_name"


	public static class hosted_variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "hosted_variable_name"
	// PLSQLPrinter.g:2079:1: hosted_variable_name : ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) ) ;
	public final PLSQLPrinter.hosted_variable_name_return hosted_variable_name() throws RecognitionException {
		PLSQLPrinter.hosted_variable_name_return retval = new PLSQLPrinter.hosted_variable_name_return();
		retval.start = input.LT(1);

		CommonTree BINDVAR375=null;
		CommonTree UNSIGNED_INTEGER376=null;

		try {
			// PLSQLPrinter.g:2080:5: ( ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) ) )
			// PLSQLPrinter.g:2080:10: ^( HOSTED_VARIABLE_NAME ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)) )
			{
			match(input,HOSTED_VARIABLE_NAME,FOLLOW_HOSTED_VARIABLE_NAME_in_hosted_variable_name20418); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2081:13: ( BINDVAR -> string_literal(val=$BINDVAR.text)| UNSIGNED_INTEGER -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text))
			int alt389=2;
			int LA389_0 = input.LA(1);
			if ( (LA389_0==BINDVAR) ) {
				alt389=1;
			}
			else if ( (LA389_0==UNSIGNED_INTEGER) ) {
				alt389=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 389, 0, input);
				throw nvae;
			}

			switch (alt389) {
				case 1 :
					// PLSQLPrinter.g:2082:15: BINDVAR
					{
					BINDVAR375=(CommonTree)match(input,BINDVAR,FOLLOW_BINDVAR_in_hosted_variable_name20448); 
					// TEMPLATE REWRITE
					// 2082:23: -> string_literal(val=$BINDVAR.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (BINDVAR375!=null?BINDVAR375.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2083:16: UNSIGNED_INTEGER
					{
					UNSIGNED_INTEGER376=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_hosted_variable_name20474); 
					// TEMPLATE REWRITE
					// 2083:33: -> string_literal(val= \":\" + $UNSIGNED_INTEGER.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val",  ":" + (UNSIGNED_INTEGER376!=null?UNSIGNED_INTEGER376.getText():null)));
					}



					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "hosted_variable_name"


	public static class variable_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "variable_name"
	// PLSQLPrinter.g:2088:1: variable_name : ^( VARIABLE_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.variable_name_return variable_name() throws RecognitionException {
		PLSQLPrinter.variable_name_return retval = new PLSQLPrinter.variable_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2089:5: ( ^( VARIABLE_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2089:10: ^( VARIABLE_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_variable_name20530); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2089:26: ( char_set_name )?
			int alt390=2;
			int LA390_0 = input.LA(1);
			if ( (LA390_0==CHAR_SET_NAME) ) {
				alt390=1;
			}
			switch (alt390) {
				case 1 :
					// PLSQLPrinter.g:2089:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_variable_name20532);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2089:44: (ids+= commented_id )+
			int cnt391=0;
			loop391:
			while (true) {
				int alt391=2;
				int LA391_0 = input.LA(1);
				if ( (LA391_0==ID) ) {
					alt391=1;
				}

				switch (alt391) {
				case 1 :
					// PLSQLPrinter.g:2089:44: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_variable_name20537);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt391 >= 1 ) break loop391;
					EarlyExitException eee = new EarlyExitException(391, input);
					throw eee;
				}
				cnt391++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2090:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_name"


	public static class index_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "index_name"
	// PLSQLPrinter.g:2093:1: index_name : ^( INDEX_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.index_name_return index_name() throws RecognitionException {
		PLSQLPrinter.index_name_return retval = new PLSQLPrinter.index_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2094:5: ( ^( INDEX_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2094:10: ^( INDEX_NAME ( char_set_name )? id= commented_id )
			{
			match(input,INDEX_NAME,FOLLOW_INDEX_NAME_in_index_name20575); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2094:23: ( char_set_name )?
			int alt392=2;
			int LA392_0 = input.LA(1);
			if ( (LA392_0==CHAR_SET_NAME) ) {
				alt392=1;
			}
			switch (alt392) {
				case 1 :
					// PLSQLPrinter.g:2094:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_index_name20577);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_index_name20582);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2094:55: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "index_name"


	public static class cursor_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "cursor_name"
	// PLSQLPrinter.g:2097:1: cursor_name : ^( CURSOR_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.cursor_name_return cursor_name() throws RecognitionException {
		PLSQLPrinter.cursor_name_return retval = new PLSQLPrinter.cursor_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2098:5: ( ^( CURSOR_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2098:10: ^( CURSOR_NAME ( char_set_name )? id= commented_id )
			{
			match(input,CURSOR_NAME,FOLLOW_CURSOR_NAME_in_cursor_name20613); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2098:24: ( char_set_name )?
			int alt393=2;
			int LA393_0 = input.LA(1);
			if ( (LA393_0==CHAR_SET_NAME) ) {
				alt393=1;
			}
			switch (alt393) {
				case 1 :
					// PLSQLPrinter.g:2098:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cursor_name20615);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_cursor_name20620);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2098:56: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_name"


	public static class record_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "record_name"
	// PLSQLPrinter.g:2101:1: record_name : ^( RECORD_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.record_name_return record_name() throws RecognitionException {
		PLSQLPrinter.record_name_return retval = new PLSQLPrinter.record_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2102:5: ( ^( RECORD_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2102:10: ^( RECORD_NAME ( char_set_name )? id= commented_id )
			{
			match(input,RECORD_NAME,FOLLOW_RECORD_NAME_in_record_name20651); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2102:24: ( char_set_name )?
			int alt394=2;
			int LA394_0 = input.LA(1);
			if ( (LA394_0==CHAR_SET_NAME) ) {
				alt394=1;
			}
			switch (alt394) {
				case 1 :
					// PLSQLPrinter.g:2102:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_record_name20653);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_record_name20658);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2102:56: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_name"


	public static class collection_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "collection_name"
	// PLSQLPrinter.g:2105:1: collection_name : ^( COLLECTION_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.collection_name_return collection_name() throws RecognitionException {
		PLSQLPrinter.collection_name_return retval = new PLSQLPrinter.collection_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2106:5: ( ^( COLLECTION_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2106:10: ^( COLLECTION_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,COLLECTION_NAME,FOLLOW_COLLECTION_NAME_in_collection_name20689); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2106:28: ( char_set_name )?
			int alt395=2;
			int LA395_0 = input.LA(1);
			if ( (LA395_0==CHAR_SET_NAME) ) {
				alt395=1;
			}
			switch (alt395) {
				case 1 :
					// PLSQLPrinter.g:2106:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_collection_name20691);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2106:46: (ids+= commented_id )+
			int cnt396=0;
			loop396:
			while (true) {
				int alt396=2;
				int LA396_0 = input.LA(1);
				if ( (LA396_0==ID) ) {
					alt396=1;
				}

				switch (alt396) {
				case 1 :
					// PLSQLPrinter.g:2106:46: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_collection_name20696);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt396 >= 1 ) break loop396;
					EarlyExitException eee = new EarlyExitException(396, input);
					throw eee;
				}
				cnt396++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2107:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "collection_name"


	public static class link_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "link_name"
	// PLSQLPrinter.g:2110:1: link_name : ^( LINK_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.link_name_return link_name() throws RecognitionException {
		PLSQLPrinter.link_name_return retval = new PLSQLPrinter.link_name_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2111:5: ( ^( LINK_NAME ( char_set_name )? id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2111:10: ^( LINK_NAME ( char_set_name )? id= commented_id )
			{
			match(input,LINK_NAME,FOLLOW_LINK_NAME_in_link_name20734); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2111:22: ( char_set_name )?
			int alt397=2;
			int LA397_0 = input.LA(1);
			if ( (LA397_0==CHAR_SET_NAME) ) {
				alt397=1;
			}
			switch (alt397) {
				case 1 :
					// PLSQLPrinter.g:2111:22: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_link_name20736);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_link_name20741);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2111:54: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "link_name"


	public static class column_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "column_name"
	// PLSQLPrinter.g:2114:1: column_name : ^( COLUMN_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.column_name_return column_name() throws RecognitionException {
		PLSQLPrinter.column_name_return retval = new PLSQLPrinter.column_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2115:5: ( ^( COLUMN_NAME ( char_set_name )? (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2115:10: ^( COLUMN_NAME ( char_set_name )? (ids+= commented_id )+ )
			{
			match(input,COLUMN_NAME,FOLLOW_COLUMN_NAME_in_column_name20772); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2115:24: ( char_set_name )?
			int alt398=2;
			int LA398_0 = input.LA(1);
			if ( (LA398_0==CHAR_SET_NAME) ) {
				alt398=1;
			}
			switch (alt398) {
				case 1 :
					// PLSQLPrinter.g:2115:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_column_name20774);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2115:42: (ids+= commented_id )+
			int cnt399=0;
			loop399:
			while (true) {
				int alt399=2;
				int LA399_0 = input.LA(1);
				if ( (LA399_0==ID) ) {
					alt399=1;
				}

				switch (alt399) {
				case 1 :
					// PLSQLPrinter.g:2115:42: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_column_name20779);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt399 >= 1 ) break loop399;
					EarlyExitException eee = new EarlyExitException(399, input);
					throw eee;
				}
				cnt399++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2116:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "column_name"


	public static class tableview_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "tableview_name"
	// PLSQLPrinter.g:2119:1: tableview_name : ^( TABLEVIEW_NAME ( char_set_name )? (ids+= commented_id )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st);
	public final PLSQLPrinter.tableview_name_return tableview_name() throws RecognitionException {
		PLSQLPrinter.tableview_name_return retval = new PLSQLPrinter.tableview_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		TreeRuleReturnScope link_name377 =null;
		TreeRuleReturnScope partition_extension_clause378 =null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2120:5: ( ^( TABLEVIEW_NAME ( char_set_name )? (ids+= commented_id )+ ( link_name )? ( partition_extension_clause )? ) -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st))
			// PLSQLPrinter.g:2120:10: ^( TABLEVIEW_NAME ( char_set_name )? (ids+= commented_id )+ ( link_name )? ( partition_extension_clause )? )
			{
			match(input,TABLEVIEW_NAME,FOLLOW_TABLEVIEW_NAME_in_tableview_name20817); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2120:27: ( char_set_name )?
			int alt400=2;
			int LA400_0 = input.LA(1);
			if ( (LA400_0==CHAR_SET_NAME) ) {
				alt400=1;
			}
			switch (alt400) {
				case 1 :
					// PLSQLPrinter.g:2120:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_tableview_name20819);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2120:45: (ids+= commented_id )+
			int cnt401=0;
			loop401:
			while (true) {
				int alt401=2;
				int LA401_0 = input.LA(1);
				if ( (LA401_0==ID) ) {
					alt401=1;
				}

				switch (alt401) {
				case 1 :
					// PLSQLPrinter.g:2120:45: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_tableview_name20824);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt401 >= 1 ) break loop401;
					EarlyExitException eee = new EarlyExitException(401, input);
					throw eee;
				}
				cnt401++;
			}

			// PLSQLPrinter.g:2120:61: ( link_name )?
			int alt402=2;
			int LA402_0 = input.LA(1);
			if ( (LA402_0==LINK_NAME) ) {
				alt402=1;
			}
			switch (alt402) {
				case 1 :
					// PLSQLPrinter.g:2120:61: link_name
					{
					pushFollow(FOLLOW_link_name_in_tableview_name20827);
					link_name377=link_name();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2120:72: ( partition_extension_clause )?
			int alt403=2;
			int LA403_0 = input.LA(1);
			if ( (LA403_0==PARTITION_VK||LA403_0==SUBPARTITION_VK) ) {
				alt403=1;
			}
			switch (alt403) {
				case 1 :
					// PLSQLPrinter.g:2120:72: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_tableview_name20830);
					partition_extension_clause378=partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2121:5: -> tableview_name(ids=$idslink_name=$link_name.stpartition_extension_clause=$partition_extension_clause.st)
			{
				retval.st = templateLib.getInstanceOf("tableview_name",new STAttrMap().put("ids", list_ids).put("link_name", (link_name377!=null?((StringTemplate)link_name377.getTemplate()):null)).put("partition_extension_clause", (partition_extension_clause378!=null?((StringTemplate)partition_extension_clause378.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableview_name"


	public static class view_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "view_name"
	// PLSQLPrinter.g:2124:1: view_name : ^( VIEW_NAME (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.view_name_return view_name() throws RecognitionException {
		PLSQLPrinter.view_name_return retval = new PLSQLPrinter.view_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2125:5: ( ^( VIEW_NAME (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2125:10: ^( VIEW_NAME (ids+= commented_id )+ )
			{
			match(input,VIEW_NAME,FOLLOW_VIEW_NAME_in_view_name20878); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2125:25: (ids+= commented_id )+
			int cnt404=0;
			loop404:
			while (true) {
				int alt404=2;
				int LA404_0 = input.LA(1);
				if ( (LA404_0==ID) ) {
					alt404=1;
				}

				switch (alt404) {
				case 1 :
					// PLSQLPrinter.g:2125:25: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_view_name20882);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt404 >= 1 ) break loop404;
					EarlyExitException eee = new EarlyExitException(404, input);
					throw eee;
				}
				cnt404++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2126:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "view_name"


	public static class char_set_name_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "char_set_name"
	// PLSQLPrinter.g:2129:1: char_set_name : ^( CHAR_SET_NAME (ids+= commented_id )+ ) -> dotted_name(ids=$ids);
	public final PLSQLPrinter.char_set_name_return char_set_name() throws RecognitionException {
		PLSQLPrinter.char_set_name_return retval = new PLSQLPrinter.char_set_name_return();
		retval.start = input.LT(1);

		List<Object> list_ids=null;
		RuleReturnScope ids = null;
		try {
			// PLSQLPrinter.g:2130:5: ( ^( CHAR_SET_NAME (ids+= commented_id )+ ) -> dotted_name(ids=$ids))
			// PLSQLPrinter.g:2130:10: ^( CHAR_SET_NAME (ids+= commented_id )+ )
			{
			match(input,CHAR_SET_NAME,FOLLOW_CHAR_SET_NAME_in_char_set_name20920); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2130:29: (ids+= commented_id )+
			int cnt405=0;
			loop405:
			while (true) {
				int alt405=2;
				int LA405_0 = input.LA(1);
				if ( (LA405_0==ID) ) {
					alt405=1;
				}

				switch (alt405) {
				case 1 :
					// PLSQLPrinter.g:2130:29: ids+= commented_id
					{
					pushFollow(FOLLOW_commented_id_in_char_set_name20924);
					ids=commented_id();
					state._fsp--;

					if (list_ids==null) list_ids=new ArrayList<Object>();
					list_ids.add(ids.getTemplate());
					}
					break;

				default :
					if ( cnt405 >= 1 ) break loop405;
					EarlyExitException eee = new EarlyExitException(405, input);
					throw eee;
				}
				cnt405++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2131:5: -> dotted_name(ids=$ids)
			{
				retval.st = templateLib.getInstanceOf("dotted_name",new STAttrMap().put("ids", list_ids));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "char_set_name"


	public static class function_argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "function_argument"
	// PLSQLPrinter.g:2138:1: function_argument : ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args);
	public final PLSQLPrinter.function_argument_return function_argument() throws RecognitionException {
		PLSQLPrinter.function_argument_return retval = new PLSQLPrinter.function_argument_return();
		retval.start = input.LT(1);

		List<Object> list_args=null;
		RuleReturnScope args = null;
		try {
			// PLSQLPrinter.g:2139:5: ( ^( ARGUMENTS (args+= argument )* ) -> function_arguments(arguments=$args))
			// PLSQLPrinter.g:2139:10: ^( ARGUMENTS (args+= argument )* )
			{
			match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_function_argument20966); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2139:26: (args+= argument )*
				loop406:
				while (true) {
					int alt406=2;
					int LA406_0 = input.LA(1);
					if ( (LA406_0==ARGUMENT) ) {
						alt406=1;
					}

					switch (alt406) {
					case 1 :
						// PLSQLPrinter.g:2139:26: args+= argument
						{
						pushFollow(FOLLOW_argument_in_function_argument20970);
						args=argument();
						state._fsp--;

						if (list_args==null) list_args=new ArrayList<Object>();
						list_args.add(args.getTemplate());
						}
						break;

					default :
						break loop406;
					}
				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2140:5: -> function_arguments(arguments=$args)
			{
				retval.st = templateLib.getInstanceOf("function_arguments",new STAttrMap().put("arguments", list_args));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_argument"


	public static class argument_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "argument"
	// PLSQLPrinter.g:2143:1: argument : ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st);
	public final PLSQLPrinter.argument_return argument() throws RecognitionException {
		PLSQLPrinter.argument_return retval = new PLSQLPrinter.argument_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope expression379 =null;
		TreeRuleReturnScope parameter_name380 =null;

		try {
			// PLSQLPrinter.g:2144:5: ( ^( ARGUMENT expression ( parameter_name )? ) -> function_argument(valueExpr=$expression.stname=$parameter_name.st))
			// PLSQLPrinter.g:2144:10: ^( ARGUMENT expression ( parameter_name )? )
			{
			match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument21008); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_argument21010);
			expression379=expression();
			state._fsp--;

			// PLSQLPrinter.g:2144:32: ( parameter_name )?
			int alt407=2;
			int LA407_0 = input.LA(1);
			if ( (LA407_0==PARAMETER_NAME) ) {
				alt407=1;
			}
			switch (alt407) {
				case 1 :
					// PLSQLPrinter.g:2144:32: parameter_name
					{
					pushFollow(FOLLOW_parameter_name_in_argument21012);
					parameter_name380=parameter_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2145:5: -> function_argument(valueExpr=$expression.stname=$parameter_name.st)
			{
				retval.st = templateLib.getInstanceOf("function_argument",new STAttrMap().put("valueExpr", (expression379!=null?((StringTemplate)expression379.getTemplate()):null)).put("name", (parameter_name380!=null?((StringTemplate)parameter_name380.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "argument"


	public static class type_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_spec"
	// PLSQLPrinter.g:2148:1: type_spec : ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second ) -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st));
	public final PLSQLPrinter.type_spec_return type_spec() throws RecognitionException {
		PLSQLPrinter.type_spec_return retval = new PLSQLPrinter.type_spec_return();
		retval.start = input.LT(1);

		CommonTree REF_VK382=null;
		CommonTree PERCENT_ROWTYPE_VK383=null;
		CommonTree PERCENT_TYPE_VK384=null;
		TreeRuleReturnScope type_name381 =null;
		TreeRuleReturnScope native_datatype_spec385 =null;
		TreeRuleReturnScope interval_type_spec_first386 =null;
		TreeRuleReturnScope interval_type_spec_second387 =null;

		try {
			// PLSQLPrinter.g:2149:5: ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)| native_datatype_spec -> { $native_datatype_spec.st; }| ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second ) -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st))
			int alt410=3;
			switch ( input.LA(1) ) {
			case CUSTOM_TYPE:
				{
				alt410=1;
				}
				break;
			case NATIVE_DATATYPE:
				{
				alt410=2;
				}
				break;
			case INTERVAL_DATATYPE:
				{
				alt410=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 410, 0, input);
				throw nvae;
			}
			switch (alt410) {
				case 1 :
					// PLSQLPrinter.g:2149:11: ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? )
					{
					match(input,CUSTOM_TYPE,FOLLOW_CUSTOM_TYPE_in_type_spec21056); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_name_in_type_spec21058);
					type_name381=type_name();
					state._fsp--;

					// PLSQLPrinter.g:2149:35: ( REF_VK )?
					int alt408=2;
					int LA408_0 = input.LA(1);
					if ( (LA408_0==REF_VK) ) {
						alt408=1;
					}
					switch (alt408) {
						case 1 :
							// PLSQLPrinter.g:2149:35: REF_VK
							{
							REF_VK382=(CommonTree)match(input,REF_VK,FOLLOW_REF_VK_in_type_spec21060); 
							}
							break;

					}

					// PLSQLPrinter.g:2149:43: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )?
					int alt409=3;
					int LA409_0 = input.LA(1);
					if ( (LA409_0==PERCENT_ROWTYPE_VK) ) {
						alt409=1;
					}
					else if ( (LA409_0==PERCENT_TYPE_VK) ) {
						alt409=2;
					}
					switch (alt409) {
						case 1 :
							// PLSQLPrinter.g:2149:44: PERCENT_ROWTYPE_VK
							{
							PERCENT_ROWTYPE_VK383=(CommonTree)match(input,PERCENT_ROWTYPE_VK,FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec21064); 
							}
							break;
						case 2 :
							// PLSQLPrinter.g:2149:63: PERCENT_TYPE_VK
							{
							PERCENT_TYPE_VK384=(CommonTree)match(input,PERCENT_TYPE_VK,FOLLOW_PERCENT_TYPE_VK_in_type_spec21066); 
							}
							break;

					}

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2150:5: -> typespec_custom(name=$type_name.stis_ref=$REF_VK != nullis_percent_rowtype=$PERCENT_ROWTYPE_VK != nullis_percent_type=$PERCENT_TYPE_VK != null)
					{
						retval.st = templateLib.getInstanceOf("typespec_custom",new STAttrMap().put("name", (type_name381!=null?((StringTemplate)type_name381.getTemplate()):null)).put("is_ref", REF_VK382 != null).put("is_percent_rowtype", PERCENT_ROWTYPE_VK383 != null).put("is_percent_type", PERCENT_TYPE_VK384 != null));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2153:10: native_datatype_spec
					{
					pushFollow(FOLLOW_native_datatype_spec_in_type_spec21135);
					native_datatype_spec385=native_datatype_spec();
					state._fsp--;

					// TEMPLATE REWRITE
					// 2153:31: -> { $native_datatype_spec.st; }
					{
						retval.st =  (native_datatype_spec385!=null?((StringTemplate)native_datatype_spec385.getTemplate()):null); ;
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2154:10: ^( INTERVAL_DATATYPE interval_type_spec_first interval_type_spec_second )
					{
					match(input,INTERVAL_DATATYPE,FOLLOW_INTERVAL_DATATYPE_in_type_spec21151); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_interval_type_spec_first_in_type_spec21153);
					interval_type_spec_first386=interval_type_spec_first();
					state._fsp--;

					pushFollow(FOLLOW_interval_type_spec_second_in_type_spec21155);
					interval_type_spec_second387=interval_type_spec_second();
					state._fsp--;

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2155:5: -> interval_type_spec(left_side=$interval_type_spec_first.stright_side=$interval_type_spec_second.st)
					{
						retval.st = templateLib.getInstanceOf("interval_type_spec",new STAttrMap().put("left_side", (interval_type_spec_first386!=null?((StringTemplate)interval_type_spec_first386.getTemplate()):null)).put("right_side", (interval_type_spec_second387!=null?((StringTemplate)interval_type_spec_second387.getTemplate()):null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_spec"


	public static class interval_type_spec_first_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "interval_type_spec_first"
	// PLSQLPrinter.g:2158:1: interval_type_spec_first : ^( ( YEAR_VK | DAY_VK ) ( expression )? ) -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st);
	public final PLSQLPrinter.interval_type_spec_first_return interval_type_spec_first() throws RecognitionException {
		PLSQLPrinter.interval_type_spec_first_return retval = new PLSQLPrinter.interval_type_spec_first_return();
		retval.start = input.LT(1);

		CommonTree YEAR_VK388=null;
		CommonTree DAY_VK389=null;
		TreeRuleReturnScope expression390 =null;

		try {
			// PLSQLPrinter.g:2159:5: ( ^( ( YEAR_VK | DAY_VK ) ( expression )? ) -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st))
			// PLSQLPrinter.g:2159:9: ^( ( YEAR_VK | DAY_VK ) ( expression )? )
			{
			// PLSQLPrinter.g:2160:11: ( YEAR_VK | DAY_VK )
			int alt411=2;
			int LA411_0 = input.LA(1);
			if ( (LA411_0==YEAR_VK) ) {
				alt411=1;
			}
			else if ( (LA411_0==DAY_VK) ) {
				alt411=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 411, 0, input);
				throw nvae;
			}

			switch (alt411) {
				case 1 :
					// PLSQLPrinter.g:2160:12: YEAR_VK
					{
					YEAR_VK388=(CommonTree)match(input,YEAR_VK,FOLLOW_YEAR_VK_in_interval_type_spec_first21208); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2160:20: DAY_VK
					{
					DAY_VK389=(CommonTree)match(input,DAY_VK,FOLLOW_DAY_VK_in_interval_type_spec_first21210); 
					}
					break;

			}

			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2161:11: ( expression )?
				int alt412=2;
				int LA412_0 = input.LA(1);
				if ( (LA412_0==EXPR||LA412_0==LOGIC_EXPR) ) {
					alt412=1;
				}
				switch (alt412) {
					case 1 :
						// PLSQLPrinter.g:2161:11: expression
						{
						pushFollow(FOLLOW_expression_in_interval_type_spec_first21223);
						expression390=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2163:9: -> interval_type_spec_first(is_year=$YEAR_VK != nullis_day=$DAY_VK != nullexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("interval_type_spec_first",new STAttrMap().put("is_year", YEAR_VK388 != null).put("is_day", DAY_VK389 != null).put("expression", (expression390!=null?((StringTemplate)expression390.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_type_spec_first"


	public static class interval_type_spec_second_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "interval_type_spec_second"
	// PLSQLPrinter.g:2166:1: interval_type_spec_second : ^( ( MONTH_VK | SECOND_VK ) ( expression )? ) -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st);
	public final PLSQLPrinter.interval_type_spec_second_return interval_type_spec_second() throws RecognitionException {
		PLSQLPrinter.interval_type_spec_second_return retval = new PLSQLPrinter.interval_type_spec_second_return();
		retval.start = input.LT(1);

		CommonTree MONTH_VK391=null;
		CommonTree SECOND_VK392=null;
		TreeRuleReturnScope expression393 =null;

		try {
			// PLSQLPrinter.g:2167:5: ( ^( ( MONTH_VK | SECOND_VK ) ( expression )? ) -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st))
			// PLSQLPrinter.g:2167:9: ^( ( MONTH_VK | SECOND_VK ) ( expression )? )
			{
			// PLSQLPrinter.g:2168:11: ( MONTH_VK | SECOND_VK )
			int alt413=2;
			int LA413_0 = input.LA(1);
			if ( (LA413_0==MONTH_VK) ) {
				alt413=1;
			}
			else if ( (LA413_0==SECOND_VK) ) {
				alt413=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 413, 0, input);
				throw nvae;
			}

			switch (alt413) {
				case 1 :
					// PLSQLPrinter.g:2168:12: MONTH_VK
					{
					MONTH_VK391=(CommonTree)match(input,MONTH_VK,FOLLOW_MONTH_VK_in_interval_type_spec_second21293); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2168:21: SECOND_VK
					{
					SECOND_VK392=(CommonTree)match(input,SECOND_VK,FOLLOW_SECOND_VK_in_interval_type_spec_second21295); 
					}
					break;

			}

			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// PLSQLPrinter.g:2169:11: ( expression )?
				int alt414=2;
				int LA414_0 = input.LA(1);
				if ( (LA414_0==EXPR||LA414_0==LOGIC_EXPR) ) {
					alt414=1;
				}
				switch (alt414) {
					case 1 :
						// PLSQLPrinter.g:2169:11: expression
						{
						pushFollow(FOLLOW_expression_in_interval_type_spec_second21308);
						expression393=expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			// TEMPLATE REWRITE
			// 2171:9: -> interval_type_spec_second(is_month=$MONTH_VK != nullis_second=$SECOND_VK != nullexpression=$expression.st)
			{
				retval.st = templateLib.getInstanceOf("interval_type_spec_second",new STAttrMap().put("is_month", MONTH_VK391 != null).put("is_second", SECOND_VK392 != null).put("expression", (expression393!=null?((StringTemplate)expression393.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "interval_type_spec_second"


	public static class type_precision_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "type_precision"
	// PLSQLPrinter.g:2174:1: type_precision : ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null);
	public final PLSQLPrinter.type_precision_return type_precision() throws RecognitionException {
		PLSQLPrinter.type_precision_return retval = new PLSQLPrinter.type_precision_return();
		retval.start = input.LT(1);

		CommonTree precision_char=null;
		CommonTree precision_byte=null;
		TreeRuleReturnScope size1 =null;
		TreeRuleReturnScope size2 =null;

		try {
			// PLSQLPrinter.g:2175:5: ( ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? ) -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null))
			// PLSQLPrinter.g:2175:10: ^( PRECISION size1= constant (size2= constant )? (precision_char= CHAR_VK |precision_byte= BYTE_VK )? )
			{
			match(input,PRECISION,FOLLOW_PRECISION_in_type_precision21367); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_constant_in_type_precision21371);
			size1=constant();
			state._fsp--;

			// PLSQLPrinter.g:2175:42: (size2= constant )?
			int alt415=2;
			int LA415_0 = input.LA(1);
			if ( (LA415_0==APPROXIMATE_NUM_LIT||LA415_0==CHAR_STRING||LA415_0==EXACT_NUM_LIT||LA415_0==SQL92_RESERVED_DEFAULT||LA415_0==SQL92_RESERVED_FALSE||LA415_0==SQL92_RESERVED_NULL||LA415_0==SQL92_RESERVED_TRUE||LA415_0==UNSIGNED_INTEGER||LA415_0==CONSTANT_NEGATED||LA415_0==DBTIMEZONE_VK||LA415_0==MAXVALUE_VK||LA415_0==MINVALUE_VK||LA415_0==SESSIONTIMEZONE_VK||LA415_0==PGSQL_TYPED_LITERAL) ) {
				alt415=1;
			}
			switch (alt415) {
				case 1 :
					// PLSQLPrinter.g:2175:42: size2= constant
					{
					pushFollow(FOLLOW_constant_in_type_precision21375);
					size2=constant();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2175:53: (precision_char= CHAR_VK |precision_byte= BYTE_VK )?
			int alt416=3;
			int LA416_0 = input.LA(1);
			if ( (LA416_0==CHAR_VK) ) {
				alt416=1;
			}
			else if ( (LA416_0==BYTE_VK) ) {
				alt416=2;
			}
			switch (alt416) {
				case 1 :
					// PLSQLPrinter.g:2175:54: precision_char= CHAR_VK
					{
					precision_char=(CommonTree)match(input,CHAR_VK,FOLLOW_CHAR_VK_in_type_precision21381); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2175:77: precision_byte= BYTE_VK
					{
					precision_byte=(CommonTree)match(input,BYTE_VK,FOLLOW_BYTE_VK_in_type_precision21385); 
					}
					break;

			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2176:5: -> base_type_spec_precision(size1=$size1.stsize2=$size2.stis_byte=$precision_byte != nullis_char=$precision_char != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec_precision",new STAttrMap().put("size1", (size1!=null?((StringTemplate)size1.getTemplate()):null)).put("size2", (size2!=null?((StringTemplate)size2.getTemplate()):null)).put("is_byte", precision_byte != null).put("is_char", precision_char != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_precision"


	public static class native_datatype_spec_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "native_datatype_spec"
	// PLSQLPrinter.g:2181:1: native_datatype_spec : ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_RAW | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK | PGSQL_TEXT | PGSQL_NATIVE_DATATYPE_INTERVAL | PGSQL_BIGINT ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null);
	public final PLSQLPrinter.native_datatype_spec_return native_datatype_spec() throws RecognitionException {
		PLSQLPrinter.native_datatype_spec_return retval = new PLSQLPrinter.native_datatype_spec_return();
		retval.start = input.LT(1);

		CommonTree is_tz=null;
		CommonTree is_tz_local=null;
		TreeRuleReturnScope prec =null;

		 StringTemplate typeBaseName = null; 
		try {
			// PLSQLPrinter.g:2183:5: ( ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_RAW | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK | PGSQL_TEXT | PGSQL_NATIVE_DATATYPE_INTERVAL | PGSQL_BIGINT ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? ) -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null))
			// PLSQLPrinter.g:2183:10: ^( NATIVE_DATATYPE ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_RAW | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK | PGSQL_TEXT | PGSQL_NATIVE_DATATYPE_INTERVAL | PGSQL_BIGINT ) (prec= type_precision )? (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )? )
			{
			match(input,NATIVE_DATATYPE,FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec21448); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2184:5: ( BFILE_VK | BINARY_FLOAT_VK | BINARY_INTEGER_VK | BLOB_VK | BOOLEAN_VK | CHARACTER_VK | CHAR_VK | CLOB_VK | SQL92_RESERVED_DATE | DAY_VK | DECIMAL_VK | DEC_VK | DOUBLE_VK | DSINTERVAL_UNCONSTRAINED_VK | FLOAT_VK | HOUR_VK | INTEGER_VK | INT_VK | LONG_VK | LONG_RAW | MINUTE_VK | MLSLABEL_VK | MONTH_VK | NATURALN_VK | NATURAL_VK | NCHAR_VK | NCLOB_VK | NUMBER_VK | NUMERIC_VK | NVARCHAR2_VK | PLS_INTEGER_VK | POSITIVEN_VK | POSITIVE_VK | RAW_VK | REAL_VK | ROWID_VK | SECOND_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | SMALLINT_VK | STRING_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_VK | TIMEZONE_ABBR_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | UROWID_VK | VARCHAR2_VK | VARCHAR_VK | YEAR_VK | YMINTERVAL_UNCONSTRAINED_VK | PGSQL_TEXT | PGSQL_NATIVE_DATATYPE_INTERVAL | PGSQL_BIGINT )
			int alt417=57;
			switch ( input.LA(1) ) {
			case BFILE_VK:
				{
				alt417=1;
				}
				break;
			case BINARY_FLOAT_VK:
				{
				alt417=2;
				}
				break;
			case BINARY_INTEGER_VK:
				{
				alt417=3;
				}
				break;
			case BLOB_VK:
				{
				alt417=4;
				}
				break;
			case BOOLEAN_VK:
				{
				alt417=5;
				}
				break;
			case CHARACTER_VK:
				{
				alt417=6;
				}
				break;
			case CHAR_VK:
				{
				alt417=7;
				}
				break;
			case CLOB_VK:
				{
				alt417=8;
				}
				break;
			case SQL92_RESERVED_DATE:
				{
				alt417=9;
				}
				break;
			case DAY_VK:
				{
				alt417=10;
				}
				break;
			case DECIMAL_VK:
				{
				alt417=11;
				}
				break;
			case DEC_VK:
				{
				alt417=12;
				}
				break;
			case DOUBLE_VK:
				{
				alt417=13;
				}
				break;
			case DSINTERVAL_UNCONSTRAINED_VK:
				{
				alt417=14;
				}
				break;
			case FLOAT_VK:
				{
				alt417=15;
				}
				break;
			case HOUR_VK:
				{
				alt417=16;
				}
				break;
			case INTEGER_VK:
				{
				alt417=17;
				}
				break;
			case INT_VK:
				{
				alt417=18;
				}
				break;
			case LONG_VK:
				{
				alt417=19;
				}
				break;
			case LONG_RAW:
				{
				alt417=20;
				}
				break;
			case MINUTE_VK:
				{
				alt417=21;
				}
				break;
			case MLSLABEL_VK:
				{
				alt417=22;
				}
				break;
			case MONTH_VK:
				{
				alt417=23;
				}
				break;
			case NATURALN_VK:
				{
				alt417=24;
				}
				break;
			case NATURAL_VK:
				{
				alt417=25;
				}
				break;
			case NCHAR_VK:
				{
				alt417=26;
				}
				break;
			case NCLOB_VK:
				{
				alt417=27;
				}
				break;
			case NUMBER_VK:
				{
				alt417=28;
				}
				break;
			case NUMERIC_VK:
				{
				alt417=29;
				}
				break;
			case NVARCHAR2_VK:
				{
				alt417=30;
				}
				break;
			case PLS_INTEGER_VK:
				{
				alt417=31;
				}
				break;
			case POSITIVEN_VK:
				{
				alt417=32;
				}
				break;
			case POSITIVE_VK:
				{
				alt417=33;
				}
				break;
			case RAW_VK:
				{
				alt417=34;
				}
				break;
			case REAL_VK:
				{
				alt417=35;
				}
				break;
			case ROWID_VK:
				{
				alt417=36;
				}
				break;
			case SECOND_VK:
				{
				alt417=37;
				}
				break;
			case SIGNTYPE_VK:
				{
				alt417=38;
				}
				break;
			case SIMPLE_INTEGER_VK:
				{
				alt417=39;
				}
				break;
			case SMALLINT_VK:
				{
				alt417=40;
				}
				break;
			case STRING_VK:
				{
				alt417=41;
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED_VK:
				{
				alt417=42;
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED_VK:
				{
				alt417=43;
				}
				break;
			case TIMESTAMP_UNCONSTRAINED_VK:
				{
				alt417=44;
				}
				break;
			case TIMESTAMP_VK:
				{
				alt417=45;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt417=46;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt417=47;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt417=48;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt417=49;
				}
				break;
			case UROWID_VK:
				{
				alt417=50;
				}
				break;
			case VARCHAR2_VK:
				{
				alt417=51;
				}
				break;
			case VARCHAR_VK:
				{
				alt417=52;
				}
				break;
			case YEAR_VK:
				{
				alt417=53;
				}
				break;
			case YMINTERVAL_UNCONSTRAINED_VK:
				{
				alt417=54;
				}
				break;
			case PGSQL_TEXT:
				{
				alt417=55;
				}
				break;
			case PGSQL_NATIVE_DATATYPE_INTERVAL:
				{
				alt417=56;
				}
				break;
			case PGSQL_BIGINT:
				{
				alt417=57;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 417, 0, input);
				throw nvae;
			}
			switch (alt417) {
				case 1 :
					// PLSQLPrinter.g:2184:10: BFILE_VK
					{
					match(input,BFILE_VK,FOLLOW_BFILE_VK_in_native_datatype_spec21459); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_bfile"); 
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2185:10: BINARY_FLOAT_VK
					{
					match(input,BINARY_FLOAT_VK,FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec21472); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_binary_float"); 
					}
					break;
				case 3 :
					// PLSQLPrinter.g:2186:10: BINARY_INTEGER_VK
					{
					match(input,BINARY_INTEGER_VK,FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec21485); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_binary_integer"); 
					}
					break;
				case 4 :
					// PLSQLPrinter.g:2187:10: BLOB_VK
					{
					match(input,BLOB_VK,FOLLOW_BLOB_VK_in_native_datatype_spec21498); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_blob"); 
					}
					break;
				case 5 :
					// PLSQLPrinter.g:2188:10: BOOLEAN_VK
					{
					match(input,BOOLEAN_VK,FOLLOW_BOOLEAN_VK_in_native_datatype_spec21511); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_boolean"); 
					}
					break;
				case 6 :
					// PLSQLPrinter.g:2189:10: CHARACTER_VK
					{
					match(input,CHARACTER_VK,FOLLOW_CHARACTER_VK_in_native_datatype_spec21524); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_character"); 
					}
					break;
				case 7 :
					// PLSQLPrinter.g:2190:10: CHAR_VK
					{
					match(input,CHAR_VK,FOLLOW_CHAR_VK_in_native_datatype_spec21538); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_char"); 
					}
					break;
				case 8 :
					// PLSQLPrinter.g:2191:10: CLOB_VK
					{
					match(input,CLOB_VK,FOLLOW_CLOB_VK_in_native_datatype_spec21551); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_clob"); 
					}
					break;
				case 9 :
					// PLSQLPrinter.g:2192:10: SQL92_RESERVED_DATE
					{
					match(input,SQL92_RESERVED_DATE,FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec21564); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_date"); 
					}
					break;
				case 10 :
					// PLSQLPrinter.g:2193:10: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_native_datatype_spec21577); 
					}
					break;
				case 11 :
					// PLSQLPrinter.g:2194:10: DECIMAL_VK
					{
					match(input,DECIMAL_VK,FOLLOW_DECIMAL_VK_in_native_datatype_spec21588); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_decimal"); 
					}
					break;
				case 12 :
					// PLSQLPrinter.g:2195:10: DEC_VK
					{
					match(input,DEC_VK,FOLLOW_DEC_VK_in_native_datatype_spec21602); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_dec"); 
					}
					break;
				case 13 :
					// PLSQLPrinter.g:2196:10: DOUBLE_VK
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_spec21615); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_double"); 
					}
					break;
				case 14 :
					// PLSQLPrinter.g:2197:10: DSINTERVAL_UNCONSTRAINED_VK
					{
					match(input,DSINTERVAL_UNCONSTRAINED_VK,FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec21628); 
					}
					break;
				case 15 :
					// PLSQLPrinter.g:2198:10: FLOAT_VK
					{
					match(input,FLOAT_VK,FOLLOW_FLOAT_VK_in_native_datatype_spec21639); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_float"); 
					}
					break;
				case 16 :
					// PLSQLPrinter.g:2199:10: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_native_datatype_spec21652); 
					}
					break;
				case 17 :
					// PLSQLPrinter.g:2200:10: INTEGER_VK
					{
					match(input,INTEGER_VK,FOLLOW_INTEGER_VK_in_native_datatype_spec21663); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_integer"); 
					}
					break;
				case 18 :
					// PLSQLPrinter.g:2201:10: INT_VK
					{
					match(input,INT_VK,FOLLOW_INT_VK_in_native_datatype_spec21676); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_int"); 
					}
					break;
				case 19 :
					// PLSQLPrinter.g:2202:10: LONG_VK
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_spec21689); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_long"); 
					}
					break;
				case 20 :
					// PLSQLPrinter.g:2203:10: LONG_RAW
					{
					match(input,LONG_RAW,FOLLOW_LONG_RAW_in_native_datatype_spec21702); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_long_raw"); 
					}
					break;
				case 21 :
					// PLSQLPrinter.g:2204:10: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_native_datatype_spec21715); 
					}
					break;
				case 22 :
					// PLSQLPrinter.g:2205:10: MLSLABEL_VK
					{
					match(input,MLSLABEL_VK,FOLLOW_MLSLABEL_VK_in_native_datatype_spec21726); 
					}
					break;
				case 23 :
					// PLSQLPrinter.g:2206:10: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_native_datatype_spec21737); 
					}
					break;
				case 24 :
					// PLSQLPrinter.g:2207:10: NATURALN_VK
					{
					match(input,NATURALN_VK,FOLLOW_NATURALN_VK_in_native_datatype_spec21748); 
					}
					break;
				case 25 :
					// PLSQLPrinter.g:2208:10: NATURAL_VK
					{
					match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_native_datatype_spec21759); 
					}
					break;
				case 26 :
					// PLSQLPrinter.g:2209:10: NCHAR_VK
					{
					match(input,NCHAR_VK,FOLLOW_NCHAR_VK_in_native_datatype_spec21770); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_nchar"); 
					}
					break;
				case 27 :
					// PLSQLPrinter.g:2210:10: NCLOB_VK
					{
					match(input,NCLOB_VK,FOLLOW_NCLOB_VK_in_native_datatype_spec21783); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_nclob"); 
					}
					break;
				case 28 :
					// PLSQLPrinter.g:2211:10: NUMBER_VK
					{
					match(input,NUMBER_VK,FOLLOW_NUMBER_VK_in_native_datatype_spec21796); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_number"); 
					}
					break;
				case 29 :
					// PLSQLPrinter.g:2212:10: NUMERIC_VK
					{
					match(input,NUMERIC_VK,FOLLOW_NUMERIC_VK_in_native_datatype_spec21809); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_numeric"); 
					}
					break;
				case 30 :
					// PLSQLPrinter.g:2213:10: NVARCHAR2_VK
					{
					match(input,NVARCHAR2_VK,FOLLOW_NVARCHAR2_VK_in_native_datatype_spec21822); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_nvarchar2"); 
					}
					break;
				case 31 :
					// PLSQLPrinter.g:2214:10: PLS_INTEGER_VK
					{
					match(input,PLS_INTEGER_VK,FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec21835); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_pls_integer"); 
					}
					break;
				case 32 :
					// PLSQLPrinter.g:2215:10: POSITIVEN_VK
					{
					match(input,POSITIVEN_VK,FOLLOW_POSITIVEN_VK_in_native_datatype_spec21848); 
					}
					break;
				case 33 :
					// PLSQLPrinter.g:2216:10: POSITIVE_VK
					{
					match(input,POSITIVE_VK,FOLLOW_POSITIVE_VK_in_native_datatype_spec21859); 
					}
					break;
				case 34 :
					// PLSQLPrinter.g:2217:10: RAW_VK
					{
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_spec21870); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_raw"); 
					}
					break;
				case 35 :
					// PLSQLPrinter.g:2218:10: REAL_VK
					{
					match(input,REAL_VK,FOLLOW_REAL_VK_in_native_datatype_spec21883); 
					}
					break;
				case 36 :
					// PLSQLPrinter.g:2219:10: ROWID_VK
					{
					match(input,ROWID_VK,FOLLOW_ROWID_VK_in_native_datatype_spec21894); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_rowid"); 
					}
					break;
				case 37 :
					// PLSQLPrinter.g:2220:10: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_native_datatype_spec21907); 
					}
					break;
				case 38 :
					// PLSQLPrinter.g:2221:10: SIGNTYPE_VK
					{
					match(input,SIGNTYPE_VK,FOLLOW_SIGNTYPE_VK_in_native_datatype_spec21918); 
					}
					break;
				case 39 :
					// PLSQLPrinter.g:2222:10: SIMPLE_INTEGER_VK
					{
					match(input,SIMPLE_INTEGER_VK,FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec21929); 
					}
					break;
				case 40 :
					// PLSQLPrinter.g:2223:10: SMALLINT_VK
					{
					match(input,SMALLINT_VK,FOLLOW_SMALLINT_VK_in_native_datatype_spec21940); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_smallint"); 
					}
					break;
				case 41 :
					// PLSQLPrinter.g:2224:10: STRING_VK
					{
					match(input,STRING_VK,FOLLOW_STRING_VK_in_native_datatype_spec21953); 
					}
					break;
				case 42 :
					// PLSQLPrinter.g:2225:10: TIMESTAMP_LTZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_LTZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec21964); 
					}
					break;
				case 43 :
					// PLSQLPrinter.g:2226:10: TIMESTAMP_TZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_TZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec21975); 
					}
					break;
				case 44 :
					// PLSQLPrinter.g:2227:10: TIMESTAMP_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec21986); 
					}
					break;
				case 45 :
					// PLSQLPrinter.g:2228:10: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_native_datatype_spec21997); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_timestamp"); 
					}
					break;
				case 46 :
					// PLSQLPrinter.g:2229:10: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec22010); 
					}
					break;
				case 47 :
					// PLSQLPrinter.g:2230:10: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec22021); 
					}
					break;
				case 48 :
					// PLSQLPrinter.g:2231:10: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec22032); 
					}
					break;
				case 49 :
					// PLSQLPrinter.g:2232:10: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec22043); 
					}
					break;
				case 50 :
					// PLSQLPrinter.g:2233:10: UROWID_VK
					{
					match(input,UROWID_VK,FOLLOW_UROWID_VK_in_native_datatype_spec22054); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_urowid"); 
					}
					break;
				case 51 :
					// PLSQLPrinter.g:2234:10: VARCHAR2_VK
					{
					match(input,VARCHAR2_VK,FOLLOW_VARCHAR2_VK_in_native_datatype_spec22067); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_varchar2"); 
					}
					break;
				case 52 :
					// PLSQLPrinter.g:2235:10: VARCHAR_VK
					{
					match(input,VARCHAR_VK,FOLLOW_VARCHAR_VK_in_native_datatype_spec22080); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_varchar"); 
					}
					break;
				case 53 :
					// PLSQLPrinter.g:2236:10: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_native_datatype_spec22093); 
					}
					break;
				case 54 :
					// PLSQLPrinter.g:2237:10: YMINTERVAL_UNCONSTRAINED_VK
					{
					match(input,YMINTERVAL_UNCONSTRAINED_VK,FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec22104); 
					}
					break;
				case 55 :
					// PLSQLPrinter.g:2238:10: PGSQL_TEXT
					{
					match(input,PGSQL_TEXT,FOLLOW_PGSQL_TEXT_in_native_datatype_spec22115); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_text"); 
					}
					break;
				case 56 :
					// PLSQLPrinter.g:2239:10: PGSQL_NATIVE_DATATYPE_INTERVAL
					{
					match(input,PGSQL_NATIVE_DATATYPE_INTERVAL,FOLLOW_PGSQL_NATIVE_DATATYPE_INTERVAL_in_native_datatype_spec22128); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_interval"); 
					}
					break;
				case 57 :
					// PLSQLPrinter.g:2240:10: PGSQL_BIGINT
					{
					match(input,PGSQL_BIGINT,FOLLOW_PGSQL_BIGINT_in_native_datatype_spec22141); 
					 typeBaseName = templateLib.getInstanceOf("native_datatype_bigint"); 
					}
					break;

			}

			// PLSQLPrinter.g:2241:9: (prec= type_precision )?
			int alt418=2;
			int LA418_0 = input.LA(1);
			if ( (LA418_0==PRECISION) ) {
				alt418=1;
			}
			switch (alt418) {
				case 1 :
					// PLSQLPrinter.g:2241:9: prec= type_precision
					{
					pushFollow(FOLLOW_type_precision_in_native_datatype_spec22152);
					prec=type_precision();
					state._fsp--;

					}
					break;

			}

			// PLSQLPrinter.g:2242:5: (is_tz= TIME_VK (is_tz_local= LOCAL_VK )? )?
			int alt420=2;
			int LA420_0 = input.LA(1);
			if ( (LA420_0==TIME_VK) ) {
				alt420=1;
			}
			switch (alt420) {
				case 1 :
					// PLSQLPrinter.g:2242:6: is_tz= TIME_VK (is_tz_local= LOCAL_VK )?
					{
					is_tz=(CommonTree)match(input,TIME_VK,FOLLOW_TIME_VK_in_native_datatype_spec22162); 
					// PLSQLPrinter.g:2242:31: (is_tz_local= LOCAL_VK )?
					int alt419=2;
					int LA419_0 = input.LA(1);
					if ( (LA419_0==LOCAL_VK) ) {
						alt419=1;
					}
					switch (alt419) {
						case 1 :
							// PLSQLPrinter.g:2242:31: is_tz_local= LOCAL_VK
							{
							is_tz_local=(CommonTree)match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_native_datatype_spec22166); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			 if (typeBaseName == null) { typeBaseName = templateLib.getInstanceOf("native_datatype_unsupported"); } 
			// TEMPLATE REWRITE
			// 2245:5: -> base_type_spec(baseName=typeBaseNameprecision=$prec.stis_with_time_zone=$is_tz != nullis_time_zone_local=$is_tz_local != null)
			{
				retval.st = templateLib.getInstanceOf("base_type_spec",new STAttrMap().put("baseName", typeBaseName).put("precision", (prec!=null?((StringTemplate)prec.getTemplate()):null)).put("is_with_time_zone", is_tz != null).put("is_time_zone_local", is_tz_local != null));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "native_datatype_spec"


	public static class general_element_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element"
	// PLSQLPrinter.g:2251:1: general_element : ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts);
	public final PLSQLPrinter.general_element_return general_element() throws RecognitionException {
		PLSQLPrinter.general_element_return retval = new PLSQLPrinter.general_element_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope general_element_id394 =null;
		TreeRuleReturnScope function_argument395 =null;


		    List<StringTemplate> parts = new ArrayList<StringTemplate>();

		try {
			// PLSQLPrinter.g:2255:5: ( ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ ) -> general_element(parts=parts))
			// PLSQLPrinter.g:2255:10: ^( CASCATED_ELEMENT ( general_element_id | function_argument )+ )
			{
			match(input,CASCATED_ELEMENT,FOLLOW_CASCATED_ELEMENT_in_general_element22241); 
			match(input, Token.DOWN, null); 
			// PLSQLPrinter.g:2256:13: ( general_element_id | function_argument )+
			int cnt421=0;
			loop421:
			while (true) {
				int alt421=3;
				int LA421_0 = input.LA(1);
				if ( (LA421_0==ANY_ELEMENT) ) {
					alt421=1;
				}
				else if ( (LA421_0==ARGUMENTS) ) {
					alt421=2;
				}

				switch (alt421) {
				case 1 :
					// PLSQLPrinter.g:2257:15: general_element_id
					{
					pushFollow(FOLLOW_general_element_id_in_general_element22271);
					general_element_id394=general_element_id();
					state._fsp--;


					                if (parts.size() > 0) {
					                   parts.add(templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", ".")));
					                }
					                parts.add((general_element_id394!=null?((StringTemplate)general_element_id394.getTemplate()):null));
					              
					}
					break;
				case 2 :
					// PLSQLPrinter.g:2263:17: function_argument
					{
					pushFollow(FOLLOW_function_argument_in_general_element22291);
					function_argument395=function_argument();
					state._fsp--;

					 parts.add((function_argument395!=null?((StringTemplate)function_argument395.getTemplate()):null)); 
					}
					break;

				default :
					if ( cnt421 >= 1 ) break loop421;
					EarlyExitException eee = new EarlyExitException(421, input);
					throw eee;
				}
				cnt421++;
			}

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2266:5: -> general_element(parts=parts)
			{
				retval.st = templateLib.getInstanceOf("general_element",new STAttrMap().put("parts", parts));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element"


	public static class general_element_id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "general_element_id"
	// PLSQLPrinter.g:2269:1: general_element_id : ^( ANY_ELEMENT id= commented_id ) -> string_literal(val=$id.st);
	public final PLSQLPrinter.general_element_id_return general_element_id() throws RecognitionException {
		PLSQLPrinter.general_element_id_return retval = new PLSQLPrinter.general_element_id_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope id =null;

		try {
			// PLSQLPrinter.g:2270:5: ( ^( ANY_ELEMENT id= commented_id ) -> string_literal(val=$id.st))
			// PLSQLPrinter.g:2270:7: ^( ANY_ELEMENT id= commented_id )
			{
			match(input,ANY_ELEMENT,FOLLOW_ANY_ELEMENT_in_general_element_id22354); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_commented_id_in_general_element_id22358);
			id=commented_id();
			state._fsp--;

			match(input, Token.UP, null); 

			// TEMPLATE REWRITE
			// 2270:38: -> string_literal(val=$id.st)
			{
				retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (id!=null?((StringTemplate)id.getTemplate()):null)));
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "general_element_id"


	public static class constant_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "constant"
	// PLSQLPrinter.g:2277:1: constant : (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( CONSTANT_NEGATED v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\")| ^( PGSQL_TYPED_LITERAL type_spec CHAR_STRING ) -> pgsql_typed_literal(type=$type_spec.ststring=$CHAR_STRING.text));
	public final PLSQLPrinter.constant_return constant() throws RecognitionException {
		PLSQLPrinter.constant_return retval = new PLSQLPrinter.constant_return();
		retval.start = input.LT(1);

		CommonTree v1=null;
		CommonTree v2=null;
		CommonTree EXACT_NUM_LIT396=null;
		CommonTree APPROXIMATE_NUM_LIT397=null;
		CommonTree CHAR_STRING398=null;
		CommonTree CHAR_STRING400=null;
		TreeRuleReturnScope type_spec399 =null;

		try {
			// PLSQLPrinter.g:2278:5: (v1= UNSIGNED_INTEGER -> string_literal(val=$v1.text)| ^( CONSTANT_NEGATED v2= UNSIGNED_INTEGER ) -> string_literal(val=\"-\" + $v2.text)| EXACT_NUM_LIT -> string_literal(val=$EXACT_NUM_LIT.text)| APPROXIMATE_NUM_LIT -> string_literal(val=$APPROXIMATE_NUM_LIT.text)| CHAR_STRING -> string_literal(val=$CHAR_STRING.text)| SQL92_RESERVED_NULL -> string_literal(val=\"null\")| SQL92_RESERVED_TRUE -> string_literal(val=\"true\")| SQL92_RESERVED_FALSE -> string_literal(val=\"false\")| DBTIMEZONE_VK -> string_literal(val=\"dbtimezone\")| SESSIONTIMEZONE_VK -> string_literal(val=\"sessiontimezone\")| MINVALUE_VK -> string_literal(val=\"minvalue\")| MAXVALUE_VK -> string_literal(val=\"maxvalue\")| SQL92_RESERVED_DEFAULT -> string_literal(val=\"default\")| ^( PGSQL_TYPED_LITERAL type_spec CHAR_STRING ) -> pgsql_typed_literal(type=$type_spec.ststring=$CHAR_STRING.text))
			int alt422=14;
			switch ( input.LA(1) ) {
			case UNSIGNED_INTEGER:
				{
				alt422=1;
				}
				break;
			case CONSTANT_NEGATED:
				{
				alt422=2;
				}
				break;
			case EXACT_NUM_LIT:
				{
				alt422=3;
				}
				break;
			case APPROXIMATE_NUM_LIT:
				{
				alt422=4;
				}
				break;
			case CHAR_STRING:
				{
				alt422=5;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt422=6;
				}
				break;
			case SQL92_RESERVED_TRUE:
				{
				alt422=7;
				}
				break;
			case SQL92_RESERVED_FALSE:
				{
				alt422=8;
				}
				break;
			case DBTIMEZONE_VK:
				{
				alt422=9;
				}
				break;
			case SESSIONTIMEZONE_VK:
				{
				alt422=10;
				}
				break;
			case MINVALUE_VK:
				{
				alt422=11;
				}
				break;
			case MAXVALUE_VK:
				{
				alt422=12;
				}
				break;
			case SQL92_RESERVED_DEFAULT:
				{
				alt422=13;
				}
				break;
			case PGSQL_TYPED_LITERAL:
				{
				alt422=14;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 422, 0, input);
				throw nvae;
			}
			switch (alt422) {
				case 1 :
					// PLSQLPrinter.g:2278:10: v1= UNSIGNED_INTEGER
					{
					v1=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant22394); 
					// TEMPLATE REWRITE
					// 2278:30: -> string_literal(val=$v1.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (v1!=null?v1.getText():null)));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2279:10: ^( CONSTANT_NEGATED v2= UNSIGNED_INTEGER )
					{
					match(input,CONSTANT_NEGATED,FOLLOW_CONSTANT_NEGATED_in_constant22415); 
					match(input, Token.DOWN, null); 
					v2=(CommonTree)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant22419); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2279:50: -> string_literal(val=\"-\" + $v2.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "-" + (v2!=null?v2.getText():null)));
					}



					}
					break;
				case 3 :
					// PLSQLPrinter.g:2280:10: EXACT_NUM_LIT
					{
					EXACT_NUM_LIT396=(CommonTree)match(input,EXACT_NUM_LIT,FOLLOW_EXACT_NUM_LIT_in_constant22440); 
					// TEMPLATE REWRITE
					// 2280:24: -> string_literal(val=$EXACT_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (EXACT_NUM_LIT396!=null?EXACT_NUM_LIT396.getText():null)));
					}



					}
					break;
				case 4 :
					// PLSQLPrinter.g:2281:10: APPROXIMATE_NUM_LIT
					{
					APPROXIMATE_NUM_LIT397=(CommonTree)match(input,APPROXIMATE_NUM_LIT,FOLLOW_APPROXIMATE_NUM_LIT_in_constant22460); 
					// TEMPLATE REWRITE
					// 2281:30: -> string_literal(val=$APPROXIMATE_NUM_LIT.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (APPROXIMATE_NUM_LIT397!=null?APPROXIMATE_NUM_LIT397.getText():null)));
					}



					}
					break;
				case 5 :
					// PLSQLPrinter.g:2282:10: CHAR_STRING
					{
					CHAR_STRING398=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_constant22480); 
					// TEMPLATE REWRITE
					// 2282:22: -> string_literal(val=$CHAR_STRING.text)
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", (CHAR_STRING398!=null?CHAR_STRING398.getText():null)));
					}



					}
					break;
				case 6 :
					// PLSQLPrinter.g:2283:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_constant22500); 
					// TEMPLATE REWRITE
					// 2283:30: -> string_literal(val=\"null\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "null"));
					}



					}
					break;
				case 7 :
					// PLSQLPrinter.g:2284:10: SQL92_RESERVED_TRUE
					{
					match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_constant22520); 
					// TEMPLATE REWRITE
					// 2284:30: -> string_literal(val=\"true\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "true"));
					}



					}
					break;
				case 8 :
					// PLSQLPrinter.g:2285:10: SQL92_RESERVED_FALSE
					{
					match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_constant22540); 
					// TEMPLATE REWRITE
					// 2285:31: -> string_literal(val=\"false\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "false"));
					}



					}
					break;
				case 9 :
					// PLSQLPrinter.g:2286:10: DBTIMEZONE_VK
					{
					match(input,DBTIMEZONE_VK,FOLLOW_DBTIMEZONE_VK_in_constant22560); 
					// TEMPLATE REWRITE
					// 2286:25: -> string_literal(val=\"dbtimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "dbtimezone"));
					}



					}
					break;
				case 10 :
					// PLSQLPrinter.g:2287:10: SESSIONTIMEZONE_VK
					{
					match(input,SESSIONTIMEZONE_VK,FOLLOW_SESSIONTIMEZONE_VK_in_constant22581); 
					// TEMPLATE REWRITE
					// 2287:29: -> string_literal(val=\"sessiontimezone\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "sessiontimezone"));
					}



					}
					break;
				case 11 :
					// PLSQLPrinter.g:2288:10: MINVALUE_VK
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_constant22601); 
					// TEMPLATE REWRITE
					// 2288:22: -> string_literal(val=\"minvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "minvalue"));
					}



					}
					break;
				case 12 :
					// PLSQLPrinter.g:2289:10: MAXVALUE_VK
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_constant22621); 
					// TEMPLATE REWRITE
					// 2289:22: -> string_literal(val=\"maxvalue\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "maxvalue"));
					}



					}
					break;
				case 13 :
					// PLSQLPrinter.g:2290:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_constant22641); 
					// TEMPLATE REWRITE
					// 2290:33: -> string_literal(val=\"default\")
					{
						retval.st = templateLib.getInstanceOf("string_literal",new STAttrMap().put("val", "default"));
					}



					}
					break;
				case 14 :
					// PLSQLPrinter.g:2291:10: ^( PGSQL_TYPED_LITERAL type_spec CHAR_STRING )
					{
					match(input,PGSQL_TYPED_LITERAL,FOLLOW_PGSQL_TYPED_LITERAL_in_constant22662); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_constant22664);
					type_spec399=type_spec();
					state._fsp--;

					CHAR_STRING400=(CommonTree)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_constant22666); 
					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2292:10: -> pgsql_typed_literal(type=$type_spec.ststring=$CHAR_STRING.text)
					{
						retval.st = templateLib.getInstanceOf("pgsql_typed_literal",new STAttrMap().put("type", (type_spec399!=null?((StringTemplate)type_spec399.getTemplate()):null)).put("string", (CHAR_STRING400!=null?CHAR_STRING400.getText():null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constant"


	public static class id_with_charset_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "id_with_charset"
	// PLSQLPrinter.g:2297:1: id_with_charset : ( char_set_name )? commented_id -> {$commented_id.st};
	public final PLSQLPrinter.id_with_charset_return id_with_charset() throws RecognitionException {
		PLSQLPrinter.id_with_charset_return retval = new PLSQLPrinter.id_with_charset_return();
		retval.start = input.LT(1);

		TreeRuleReturnScope commented_id401 =null;

		try {
			// PLSQLPrinter.g:2298:5: ( ( char_set_name )? commented_id -> {$commented_id.st})
			// PLSQLPrinter.g:2298:10: ( char_set_name )? commented_id
			{
			// PLSQLPrinter.g:2298:10: ( char_set_name )?
			int alt423=2;
			int LA423_0 = input.LA(1);
			if ( (LA423_0==CHAR_SET_NAME) ) {
				alt423=1;
			}
			switch (alt423) {
				case 1 :
					// PLSQLPrinter.g:2298:10: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_id_with_charset22716);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_commented_id_in_id_with_charset22719);
			commented_id401=commented_id();
			state._fsp--;

			// TEMPLATE REWRITE
			// 2299:5: -> {$commented_id.st}
			{
				retval.st = (commented_id401!=null?((StringTemplate)commented_id401.getTemplate()):null);
			}



			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "id_with_charset"


	public static class commented_id_return extends TreeRuleReturnScope {
		public StringTemplate st;
		public Object getTemplate() { return st; }
		public String toString() { return st==null?null:st.toString(); }
	};


	// $ANTLR start "commented_id"
	// PLSQLPrinter.g:2302:1: commented_id : (val= ID -> commented_id(val=$val.textcbefore=nullcafter=null)| ^(val= ID ^( COMMENT cbefore= COMMENT cinside= COMMENT cafter= COMMENT ) ) -> commented_id(val=$val.textcbefore=\"\".equals($cbefore.text) ? null : $cbefore.textcafter=\"\".equals($cafter.text) ? null : $cafter.text));
	public final PLSQLPrinter.commented_id_return commented_id() throws RecognitionException {
		PLSQLPrinter.commented_id_return retval = new PLSQLPrinter.commented_id_return();
		retval.start = input.LT(1);

		CommonTree val=null;
		CommonTree cbefore=null;
		CommonTree cinside=null;
		CommonTree cafter=null;

		try {
			// PLSQLPrinter.g:2303:5: (val= ID -> commented_id(val=$val.textcbefore=nullcafter=null)| ^(val= ID ^( COMMENT cbefore= COMMENT cinside= COMMENT cafter= COMMENT ) ) -> commented_id(val=$val.textcbefore=\"\".equals($cbefore.text) ? null : $cbefore.textcafter=\"\".equals($cafter.text) ? null : $cafter.text))
			int alt424=2;
			int LA424_0 = input.LA(1);
			if ( (LA424_0==ID) ) {
				int LA424_1 = input.LA(2);
				if ( (LA424_1==DOWN) ) {
					alt424=2;
				}
				else if ( (LA424_1==EOF||LA424_1==UP||LA424_1==SQL92_RESERVED_CHECK||LA424_1==SQL92_RESERVED_DEFAULT||LA424_1==SQL92_RESERVED_NULL||LA424_1==SQL92_RESERVED_UNIQUE||LA424_1==CUSTOM_TYPE||LA424_1==EXPR||LA424_1==FOREIGN_KEY||LA424_1==ID||LA424_1==INLINE_CONSTRAINT_CLAUSE||LA424_1==INTERVAL_DATATYPE||LA424_1==LINK_NAME||LA424_1==LOGIC_EXPR||LA424_1==NATIVE_DATATYPE||LA424_1==NOT_NULL||LA424_1==ON_DELETE||LA424_1==PARTITION_VK||LA424_1==PRIMARY_KEY||LA424_1==REFERENCES_CLAUSE||LA424_1==SUBPARTITION_VK) ) {
					alt424=1;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 424, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 424, 0, input);
				throw nvae;
			}

			switch (alt424) {
				case 1 :
					// PLSQLPrinter.g:2303:9: val= ID
					{
					val=(CommonTree)match(input,ID,FOLLOW_ID_in_commented_id22750); 
					// TEMPLATE REWRITE
					// 2304:9: -> commented_id(val=$val.textcbefore=nullcafter=null)
					{
						retval.st = templateLib.getInstanceOf("commented_id",new STAttrMap().put("val", (val!=null?val.getText():null)).put("cbefore", null).put("cafter", null));
					}



					}
					break;
				case 2 :
					// PLSQLPrinter.g:2305:9: ^(val= ID ^( COMMENT cbefore= COMMENT cinside= COMMENT cafter= COMMENT ) )
					{
					val=(CommonTree)match(input,ID,FOLLOW_ID_in_commented_id22791); 
					match(input, Token.DOWN, null); 
					match(input,COMMENT,FOLLOW_COMMENT_in_commented_id22794); 
					match(input, Token.DOWN, null); 
					cbefore=(CommonTree)match(input,COMMENT,FOLLOW_COMMENT_in_commented_id22798); 
					cinside=(CommonTree)match(input,COMMENT,FOLLOW_COMMENT_in_commented_id22802); 
					cafter=(CommonTree)match(input,COMMENT,FOLLOW_COMMENT_in_commented_id22806); 
					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					// TEMPLATE REWRITE
					// 2306:9: -> commented_id(val=$val.textcbefore=\"\".equals($cbefore.text) ? null : $cbefore.textcafter=\"\".equals($cafter.text) ? null : $cafter.text)
					{
						retval.st = templateLib.getInstanceOf("commented_id",new STAttrMap().put("val", (val!=null?val.getText():null)).put("cbefore", "".equals((cbefore!=null?cbefore.getText():null)) ? null : (cbefore!=null?cbefore.getText():null)).put("cafter", "".equals((cafter!=null?cafter.getText():null)) ? null : (cafter!=null?cafter.getText():null)));
					}



					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commented_id"

	// Delegated rules
	public PLSQLPrinter_PLSQLPrinter_DDL.subprog_decl_in_type_return subprog_decl_in_type() throws RecognitionException { return gPLSQLPrinter_DDL.subprog_decl_in_type(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.constructor_declaration_return constructor_declaration() throws RecognitionException { return gPLSQLPrinter_DDL.constructor_declaration(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.sqlj_object_type_attr_return sqlj_object_type_attr() throws RecognitionException { return gPLSQLPrinter_DDL.sqlj_object_type_attr(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.drop_type_return drop_type() throws RecognitionException { return gPLSQLPrinter_DDL.drop_type(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.sequence_spec_return sequence_spec() throws RecognitionException { return gPLSQLPrinter_DDL.sequence_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.type_body_elements_return type_body_elements() throws RecognitionException { return gPLSQLPrinter_DDL.type_body_elements(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.compiler_parameters_clause_return compiler_parameters_clause() throws RecognitionException { return gPLSQLPrinter_DDL.compiler_parameters_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.dependent_exceptions_part_return dependent_exceptions_part() throws RecognitionException { return gPLSQLPrinter_DDL.dependent_exceptions_part(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.function_spec_return function_spec() throws RecognitionException { return gPLSQLPrinter_DDL.function_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.sqlj_object_type_return sqlj_object_type() throws RecognitionException { return gPLSQLPrinter_DDL.sqlj_object_type(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.map_order_function_spec_return map_order_function_spec() throws RecognitionException { return gPLSQLPrinter_DDL.map_order_function_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.inline_constraint_def_return inline_constraint_def() throws RecognitionException { return gPLSQLPrinter_DDL.inline_constraint_def(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.out_of_line_constraint_def_foreign_key_return out_of_line_constraint_def_foreign_key() throws RecognitionException { return gPLSQLPrinter_DDL.out_of_line_constraint_def_foreign_key(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.referencing_element_return referencing_element() throws RecognitionException { return gPLSQLPrinter_DDL.referencing_element(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.package_obj_body_return package_obj_body() throws RecognitionException { return gPLSQLPrinter_DDL.package_obj_body(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.parallel_enable_clause_return parallel_enable_clause() throws RecognitionException { return gPLSQLPrinter_DDL.parallel_enable_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.type_body_elements_list_return type_body_elements_list() throws RecognitionException { return gPLSQLPrinter_DDL.type_body_elements_list(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.inline_constraint_clause_return inline_constraint_clause() throws RecognitionException { return gPLSQLPrinter_DDL.inline_constraint_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.default_value_part_return default_value_part() throws RecognitionException { return gPLSQLPrinter_DDL.default_value_part(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.java_spec_return java_spec() throws RecognitionException { return gPLSQLPrinter_DDL.java_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.view_type_constraints_clause_return view_type_constraints_clause() throws RecognitionException { return gPLSQLPrinter_DDL.view_type_constraints_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.dml_event_clause_return dml_event_clause() throws RecognitionException { return gPLSQLPrinter_DDL.dml_event_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.trigger_when_clause_return trigger_when_clause() throws RecognitionException { return gPLSQLPrinter_DDL.trigger_when_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.constraint_state_item_return constraint_state_item() throws RecognitionException { return gPLSQLPrinter_DDL.constraint_state_item(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.dml_event_element_return dml_event_element() throws RecognitionException { return gPLSQLPrinter_DDL.dml_event_element(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_view_return create_view() throws RecognitionException { return gPLSQLPrinter_DDL.create_view(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.pragma_elements_return pragma_elements() throws RecognitionException { return gPLSQLPrinter_DDL.pragma_elements(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.c_agent_in_clause_return c_agent_in_clause() throws RecognitionException { return gPLSQLPrinter_DDL.c_agent_in_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.drop_procedure_return drop_procedure() throws RecognitionException { return gPLSQLPrinter_DDL.drop_procedure(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.drop_sequence_return drop_sequence() throws RecognitionException { return gPLSQLPrinter_DDL.drop_sequence(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.using_index_def_return using_index_def() throws RecognitionException { return gPLSQLPrinter_DDL.using_index_def(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.references_on_delete_clause_return references_on_delete_clause() throws RecognitionException { return gPLSQLPrinter_DDL.references_on_delete_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.drop_trigger_return drop_trigger() throws RecognitionException { return gPLSQLPrinter_DDL.drop_trigger(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_trigger_return create_trigger() throws RecognitionException { return gPLSQLPrinter_DDL.create_trigger(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.drop_function_return drop_function() throws RecognitionException { return gPLSQLPrinter_DDL.drop_function(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.alter_collection_clauses_return alter_collection_clauses() throws RecognitionException { return gPLSQLPrinter_DDL.alter_collection_clauses(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_function_body_return create_function_body() throws RecognitionException { return gPLSQLPrinter_DDL.create_function_body(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.element_spec_options_return element_spec_options() throws RecognitionException { return gPLSQLPrinter_DDL.element_spec_options(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.checks_clause_return checks_clause() throws RecognitionException { return gPLSQLPrinter_DDL.checks_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.streaming_clause_return streaming_clause() throws RecognitionException { return gPLSQLPrinter_DDL.streaming_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.alter_package_return alter_package() throws RecognitionException { return gPLSQLPrinter_DDL.alter_package(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.exceptions_clause_return exceptions_clause() throws RecognitionException { return gPLSQLPrinter_DDL.exceptions_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.view_type_clause_return view_type_clause() throws RecognitionException { return gPLSQLPrinter_DDL.view_type_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_type_return create_type() throws RecognitionException { return gPLSQLPrinter_DDL.create_type(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.partition_by_clause_return partition_by_clause() throws RecognitionException { return gPLSQLPrinter_DDL.partition_by_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.object_under_part_return object_under_part() throws RecognitionException { return gPLSQLPrinter_DDL.object_under_part(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.trigger_body_return trigger_body() throws RecognitionException { return gPLSQLPrinter_DDL.trigger_body(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.element_spec_return element_spec() throws RecognitionException { return gPLSQLPrinter_DDL.element_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.invoker_rights_clause_return invoker_rights_clause() throws RecognitionException { return gPLSQLPrinter_DDL.invoker_rights_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.c_parameters_clause_return c_parameters_clause() throws RecognitionException { return gPLSQLPrinter_DDL.c_parameters_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.inline_constraint_not_null_return inline_constraint_not_null() throws RecognitionException { return gPLSQLPrinter_DDL.inline_constraint_not_null(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.timing_point_section_return timing_point_section() throws RecognitionException { return gPLSQLPrinter_DDL.timing_point_section(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.parameter_return parameter() throws RecognitionException { return gPLSQLPrinter_DDL.parameter(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.alter_trigger_return alter_trigger() throws RecognitionException { return gPLSQLPrinter_DDL.alter_trigger(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.alter_sequence_return alter_sequence() throws RecognitionException { return gPLSQLPrinter_DDL.alter_sequence(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_package_return create_package() throws RecognitionException { return gPLSQLPrinter_DDL.create_package(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.inline_constraint_primary_key_return inline_constraint_primary_key() throws RecognitionException { return gPLSQLPrinter_DDL.inline_constraint_primary_key(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.constructor_call_mode_return constructor_call_mode() throws RecognitionException { return gPLSQLPrinter_DDL.constructor_call_mode(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.procedure_spec_return procedure_spec() throws RecognitionException { return gPLSQLPrinter_DDL.procedure_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.constructor_spec_return constructor_spec() throws RecognitionException { return gPLSQLPrinter_DDL.constructor_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.object_as_part_return object_as_part() throws RecognitionException { return gPLSQLPrinter_DDL.object_as_part(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.modifier_clause_return modifier_clause() throws RecognitionException { return gPLSQLPrinter_DDL.modifier_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.out_of_line_constraint_def_unique_return out_of_line_constraint_def_unique() throws RecognitionException { return gPLSQLPrinter_DDL.out_of_line_constraint_def_unique(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_view_force_clause_return create_view_force_clause() throws RecognitionException { return gPLSQLPrinter_DDL.create_view_force_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException { return gPLSQLPrinter_DDL.map_order_func_declaration(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.references_clause_return references_clause() throws RecognitionException { return gPLSQLPrinter_DDL.references_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.inline_constraint_null_return inline_constraint_null() throws RecognitionException { return gPLSQLPrinter_DDL.inline_constraint_null(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.out_of_line_constraint_def_primary_key_return out_of_line_constraint_def_primary_key() throws RecognitionException { return gPLSQLPrinter_DDL.out_of_line_constraint_def_primary_key(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.c_spec_return c_spec() throws RecognitionException { return gPLSQLPrinter_DDL.c_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.attribute_definition_return attribute_definition() throws RecognitionException { return gPLSQLPrinter_DDL.attribute_definition(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_procedure_body_impl_return create_procedure_body_impl() throws RecognitionException { return gPLSQLPrinter_DDL.create_procedure_body_impl(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.nested_table_type_def_return nested_table_type_def() throws RecognitionException { return gPLSQLPrinter_DDL.nested_table_type_def(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.result_cache_clause_return result_cache_clause() throws RecognitionException { return gPLSQLPrinter_DDL.result_cache_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.drop_package_return drop_package() throws RecognitionException { return gPLSQLPrinter_DDL.drop_package(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.non_dml_event_return non_dml_event() throws RecognitionException { return gPLSQLPrinter_DDL.non_dml_event(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.inline_constraint_unique_return inline_constraint_unique() throws RecognitionException { return gPLSQLPrinter_DDL.inline_constraint_unique(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.dml_event_nested_clause_return dml_event_nested_clause() throws RecognitionException { return gPLSQLPrinter_DDL.dml_event_nested_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.out_of_line_constraint_def_return out_of_line_constraint_def() throws RecognitionException { return gPLSQLPrinter_DDL.out_of_line_constraint_def(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.view_type_constraints_clause_item_return view_type_constraints_clause_item() throws RecognitionException { return gPLSQLPrinter_DDL.view_type_constraints_clause_item(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.view_type_constraint_item_inline_return view_type_constraint_item_inline() throws RecognitionException { return gPLSQLPrinter_DDL.view_type_constraint_item_inline(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.out_of_line_constraint_clause_return out_of_line_constraint_clause() throws RecognitionException { return gPLSQLPrinter_DDL.out_of_line_constraint_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.alter_function_return alter_function() throws RecognitionException { return gPLSQLPrinter_DDL.alter_function(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.package_obj_spec_return package_obj_spec() throws RecognitionException { return gPLSQLPrinter_DDL.package_obj_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.alter_type_return alter_type() throws RecognitionException { return gPLSQLPrinter_DDL.alter_type(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.trigger_follows_clause_return trigger_follows_clause() throws RecognitionException { return gPLSQLPrinter_DDL.trigger_follows_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException { return gPLSQLPrinter_DDL.compound_dml_trigger(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.object_type_def_return object_type_def() throws RecognitionException { return gPLSQLPrinter_DDL.object_type_def(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.on_delete_clause_action_return on_delete_clause_action() throws RecognitionException { return gPLSQLPrinter_DDL.on_delete_clause_action(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.alter_method_element_return alter_method_element() throws RecognitionException { return gPLSQLPrinter_DDL.alter_method_element(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.non_dml_trigger_return non_dml_trigger() throws RecognitionException { return gPLSQLPrinter_DDL.non_dml_trigger(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.pragma_clause_return pragma_clause() throws RecognitionException { return gPLSQLPrinter_DDL.pragma_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.simple_dml_trigger_return simple_dml_trigger() throws RecognitionException { return gPLSQLPrinter_DDL.simple_dml_trigger(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.referencing_clause_return referencing_clause() throws RecognitionException { return gPLSQLPrinter_DDL.referencing_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.using_index_clause_return using_index_clause() throws RecognitionException { return gPLSQLPrinter_DDL.using_index_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_procedure_body_return create_procedure_body() throws RecognitionException { return gPLSQLPrinter_DDL.create_procedure_body(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.relies_on_part_return relies_on_part() throws RecognitionException { return gPLSQLPrinter_DDL.relies_on_part(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.alter_procedure_return alter_procedure() throws RecognitionException { return gPLSQLPrinter_DDL.alter_procedure(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.subprogram_spec_return subprogram_spec() throws RecognitionException { return gPLSQLPrinter_DDL.subprogram_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.create_sequence_return create_sequence() throws RecognitionException { return gPLSQLPrinter_DDL.create_sequence(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.dependent_handling_clause_return dependent_handling_clause() throws RecognitionException { return gPLSQLPrinter_DDL.dependent_handling_clause(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.call_spec_return call_spec() throws RecognitionException { return gPLSQLPrinter_DDL.call_spec(); }

	public PLSQLPrinter_PLSQLPrinter_DDL.type_elements_parameter_return type_elements_parameter() throws RecognitionException { return gPLSQLPrinter_DDL.type_elements_parameter(); }


	protected DFA163 dfa163 = new DFA163(this);
	static final String DFA163_eotS =
		"\36\uffff";
	static final String DFA163_eofS =
		"\36\uffff";
	static final String DFA163_minS =
		"\1\u00ca\1\2\1\uffff\1\u0104\1\2\1\u00f6\2\2\1\u0197\1\23\1\u0104\2\2"+
		"\2\uffff\1\23\1\u0197\1\23\1\2\4\23\1\3\1\23\5\3";
	static final String DFA163_maxS =
		"\1\u033a\1\2\1\uffff\1\u0104\1\2\1\u0197\1\2\2\u0197\1\23\1\u030a\1\u0197"+
		"\1\2\2\uffff\1\23\1\u0197\1\23\1\2\4\23\1\3\1\23\2\3\1\u0197\1\3\1\u0197";
	static final String DFA163_acceptS =
		"\2\uffff\1\3\12\uffff\1\1\1\2\17\uffff";
	static final String DFA163_specialS =
		"\36\uffff}>";
	static final String[] DFA163_transitionS = {
			"\1\1\u026f\uffff\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5",
			"\1\6\u00a0\uffff\1\7",
			"\1\10",
			"\1\11\1\12\u0193\uffff\1\7",
			"\1\13",
			"\1\14",
			"\1\16\151\uffff\1\15\147\uffff\1\15\u0133\uffff\1\16",
			"\1\17\1\20\u0193\uffff\1\13",
			"\1\21",
			"",
			"",
			"\1\22",
			"\1\7",
			"\1\23",
			"\1\24",
			"\1\25",
			"\1\26",
			"\1\27",
			"\1\30",
			"\1\31",
			"\1\32",
			"\1\33",
			"\1\34",
			"\1\12\u0193\uffff\1\7",
			"\1\35",
			"\1\20\u0193\uffff\1\13"
	};

	static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
	static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
	static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
	static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
	static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
	static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
	static final short[][] DFA163_transition;

	static {
		int numStates = DFA163_transitionS.length;
		DFA163_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
		}
	}

	protected class DFA163 extends DFA {

		public DFA163(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 163;
			this.eot = DFA163_eot;
			this.eof = DFA163_eof;
			this.min = DFA163_min;
			this.max = DFA163_max;
			this.accept = DFA163_accept;
			this.special = DFA163_special;
			this.transition = DFA163_transition;
		}
		@Override
		public String getDescription() {
			return "1050:1: update_set_elements : ( ^( ASSIGN column_name expression ) -> update_set_element_column_expr(column_name=$column_name.stexpression=$expression.st)| ^( ASSIGN (names+= column_name )+ subquery ) -> update_set_element_columns_subquery(column_names=$namessubquery=$subquery.st)| ^( VALUE_VK ( char_set_name )? id= commented_id expression ) -> update_set_element_column_value(column_name=$id.stexpression=$expression.st));";
		}
	}

	public static final BitSet FOLLOW_COMPILATION_UNIT_in_compilation_unit171 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_compilation_unit175 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x9000000000000000L,0x000000000000000FL,0x000003FE00000000L,0x0000000003F00000L});
	public static final BitSet FOLLOW_SQL_SCRIPT_in_sql_script214 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_sql_script219 = new BitSet(new long[]{0x0000000000000008L,0x0000000000020000L,0x9000000000000000L,0x000000000000000FL,0x000003FE00000000L,0x0000100003F00000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_sql_plus_command_in_sql_script223 = new BitSet(new long[]{0x0000000000000008L,0x0000000000020000L,0x9000000000000000L,0x000000000000000FL,0x000003FE00000000L,0x0000100003F00000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_whenever_command_in_sql_plus_command267 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_command_in_sql_plus_command277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_prompt_command_in_sql_plus_command287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_command_in_sql_plus_command297 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WHENEVER_VK_in_whenever_command317 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_whenever_command329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_EXIT_VK_in_whenever_command359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000100L});
	public static final BitSet FOLLOW_set_in_whenever_command373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_set_in_whenever_command393 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_whenever_command413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_set_in_whenever_command415 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_VK_in_set_command464 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REGULAR_ID_in_set_command478 = new BitSet(new long[]{0x0000000010008000L,0x0000000010000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_set_in_set_command492 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_command534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROMPT_in_prompt_command555 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_function_in_unit_statement575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_unit_statement590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_unit_statement605 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_unit_statement620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_unit_statement635 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_unit_statement650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_unit_statement665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_unit_statement680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_package_in_unit_statement695 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_unit_statement710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_unit_statement725 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_unit_statement740 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_unit_statement755 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_unit_statement770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_unit_statement785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_unit_statement800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_unit_statement815 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_type_in_unit_statement830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_view_in_unit_statement845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_declare_spec873 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_declare_spec889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_declare_spec905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_declare_spec921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_declare_spec937 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_declare_spec953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_declare_spec969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_declare_spec985 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_declare_spec1001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_declare_spec1017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_DECLARE_in_variable_declaration1043 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_variable_declaration1045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_variable_declaration1047 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTANT_VK_in_variable_declaration1049 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration1052 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_default_value_part_in_variable_declaration1055 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration1140 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_subtype_declaration1142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_subtype_declaration1144 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration1146 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_subtype_range_in_subtype_declaration1149 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_subtype_range1227 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_subtype_range1231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_subtype_range1235 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_DECLARE_in_cursor_declaration1278 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_declaration1280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_type_spec_in_cursor_declaration1282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_declaration1285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_cursor_declaration1289 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration1293 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter_spec1369 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter_spec1371 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000002L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter_spec1373 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_default_value_part_in_parameter_spec1376 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_DECLARE_in_exception_declaration1446 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_declaration1448 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_DECLARE_in_pragma_declaration1498 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_declaration_impl_in_pragma_declaration1500 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration_impl1545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration_impl1568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration_impl1591 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_pragma_declaration_impl1593 = new BitSet(new long[]{0x0000000010008040L,0x8040000000000000L,0x0000100080004000L,0x0000000000000000L,0x0100000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000010100000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_constant_in_pragma_declaration_impl1595 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INLINE_VK_in_pragma_declaration_impl1638 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_commented_id_in_pragma_declaration_impl1642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_pragma_declaration_impl1644 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration_impl1687 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration_impl1725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_pragma_declaration_impl1751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_pragma_declaration_impl1791 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_record_type_dec_in_record_declaration1857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_var_dec_in_record_declaration1872 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_record_in_record_type_dec1899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_refcursor_in_record_type_dec1914 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_FIELDS_in_record_type_dec_record1943 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_record1945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec_record1949 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_REFCURSOR_in_record_type_dec_refcursor1996 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec_refcursor1998 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_record_type_dec_refcursor2000 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_field_spec2043 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_field_spec2045 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000002L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_field_spec2047 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_field_spec2050 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_default_value_part_in_field_spec2053 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec2126 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_record_var_dec2128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_type_name_in_record_var_dec2130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_record_var_dec2133 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_record_var_dec2135 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_in_table_declaration2173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_var_dec_in_table_declaration2188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec2213 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_table_type_dec2215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_table_type_dec_impl_in_table_type_dec2217 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_table_of_in_table_type_dec_impl2263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varray_type_def_in_table_type_dec_impl2279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec_table_of2307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec_table_of2311 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_type_dec_table_of2313 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec_table_of2315 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_BY_in_table_indexed_by_part2376 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part2378 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def2414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_VARR_ARRAY_DEF_in_varray_type_def2418 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_varray_type_def2420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_varray_type_def2422 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec2469 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_var_name_in_table_var_dec2471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_table_var_dec2473 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATEMENTS_in_seq_of_statements2514 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_statement_in_seq_of_statements2519 = new BitSet(new long[]{0x0000000000000008L,0x0080000000000048L,0x0000000400004109L,0x1004001400000400L,0x0000000004000100L,0x2000180000000000L,0x0000000000000004L,0x0000002010000008L,0x0000000600000000L,0x4000002000000001L,0x0002048020108020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0C00000000000000L});
	public static final BitSet FOLLOW_labeled_statement_in_seq_of_statements2523 = new BitSet(new long[]{0x0000000000000008L,0x0080000000000048L,0x0000000400004109L,0x1004001400000400L,0x0000000004000100L,0x2000180000000000L,0x0000000000000004L,0x0000002010000008L,0x0000000600000000L,0x4000002000000001L,0x0002048020108020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0C00000000000000L});
	public static final BitSet FOLLOW_LABEL_DECLARE_in_labeled_statement2564 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_labeled_statement2566 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000048L,0x0000000400004109L,0x1004001400000400L,0x0000000004000100L,0x2000180000000000L,0x0000000000000004L,0x0000002010000000L,0x0000000600000000L,0x4000002000000001L,0x0002048020108020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0C00000000000000L});
	public static final BitSet FOLLOW_statement_in_labeled_statement2568 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_assignment_statement_in_statement2603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_statement2618 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_statement2633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_statement2648 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_statement2663 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_statement2678 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_statement2693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_statement_in_statement2708 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_statement2723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_statement2738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_statement2753 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_statement_in_statement2768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_statement2784 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_perform_statement_in_statement2799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_statement2814 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pgsql_raise_statement_in_statement2829 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_in_statement2844 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_statement2859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSIGN_in_assignment_statement2885 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_assignment_statement2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_hosted_variable_name_in_assignment_statement2894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_assignment_statement2897 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_continue_statement2939 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_continue_statement2941 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_general_when_in_continue_statement2944 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_general_when2987 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_general_when2989 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_statement3026 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_exit_statement3028 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_general_when_in_exit_statement3031 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement3074 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_goto_statement3076 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_statement3113 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_if_statement3115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_if_statement3117 = new BitSet(new long[]{0x0100000000000008L,0x0800000000000000L});
	public static final BitSet FOLLOW_elsif_part_in_if_statement3121 = new BitSet(new long[]{0x0100000000000008L,0x0800000000000000L});
	public static final BitSet FOLLOW_else_part_in_if_statement3124 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part3198 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_elsif_part3200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_elsif_part3202 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_part3244 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_else_part3246 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WHILE_LOOP_in_loop_statement3283 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_loop_statement3285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement3287 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_LOOP_in_loop_statement3320 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement3322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement3324 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOOP_VK_in_loop_statement3357 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement3359 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_FOR_in_cursor_loop_param3398 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_cursor_loop_param3400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000001L});
	public static final BitSet FOLLOW_REVERSE_VK_in_cursor_loop_param3402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_cursor_loop_param3406 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param3410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param3414 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param3458 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param3460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_general_element_in_cursor_loop_param3462 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param3495 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param3497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_loop_param3499 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORALL_VK_in_forall_statement3543 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_forall_statement3545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_bounds_clause_in_forall_statement3547 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000040L,0x0000000400000101L,0x1000000000000000L,0x0000000000000100L,0x0000080000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000600000000L,0x0000000000000000L,0x0000048020008020L});
	public static final BitSet FOLLOW_sql_statement_in_forall_statement3549 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_forall_statement3551 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_bounds_clause3588 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_bounds_clause3590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_bounds_clause3592 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDICES_BOUND_in_bounds_clause3619 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_collection_name_in_bounds_clause3621 = new BitSet(new long[]{0x0000000000000008L,0x0000100000000000L});
	public static final BitSet FOLLOW_between_bound_in_bounds_clause3623 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUES_BOUND_in_bounds_clause3651 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_bounds_clause3653 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound3690 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_between_bound3692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_between_bound3694 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_statement3729 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_VK_in_raise_statement3762 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_raise_statement3764 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_statement3802 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_return_statement3804 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_in_body3836 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_body3838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_body3841 = new BitSet(new long[]{0x0000000000000008L,0x2000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_body3843 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause3894 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_handler_in_exception_clause3898 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler3936 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler3940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_exception_handler3943 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BLOCK_in_block3987 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_block3991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000819200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000380001000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L});
	public static final BitSet FOLLOW_body_in_block3994 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PGSQL_PERFORM_in_perform_statement4037 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_perform_statement4041 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PGSQL_PERFORM_in_perform_statement4067 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_perform_statement4071 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_execute_immediate_in_sql_statement4103 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement4118 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement4133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement4148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXECUTE_VK_in_execute_immediate4173 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_execute_immediate4175 = new BitSet(new long[]{0x1000000000000008L,0x0000000000000000L,0x0000000000000400L,0x0000040000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_into_clause_in_execute_immediate4194 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate4198 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate4218 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate4222 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate4242 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause4338 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause4340 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PGSQL_RAISE_in_pgsql_raise_statement4377 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pgsql_raise_level_in_pgsql_raise_statement4379 = new BitSet(new long[]{0x0000000000008000L});
	public static final BitSet FOLLOW_CHAR_STRING_in_pgsql_raise_statement4381 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_expression_in_pgsql_raise_statement4385 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_pgsql_raise_using_options_in_pgsql_raise_statement4388 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PGSQL_USING_in_pgsql_raise_using_options4442 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pgsql_raise_using_option_in_pgsql_raise_using_options4446 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_PGSQL_OPTION_in_pgsql_raise_using_option4489 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pgsql_raise_using_option_name_in_pgsql_raise_using_option4491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_pgsql_raise_using_option4493 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PGSQL_ERRCODE_in_pgsql_raise_using_option_name4535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PGSQL_NOTICE_in_pgsql_raise_level4560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PGSQL_EXCEPTION_in_pgsql_raise_level4578 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements4606 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements4621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements4636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements4651 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements4666 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements4681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_STATEMENT_in_select_statement4706 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement4708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_select_statement4711 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080002L});
	public static final BitSet FOLLOW_order_by_clause_in_select_statement4713 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_for_update_clause_in_select_statement4716 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause4819 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_RECURSIVE_VK_in_subquery_factoring_clause4821 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause4826 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_FACTORING_in_factoring_element4869 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_name_in_factoring_element4871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_column_name_in_factoring_element4875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_factoring_element4878 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_factoring_element4880 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBQUERY_in_subquery4960 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery4962 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000080L,0x0000000100000200L});
	public static final BitSet FOLLOW_subquery_operation_part_in_subquery4966 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000080L,0x0000000100000200L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNION_in_subquery_operation_part5043 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTERSECT_in_subquery_operation_part5062 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_MINUS_in_subquery_operation_part5081 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part5111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part5114 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_query_block_in_subquery_basic_elements5171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_subquery_basic_elements5186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_query_block5222 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_from_clause_in_query_block5237 = new BitSet(new long[]{0x0000000000000100L,0x0200002000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_query_block5254 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_query_block5256 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_query_block5258 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_ASTERISK_in_query_block5280 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000004000000420L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SELECT_LIST_in_query_block5300 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_element_in_query_block5304 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_into_clause_in_query_block5334 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000004000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_where_clause_in_query_block5337 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block5340 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_group_by_clause_in_query_block5356 = new BitSet(new long[]{0x0200000000000008L});
	public static final BitSet FOLLOW_model_clause_in_query_block5359 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_ITEM_in_selected_element5588 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_selected_element5590 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_alias_in_selected_element5592 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_clause5635 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_in_from_clause5639 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_TABLE_REF_in_table_ref5677 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_table_ref5679 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_join_clause_in_table_ref5683 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux5726 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_table_ref_aux5728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux5731 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_ONLY_VK_in_table_ref_aux5734 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux5736 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux5738 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux5742 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_JOIN_DEF_in_join_clause5839 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause5855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L,0x0000000000000000L,0x0000004000000020L,0x0100000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_CROSS_VK_in_join_clause5871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000020L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_join_clause5873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000020L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_INNER_VK_in_join_clause5878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_FULL_VK_in_join_clause5880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_LEFT_VK_in_join_clause5882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_RIGHT_VK_in_join_clause5884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_table_ref_aux_in_join_clause5888 = new BitSet(new long[]{0x1000000000000008L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause5904 = new BitSet(new long[]{0x1000000000000008L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_join_on_part_in_join_clause5920 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_join_using_part_in_join_clause5922 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_join_on_part6048 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_join_on_part6050 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part6087 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_join_using_part6089 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_PARTITION_VK_in_query_partition_clause6126 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_impl_in_query_partition_clause6128 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subquery_in_query_partition_clause_impl6167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_query_partition_clause_impl6188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS_in_query_partition_clause_impl6205 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_query_partition_clause_impl6209 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_VERSIONS_VK_in_flashback_query_clause6252 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AS_in_flashback_query_clause6254 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SCN_VK_in_flashback_query_clause6258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_flashback_query_clause6260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_flashback_query_clause6264 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_VK_in_pivot_clause6301 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XML_VK_in_pivot_clause6303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_element_in_pivot_clause6306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause6309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause6311 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_ELEMENT_in_pivot_element6347 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_element6349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_pivot_element6352 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause6388 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_pivot_for_clause6390 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause6427 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_pivot_in_clause6443 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_MODE_in_pivot_in_clause6459 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause6461 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L});
	public static final BitSet FOLLOW_ELEMENTS_MODE_in_pivot_in_clause6479 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause6481 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element6538 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_in_clause_element6540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_pivot_in_clause_element6544 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_element6546 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNPIVOT_VK_in_unpivot_clause6583 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INCLUDE_VK_in_unpivot_clause6587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_EXCLUDE_VK_in_unpivot_clause6589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_NULLS_VK_in_unpivot_clause6592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_name_in_unpivot_clause6597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause6600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause6602 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause6638 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unpivot_in_element_in_unpivot_in_clause6640 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element6677 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_unpivot_in_element6679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_PIVOT_ALIAS_in_unpivot_in_element6683 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_unpivot_in_element6686 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_unpivot_in_element6688 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HIERARCHICAL_in_hierarchical_query_clause6726 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause6728 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause6732 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause6734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_hierarchical_query_clause6737 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_part6785 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_start_part6787 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause6824 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_element_in_group_by_clause6828 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_having_clause_in_group_by_clause6831 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUP_BY_ELEMENT_in_group_by_element6874 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_elements_in_group_by_element6876 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUPING_VK_in_group_by_elements6902 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_groupin_set_in_group_by_elements6904 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_grouping_element_in_group_by_elements6931 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUPIN_SET_in_groupin_set6956 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_groupin_set6958 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLUP_VK_in_grouping_element6994 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element6998 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000C00000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_CUBE_VK_in_grouping_element7027 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element7031 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000C00000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_expression_list_in_grouping_element7059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_grouping_element7074 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_clause7099 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_having_clause7101 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause7138 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_in_model_clause7140 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L,0x0000000000000000L,0x4004000000000000L});
	public static final BitSet FOLLOW_cell_reference_options_in_model_clause7142 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L,0x0000000000000000L,0x4004000000000000L});
	public static final BitSet FOLLOW_return_rows_clause_in_model_clause7145 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_reference_model_in_model_clause7148 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_cell_reference_options7185 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAV_VK_in_cell_reference_options7191 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options7204 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_cell_reference_options7207 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_VK_in_cell_reference_options7209 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_rows_clause7246 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UPDATED_VK_in_return_rows_clause7249 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_return_rows_clause7251 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_VK_in_reference_model7288 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_reference_model_name_in_reference_model7290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_reference_model7292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_reference_model7294 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_cell_reference_options_in_reference_model7296 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_MAIN_MODEL_in_main_model7333 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_name_in_main_model7335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_main_model7338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_model_rules_clause_in_main_model7340 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_cell_reference_options_in_main_model7342 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column_clauses7379 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_model_column_clauses7382 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses7384 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEASURES_VK_in_model_column_clauses7388 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses7390 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses7393 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_model_column_partition_part7430 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part7432 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_COLUMNS_in_model_column_list7468 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_in_model_column_list7470 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column7507 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_model_column7509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_model_column7512 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULES_in_model_rules_clause7549 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause7551 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause7554 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RULES_VK_in_model_rules_part7591 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part7607 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_part7609 = new BitSet(new long[]{0x0000000000000008L,0x0000002000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part7611 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_AUTOMATIC_VK_in_model_rules_part7630 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_SEQUENTIAL_VK_in_model_rules_part7632 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part7649 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULE_in_model_rules_element7695 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_model_rules_element7711 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_expression_in_model_rules_element7713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_model_rules_element7715 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element7732 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_element7734 = new BitSet(new long[]{0x0000000000000008L,0x0000002000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element7736 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_model_rules_element7754 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ITERATE_VK_in_model_iterate_clause7800 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_model_iterate_clause7802 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_until_part_in_model_iterate_clause7804 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNTIL_VK_in_until_part7841 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_until_part7843 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause7879 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SIBLINGS_VK_in_order_by_clause7881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause7885 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_elements_in_order_by_clause7889 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements7933 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_order_by_elements7935 = new BitSet(new long[]{0x0000000000000008L,0x0100040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ASC_in_order_by_elements7938 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DESC_in_order_by_elements7940 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_NULLS_VK_in_order_by_elements7945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_FIRST_VK_in_order_by_elements7948 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LAST_VK_in_order_by_elements7950 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause8031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause8033 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_for_update_options_in_for_update_clause8036 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part8079 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_for_update_of_part8083 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SKIP_VK_in_for_update_options8120 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options8137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WAIT_VK_in_for_update_options8155 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_update_options8157 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement8190 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_update_statement8192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_SET_VK_in_update_statement8207 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_update_set_elements_in_update_statement8211 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_where_clause_in_update_statement8227 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_static_returning_clause_in_update_statement8230 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_update_statement8233 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements8339 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements8341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_update_set_elements8343 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements8376 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements8380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_update_set_elements8383 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUE_VK_in_update_set_elements8416 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_update_set_elements8418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_update_set_elements8423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_update_set_elements8425 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement8469 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_delete_statement8471 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_where_clause_in_delete_statement8485 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_static_returning_clause_in_delete_statement8488 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_delete_statement8491 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement8569 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_single_table_insert_in_insert_statement8599 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_insert_in_insert_statement8624 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert8677 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert8679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_values_clause_in_single_table_insert8682 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert8684 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_select_statement_in_single_table_insert8688 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert8691 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert8786 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_multi_table_insert8788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert8791 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert8793 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_TABLE_ELEMENT_in_multi_table_element8831 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element8833 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_values_clause_in_multi_table_element8835 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element8838 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause8875 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_conditional_insert_clause8878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_FIRST_VK_in_conditional_insert_clause8880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause8884 = new BitSet(new long[]{0x0000000000000008L,0x0800000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause8887 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part8925 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_conditional_insert_when_part8927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part8929 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part8966 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part8968 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause9005 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause9007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_insert_into_clause9010 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_insert_into_clause9014 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_clause9058 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_values_clause9063 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_values_clause9067 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_VK_in_merge_statement9106 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_merge_statement9108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_tableview_name_in_merge_statement9111 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement9127 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_tableview_in_merge_statement9129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_merge_statement9131 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_update_clause_in_merge_statement9147 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000802000000L});
	public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement9150 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_merge_statement9153 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_UPDATE_in_merge_update_clause9254 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_merge_element_in_merge_update_clause9258 = new BitSet(new long[]{0x0000000000000008L,0x0080000000000000L,0x0000004000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_clause9261 = new BitSet(new long[]{0x0000000000000008L,0x0080000000000000L});
	public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause9264 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_merge_element9333 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_element9335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_merge_element9337 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part9379 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part9381 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_INSERT_in_merge_insert_clause9418 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_merge_insert_clause9421 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_insert_clause9425 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_expression_list_in_merge_insert_clause9429 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_where_clause_in_merge_insert_clause9431 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview9480 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_selected_tableview9494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_tableview_name_in_selected_tableview9525 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_select_statement_in_selected_tableview9573 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement9652 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement9654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_lock_mode_in_lock_table_statement9657 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement9659 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WAIT_VK_in_wait_nowait_part9696 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_wait_nowait_part9698 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part9724 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element9761 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_lock_table_element9763 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element9765 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9830 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode9857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_REF_in_general_table_ref9950 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_general_table_ref9952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref9955 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_ONLY_VK_in_general_table_ref9957 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATIC_RETURNING_in_static_returning_clause10042 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_static_returning_clause10046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000040000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_into_clause_in_static_returning_clause10049 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOG_VK_in_error_logging_clause10091 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause10093 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_expression_in_error_logging_clause10096 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause10099 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part10136 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part10138 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REJECT_VK_in_error_logging_reject_part10174 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNLIMITED_VK_in_error_logging_reject_part10177 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_error_logging_reject_part10179 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause10216 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause10233 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_collection_expression_in_dml_table_expression_clause10235 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_MODE_in_dml_table_expression_clause10256 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause10258 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause10260 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIRECT_MODE_in_dml_table_expression_clause10349 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause10351 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause10353 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_general_element_in_dml_table_expression_clause10398 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_standard_function_in_dml_table_expression_clause10417 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_ref_in_dml_table_expression_clause10456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_table_collection_expression10484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_table_collection_expression10513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression10543 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_table_collection_expression10545 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_table_collection_expression10576 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_table_collection_expression10578 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause10619 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_READ_VK_in_subquery_restriction_clause10622 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause10624 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause10626 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAMPLE_VK_in_sample_clause10664 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BLOCK_VK_in_sample_clause10666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_sample_clause10669 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_seed_part_in_sample_clause10671 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEED_VK_in_seed_part10709 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_seed_part10711 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements10752 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements10767 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements10782 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements10797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_VK_in_close_statement10823 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_close_statement10825 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_statement10863 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_open_statement10865 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_expression_list_in_open_statement10867 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement10910 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_fetch_statement10912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000040000000000L});
	public static final BitSet FOLLOW_into_clause_in_fetch_statement10914 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_FOR_in_open_for_statement10956 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_open_for_statement10958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_expression_in_open_for_statement10963 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_select_statement_in_open_for_statement10967 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_open_for_statement10970 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements11021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements11036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements11051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements11066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements11081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_TRANSACTION_in_set_transaction_command11106 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_set_transaction_command11108 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_READ_VK_in_set_transaction_command11129 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ONLY_VK_in_set_transaction_command11132 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_set_transaction_command11134 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ISOLATION_VK_in_set_transaction_command11156 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SERIALIZABLE_VK_in_set_transaction_command11159 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMITTED_VK_in_set_transaction_command11161 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_set_transaction_command11183 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command11185 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_CONSTRAINT_in_set_constraint_command11246 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command11249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000002000000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command11251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000008L,0x0000000002000000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_set_constraint_command11256 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFERRED_VK_in_set_constraint_command11258 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMIT_VK_in_commit_statement11296 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_commit_statement11298 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x4000000000000000L});
	public static final BitSet FOLLOW_commit_comment_in_commit_statement11331 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_commit_force_in_commit_statement11351 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMENT_VK_in_commit_comment11442 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_commit_comment11446 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_write_clause_in_commit_comment11449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FORCE_VK_in_commit_force11493 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CORRUPT_XID_VK_in_commit_force11519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_commit_force11523 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CORRUPT_XID_ALL_VK_in_commit_force11548 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_commit_force11572 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_commit_force11576 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_write_clause11634 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WAIT_VK_in_write_clause11637 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_write_clause11639 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_IMMEDIATE_VK_in_write_clause11644 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BATCH_VK_in_write_clause11646 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_rollback_statement11722 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_rollback_statement11724 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_rollback_statement11748 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_rollback_statement11750 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_rollback_statement11773 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_rollback_statement11775 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_VK_in_savepoint_statement11890 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement11892 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_ROW_in_pipe_row_statement11934 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_pipe_row_statement11936 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_LIST_in_expression_list11977 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_list11981 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_LOGIC_EXPR_in_expression12019 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression12021 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_in_expression12038 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression12040 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_expression_element12103 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_expression_element12123 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EQUALS_OP_in_expression_element12143 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOT_EQUAL_OP_in_expression_element12163 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OP_in_expression_element12183 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OP_in_expression_element12203 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LESS_THAN_OR_EQUALS_OP_in_expression_element12223 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_GREATER_THAN_OR_EQUALS_OP_in_expression_element12243 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONCATENATION_OP_in_expression_element12263 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_expression_element12283 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_expression_element12303 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASTERISK_in_expression_element12323 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SOLIDUS_in_expression_element12343 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_in_expression_element12363 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MOD_VK_in_expression_element12383 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIV_VK_in_expression_element12403 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element12431 = new BitSet(new long[]{0x0024580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element12435 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_expression_element12507 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element12511 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NULL_in_expression_element12587 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NULL_in_expression_element12609 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_NAN_in_expression_element12631 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NAN_in_expression_element12653 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_PRESENT_in_expression_element12675 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_PRESENT_in_expression_element12697 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_INFINITE_in_expression_element12719 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_INFINITE_in_expression_element12741 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_A_SET_in_expression_element12763 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_A_SET_in_expression_element12785 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_NOT_EMPTY_in_expression_element12807 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_IS_EMPTY_in_expression_element12829 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element12861 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_OF_TYPE_in_expression_element12924 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element12926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element12928 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_IS_OF_TYPE_in_expression_element12958 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element12960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element12962 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_MEMBER_VK_in_expression_element12994 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SUBMULTISET_VK_in_expression_element12998 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13001 = new BitSet(new long[]{0x0024580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13003 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_IN_in_expression_element13033 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_in_elements_in_expression_element13039 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_expression_element13074 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_in_elements_in_expression_element13080 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_BETWEEN_in_expression_element13115 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13119 = new BitSet(new long[]{0x0024580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13123 = new BitSet(new long[]{0x0024580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13127 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element13172 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13176 = new BitSet(new long[]{0x0024580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13180 = new BitSet(new long[]{0x0024580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13184 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_expression_element13258 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKEC_VK_in_expression_element13280 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE2_VK_in_expression_element13302 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LIKE4_VK_in_expression_element13324 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOT_LIKE_in_expression_element13346 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13378 = new BitSet(new long[]{0x0024580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13394 = new BitSet(new long[]{0x0024580318208148L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13410 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_VK_in_expression_element13520 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13522 = new BitSet(new long[]{0x0024580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13524 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_PLUS_in_expression_element13554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13558 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_MINUS_in_expression_element13615 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13619 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element13676 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13680 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NEW_VK_in_expression_element13710 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_element13712 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element13741 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13743 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDARD_FUNCTION_in_expression_element13772 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_standard_function_in_expression_element13774 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SOME_VK_in_expression_element13812 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXISTS_in_expression_element13816 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_expression_element13820 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_expression_element13824 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_expression_element13830 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_expression_element13834 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VECTOR_EXPR_in_expression_element13918 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13920 = new BitSet(new long[]{0x0024580318208148L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_DATETIME_OP_in_expression_element13951 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element13953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_datetime_element_in_expression_element13955 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_expression_in_expression_element13981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEEP_VK_in_expression_element14009 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element14011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DENSE_RANK_VK_in_expression_element14013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_FIRST_VK_in_expression_element14016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_LAST_VK_in_expression_element14018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_expression_element14021 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_over_clause_in_expression_element14023 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_ASTERISK_in_expression_element14054 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_expression_element14056 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_FOUND_VK_in_expression_element14115 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_NOTFOUND_VK_in_expression_element14136 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ROWCOUNT_VK_in_expression_element14157 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PERCENT_ISOPEN_VK_in_expression_element14178 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_expression_element14208 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_expression_element14266 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element14270 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_case_statement_in_expression_element14310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_expression_element14348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_expression_element14385 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hosted_variable_name_in_expression_element14422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_expression_element14459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_in_elements14510 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_in_elements14530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_in_elements14545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_VK_in_datetime_element14570 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_datetime_element14572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_datetime_element14575 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TIME_VK_in_datetime_element14577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_datetime_element14579 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DAY_VK_in_datetime_element14607 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_datetime_element14609 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_datetime_element14611 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_YEAR_VK_in_datetime_element14639 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MONTH_VK_in_datetime_element14641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_datetime_element14643 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_EXPRESSION_in_model_expression14679 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_model_expression14681 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000018L,0x0000000000400000L});
	public static final BitSet FOLLOW_model_expression_element_in_model_expression14683 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000018L,0x0000000000400000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element14719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_model_expression_element14744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element14770 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element14772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000084L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_for_single_column_element_in_model_expression_element14774 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_for_like_part_in_model_expression_element14776 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element14804 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element14806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_model_expression_element14810 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_model_expression_element14813 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_model_expression_element14815 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element14854 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_for_single_column_element14856 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element14883 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element14885 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element14913 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element14915 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_for_single_column_element14944 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DECREMENT_VK_in_for_single_column_element14946 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element14949 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part14986 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_like_part14988 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_CASE_in_case_statement15025 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_statement15027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement15031 = new BitSet(new long[]{0x0000000000000008L,0x0800000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement15034 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEARCHED_CASE_in_case_statement15080 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement15084 = new BitSet(new long[]{0x0000000000000008L,0x0800000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement15087 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part15138 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_when_part15142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_when_part15172 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_when_part15206 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part15267 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_else_part15297 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_else_part15324 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function15386 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function15388 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function15390 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_USING_in_standard_function15440 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function15442 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function15444 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COUNT_VK_in_standard_function15472 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function15475 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function15477 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_standard_function15479 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_ASTERISK_in_standard_function15485 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function15489 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function15493 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLCAST_VK_in_standard_function15584 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function15586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function15588 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CAST_VK_in_standard_function15621 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_standard_function15626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function15630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function15633 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHR_VK_in_standard_function15666 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function15668 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function15670 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECT_VK_in_standard_function15697 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_standard_function15700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_standard_function15702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_name_in_standard_function15706 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_collect_order_by_part_in_standard_function15708 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function15736 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function15750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_within_clause_in_standard_function15780 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_over_clause_in_standard_function15868 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DECOMPOSE_VK_in_standard_function15977 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function15979 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_CANONICAL_VK_in_standard_function15982 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPATIBILITY_VK_in_standard_function15984 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTRACT_VK_in_standard_function16014 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_extract_part_in_standard_function16016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function16018 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FIRST_VALUE_VK_in_standard_function16052 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_LAST_VALUE_VK_in_standard_function16054 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function16057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000200000L});
	public static final BitSet FOLLOW_NULLS_VK_in_standard_function16059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function16062 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PREDICTION_FUNCTION_in_standard_function16090 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function16092 = new BitSet(new long[]{0x1000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function16095 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function16098 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRANSLATE_VK_in_standard_function16126 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function16132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function16136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function16140 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TREAT_VK_in_standard_function16178 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function16180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_REF_VK_in_standard_function16182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function16185 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRIM_VK_in_standard_function16212 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_standard_function16228 = new BitSet(new long[]{0x0024580318208148L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000000L,0x0140000000020000L,0x0000000000044000L,0x3FFF000000100000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100000L,0x0000000000000000L,0x00000C0000000501L,0x0000000000000001L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_expression_element_in_standard_function16260 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_LEADING_VK_in_standard_function16294 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRAILING_VK_in_standard_function16316 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BOTH_VK_in_standard_function16338 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLAGG_VK_in_standard_function16423 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function16425 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_standard_function16427 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLCOLATTVAL_VK_in_standard_function16462 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XMLFOREST_VK_in_standard_function16464 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function16467 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_XMLEXISTS_VK_in_standard_function16495 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function16497 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function16499 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLPARSE_VK_in_standard_function16527 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function16530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function16532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function16535 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_WELLFORMED_VK_in_standard_function16537 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLQUERY_VK_in_standard_function16602 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function16604 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function16606 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_standard_function16609 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLROOT_VK_in_standard_function16637 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function16639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function16641 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function16643 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLTABLE_VK_in_standard_function16703 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function16705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function16710 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function16712 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_xml_table_column_in_standard_function16717 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_XMLELEMENT_VK_in_standard_function16782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_standard_function16797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400800000000L,0x0000000000000000L,0x0010000000400000L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_standard_function16799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400800000000L,0x0000000000000000L,0x0010000000400000L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function16816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function16818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function16822 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function16836 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_xmlelement_value_expr_in_standard_function16841 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_XMLPI_VK_in_standard_function16940 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function16963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_char_set_name_in_standard_function16965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_standard_function16970 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function16993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function16995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function17031 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLSERIALIZE_VK_in_standard_function17068 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DOCUMENT_VK_in_standard_function17087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_CONTENT_VK_in_standard_function17089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function17108 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000080040020000L,0x0040000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_standard_function17110 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000040020000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function17129 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040020000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function17148 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040020000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function17167 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_HIDE_VK_in_standard_function17188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SHOW_VK_in_standard_function17190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_DEFAULTS_VK_in_standard_function17193 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_YEAR_VK_in_extract_part17248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MONTH_VK_in_extract_part17269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DAY_VK_in_extract_part17290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HOUR_VK_in_extract_part17311 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUTE_VK_in_extract_part17332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SECOND_VK_in_extract_part17353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_extract_part17374 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_extract_part17395 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_extract_part17416 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_extract_part17437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_xmlelement_value_expr17469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_alias_in_xmlelement_value_expr17471 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_OVER_VK_in_over_clause17512 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_over_clause17514 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_over_clause17518 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_windowing_clause_in_over_clause17520 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROWS_VK_in_windowing_clause17592 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_RANGE_VK_in_windowing_clause17594 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause17615 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause17619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause17623 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause17645 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNBOUNDED_VK_in_windowing_elements17746 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements17748 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURRENT_VK_in_windowing_elements17767 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROW_VK_in_windowing_elements17769 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements17788 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements17792 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWING_VK_in_windowing_elements17814 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements17818 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause17849 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_using_element_in_using_clause17853 = new BitSet(new long[]{0x0000000000000108L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_ELEMENT_in_using_element17891 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_using_element17893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000040000000000L});
	public static final BitSet FOLLOW_OUT_VK_in_using_element17896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_using_element17899 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_alias_in_using_element17901 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_using_element17965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part17998 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_collect_order_by_part18000 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WITHIN_VK_in_within_clause18036 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_clause_in_within_clause18038 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_VK_in_cost_matrix_clause18075 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause18094 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_AUTO_VK_in_cost_matrix_clause18096 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause18116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause18119 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PASSING_VK_in_xml_passing_clause18178 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_passing_clause18180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_xml_passing_clause_expr_in_xml_passing_clause18185 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause_expr18229 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause_expr18231 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause18272 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ENTITYESCAPING_VK_in_xml_attributes_clause18287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NOENTITYESCAPING_VK_in_xml_attributes_clause18289 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SCHEMACHECK_VK_in_xml_attributes_clause18306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NOSCHEMACHECK_VK_in_xml_attributes_clause18308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause18326 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause18424 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_namespaces_clause18439 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_alias_in_xml_namespaces_clause18441 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause18446 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_COLUMN_in_xml_table_column18492 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_column_name_in_xml_table_column18494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_ORDINALITY_VK_in_xml_table_column18524 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_type_spec_in_xml_table_column18551 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_xml_table_column18553 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column18556 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part18679 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_general_default_part18681 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element18718 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element18720 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_xml_alias_in_xml_multiuse_expression_element18722 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias18765 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_commented_id_in_xml_alias18769 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias18791 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_xml_alias18794 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_alias18796 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VERSION_VK_in_xml_param_version_part18834 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NO_VK_in_xml_param_version_part18864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_param_version_part18866 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_param_version_part18890 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part18941 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YES_VK_in_xmlroot_param_standalone_part18971 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlroot_param_standalone_part18995 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part19033 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part19131 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_enconding_part19133 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlserialize_param_ident_part19168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part19170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part19196 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_ident_part19198 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBPARTITION_VK_in_partition_extension_clause19240 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_extension_clause19242 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_partition_extension_clause19245 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_ALIAS_in_alias19281 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias19283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_alias19288 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_ALIAS_in_alias19316 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias19318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_alias19323 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_clause19360 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_where_clause19362 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_clause19399 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PGSQL_STRICT_in_into_clause19401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_general_element_in_into_clause19406 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_BULK_VK_in_into_clause19446 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause19450 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_XML_COLUMN_NAME_in_xml_column_name19503 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_xml_column_name19505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_xml_column_name19510 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_CLASS_NAME_in_cost_class_name19541 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cost_class_name19543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_cost_class_name19548 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name19579 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_attribute_name19581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_attribute_name19586 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_NAME_in_savepoint_name19617 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_savepoint_name19619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_savepoint_name19624 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name19655 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_rollback_segment_name19657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_rollback_segment_name19662 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_NAME_in_table_var_name19694 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_table_var_name19696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_table_var_name19701 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SCHEMA_NAME_in_schema_name19732 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_schema_name19734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_schema_name19739 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_NAME_in_routine_name19770 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_routine_name19772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_routine_name19775 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000080000L});
	public static final BitSet FOLLOW_link_name_in_routine_name19778 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PACKAGE_NAME_in_package_name19815 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_package_name19817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_package_name19822 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name19860 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_implementation_type_name19862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_implementation_type_name19867 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_PARAMETER_NAME_in_parameter_name19905 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_parameter_name19907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_parameter_name19912 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name19949 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_reference_model_name19951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_reference_model_name19956 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAIN_MODEL_NAME_in_main_model_name19992 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_main_model_name19994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_main_model_name19999 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_QUERY_NAME_in_query_name20035 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_query_name20037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_query_name20042 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRAINT_NAME_in_constraint_name20073 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_constraint_name20075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_constraint_name20078 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000080000L});
	public static final BitSet FOLLOW_link_name_in_constraint_name20081 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LABEL_NAME_in_label_name20118 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_commented_id_in_label_name20122 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_NAME_in_type_name20153 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_commented_id_in_type_name20157 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_SEQUENCE_NAME_in_sequence_name20195 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_commented_id_in_sequence_name20197 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_EXCEPTION_NAME_in_exception_name20234 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_exception_name20236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_exception_name20241 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_function_name20279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_function_name20281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_function_name20286 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_PROCEDURE_NAME_in_procedure_name20324 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_procedure_name20326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_procedure_name20331 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_TRIGGER_NAME_in_trigger_name20369 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_trigger_name20371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_trigger_name20376 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_NAME_in_hosted_variable_name20418 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BINDVAR_in_hosted_variable_name20448 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_hosted_variable_name20474 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VARIABLE_NAME_in_variable_name20530 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name20532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_variable_name20537 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_INDEX_NAME_in_index_name20575 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_index_name20577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_index_name20582 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_NAME_in_cursor_name20613 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cursor_name20615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_cursor_name20620 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_NAME_in_record_name20651 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_record_name20653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_record_name20658 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECTION_NAME_in_collection_name20689 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_collection_name20691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_collection_name20696 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_LINK_NAME_in_link_name20734 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_link_name20736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_link_name20741 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_NAME_in_column_name20772 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_column_name20774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_column_name20779 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_TABLEVIEW_NAME_in_tableview_name20817 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_tableview_name20819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_tableview_name20824 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000080000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_link_name_in_tableview_name20827 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_partition_extension_clause_in_tableview_name20830 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VIEW_NAME_in_view_name20878 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_commented_id_in_view_name20882 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_CHAR_SET_NAME_in_char_set_name20920 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_commented_id_in_char_set_name20924 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ARGUMENTS_in_function_argument20966 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_argument_in_function_argument20970 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ARGUMENT_in_argument21008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_argument21010 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_parameter_name_in_argument21012 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOM_TYPE_in_type_spec21056 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_type_spec21058 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_REF_VK_in_type_spec21060 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_PERCENT_ROWTYPE_VK_in_type_spec21064 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PERCENT_TYPE_VK_in_type_spec21066 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_native_datatype_spec_in_type_spec21135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTERVAL_DATATYPE_in_type_spec21151 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_interval_type_spec_first_in_type_spec21153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_interval_type_spec_second_in_type_spec21155 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_YEAR_VK_in_interval_type_spec_first21208 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DAY_VK_in_interval_type_spec_first21210 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_interval_type_spec_first21223 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MONTH_VK_in_interval_type_spec_second21293 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_interval_type_spec_second21295 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_interval_type_spec_second21308 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRECISION_in_type_precision21367 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_constant_in_type_precision21371 = new BitSet(new long[]{0x0000000010008048L,0x8040000000000000L,0x0000100080004000L,0x0200080000000000L,0x0100000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000010100000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_constant_in_type_precision21375 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200080000000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_type_precision21381 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BYTE_VK_in_type_precision21385 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NATIVE_DATATYPE_in_native_datatype_spec21448 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BFILE_VK_in_native_datatype_spec21459 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_BINARY_FLOAT_VK_in_native_datatype_spec21472 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_BINARY_INTEGER_VK_in_native_datatype_spec21485 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_BLOB_VK_in_native_datatype_spec21498 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_BOOLEAN_VK_in_native_datatype_spec21511 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_CHARACTER_VK_in_native_datatype_spec21524 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_CHAR_VK_in_native_datatype_spec21538 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_CLOB_VK_in_native_datatype_spec21551 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DATE_in_native_datatype_spec21564 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DAY_VK_in_native_datatype_spec21577 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DECIMAL_VK_in_native_datatype_spec21588 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DEC_VK_in_native_datatype_spec21602 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_spec21615 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec21628 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_FLOAT_VK_in_native_datatype_spec21639 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_HOUR_VK_in_native_datatype_spec21652 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_INTEGER_VK_in_native_datatype_spec21663 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_INT_VK_in_native_datatype_spec21676 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_spec21689 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_LONG_RAW_in_native_datatype_spec21702 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_MINUTE_VK_in_native_datatype_spec21715 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_MLSLABEL_VK_in_native_datatype_spec21726 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_MONTH_VK_in_native_datatype_spec21737 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NATURALN_VK_in_native_datatype_spec21748 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NATURAL_VK_in_native_datatype_spec21759 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NCHAR_VK_in_native_datatype_spec21770 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NCLOB_VK_in_native_datatype_spec21783 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NUMBER_VK_in_native_datatype_spec21796 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NUMERIC_VK_in_native_datatype_spec21809 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_NVARCHAR2_VK_in_native_datatype_spec21822 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PLS_INTEGER_VK_in_native_datatype_spec21835 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_POSITIVEN_VK_in_native_datatype_spec21848 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_POSITIVE_VK_in_native_datatype_spec21859 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_spec21870 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_REAL_VK_in_native_datatype_spec21883 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ROWID_VK_in_native_datatype_spec21894 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SECOND_VK_in_native_datatype_spec21907 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SIGNTYPE_VK_in_native_datatype_spec21918 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_spec21929 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SMALLINT_VK_in_native_datatype_spec21940 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_STRING_VK_in_native_datatype_spec21953 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_spec21964 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_spec21975 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_spec21986 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_native_datatype_spec21997 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_spec22010 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_spec22021 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_spec22032 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_spec22043 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_UROWID_VK_in_native_datatype_spec22054 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_VARCHAR2_VK_in_native_datatype_spec22067 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_VARCHAR_VK_in_native_datatype_spec22080 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_YEAR_VK_in_native_datatype_spec22093 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_spec22104 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PGSQL_TEXT_in_native_datatype_spec22115 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PGSQL_NATIVE_DATATYPE_INTERVAL_in_native_datatype_spec22128 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_PGSQL_BIGINT_in_native_datatype_spec22141 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_type_precision_in_native_datatype_spec22152 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIME_VK_in_native_datatype_spec22162 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_native_datatype_spec22166 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCATED_ELEMENT_in_general_element22241 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_id_in_general_element22271 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000220L});
	public static final BitSet FOLLOW_function_argument_in_general_element22291 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000220L});
	public static final BitSet FOLLOW_ANY_ELEMENT_in_general_element_id22354 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_commented_id_in_general_element_id22358 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant22394 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTANT_NEGATED_in_constant22415 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant22419 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXACT_NUM_LIT_in_constant22440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APPROXIMATE_NUM_LIT_in_constant22460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_STRING_in_constant22480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_constant22500 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_constant22520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_constant22540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DBTIMEZONE_VK_in_constant22560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SESSIONTIMEZONE_VK_in_constant22581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_constant22601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_constant22621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_constant22641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PGSQL_TYPED_LITERAL_in_constant22662 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constant22664 = new BitSet(new long[]{0x0000000000008000L});
	public static final BitSet FOLLOW_CHAR_STRING_in_constant22666 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_char_set_name_in_id_with_charset22716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_commented_id_in_id_with_charset22719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_commented_id22750 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ID_in_commented_id22791 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COMMENT_in_commented_id22794 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COMMENT_in_commented_id22798 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COMMENT_in_commented_id22802 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COMMENT_in_commented_id22806 = new BitSet(new long[]{0x0000000000000008L});
}
