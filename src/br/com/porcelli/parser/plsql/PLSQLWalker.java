// $ANTLR 3.5.2 F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g 2018-10-06 11:19:31

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package br.com.porcelli.parser.plsql;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@SuppressWarnings("all")
public class PLSQLWalker extends TreeParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AMPERSAND", "APPROXIMATE_NUM_LIT", 
		"ASSIGN_OP", "ASTERISK", "AT_SIGN", "B", "BINDVAR", "BIT_STRING_LIT", 
		"C", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", 
		"COMMA", "COMMENT", "COMMENT_FRAGMENT", "CONCATENATION_OP", "D", "DELIMITED_ID", 
		"DOUBLE_ASTERISK", "DOUBLE_PERIOD", "E", "EQUALS_OP", "EXACT_NUM_LIT", 
		"EXCLAMATION_OPERATOR_PART", "F", "G", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", 
		"H", "HEX_STRING_LIT", "I", "INTRODUCER", "J", "K", "L", "LEFT_BRACKET", 
		"LEFT_PAREN", "LESS_THAN_OP", "LESS_THAN_OR_EQUALS_OP", "M", "MINUS_SIGN", 
		"N", "NATIONAL_CHAR_STRING_LIT", "NEWLINE", "NOT_EQUAL_OP", "O", "P", 
		"PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_NON_RESERVED_ELSIF", 
		"PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", 
		"PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", "PLSQL_RESERVED_COLAUTH", 
		"PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", "PLSQL_RESERVED_EXCLUSIVE", 
		"PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "PLSQL_RESERVED_INDEX", 
		"PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
		"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "PLSQL_RESERVED_NOWAIT", 
		"PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", "PLSQL_RESERVED_START", 
		"PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", "PLUS_SIGN", "PROMPT", 
		"Q", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", "QS_OTHER_CH", "QS_PAREN", 
		"QUESTION_MARK", "QUOTE", "R", "REGULAR_ID", "RIGHT_BRACKET", "RIGHT_PAREN", 
		"S", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", "SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", 
		"SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", 
		"SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
		"SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", 
		"SQL92_RESERVED_CREATE", "SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", 
		"SQL92_RESERVED_DATE", "SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", 
		"SQL92_RESERVED_DELETE", "SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", 
		"SQL92_RESERVED_DROP", "SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", 
		"SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
		"SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", 
		"SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", 
		"SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "T", "TILDE_OPERATOR_PART", 
		"U", "UNDERSCORE", "UNSIGNED_INTEGER", "V", "VERTICAL_BAR", "W", "X", 
		"Y", "Z", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", 
		"AGENT_VK", "AGGREGATE_VK", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", "ALTER_FUNCTION", 
		"ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", "ALTER_PROCEDURE", 
		"ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", "ANY_ELEMENT", 
		"ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", "ATTRIBUTE", 
		"ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", "AUTOMATIC_VK", 
		"AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", 
		"BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", 
		"BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", 
		"BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", 
		"BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", 
		"CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", 
		"CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", 
		"COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_ALIAS", "COLUMN_NAME", 
		"COMMENT_VK", "COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", 
		"COMPILER_PARAMETER", "COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", 
		"CONSTANT_NEGATED", "CONSTANT_VK", "CONSTRAINT_NAME", "CONSTRAINT_STATE", 
		"CONSTRAINT_VK", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", "CONTENT_VK", "CONTEXT_VK", 
		"CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", "COST_CLASS_NAME", 
		"COST_VK", "COUNT_VK", "CREATE_FUNCTION", "CREATE_PACKAGE_BODY", "CREATE_PACKAGE_SPEC", 
		"CREATE_PROCEDURE", "CREATE_SEQUENCE", "CREATE_TRIGGER", "CREATE_TYPE_BODY", 
		"CREATE_TYPE_SPEC", "CREATE_VIEW", "CROSS_VK", "CUBE_VK", "CURRENT_USER_VK", 
		"CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", "CURSOR_NAME", "CUSTOMDATUM_VK", 
		"CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", "DATETIME_OP", "DAY_VK", 
		"DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", "DEBUG_VK", "DECIMAL_VK", 
		"DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", "DEFAULT_VALUE", 
		"DEFERRABLE_VK", "DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", 
		"DEPTH_VK", "DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", 
		"DISASSOCIATE_VK", "DIV_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", 
		"DOT_ASTERISK", "DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", 
		"DROP_SEQUENCE", "DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", 
		"DYNAMIC_RETURN", "ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", 
		"ENCODING_VK", "ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", 
		"EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", 
		"EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", 
		"EXTRACT_VK", "FACTORING", "FAILURE_VK", "FIELDS", "FIELD_SPEC", "FINAL_VK", 
		"FIRST_VALUE_VK", "FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", 
		"FORALL_VK", "FORCE_VK", "FOREIGN_KEY", "FOREIGN_VK", "FOR_EACH_ROW", 
		"FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", "FUNCTION_ENABLING_OVER", 
		"FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", "FUNCTION_NAME", 
		"FUNCTION_SPEC", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", "HASH_VK", 
		"HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", 
		"HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", 
		"IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", 
		"INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", 
		"INITIALLY_VK", "INLINE_CONSTRAINT_CLAUSE", "INLINE_VK", "INNER_VK", "INOUT_VK", 
		"INSTANTIABLE_VK", "INSTEAD_VK", "INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", 
		"INVALIDATE_VK", "ISOLATION_VK", "IS_A_SET", "IS_EMPTY", "IS_INFINITE", 
		"IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", "IS_NOT_INFINITE", "IS_NOT_NAN", 
		"IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", "IS_NULL", "IS_OF_TYPE", 
		"IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", "KEEP_VK", "KEY_VK", 
		"LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", "LAST_VK", 
		"LEADING_VK", "LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", "LIKEC_VK", 
		"LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", "LOGIC_EXPR", 
		"LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_RAW", "LONG_VK", "LOOP_VK", "MAIN_MODEL", 
		"MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", "MEMBER_VK", 
		"MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", "MINVALUE_VK", 
		"MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", "MODEL_RULE", 
		"MODEL_RULES", "MODIFIER", "MODIFY_VK", "MOD_VK", "MONTH_VK", "MULTI_TABLE_MODE", 
		"NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", "NAV_VK", "NCHAR_CS_VK", 
		"NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", "NESTED_VK", "NEW_VK", 
		"NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", "NOENTITYESCAPING_VK", 
		"NOFORCE", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NONE_VK", "NON_DML", "NOORDER_VK", 
		"NORELY_VK", "NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_DEFERRABLE", "NOT_IN", 
		"NOT_LIKE", "NOT_NULL", "NOVALIDATE_VK", "NO_VK", "NULLS_VK", "NUMBER_VK", 
		"NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", "OBJECT_TYPE_DEF", 
		"OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "ON_DELETE", "OPEN_FOR", "OPEN_VK", 
		"ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", 
		"OSERROR_VK", "OUTER_JOIN_SIGN", "OUT_OF_LINE_CONSTRAINT", "OUT_VK", "OVERRIDING_VK", 
		"OVER_VK", "PACKAGE_NAME", "PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", 
		"PARAMETERS", "PARAMETERS_VK", "PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", 
		"PASSING_VK", "PERCENT_FOUND_VK", "PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", 
		"PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", "PERCENT_TYPE_VK", "PIPELINED_VK", 
		"PIPE_ROW", "PIPE_VK", "PIVOT_ALIAS", "PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", 
		"PIVOT_VK", "PLS_INTEGER_VK", "POSITIVEN_VK", "POSITIVE_VK", "PRAGMA_DECLARE", 
		"PRAGMA_VK", "PRECEDING_VK", "PRECISION", "PRECISION_VK", "PREDICTION_FUNCTION", 
		"PRIMARY_KEY", "PRIMARY_VK", "PROCEDURE_NAME", "PROCEDURE_SPEC", "QUERY_NAME", 
		"QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS", "RAISE_VK", "RANGE_VK", "RAW_VK", 
		"READ_VK", "REAL_VK", "RECORD_NAME", "RECORD_TYPE_DECLARE_FIELDS", "RECORD_TYPE_DECLARE_REFCURSOR", 
		"RECORD_VAR_DECLARE", "RECURSIVE_VK", "REFERENCES_CLAUSE", "REFERENCES_VK", 
		"REFERENCE_MODEL_NAME", "REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REJECT_VK", 
		"RELIES_ON_VK", "RELY_VK", "RENAME_VK", "REPLACE_VK", "RESPECT_VK", "RESTRICT_REFERENCES_VK", 
		"RESULT_CACHE_VK", "RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", 
		"ROLLBACK_SEGMENT_NAME", "ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", 
		"ROWID_VK", "ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", 
		"SAVEPOINT_VK", "SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", 
		"SEARCHED_CASE", "SEARCH_VK", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", 
		"SELECT_BASED_FOR", "SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", 
		"SELF_VK", "SEQUENCE_NAME", "SEQUENCE_VK", "SEQUENTIAL_VK", "SERIALIZABLE_VK", 
		"SERIALLY_REUSABLE_VK", "SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", 
		"SET_NULL", "SET_SERVEROUTPUT", "SET_TRANSACTION", "SET_VK", "SHOW_VK", 
		"SHUTDOWN_VK", "SIBLINGS_VK", "SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", 
		"SIMPLE_DML", "SIMPLE_INTEGER_VK", "SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", 
		"SMALLINT_VK", "SOME_VK", "SPECIFICATION_VK", "SQLDATA_VK", "SQLERROR_VK", 
		"SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", "STARTUP_VK", "STATEMENTS", 
		"STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", "STREAMING_CLAUSE", 
		"STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", "SUBQUERY", "SUBTYPE_DECLARE", 
		"SUCCESS_VK", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ALIAS", "TABLE_ELEMENT", 
		"TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", "TABLE_TYPE_DECLARE", 
		"TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", "TIMESTAMP_LTZ_UNCONSTRAINED_VK", 
		"TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", "TIMESTAMP_VK", 
		"TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", "TIMEZONE_REGION_VK", 
		"TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", "TRIGGER_NAME", 
		"TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", "TYPE_VK", 
		"UNARY_MINUS", "UNARY_PLUS", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", 
		"UNPIVOT_IN_ELEMENT", "UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", 
		"UROWID_VK", "USING_INDEX", "USING_MODE", "VALIDATE_VK", "VALUES_BOUND", 
		"VALUE_VK", "VARCHAR2_VK", "VARCHAR_VK", "VARIABLE_DECLARE", "VARIABLE_NAME", 
		"VARR_ARRAY_DEF", "VECTOR_EXPR", "VERSIONS_VK", "VERSION_VK", "VIEW_NAME", 
		"VIEW_TYPE_CONSTRAINTS", "VIEW_TYPE_CONSTRAINT_ITEM_INLINE", "WAIT_VK", 
		"WARNING_VK", "WELLFORMED_VK", "WHENEVER_VK", "WHILE_LOOP", "WITHIN_VK", 
		"WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", "XMLCAST_VK", 
		"XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", "XMLNAMESPACES_VK", 
		"XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", "XMLSERIALIZE_VK", 
		"XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", "XML_ELEMENT", 
		"XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK", "ALIAS", 
		"DATE_VK", "ORDER_VK", "RECORD_TYPE_DECLARE", "START_VK", "UNARY_OPERATOR"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AMPERSAND=5;
	public static final int APPROXIMATE_NUM_LIT=6;
	public static final int ASSIGN_OP=7;
	public static final int ASTERISK=8;
	public static final int AT_SIGN=9;
	public static final int B=10;
	public static final int BINDVAR=11;
	public static final int BIT_STRING_LIT=12;
	public static final int C=13;
	public static final int CARRET_OPERATOR_PART=14;
	public static final int CHAR_STRING=15;
	public static final int CHAR_STRING_PERL=16;
	public static final int COLON=17;
	public static final int COMMA=18;
	public static final int COMMENT=19;
	public static final int COMMENT_FRAGMENT=20;
	public static final int CONCATENATION_OP=21;
	public static final int D=22;
	public static final int DELIMITED_ID=23;
	public static final int DOUBLE_ASTERISK=24;
	public static final int DOUBLE_PERIOD=25;
	public static final int E=26;
	public static final int EQUALS_OP=27;
	public static final int EXACT_NUM_LIT=28;
	public static final int EXCLAMATION_OPERATOR_PART=29;
	public static final int F=30;
	public static final int G=31;
	public static final int GREATER_THAN_OP=32;
	public static final int GREATER_THAN_OR_EQUALS_OP=33;
	public static final int H=34;
	public static final int HEX_STRING_LIT=35;
	public static final int I=36;
	public static final int INTRODUCER=37;
	public static final int J=38;
	public static final int K=39;
	public static final int L=40;
	public static final int LEFT_BRACKET=41;
	public static final int LEFT_PAREN=42;
	public static final int LESS_THAN_OP=43;
	public static final int LESS_THAN_OR_EQUALS_OP=44;
	public static final int M=45;
	public static final int MINUS_SIGN=46;
	public static final int N=47;
	public static final int NATIONAL_CHAR_STRING_LIT=48;
	public static final int NEWLINE=49;
	public static final int NOT_EQUAL_OP=50;
	public static final int O=51;
	public static final int P=52;
	public static final int PERCENT=53;
	public static final int PERIOD=54;
	public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=55;
	public static final int PLSQL_NON_RESERVED_ELSIF=56;
	public static final int PLSQL_NON_RESERVED_MODEL=57;
	public static final int PLSQL_NON_RESERVED_PIVOT=58;
	public static final int PLSQL_NON_RESERVED_UNPIVOT=59;
	public static final int PLSQL_NON_RESERVED_USING=60;
	public static final int PLSQL_RESERVED_CLUSTERS=61;
	public static final int PLSQL_RESERVED_COLAUTH=62;
	public static final int PLSQL_RESERVED_COMPRESS=63;
	public static final int PLSQL_RESERVED_CRASH=64;
	public static final int PLSQL_RESERVED_EXCLUSIVE=65;
	public static final int PLSQL_RESERVED_IDENTIFIED=66;
	public static final int PLSQL_RESERVED_IF=67;
	public static final int PLSQL_RESERVED_INDEX=68;
	public static final int PLSQL_RESERVED_INDEXES=69;
	public static final int PLSQL_RESERVED_LOCK=70;
	public static final int PLSQL_RESERVED_MINUS=71;
	public static final int PLSQL_RESERVED_MODE=72;
	public static final int PLSQL_RESERVED_NOCOMPRESS=73;
	public static final int PLSQL_RESERVED_NOWAIT=74;
	public static final int PLSQL_RESERVED_RESOURCE=75;
	public static final int PLSQL_RESERVED_SHARE=76;
	public static final int PLSQL_RESERVED_START=77;
	public static final int PLSQL_RESERVED_TABAUTH=78;
	public static final int PLSQL_RESERVED_VIEWS=79;
	public static final int PLUS_SIGN=80;
	public static final int PROMPT=81;
	public static final int Q=82;
	public static final int QS_ANGLE=83;
	public static final int QS_BRACE=84;
	public static final int QS_BRACK=85;
	public static final int QS_OTHER=86;
	public static final int QS_OTHER_CH=87;
	public static final int QS_PAREN=88;
	public static final int QUESTION_MARK=89;
	public static final int QUOTE=90;
	public static final int R=91;
	public static final int REGULAR_ID=92;
	public static final int RIGHT_BRACKET=93;
	public static final int RIGHT_PAREN=94;
	public static final int S=95;
	public static final int SEMICOLON=96;
	public static final int SEPARATOR=97;
	public static final int SIMPLE_LETTER=98;
	public static final int SOLIDUS=99;
	public static final int SPACE=100;
	public static final int SQL92_RESERVED_ALL=101;
	public static final int SQL92_RESERVED_ALTER=102;
	public static final int SQL92_RESERVED_AND=103;
	public static final int SQL92_RESERVED_ANY=104;
	public static final int SQL92_RESERVED_AS=105;
	public static final int SQL92_RESERVED_ASC=106;
	public static final int SQL92_RESERVED_BEGIN=107;
	public static final int SQL92_RESERVED_BETWEEN=108;
	public static final int SQL92_RESERVED_BY=109;
	public static final int SQL92_RESERVED_CASE=110;
	public static final int SQL92_RESERVED_CHECK=111;
	public static final int SQL92_RESERVED_CONNECT=112;
	public static final int SQL92_RESERVED_CREATE=113;
	public static final int SQL92_RESERVED_CURRENT=114;
	public static final int SQL92_RESERVED_CURSOR=115;
	public static final int SQL92_RESERVED_DATE=116;
	public static final int SQL92_RESERVED_DECLARE=117;
	public static final int SQL92_RESERVED_DEFAULT=118;
	public static final int SQL92_RESERVED_DELETE=119;
	public static final int SQL92_RESERVED_DESC=120;
	public static final int SQL92_RESERVED_DISTINCT=121;
	public static final int SQL92_RESERVED_DROP=122;
	public static final int SQL92_RESERVED_ELSE=123;
	public static final int SQL92_RESERVED_END=124;
	public static final int SQL92_RESERVED_EXCEPTION=125;
	public static final int SQL92_RESERVED_EXISTS=126;
	public static final int SQL92_RESERVED_FALSE=127;
	public static final int SQL92_RESERVED_FETCH=128;
	public static final int SQL92_RESERVED_FOR=129;
	public static final int SQL92_RESERVED_FROM=130;
	public static final int SQL92_RESERVED_GOTO=131;
	public static final int SQL92_RESERVED_GRANT=132;
	public static final int SQL92_RESERVED_GROUP=133;
	public static final int SQL92_RESERVED_HAVING=134;
	public static final int SQL92_RESERVED_IN=135;
	public static final int SQL92_RESERVED_INSERT=136;
	public static final int SQL92_RESERVED_INTERSECT=137;
	public static final int SQL92_RESERVED_INTO=138;
	public static final int SQL92_RESERVED_IS=139;
	public static final int SQL92_RESERVED_LIKE=140;
	public static final int SQL92_RESERVED_NOT=141;
	public static final int SQL92_RESERVED_NULL=142;
	public static final int SQL92_RESERVED_OF=143;
	public static final int SQL92_RESERVED_ON=144;
	public static final int SQL92_RESERVED_OPTION=145;
	public static final int SQL92_RESERVED_OR=146;
	public static final int SQL92_RESERVED_ORDER=147;
	public static final int SQL92_RESERVED_OVERLAPS=148;
	public static final int SQL92_RESERVED_PRIOR=149;
	public static final int SQL92_RESERVED_PROCEDURE=150;
	public static final int SQL92_RESERVED_PUBLIC=151;
	public static final int SQL92_RESERVED_REVOKE=152;
	public static final int SQL92_RESERVED_SELECT=153;
	public static final int SQL92_RESERVED_SIZE=154;
	public static final int SQL92_RESERVED_TABLE=155;
	public static final int SQL92_RESERVED_THE=156;
	public static final int SQL92_RESERVED_THEN=157;
	public static final int SQL92_RESERVED_TO=158;
	public static final int SQL92_RESERVED_TRUE=159;
	public static final int SQL92_RESERVED_UNION=160;
	public static final int SQL92_RESERVED_UNIQUE=161;
	public static final int SQL92_RESERVED_UPDATE=162;
	public static final int SQL92_RESERVED_VALUES=163;
	public static final int SQL92_RESERVED_VIEW=164;
	public static final int SQL92_RESERVED_WHEN=165;
	public static final int SQL92_RESERVED_WHERE=166;
	public static final int SQL92_RESERVED_WITH=167;
	public static final int T=168;
	public static final int TILDE_OPERATOR_PART=169;
	public static final int U=170;
	public static final int UNDERSCORE=171;
	public static final int UNSIGNED_INTEGER=172;
	public static final int V=173;
	public static final int VERTICAL_BAR=174;
	public static final int W=175;
	public static final int X=176;
	public static final int Y=177;
	public static final int Z=178;
	public static final int ZV=179;
	public static final int ADD_VK=180;
	public static final int AFTER_EACH_ROW=181;
	public static final int AFTER_STATEMENT=182;
	public static final int AFTER_VK=183;
	public static final int AGENT_VK=184;
	public static final int AGGREGATE_VK=185;
	public static final int ALTER_ATTRIBUTE=186;
	public static final int ALTER_COLLECTION=187;
	public static final int ALTER_FUNCTION=188;
	public static final int ALTER_METHOD=189;
	public static final int ALTER_METHOD_ELEMENT=190;
	public static final int ALTER_PACKAGE=191;
	public static final int ALTER_PROCEDURE=192;
	public static final int ALTER_SEQUENCE=193;
	public static final int ALTER_TRIGGER=194;
	public static final int ALTER_TYPE=195;
	public static final int ANALYZE_VK=196;
	public static final int ANY_ELEMENT=197;
	public static final int ANY_MODE=198;
	public static final int ARGUMENT=200;
	public static final int ARGUMENTS=201;
	public static final int ASSIGN=202;
	public static final int ASSOCIATE_VK=203;
	public static final int ATTRIBUTE=205;
	public static final int ATTRIBUTES=206;
	public static final int ATTRIBUTE_NAME=207;
	public static final int AT_VK=209;
	public static final int AUDIT_VK=210;
	public static final int AUTHID_VK=211;
	public static final int AUTOMATIC_VK=212;
	public static final int AUTONOMOUS_TRANSACTION_VK=213;
	public static final int AUTO_VK=214;
	public static final int BATCH_VK=215;
	public static final int BEFORE_EACH_ROW=216;
	public static final int BEFORE_STATEMENT=217;
	public static final int BEFORE_VK=218;
	public static final int BFILE_VK=219;
	public static final int BINARY_DOUBLE_VK=220;
	public static final int BINARY_FLOAT_VK=221;
	public static final int BINARY_INTEGER_VK=222;
	public static final int BIT_VK=224;
	public static final int BLOB_VK=225;
	public static final int BLOCK=226;
	public static final int BLOCK_VK=227;
	public static final int BODY=228;
	public static final int BODY_MODE=229;
	public static final int BODY_VK=230;
	public static final int BOOLEAN_VK=231;
	public static final int BOTH_VK=232;
	public static final int BREADTH_VK=233;
	public static final int BULK_VK=234;
	public static final int BYTE_VK=235;
	public static final int CACHE_VK=236;
	public static final int CALL_MODE=237;
	public static final int CALL_VK=238;
	public static final int CANONICAL_VK=239;
	public static final int CASCADE_VK=241;
	public static final int CASCATED_ELEMENT=242;
	public static final int CAST_VK=243;
	public static final int CHARACTER_VK=244;
	public static final int CHAR_CS_VK=245;
	public static final int CHAR_SET_NAME=246;
	public static final int CHAR_VK=249;
	public static final int CHR_VK=250;
	public static final int CLOB_VK=251;
	public static final int CLOSE_VK=252;
	public static final int CLUSTER_VK=253;
	public static final int COLLECTION_MODE=254;
	public static final int COLLECTION_NAME=255;
	public static final int COLLECT_VK=256;
	public static final int COLUMNS=258;
	public static final int COLUMN_ALIAS=259;
	public static final int COLUMN_NAME=260;
	public static final int COMMENT_VK=262;
	public static final int COMMITTED_VK=263;
	public static final int COMMIT_VK=264;
	public static final int COMPATIBILITY_VK=265;
	public static final int COMPILATION_UNIT=266;
	public static final int COMPILER_PARAMETER=267;
	public static final int COMPILE_VK=268;
	public static final int COMPOUND_DML=269;
	public static final int COMPOUND_VK=270;
	public static final int CONDITIONAL_INSERT=272;
	public static final int CONSTANT_NEGATED=273;
	public static final int CONSTANT_VK=274;
	public static final int CONSTRAINT_NAME=275;
	public static final int CONSTRAINT_STATE=276;
	public static final int CONSTRAINT_VK=277;
	public static final int CONSTRUCTOR_SPEC=278;
	public static final int CONSTRUCTOR_VK=279;
	public static final int CONTENT_VK=280;
	public static final int CONTEXT_VK=281;
	public static final int CONTINUE_VK=282;
	public static final int CONVERT_VK=283;
	public static final int CORRUPT_XID_ALL_VK=284;
	public static final int CORRUPT_XID_VK=285;
	public static final int COST_CLASS_NAME=286;
	public static final int COST_VK=287;
	public static final int COUNT_VK=288;
	public static final int CREATE_FUNCTION=289;
	public static final int CREATE_PACKAGE_BODY=290;
	public static final int CREATE_PACKAGE_SPEC=291;
	public static final int CREATE_PROCEDURE=292;
	public static final int CREATE_SEQUENCE=293;
	public static final int CREATE_TRIGGER=294;
	public static final int CREATE_TYPE_BODY=295;
	public static final int CREATE_TYPE_SPEC=296;
	public static final int CREATE_VIEW=297;
	public static final int CROSS_VK=298;
	public static final int CUBE_VK=299;
	public static final int CURRENT_USER_VK=300;
	public static final int CURRENT_VK=301;
	public static final int CURSOR_BASED_FOR=302;
	public static final int CURSOR_DECLARE=303;
	public static final int CURSOR_NAME=304;
	public static final int CUSTOMDATUM_VK=305;
	public static final int CUSTOM_TYPE=306;
	public static final int CYCLE_VK=307;
	public static final int C_VK=308;
	public static final int DATABASE_VK=309;
	public static final int DATETIME_OP=310;
	public static final int DAY_VK=311;
	public static final int DBTIMEZONE_VK=312;
	public static final int DB_ROLE_CHANGE_VK=313;
	public static final int DDL_VK=314;
	public static final int DEBUG_VK=315;
	public static final int DECIMAL_VK=316;
	public static final int DECOMPOSE_VK=317;
	public static final int DECREMENT_VK=318;
	public static final int DEC_VK=319;
	public static final int DEFAULTS_VK=320;
	public static final int DEFAULT_VALUE=321;
	public static final int DEFERRABLE_VK=322;
	public static final int DEFERRED_VK=323;
	public static final int DEFINER_VK=324;
	public static final int DENSE_RANK_VK=326;
	public static final int DEPENDENT_HANDLING=327;
	public static final int DEPTH_VK=328;
	public static final int DETERMINISTIC_VK=329;
	public static final int DIMENSION_VK=330;
	public static final int DIRECT_MODE=331;
	public static final int DISABLE_VK=332;
	public static final int DISASSOCIATE_VK=333;
	public static final int DIV_VK=334;
	public static final int DML_EVENT=335;
	public static final int DML_EVENT_ELEMENT=336;
	public static final int DOCUMENT_VK=337;
	public static final int DOT_ASTERISK=338;
	public static final int DOUBLE_VK=339;
	public static final int DROP_FUNCTION=340;
	public static final int DROP_PACKAGE=341;
	public static final int DROP_PROCEDURE=342;
	public static final int DROP_SEQUENCE=343;
	public static final int DROP_TRIGGER=344;
	public static final int DROP_TYPE=345;
	public static final int DSINTERVAL_UNCONSTRAINED_VK=346;
	public static final int DYNAMIC_RETURN=347;
	public static final int ELEMENT=348;
	public static final int ELEMENTS_MODE=349;
	public static final int ELEMENT_SPEC=350;
	public static final int ENABLE_VK=351;
	public static final int ENCODING_VK=352;
	public static final int ENTITYESCAPING_VK=353;
	public static final int EVALNAME_VK=355;
	public static final int EXCEPTIONS_VK=357;
	public static final int EXCEPTION_DECLARE=358;
	public static final int EXCEPTION_INIT_VK=359;
	public static final int EXCEPTION_NAME=360;
	public static final int EXCLUDE_VK=362;
	public static final int EXECUTE_VK=363;
	public static final int EXIT_VK=364;
	public static final int EXPLAIN_STATEMENT=365;
	public static final int EXPR=366;
	public static final int EXPR_LIST=367;
	public static final int EXTERNAL_MODE=368;
	public static final int EXTERNAL_VK=369;
	public static final int EXTRACT_VK=370;
	public static final int FACTORING=371;
	public static final int FAILURE_VK=372;
	public static final int FIELDS=373;
	public static final int FIELD_SPEC=374;
	public static final int FINAL_VK=375;
	public static final int FIRST_VALUE_VK=376;
	public static final int FIRST_VK=377;
	public static final int FLOAT_VK=378;
	public static final int FOLLOWING_VK=379;
	public static final int FOLLOWS_VK=380;
	public static final int FORALL_VK=381;
	public static final int FORCE_VK=382;
	public static final int FOREIGN_KEY=383;
	public static final int FOREIGN_VK=384;
	public static final int FOR_EACH_ROW=385;
	public static final int FOR_LOOP=386;
	public static final int FOR_MULTI_COLUMN=387;
	public static final int FOR_SINGLE_COLUMN=388;
	public static final int FULL_VK=389;
	public static final int FUNCTION_ENABLING_OVER=390;
	public static final int FUNCTION_ENABLING_USING=391;
	public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=392;
	public static final int FUNCTION_NAME=393;
	public static final int FUNCTION_SPEC=394;
	public static final int GROUPING_VK=397;
	public static final int GROUPIN_SET=398;
	public static final int GROUP_BY_ELEMENT=399;
	public static final int HASH_VK=400;
	public static final int HIDE_VK=401;
	public static final int HIERARCHICAL=402;
	public static final int HOSTED_VARIABLE=403;
	public static final int HOSTED_VARIABLE_NAME=404;
	public static final int HOSTED_VARIABLE_ROUTINE_CALL=405;
	public static final int HOUR_VK=406;
	public static final int ID=407;
	public static final int IGNORE_VK=408;
	public static final int IMMEDIATE_VK=409;
	public static final int IMPLEMENTATION_TYPE_NAME=410;
	public static final int INCLUDE_VK=411;
	public static final int INCLUDING_VK=412;
	public static final int INCREMENT_VK=413;
	public static final int INDENT_VK=414;
	public static final int INDEXED_BY=415;
	public static final int INDEXED_FOR=416;
	public static final int INDEX_NAME=417;
	public static final int INDICES_BOUND=418;
	public static final int INITIALLY_VK=419;
	public static final int INLINE_CONSTRAINT_CLAUSE=420;
	public static final int INLINE_VK=421;
	public static final int INNER_VK=422;
	public static final int INOUT_VK=423;
	public static final int INSTANTIABLE_VK=424;
	public static final int INSTEAD_VK=425;
	public static final int INTEGER_VK=426;
	public static final int INTERVAL_DATATYPE=427;
	public static final int INT_VK=429;
	public static final int INVALIDATE_VK=430;
	public static final int ISOLATION_VK=431;
	public static final int IS_A_SET=432;
	public static final int IS_EMPTY=433;
	public static final int IS_INFINITE=434;
	public static final int IS_NAN=435;
	public static final int IS_NOT_A_SET=436;
	public static final int IS_NOT_EMPTY=437;
	public static final int IS_NOT_INFINITE=438;
	public static final int IS_NOT_NAN=439;
	public static final int IS_NOT_NULL=440;
	public static final int IS_NOT_OF_TYPE=441;
	public static final int IS_NOT_PRESENT=442;
	public static final int IS_NULL=443;
	public static final int IS_OF_TYPE=444;
	public static final int IS_PRESENT=445;
	public static final int ITERATE_VK=446;
	public static final int JAVA_VK=447;
	public static final int JOIN_DEF=448;
	public static final int KEEP_VK=449;
	public static final int KEY_VK=450;
	public static final int LABEL_DECLARE=451;
	public static final int LABEL_NAME=452;
	public static final int LANGUAGE_VK=453;
	public static final int LAST_VALUE_VK=454;
	public static final int LAST_VK=455;
	public static final int LEADING_VK=456;
	public static final int LEFT_VK=459;
	public static final int LIBRARY_VK=462;
	public static final int LIKE2_VK=463;
	public static final int LIKE4_VK=464;
	public static final int LIKEC_VK=465;
	public static final int LIMIT_VK=466;
	public static final int LINK_NAME=467;
	public static final int LOCAL_VK=468;
	public static final int LOCK_TABLE_ELEMENT=469;
	public static final int LOGIC_EXPR=470;
	public static final int LOGOFF_VK=471;
	public static final int LOGON_VK=472;
	public static final int LOG_VK=473;
	public static final int LONG_RAW=474;
	public static final int LONG_VK=475;
	public static final int LOOP_VK=476;
	public static final int MAIN_MODEL=477;
	public static final int MAIN_MODEL_NAME=478;
	public static final int MAP_VK=479;
	public static final int MAXVALUE_VK=480;
	public static final int MEASURES_VK=481;
	public static final int MEMBER_VK=482;
	public static final int MERGE_INSERT=483;
	public static final int MERGE_UPDATE=484;
	public static final int MERGE_VK=485;
	public static final int MINUTE_VK=487;
	public static final int MINVALUE_VK=488;
	public static final int MLSLABEL_VK=489;
	public static final int MODEL_COLUMN=490;
	public static final int MODEL_COLUMNS=491;
	public static final int MODEL_EXPRESSION=492;
	public static final int MODEL_RULE=493;
	public static final int MODEL_RULES=494;
	public static final int MODIFIER=495;
	public static final int MODIFY_VK=496;
	public static final int MOD_VK=497;
	public static final int MONTH_VK=498;
	public static final int MULTI_TABLE_MODE=499;
	public static final int NAME_VK=500;
	public static final int NATIVE_DATATYPE=502;
	public static final int NATURALN_VK=503;
	public static final int NATURAL_VK=504;
	public static final int NAV_VK=505;
	public static final int NCHAR_CS_VK=506;
	public static final int NCHAR_VK=507;
	public static final int NCLOB_VK=508;
	public static final int NESTED_TABLE_TYPE_DEF=509;
	public static final int NESTED_VK=510;
	public static final int NEW_VK=511;
	public static final int NOAUDIT_VK=512;
	public static final int NOCACHE_VK=513;
	public static final int NOCOPY_VK=514;
	public static final int NOCYCLE_VK=515;
	public static final int NOENTITYESCAPING_VK=516;
	public static final int NOFORCE=517;
	public static final int NOMAXVALUE_VK=518;
	public static final int NOMINVALUE_VK=519;
	public static final int NONE_VK=520;
	public static final int NON_DML=521;
	public static final int NOORDER_VK=522;
	public static final int NORELY_VK=523;
	public static final int NOSCHEMACHECK_VK=524;
	public static final int NOT_BETWEEN=525;
	public static final int NOT_DEFERRABLE=526;
	public static final int NOT_IN=528;
	public static final int NOT_LIKE=529;
	public static final int NOT_NULL=530;
	public static final int NOVALIDATE_VK=531;
	public static final int NO_VK=532;
	public static final int NULLS_VK=533;
	public static final int NUMBER_VK=534;
	public static final int NUMERIC_VK=535;
	public static final int NVARCHAR2_VK=536;
	public static final int OBJECT_AS=537;
	public static final int OBJECT_MEMBERS=538;
	public static final int OBJECT_TYPE_DEF=539;
	public static final int OBJECT_VK=540;
	public static final int OFF_VK=541;
	public static final int OLD_VK=542;
	public static final int ONLY_VK=543;
	public static final int ON_DELETE=544;
	public static final int OPEN_FOR=545;
	public static final int OPEN_VK=546;
	public static final int ORADATA_VK=547;
	public static final int ORDER_BY_ELEMENT=548;
	public static final int ORDER_BY_ELEMENTS=549;
	public static final int ORDINALITY_VK=550;
	public static final int OSERROR_VK=551;
	public static final int OUTER_JOIN_SIGN=552;
	public static final int OUT_OF_LINE_CONSTRAINT=553;
	public static final int OUT_VK=554;
	public static final int OVERRIDING_VK=555;
	public static final int OVER_VK=556;
	public static final int PACKAGE_NAME=557;
	public static final int PACKAGE_VK=558;
	public static final int PARALLEL_ENABLE_VK=559;
	public static final int PARAMETER=560;
	public static final int PARAMETERS=561;
	public static final int PARAMETERS_VK=562;
	public static final int PARAMETER_NAME=563;
	public static final int PARENT_VK=564;
	public static final int PARTITION_VK=565;
	public static final int PASSING_VK=566;
	public static final int PERCENT_FOUND_VK=568;
	public static final int PERCENT_ISOPEN_VK=569;
	public static final int PERCENT_NOTFOUND_VK=570;
	public static final int PERCENT_ROWCOUNT_VK=571;
	public static final int PERCENT_ROWTYPE_VK=572;
	public static final int PERCENT_TYPE_VK=573;
	public static final int PIPELINED_VK=575;
	public static final int PIPE_ROW=576;
	public static final int PIPE_VK=577;
	public static final int PIVOT_ALIAS=578;
	public static final int PIVOT_ELEMENT=579;
	public static final int PIVOT_IN_ELEMENT=580;
	public static final int PIVOT_VK=581;
	public static final int PLS_INTEGER_VK=596;
	public static final int POSITIVEN_VK=598;
	public static final int POSITIVE_VK=599;
	public static final int PRAGMA_DECLARE=600;
	public static final int PRAGMA_VK=601;
	public static final int PRECEDING_VK=602;
	public static final int PRECISION=603;
	public static final int PRECISION_VK=604;
	public static final int PREDICTION_FUNCTION=605;
	public static final int PRIMARY_KEY=606;
	public static final int PRIMARY_VK=607;
	public static final int PROCEDURE_NAME=608;
	public static final int PROCEDURE_SPEC=609;
	public static final int QUERY_NAME=611;
	public static final int QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS=612;
	public static final int RAISE_VK=613;
	public static final int RANGE_VK=614;
	public static final int RAW_VK=615;
	public static final int READ_VK=616;
	public static final int REAL_VK=617;
	public static final int RECORD_NAME=618;
	public static final int RECORD_TYPE_DECLARE_FIELDS=619;
	public static final int RECORD_TYPE_DECLARE_REFCURSOR=620;
	public static final int RECORD_VAR_DECLARE=621;
	public static final int RECURSIVE_VK=622;
	public static final int REFERENCES_CLAUSE=623;
	public static final int REFERENCES_VK=624;
	public static final int REFERENCE_MODEL_NAME=625;
	public static final int REFERENCE_VK=626;
	public static final int REFERENCING_VK=627;
	public static final int REF_VK=628;
	public static final int REJECT_VK=630;
	public static final int RELIES_ON_VK=631;
	public static final int RELY_VK=632;
	public static final int RENAME_VK=633;
	public static final int REPLACE_VK=634;
	public static final int RESPECT_VK=635;
	public static final int RESTRICT_REFERENCES_VK=636;
	public static final int RESULT_CACHE_VK=637;
	public static final int RETURN_VK=638;
	public static final int REUSE_VK=639;
	public static final int REVERSE_VK=640;
	public static final int RIGHT_VK=643;
	public static final int ROLLBACK_SEGMENT_NAME=644;
	public static final int ROLLBACK_VK=645;
	public static final int ROLLUP_VK=646;
	public static final int ROUTINE_CALL=647;
	public static final int ROUTINE_NAME=648;
	public static final int ROWID_VK=649;
	public static final int ROWS_VK=650;
	public static final int ROW_VK=651;
	public static final int RULES_VK=652;
	public static final int SAMPLE_VK=653;
	public static final int SAVEPOINT_NAME=654;
	public static final int SAVEPOINT_VK=655;
	public static final int SCHEMACHECK_VK=656;
	public static final int SCHEMA_NAME=657;
	public static final int SCHEMA_VK=658;
	public static final int SCN_VK=659;
	public static final int SEARCHED_CASE=660;
	public static final int SEARCH_VK=661;
	public static final int SECOND_VK=662;
	public static final int SEED_VK=663;
	public static final int SELECTED_TABLEVIEW=664;
	public static final int SELECT_BASED_FOR=665;
	public static final int SELECT_ITEM=666;
	public static final int SELECT_LIST=667;
	public static final int SELECT_MODE=668;
	public static final int SELECT_STATEMENT=669;
	public static final int SELF_VK=670;
	public static final int SEQUENCE_NAME=672;
	public static final int SEQUENCE_VK=673;
	public static final int SEQUENTIAL_VK=674;
	public static final int SERIALIZABLE_VK=675;
	public static final int SERIALLY_REUSABLE_VK=676;
	public static final int SERVERERROR_VK=677;
	public static final int SESSIONTIMEZONE_VK=678;
	public static final int SET_CONSTRAINT=679;
	public static final int SET_NULL=680;
	public static final int SET_SERVEROUTPUT=681;
	public static final int SET_TRANSACTION=682;
	public static final int SET_VK=683;
	public static final int SHOW_VK=684;
	public static final int SHUTDOWN_VK=685;
	public static final int SIBLINGS_VK=686;
	public static final int SIGNTYPE_VK=687;
	public static final int SIMPLE_BOUND=688;
	public static final int SIMPLE_CASE=689;
	public static final int SIMPLE_DML=690;
	public static final int SIMPLE_INTEGER_VK=691;
	public static final int SINGLE_TABLE_MODE=692;
	public static final int SINGLE_VK=693;
	public static final int SKIP_VK=694;
	public static final int SMALLINT_VK=695;
	public static final int SOME_VK=697;
	public static final int SPECIFICATION_VK=698;
	public static final int SQLDATA_VK=764;
	public static final int SQLERROR_VK=765;
	public static final int SQL_SCRIPT=766;
	public static final int STANDALONE_VK=767;
	public static final int STANDARD_FUNCTION=768;
	public static final int STARTUP_VK=769;
	public static final int STATEMENTS=770;
	public static final int STATIC_RETURNING=771;
	public static final int STATIC_VK=772;
	public static final int STATISTICS_VK=773;
	public static final int STREAMING_CLAUSE=774;
	public static final int STRING_VK=775;
	public static final int SUBMULTISET_VK=776;
	public static final int SUBPARTITION_VK=777;
	public static final int SUBQUERY=778;
	public static final int SUBTYPE_DECLARE=779;
	public static final int SUCCESS_VK=780;
	public static final int SUSPEND_VK=781;
	public static final int TABLEVIEW_NAME=782;
	public static final int TABLE_ALIAS=783;
	public static final int TABLE_ELEMENT=784;
	public static final int TABLE_EXPRESSION=785;
	public static final int TABLE_REF=786;
	public static final int TABLE_REF_ELEMENT=787;
	public static final int TABLE_TYPE_DECLARE=788;
	public static final int TABLE_VAR_DECLARE=789;
	public static final int TABLE_VAR_NAME=790;
	public static final int THREE_DOTS=791;
	public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=792;
	public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=793;
	public static final int TIMESTAMP_UNCONSTRAINED_VK=794;
	public static final int TIMESTAMP_VK=795;
	public static final int TIMEZONE_ABBR_VK=796;
	public static final int TIMEZONE_HOUR_VK=797;
	public static final int TIMEZONE_MINUTE_VK=798;
	public static final int TIMEZONE_REGION_VK=799;
	public static final int TIME_VK=800;
	public static final int TRAILING_VK=801;
	public static final int TRANSLATE_VK=802;
	public static final int TREAT_VK=803;
	public static final int TRIGGER_NAME=804;
	public static final int TRIM_VK=805;
	public static final int TRUNCATE_VK=806;
	public static final int TYPE_BODY_ELEMENTS=807;
	public static final int TYPE_NAME=808;
	public static final int TYPE_VK=809;
	public static final int UNARY_MINUS=810;
	public static final int UNARY_PLUS=811;
	public static final int UNBOUNDED_VK=812;
	public static final int UNDER_VK=813;
	public static final int UNLIMITED_VK=814;
	public static final int UNPIVOT_IN_ELEMENT=815;
	public static final int UNPIVOT_VK=816;
	public static final int UNTIL_VK=818;
	public static final int UPDATED_VK=819;
	public static final int UPSERT_VK=820;
	public static final int UROWID_VK=821;
	public static final int USING_INDEX=822;
	public static final int USING_MODE=823;
	public static final int VALIDATE_VK=824;
	public static final int VALUES_BOUND=825;
	public static final int VALUE_VK=826;
	public static final int VARCHAR2_VK=827;
	public static final int VARCHAR_VK=828;
	public static final int VARIABLE_DECLARE=829;
	public static final int VARIABLE_NAME=830;
	public static final int VARR_ARRAY_DEF=831;
	public static final int VECTOR_EXPR=832;
	public static final int VERSIONS_VK=833;
	public static final int VERSION_VK=834;
	public static final int VIEW_NAME=836;
	public static final int VIEW_TYPE_CONSTRAINTS=837;
	public static final int VIEW_TYPE_CONSTRAINT_ITEM_INLINE=838;
	public static final int WAIT_VK=839;
	public static final int WARNING_VK=840;
	public static final int WELLFORMED_VK=841;
	public static final int WHENEVER_VK=842;
	public static final int WHILE_LOOP=843;
	public static final int WITHIN_VK=844;
	public static final int WORK_VK=845;
	public static final int WRITE_VK=846;
	public static final int XMLAGG_VK=847;
	public static final int XMLATTRIBUTES_VK=848;
	public static final int XMLCAST_VK=849;
	public static final int XMLCOLATTVAL_VK=850;
	public static final int XMLELEMENT_VK=851;
	public static final int XMLEXISTS_VK=852;
	public static final int XMLFOREST_VK=853;
	public static final int XMLNAMESPACES_VK=854;
	public static final int XMLPARSE_VK=855;
	public static final int XMLPI_VK=856;
	public static final int XMLQUERY_VK=857;
	public static final int XMLROOT_VK=858;
	public static final int XMLSERIALIZE_VK=859;
	public static final int XMLTABLE_VK=860;
	public static final int XML_ALIAS=861;
	public static final int XML_COLUMN=862;
	public static final int XML_COLUMN_NAME=863;
	public static final int XML_ELEMENT=864;
	public static final int XML_VK=865;
	public static final int YEAR_VK=866;
	public static final int YES_VK=867;
	public static final int YMINTERVAL_UNCONSTRAINED_VK=868;
	public static final int ALIAS=869;
	public static final int DATE_VK=870;
	public static final int ORDER_VK=871;
	public static final int RECORD_TYPE_DECLARE=872;
	public static final int START_VK=873;
	public static final int UNARY_OPERATOR=874;

	// delegates
	public TreeParser[] getDelegates() {
		return new TreeParser[] {};
	}

	// delegators


	public PLSQLWalker(TreeNodeStream input) {
		this(input, new RecognizerSharedState());
	}
	public PLSQLWalker(TreeNodeStream input, RecognizerSharedState state) {
		super(input, state);
	}

	@Override public String[] getTokenNames() { return PLSQLWalker.tokenNames; }
	@Override public String getGrammarFileName() { return "F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g"; }



	// $ANTLR start "compilation_unit"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:46:1: compilation_unit : ^( COMPILATION_UNIT ( unit_statement )* ) ;
	public final void compilation_unit() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:47:5: ( ^( COMPILATION_UNIT ( unit_statement )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:47:10: ^( COMPILATION_UNIT ( unit_statement )* )
			{
			match(input,COMPILATION_UNIT,FOLLOW_COMPILATION_UNIT_in_compilation_unit51); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:47:29: ( unit_statement )*
				loop1:
				while (true) {
					int alt1=2;
					int LA1_0 = input.LA(1);
					if ( (LA1_0==ALTER_FUNCTION||(LA1_0 >= ALTER_PACKAGE && LA1_0 <= ALTER_TYPE)||(LA1_0 >= CREATE_FUNCTION && LA1_0 <= CREATE_TYPE_SPEC)||(LA1_0 >= DROP_FUNCTION && LA1_0 <= DROP_TYPE)) ) {
						alt1=1;
					}

					switch (alt1) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:47:29: unit_statement
						{
						pushFollow(FOLLOW_unit_statement_in_compilation_unit53);
						unit_statement();
						state._fsp--;

						}
						break;

					default :
						break loop1;
					}
				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "compilation_unit"



	// $ANTLR start "sql_script"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:50:1: sql_script : ^( SQL_SCRIPT ( serveroutput_declaration )? seq_of_statements ) ;
	public final void sql_script() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:51:5: ( ^( SQL_SCRIPT ( serveroutput_declaration )? seq_of_statements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:51:10: ^( SQL_SCRIPT ( serveroutput_declaration )? seq_of_statements )
			{
			match(input,SQL_SCRIPT,FOLLOW_SQL_SCRIPT_in_sql_script76); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:51:23: ( serveroutput_declaration )?
			int alt2=2;
			int LA2_0 = input.LA(1);
			if ( (LA2_0==SET_SERVEROUTPUT) ) {
				alt2=1;
			}
			switch (alt2) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:51:23: serveroutput_declaration
					{
					pushFollow(FOLLOW_serveroutput_declaration_in_sql_script78);
					serveroutput_declaration();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_seq_of_statements_in_sql_script81);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "sql_script"



	// $ANTLR start "serveroutput_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:54:1: serveroutput_declaration : ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) ;
	public final void serveroutput_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:55:5: ( ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:55:10: ^( SET_SERVEROUTPUT ( SQL92_RESERVED_ON | OFF_VK ) )
			{
			match(input,SET_SERVEROUTPUT,FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration103); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_ON||input.LA(1)==OFF_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "serveroutput_declaration"



	// $ANTLR start "unit_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:58:1: unit_statement : ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | create_package | create_sequence | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type );
	public final void unit_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:59:5: ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | create_package | create_sequence | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type )
			int alt3=18;
			switch ( input.LA(1) ) {
			case ALTER_FUNCTION:
				{
				alt3=1;
				}
				break;
			case ALTER_PACKAGE:
				{
				alt3=2;
				}
				break;
			case ALTER_PROCEDURE:
				{
				alt3=3;
				}
				break;
			case ALTER_SEQUENCE:
				{
				alt3=4;
				}
				break;
			case ALTER_TRIGGER:
				{
				alt3=5;
				}
				break;
			case ALTER_TYPE:
				{
				alt3=6;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt3=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt3=8;
				}
				break;
			case CREATE_PACKAGE_BODY:
			case CREATE_PACKAGE_SPEC:
				{
				alt3=9;
				}
				break;
			case CREATE_SEQUENCE:
				{
				alt3=10;
				}
				break;
			case CREATE_TRIGGER:
				{
				alt3=11;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt3=12;
				}
				break;
			case DROP_FUNCTION:
				{
				alt3=13;
				}
				break;
			case DROP_PACKAGE:
				{
				alt3=14;
				}
				break;
			case DROP_PROCEDURE:
				{
				alt3=15;
				}
				break;
			case DROP_SEQUENCE:
				{
				alt3=16;
				}
				break;
			case DROP_TRIGGER:
				{
				alt3=17;
				}
				break;
			case DROP_TYPE:
				{
				alt3=18;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}
			switch (alt3) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:59:10: alter_function
					{
					pushFollow(FOLLOW_alter_function_in_unit_statement130);
					alter_function();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:60:10: alter_package
					{
					pushFollow(FOLLOW_alter_package_in_unit_statement141);
					alter_package();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:61:10: alter_procedure
					{
					pushFollow(FOLLOW_alter_procedure_in_unit_statement152);
					alter_procedure();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:62:10: alter_sequence
					{
					pushFollow(FOLLOW_alter_sequence_in_unit_statement163);
					alter_sequence();
					state._fsp--;

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:63:10: alter_trigger
					{
					pushFollow(FOLLOW_alter_trigger_in_unit_statement174);
					alter_trigger();
					state._fsp--;

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:64:10: alter_type
					{
					pushFollow(FOLLOW_alter_type_in_unit_statement185);
					alter_type();
					state._fsp--;

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:65:10: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_unit_statement196);
					create_function_body();
					state._fsp--;

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:66:10: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_unit_statement207);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:67:10: create_package
					{
					pushFollow(FOLLOW_create_package_in_unit_statement218);
					create_package();
					state._fsp--;

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:68:10: create_sequence
					{
					pushFollow(FOLLOW_create_sequence_in_unit_statement229);
					create_sequence();
					state._fsp--;

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:69:10: create_trigger
					{
					pushFollow(FOLLOW_create_trigger_in_unit_statement240);
					create_trigger();
					state._fsp--;

					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:70:10: create_type
					{
					pushFollow(FOLLOW_create_type_in_unit_statement251);
					create_type();
					state._fsp--;

					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:71:10: drop_function
					{
					pushFollow(FOLLOW_drop_function_in_unit_statement262);
					drop_function();
					state._fsp--;

					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:72:10: drop_package
					{
					pushFollow(FOLLOW_drop_package_in_unit_statement273);
					drop_package();
					state._fsp--;

					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:73:10: drop_procedure
					{
					pushFollow(FOLLOW_drop_procedure_in_unit_statement284);
					drop_procedure();
					state._fsp--;

					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:74:10: drop_sequence
					{
					pushFollow(FOLLOW_drop_sequence_in_unit_statement295);
					drop_sequence();
					state._fsp--;

					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:75:10: drop_trigger
					{
					pushFollow(FOLLOW_drop_trigger_in_unit_statement306);
					drop_trigger();
					state._fsp--;

					}
					break;
				case 18 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:76:10: drop_type
					{
					pushFollow(FOLLOW_drop_type_in_unit_statement317);
					drop_type();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "unit_statement"



	// $ANTLR start "drop_function"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:83:1: drop_function : ^( DROP_FUNCTION function_name ) ;
	public final void drop_function() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:84:5: ( ^( DROP_FUNCTION function_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:84:10: ^( DROP_FUNCTION function_name )
			{
			match(input,DROP_FUNCTION,FOLLOW_DROP_FUNCTION_in_drop_function342); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_drop_function344);
			function_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "drop_function"



	// $ANTLR start "alter_function"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:87:1: alter_function : ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ;
	public final void alter_function() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:88:5: ( ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:88:10: ^( ALTER_FUNCTION function_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_FUNCTION,FOLLOW_ALTER_FUNCTION_in_alter_function366); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_alter_function368);
			function_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:88:41: ( DEBUG_VK )?
			int alt4=2;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==DEBUG_VK) ) {
				alt4=1;
			}
			switch (alt4) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:88:41: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_function370); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:88:51: ( REUSE_VK )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==REUSE_VK) ) {
				alt5=1;
			}
			switch (alt5) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:88:51: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_function373); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:88:61: ( compiler_parameters_clause )*
			loop6:
			while (true) {
				int alt6=2;
				int LA6_0 = input.LA(1);
				if ( (LA6_0==COMPILER_PARAMETER) ) {
					alt6=1;
				}

				switch (alt6) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:88:61: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function376);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop6;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alter_function"



	// $ANTLR start "create_function_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:91:1: create_function_body : ^( CREATE_FUNCTION ( REPLACE_VK )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) ) ;
	public final void create_function_body() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:92:5: ( ^( CREATE_FUNCTION ( REPLACE_VK )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:92:10: ^( CREATE_FUNCTION ( REPLACE_VK )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) ) )
			{
			match(input,CREATE_FUNCTION,FOLLOW_CREATE_FUNCTION_in_create_function_body399); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:92:28: ( REPLACE_VK )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==REPLACE_VK) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:92:28: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_function_body401); 
					}
					break;

			}

			pushFollow(FOLLOW_function_name_in_create_function_body404);
			function_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_create_function_body406);
			type_spec();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_function_body409); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:92:77: ( parameter )*
				loop8:
				while (true) {
					int alt8=2;
					int LA8_0 = input.LA(1);
					if ( (LA8_0==PARAMETER) ) {
						alt8=1;
					}

					switch (alt8) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:92:77: parameter
						{
						pushFollow(FOLLOW_parameter_in_create_function_body411);
						parameter();
						state._fsp--;

						}
						break;

					default :
						break loop8;
					}
				}

				match(input, Token.UP, null); 
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:93:13: ( invoker_rights_clause )*
			loop9:
			while (true) {
				int alt9=2;
				int LA9_0 = input.LA(1);
				if ( (LA9_0==AUTHID_VK) ) {
					alt9=1;
				}

				switch (alt9) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:93:13: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body427);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

				default :
					break loop9;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:93:36: ( parallel_enable_clause )*
			loop10:
			while (true) {
				int alt10=2;
				int LA10_0 = input.LA(1);
				if ( (LA10_0==PARALLEL_ENABLE_VK) ) {
					alt10=1;
				}

				switch (alt10) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:93:36: parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body430);
					parallel_enable_clause();
					state._fsp--;

					}
					break;

				default :
					break loop10;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:93:60: ( result_cache_clause )*
			loop11:
			while (true) {
				int alt11=2;
				int LA11_0 = input.LA(1);
				if ( (LA11_0==RESULT_CACHE_VK) ) {
					alt11=1;
				}

				switch (alt11) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:93:60: result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_create_function_body433);
					result_cache_clause();
					state._fsp--;

					}
					break;

				default :
					break loop11;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:93:81: ( DETERMINISTIC_VK )*
			loop12:
			while (true) {
				int alt12=2;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==DETERMINISTIC_VK) ) {
					alt12=1;
				}

				switch (alt12) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:93:81: DETERMINISTIC_VK
					{
					match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_create_function_body436); 
					}
					break;

				default :
					break loop12;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:94:13: ( ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name ) | ^( CALL_MODE ( PIPELINED_VK )? call_spec ) | ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body ) )
			int alt18=3;
			switch ( input.LA(1) ) {
			case USING_MODE:
				{
				alt18=1;
				}
				break;
			case CALL_MODE:
				{
				alt18=2;
				}
				break;
			case BODY_MODE:
				{
				alt18=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 18, 0, input);
				throw nvae;
			}
			switch (alt18) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:94:18: ^( USING_MODE ( PIPELINED_VK )? ( AGGREGATE_VK )? implementation_type_name )
					{
					match(input,USING_MODE,FOLLOW_USING_MODE_in_create_function_body457); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:94:31: ( PIPELINED_VK )?
					int alt13=2;
					int LA13_0 = input.LA(1);
					if ( (LA13_0==PIPELINED_VK) ) {
						alt13=1;
					}
					switch (alt13) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:94:31: PIPELINED_VK
							{
							match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body459); 
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:94:45: ( AGGREGATE_VK )?
					int alt14=2;
					int LA14_0 = input.LA(1);
					if ( (LA14_0==AGGREGATE_VK) ) {
						alt14=1;
					}
					switch (alt14) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:94:45: AGGREGATE_VK
							{
							match(input,AGGREGATE_VK,FOLLOW_AGGREGATE_VK_in_create_function_body462); 
							}
							break;

					}

					pushFollow(FOLLOW_implementation_type_name_in_create_function_body465);
					implementation_type_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:95:18: ^( CALL_MODE ( PIPELINED_VK )? call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_function_body486); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:95:30: ( PIPELINED_VK )?
					int alt15=2;
					int LA15_0 = input.LA(1);
					if ( (LA15_0==PIPELINED_VK) ) {
						alt15=1;
					}
					switch (alt15) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:95:30: PIPELINED_VK
							{
							match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body488); 
							}
							break;

					}

					pushFollow(FOLLOW_call_spec_in_create_function_body491);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:96:18: ^( BODY_MODE ( PIPELINED_VK )? ( declare_spec )* body )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_function_body512); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:96:30: ( PIPELINED_VK )?
					int alt16=2;
					int LA16_0 = input.LA(1);
					if ( (LA16_0==PIPELINED_VK) ) {
						alt16=1;
					}
					switch (alt16) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:96:30: PIPELINED_VK
							{
							match(input,PIPELINED_VK,FOLLOW_PIPELINED_VK_in_create_function_body514); 
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:96:44: ( declare_spec )*
					loop17:
					while (true) {
						int alt17=2;
						int LA17_0 = input.LA(1);
						if ( (LA17_0==CREATE_FUNCTION||LA17_0==CREATE_PROCEDURE||LA17_0==CURSOR_DECLARE||LA17_0==EXCEPTION_DECLARE||LA17_0==PRAGMA_DECLARE||LA17_0==RECORD_VAR_DECLARE||LA17_0==SUBTYPE_DECLARE||(LA17_0 >= TABLE_TYPE_DECLARE && LA17_0 <= TABLE_VAR_DECLARE)||LA17_0==VARIABLE_DECLARE||LA17_0==RECORD_TYPE_DECLARE) ) {
							alt17=1;
						}

						switch (alt17) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:96:44: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_create_function_body517);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop17;
						}
					}

					pushFollow(FOLLOW_body_in_create_function_body520);
					body();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "create_function_body"



	// $ANTLR start "parallel_enable_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:103:1: parallel_enable_clause : ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) ;
	public final void parallel_enable_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:104:5: ( ^( PARALLEL_ENABLE_VK ( partition_by_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:104:10: ^( PARALLEL_ENABLE_VK ( partition_by_clause )? )
			{
			match(input,PARALLEL_ENABLE_VK,FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause568); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:104:31: ( partition_by_clause )?
				int alt19=2;
				int LA19_0 = input.LA(1);
				if ( (LA19_0==PARTITION_VK) ) {
					alt19=1;
				}
				switch (alt19) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:104:31: partition_by_clause
						{
						pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause570);
						partition_by_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "parallel_enable_clause"



	// $ANTLR start "partition_by_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:107:1: partition_by_clause : ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) ;
	public final void partition_by_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:108:5: ( ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:108:10: ^( PARTITION_VK expression ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) ) ( streaming_clause )? )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_partition_by_clause593); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_partition_by_clause595);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:109:13: ( SQL92_RESERVED_ANY | ^( HASH_VK ^( COLUMNS ( column_name )+ ) ) | ^( RANGE_VK ^( COLUMNS ( column_name )+ ) ) )
			int alt22=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt22=1;
				}
				break;
			case HASH_VK:
				{
				alt22=2;
				}
				break;
			case RANGE_VK:
				{
				alt22=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 22, 0, input);
				throw nvae;
			}
			switch (alt22) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:109:18: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause615); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:110:18: ^( HASH_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,HASH_VK,FOLLOW_HASH_VK_in_partition_by_clause635); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause638); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:110:38: ( column_name )+
					int cnt20=0;
					loop20:
					while (true) {
						int alt20=2;
						int LA20_0 = input.LA(1);
						if ( (LA20_0==COLUMN_NAME) ) {
							alt20=1;
						}

						switch (alt20) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:110:38: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause640);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt20 >= 1 ) break loop20;
							EarlyExitException eee = new EarlyExitException(20, input);
							throw eee;
						}
						cnt20++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:111:18: ^( RANGE_VK ^( COLUMNS ( column_name )+ ) )
					{
					match(input,RANGE_VK,FOLLOW_RANGE_VK_in_partition_by_clause663); 
					match(input, Token.DOWN, null); 
					match(input,COLUMNS,FOLLOW_COLUMNS_in_partition_by_clause666); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:111:39: ( column_name )+
					int cnt21=0;
					loop21:
					while (true) {
						int alt21=2;
						int LA21_0 = input.LA(1);
						if ( (LA21_0==COLUMN_NAME) ) {
							alt21=1;
						}

						switch (alt21) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:111:39: column_name
							{
							pushFollow(FOLLOW_column_name_in_partition_by_clause668);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt21 >= 1 ) break loop21;
							EarlyExitException eee = new EarlyExitException(21, input);
							throw eee;
						}
						cnt21++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:113:13: ( streaming_clause )?
			int alt23=2;
			int LA23_0 = input.LA(1);
			if ( (LA23_0==STREAMING_CLAUSE) ) {
				alt23=1;
			}
			switch (alt23) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:113:13: streaming_clause
					{
					pushFollow(FOLLOW_streaming_clause_in_partition_by_clause700);
					streaming_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "partition_by_clause"



	// $ANTLR start "result_cache_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:117:1: result_cache_clause : ^( RESULT_CACHE_VK ( relies_on_part )? ) ;
	public final void result_cache_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:118:5: ( ^( RESULT_CACHE_VK ( relies_on_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:118:10: ^( RESULT_CACHE_VK ( relies_on_part )? )
			{
			match(input,RESULT_CACHE_VK,FOLLOW_RESULT_CACHE_VK_in_result_cache_clause732); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:118:28: ( relies_on_part )?
				int alt24=2;
				int LA24_0 = input.LA(1);
				if ( (LA24_0==RELIES_ON_VK) ) {
					alt24=1;
				}
				switch (alt24) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:118:28: relies_on_part
						{
						pushFollow(FOLLOW_relies_on_part_in_result_cache_clause734);
						relies_on_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "result_cache_clause"



	// $ANTLR start "relies_on_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:121:1: relies_on_part : ^( RELIES_ON_VK ( tableview_name )+ ) ;
	public final void relies_on_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:122:5: ( ^( RELIES_ON_VK ( tableview_name )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:122:10: ^( RELIES_ON_VK ( tableview_name )+ )
			{
			match(input,RELIES_ON_VK,FOLLOW_RELIES_ON_VK_in_relies_on_part757); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:122:25: ( tableview_name )+
			int cnt25=0;
			loop25:
			while (true) {
				int alt25=2;
				int LA25_0 = input.LA(1);
				if ( (LA25_0==TABLEVIEW_NAME) ) {
					alt25=1;
				}

				switch (alt25) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:122:25: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_relies_on_part759);
					tableview_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt25 >= 1 ) break loop25;
					EarlyExitException eee = new EarlyExitException(25, input);
					throw eee;
				}
				cnt25++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "relies_on_part"



	// $ANTLR start "streaming_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:125:1: streaming_clause : ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) ;
	public final void streaming_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:126:5: ( ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:126:10: ^( STREAMING_CLAUSE ( SQL92_RESERVED_ORDER | CLUSTER_VK ) expression ^( COLUMNS ( column_name )+ ) )
			{
			match(input,STREAMING_CLAUSE,FOLLOW_STREAMING_CLAUSE_in_streaming_clause782); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_ORDER||input.LA(1)==CLUSTER_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			pushFollow(FOLLOW_expression_in_streaming_clause790);
			expression();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_streaming_clause793); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:126:84: ( column_name )+
			int cnt26=0;
			loop26:
			while (true) {
				int alt26=2;
				int LA26_0 = input.LA(1);
				if ( (LA26_0==COLUMN_NAME) ) {
					alt26=1;
				}

				switch (alt26) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:126:84: column_name
					{
					pushFollow(FOLLOW_column_name_in_streaming_clause795);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt26 >= 1 ) break loop26;
					EarlyExitException eee = new EarlyExitException(26, input);
					throw eee;
				}
				cnt26++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "streaming_clause"



	// $ANTLR start "drop_package"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:133:1: drop_package : ^( DROP_PACKAGE package_name ( BODY_VK )? ) ;
	public final void drop_package() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:134:5: ( ^( DROP_PACKAGE package_name ( BODY_VK )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:134:10: ^( DROP_PACKAGE package_name ( BODY_VK )? )
			{
			match(input,DROP_PACKAGE,FOLLOW_DROP_PACKAGE_in_drop_package824); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_drop_package826);
			package_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:134:38: ( BODY_VK )?
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==BODY_VK) ) {
				alt27=1;
			}
			switch (alt27) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:134:38: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_package828); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "drop_package"



	// $ANTLR start "alter_package"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:137:1: alter_package : ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) ;
	public final void alter_package() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:138:5: ( ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:138:10: ^( ALTER_PACKAGE package_name ( DEBUG_VK )? ( REUSE_VK )? ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PACKAGE,FOLLOW_ALTER_PACKAGE_in_alter_package851); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_package_name_in_alter_package853);
			package_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:138:39: ( DEBUG_VK )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==DEBUG_VK) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:138:39: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_package855); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:138:49: ( REUSE_VK )?
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==REUSE_VK) ) {
				alt29=1;
			}
			switch (alt29) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:138:49: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_package858); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:139:17: ( PACKAGE_VK | BODY_VK | SPECIFICATION_VK )?
			int alt30=2;
			int LA30_0 = input.LA(1);
			if ( (LA30_0==BODY_VK||LA30_0==PACKAGE_VK||LA30_0==SPECIFICATION_VK) ) {
				alt30=1;
			}
			switch (alt30) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==BODY_VK||input.LA(1)==PACKAGE_VK||input.LA(1)==SPECIFICATION_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:139:56: ( compiler_parameters_clause )*
			loop31:
			while (true) {
				int alt31=2;
				int LA31_0 = input.LA(1);
				if ( (LA31_0==COMPILER_PARAMETER) ) {
					alt31=1;
				}

				switch (alt31) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:139:56: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package887);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop31;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alter_package"



	// $ANTLR start "create_package"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:142:1: create_package : ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? ( package_obj_spec )* ) | ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name ( package_obj_body )* ( seq_of_statements )? ) );
	public final void create_package() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:143:5: ( ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? ( package_obj_spec )* ) | ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name ( package_obj_body )* ( seq_of_statements )? ) )
			int alt38=2;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==CREATE_PACKAGE_SPEC) ) {
				alt38=1;
			}
			else if ( (LA38_0==CREATE_PACKAGE_BODY) ) {
				alt38=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 38, 0, input);
				throw nvae;
			}

			switch (alt38) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:143:10: ^( CREATE_PACKAGE_SPEC ( REPLACE_VK )? package_name ( invoker_rights_clause )? ( package_obj_spec )* )
					{
					match(input,CREATE_PACKAGE_SPEC,FOLLOW_CREATE_PACKAGE_SPEC_in_create_package910); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:143:32: ( REPLACE_VK )?
					int alt32=2;
					int LA32_0 = input.LA(1);
					if ( (LA32_0==REPLACE_VK) ) {
						alt32=1;
					}
					switch (alt32) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:143:32: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package912); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package915);
					package_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:143:57: ( invoker_rights_clause )?
					int alt33=2;
					int LA33_0 = input.LA(1);
					if ( (LA33_0==AUTHID_VK) ) {
						alt33=1;
					}
					switch (alt33) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:143:57: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_create_package917);
							invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:143:80: ( package_obj_spec )*
					loop34:
					while (true) {
						int alt34=2;
						int LA34_0 = input.LA(1);
						if ( (LA34_0==CURSOR_DECLARE||LA34_0==EXCEPTION_DECLARE||LA34_0==FUNCTION_SPEC||LA34_0==PRAGMA_DECLARE||LA34_0==PROCEDURE_SPEC||LA34_0==RECORD_VAR_DECLARE||LA34_0==SUBTYPE_DECLARE||(LA34_0 >= TABLE_TYPE_DECLARE && LA34_0 <= TABLE_VAR_DECLARE)||LA34_0==VARIABLE_DECLARE||LA34_0==RECORD_TYPE_DECLARE) ) {
							alt34=1;
						}

						switch (alt34) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:143:80: package_obj_spec
							{
							pushFollow(FOLLOW_package_obj_spec_in_create_package920);
							package_obj_spec();
							state._fsp--;

							}
							break;

						default :
							break loop34;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:144:10: ^( CREATE_PACKAGE_BODY ( REPLACE_VK )? package_name ( package_obj_body )* ( seq_of_statements )? )
					{
					match(input,CREATE_PACKAGE_BODY,FOLLOW_CREATE_PACKAGE_BODY_in_create_package935); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:144:32: ( REPLACE_VK )?
					int alt35=2;
					int LA35_0 = input.LA(1);
					if ( (LA35_0==REPLACE_VK) ) {
						alt35=1;
					}
					switch (alt35) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:144:32: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_package937); 
							}
							break;

					}

					pushFollow(FOLLOW_package_name_in_create_package940);
					package_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:144:57: ( package_obj_body )*
					loop36:
					while (true) {
						int alt36=2;
						int LA36_0 = input.LA(1);
						if ( (LA36_0==CREATE_FUNCTION||LA36_0==CREATE_PROCEDURE||(LA36_0 >= CREATE_TYPE_BODY && LA36_0 <= CREATE_TYPE_SPEC)||LA36_0==CURSOR_DECLARE||LA36_0==EXCEPTION_DECLARE||LA36_0==RECORD_VAR_DECLARE||LA36_0==SUBTYPE_DECLARE||(LA36_0 >= TABLE_TYPE_DECLARE && LA36_0 <= TABLE_VAR_DECLARE)||LA36_0==VARIABLE_DECLARE||LA36_0==RECORD_TYPE_DECLARE) ) {
							alt36=1;
						}

						switch (alt36) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:144:57: package_obj_body
							{
							pushFollow(FOLLOW_package_obj_body_in_create_package942);
							package_obj_body();
							state._fsp--;

							}
							break;

						default :
							break loop36;
						}
					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:144:75: ( seq_of_statements )?
					int alt37=2;
					int LA37_0 = input.LA(1);
					if ( (LA37_0==STATEMENTS) ) {
						alt37=1;
					}
					switch (alt37) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:144:75: seq_of_statements
							{
							pushFollow(FOLLOW_seq_of_statements_in_create_package945);
							seq_of_statements();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "create_package"



	// $ANTLR start "package_obj_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:149:1: package_obj_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec | pragma_declaration );
	public final void package_obj_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:150:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec | pragma_declaration )
			int alt39=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt39=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt39=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt39=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt39=4;
				}
				break;
			case RECORD_VAR_DECLARE:
			case RECORD_TYPE_DECLARE:
				{
				alt39=5;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt39=6;
				}
				break;
			case PROCEDURE_SPEC:
				{
				alt39=7;
				}
				break;
			case FUNCTION_SPEC:
				{
				alt39=8;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt39=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 39, 0, input);
				throw nvae;
			}
			switch (alt39) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:150:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_spec969);
					variable_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:151:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec981);
					subtype_declaration();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:152:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec993);
					cursor_declaration();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:153:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1005);
					exception_declaration();
					state._fsp--;

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:154:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_spec1017);
					record_declaration();
					state._fsp--;

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:155:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_spec1029);
					table_declaration();
					state._fsp--;

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:156:11: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1041);
					procedure_spec();
					state._fsp--;

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:157:11: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_package_obj_spec1053);
					function_spec();
					state._fsp--;

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:158:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec1065);
					pragma_declaration();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "package_obj_spec"



	// $ANTLR start "procedure_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:161:1: procedure_spec : ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? ) ;
	public final void procedure_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:162:5: ( ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:162:11: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( parameter )* ) ( ^( CALL_MODE call_spec ) )? )
			{
			match(input,PROCEDURE_SPEC,FOLLOW_PROCEDURE_SPEC_in_procedure_spec1087); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_procedure_spec1089);
			procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_procedure_spec1092); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:162:56: ( parameter )*
				loop40:
				while (true) {
					int alt40=2;
					int LA40_0 = input.LA(1);
					if ( (LA40_0==PARAMETER) ) {
						alt40=1;
					}

					switch (alt40) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:162:56: parameter
						{
						pushFollow(FOLLOW_parameter_in_procedure_spec1094);
						parameter();
						state._fsp--;

						}
						break;

					default :
						break loop40;
					}
				}

				match(input, Token.UP, null); 
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:163:13: ( ^( CALL_MODE call_spec ) )?
			int alt41=2;
			int LA41_0 = input.LA(1);
			if ( (LA41_0==CALL_MODE) ) {
				alt41=1;
			}
			switch (alt41) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:163:14: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_procedure_spec1112); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_procedure_spec1114);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "procedure_spec"



	// $ANTLR start "function_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:167:1: function_spec : ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? ) ;
	public final void function_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:168:5: ( ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:168:10: ^( FUNCTION_SPEC function_name ( type_spec | SELF_VK ) ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( DETERMINISTIC_VK )* ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )? )
			{
			match(input,FUNCTION_SPEC,FOLLOW_FUNCTION_SPEC_in_function_spec1145); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_name_in_function_spec1147);
			function_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:168:40: ( type_spec | SELF_VK )
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==CUSTOM_TYPE||LA42_0==INTERVAL_DATATYPE||LA42_0==NATIVE_DATATYPE) ) {
				alt42=1;
			}
			else if ( (LA42_0==SELF_VK) ) {
				alt42=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 42, 0, input);
				throw nvae;
			}

			switch (alt42) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:168:41: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_function_spec1150);
					type_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:168:51: SELF_VK
					{
					match(input,SELF_VK,FOLLOW_SELF_VK_in_function_spec1152); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_function_spec1156); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:168:73: ( parameter )*
				loop43:
				while (true) {
					int alt43=2;
					int LA43_0 = input.LA(1);
					if ( (LA43_0==PARAMETER) ) {
						alt43=1;
					}

					switch (alt43) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:168:73: parameter
						{
						pushFollow(FOLLOW_parameter_in_function_spec1158);
						parameter();
						state._fsp--;

						}
						break;

					default :
						break loop43;
					}
				}

				match(input, Token.UP, null); 
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:169:13: ( invoker_rights_clause )*
			loop44:
			while (true) {
				int alt44=2;
				int LA44_0 = input.LA(1);
				if ( (LA44_0==AUTHID_VK) ) {
					alt44=1;
				}

				switch (alt44) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:169:13: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_function_spec1174);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

				default :
					break loop44;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:169:36: ( parallel_enable_clause )*
			loop45:
			while (true) {
				int alt45=2;
				int LA45_0 = input.LA(1);
				if ( (LA45_0==PARALLEL_ENABLE_VK) ) {
					alt45=1;
				}

				switch (alt45) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:169:36: parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_function_spec1177);
					parallel_enable_clause();
					state._fsp--;

					}
					break;

				default :
					break loop45;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:169:60: ( result_cache_clause )*
			loop46:
			while (true) {
				int alt46=2;
				int LA46_0 = input.LA(1);
				if ( (LA46_0==RESULT_CACHE_VK) ) {
					alt46=1;
				}

				switch (alt46) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:169:60: result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_function_spec1180);
					result_cache_clause();
					state._fsp--;

					}
					break;

				default :
					break loop46;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:169:81: ( DETERMINISTIC_VK )*
			loop47:
			while (true) {
				int alt47=2;
				int LA47_0 = input.LA(1);
				if ( (LA47_0==DETERMINISTIC_VK) ) {
					alt47=1;
				}

				switch (alt47) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:169:81: DETERMINISTIC_VK
					{
					match(input,DETERMINISTIC_VK,FOLLOW_DETERMINISTIC_VK_in_function_spec1183); 
					}
					break;

				default :
					break loop47;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:170:13: ( ^( CALL_MODE call_spec ) | ^( EXTERNAL_VK expression ) )?
			int alt48=3;
			int LA48_0 = input.LA(1);
			if ( (LA48_0==CALL_MODE) ) {
				alt48=1;
			}
			else if ( (LA48_0==EXTERNAL_VK) ) {
				alt48=2;
			}
			switch (alt48) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:170:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_function_spec1204); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_function_spec1206);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:171:18: ^( EXTERNAL_VK expression )
					{
					match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_function_spec1227); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_function_spec1229);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "function_spec"



	// $ANTLR start "package_obj_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:176:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body | create_type );
	public final void package_obj_body() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:177:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body | create_type )
			int alt49=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt49=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt49=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt49=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt49=4;
				}
				break;
			case RECORD_VAR_DECLARE:
			case RECORD_TYPE_DECLARE:
				{
				alt49=5;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt49=6;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt49=7;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt49=8;
				}
				break;
			case CREATE_TYPE_BODY:
			case CREATE_TYPE_SPEC:
				{
				alt49=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 49, 0, input);
				throw nvae;
			}
			switch (alt49) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:177:11: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_package_obj_body1276);
					variable_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:178:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_package_obj_body1289);
					subtype_declaration();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:179:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_package_obj_body1302);
					cursor_declaration();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:180:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_package_obj_body1315);
					exception_declaration();
					state._fsp--;

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:181:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_package_obj_body1328);
					record_declaration();
					state._fsp--;

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:182:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_package_obj_body1340);
					table_declaration();
					state._fsp--;

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:183:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_package_obj_body1352);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:184:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_package_obj_body1364);
					create_function_body();
					state._fsp--;

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:185:11: create_type
					{
					pushFollow(FOLLOW_create_type_in_package_obj_body1376);
					create_type();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "package_obj_body"



	// $ANTLR start "drop_procedure"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:194:1: drop_procedure : ^( DROP_PROCEDURE procedure_name ) ;
	public final void drop_procedure() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:195:5: ( ^( DROP_PROCEDURE procedure_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:195:10: ^( DROP_PROCEDURE procedure_name )
			{
			match(input,DROP_PROCEDURE,FOLLOW_DROP_PROCEDURE_in_drop_procedure1403); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_drop_procedure1405);
			procedure_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "drop_procedure"



	// $ANTLR start "alter_procedure"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:198:1: alter_procedure : ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ;
	public final void alter_procedure() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:199:5: ( ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:199:10: ^( ALTER_PROCEDURE procedure_name ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			{
			match(input,ALTER_PROCEDURE,FOLLOW_ALTER_PROCEDURE_in_alter_procedure1427); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_procedure_name_in_alter_procedure1429);
			procedure_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:199:43: ( DEBUG_VK )?
			int alt50=2;
			int LA50_0 = input.LA(1);
			if ( (LA50_0==DEBUG_VK) ) {
				alt50=1;
			}
			switch (alt50) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:199:43: DEBUG_VK
					{
					match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_procedure1431); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:199:53: ( REUSE_VK )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==REUSE_VK) ) {
				alt51=1;
			}
			switch (alt51) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:199:53: REUSE_VK
					{
					match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_procedure1434); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:199:63: ( compiler_parameters_clause )*
			loop52:
			while (true) {
				int alt52=2;
				int LA52_0 = input.LA(1);
				if ( (LA52_0==COMPILER_PARAMETER) ) {
					alt52=1;
				}

				switch (alt52) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:199:63: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure1437);
					compiler_parameters_clause();
					state._fsp--;

					}
					break;

				default :
					break loop52;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alter_procedure"



	// $ANTLR start "create_procedure_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:202:1: create_procedure_body : ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) ;
	public final void create_procedure_body() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:203:5: ( ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:203:10: ^( CREATE_PROCEDURE ( REPLACE_VK )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) )
			{
			match(input,CREATE_PROCEDURE,FOLLOW_CREATE_PROCEDURE_in_create_procedure_body1460); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:203:29: ( REPLACE_VK )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==REPLACE_VK) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:203:29: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_procedure_body1462); 
					}
					break;

			}

			pushFollow(FOLLOW_procedure_name_in_create_procedure_body1465);
			procedure_name();
			state._fsp--;

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_create_procedure_body1468); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:203:69: ( parameter )*
				loop54:
				while (true) {
					int alt54=2;
					int LA54_0 = input.LA(1);
					if ( (LA54_0==PARAMETER) ) {
						alt54=1;
					}

					switch (alt54) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:203:69: parameter
						{
						pushFollow(FOLLOW_parameter_in_create_procedure_body1470);
						parameter();
						state._fsp--;

						}
						break;

					default :
						break loop54;
					}
				}

				match(input, Token.UP, null); 
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:203:81: ( invoker_rights_clause )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==AUTHID_VK) ) {
				alt55=1;
			}
			switch (alt55) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:203:81: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body1474);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:204:13: ( EXTERNAL_VK | ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) )
			int alt57=3;
			switch ( input.LA(1) ) {
			case EXTERNAL_VK:
				{
				alt57=1;
				}
				break;
			case CALL_MODE:
				{
				alt57=2;
				}
				break;
			case BODY_MODE:
				{
				alt57=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 57, 0, input);
				throw nvae;
			}
			switch (alt57) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:204:18: EXTERNAL_VK
					{
					match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_create_procedure_body1494); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:205:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_create_procedure_body1514); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_create_procedure_body1516);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:206:18: ^( BODY_MODE ( declare_spec )* body )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_create_procedure_body1537); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:206:30: ( declare_spec )*
					loop56:
					while (true) {
						int alt56=2;
						int LA56_0 = input.LA(1);
						if ( (LA56_0==CREATE_FUNCTION||LA56_0==CREATE_PROCEDURE||LA56_0==CURSOR_DECLARE||LA56_0==EXCEPTION_DECLARE||LA56_0==PRAGMA_DECLARE||LA56_0==RECORD_VAR_DECLARE||LA56_0==SUBTYPE_DECLARE||(LA56_0 >= TABLE_TYPE_DECLARE && LA56_0 <= TABLE_VAR_DECLARE)||LA56_0==VARIABLE_DECLARE||LA56_0==RECORD_TYPE_DECLARE) ) {
							alt56=1;
						}

						switch (alt56) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:206:30: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_create_procedure_body1539);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop56;
						}
					}

					pushFollow(FOLLOW_body_in_create_procedure_body1542);
					body();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "create_procedure_body"



	// $ANTLR start "drop_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:215:1: drop_trigger : ^( DROP_TRIGGER trigger_name ) ;
	public final void drop_trigger() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:216:5: ( ^( DROP_TRIGGER trigger_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:216:10: ^( DROP_TRIGGER trigger_name )
			{
			match(input,DROP_TRIGGER,FOLLOW_DROP_TRIGGER_in_drop_trigger1592); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_drop_trigger1594);
			trigger_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "drop_trigger"



	// $ANTLR start "alter_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:219:1: alter_trigger : ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ;
	public final void alter_trigger() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:220:5: ( ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:220:10: ^( ALTER_TRIGGER trigger_name ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			{
			match(input,ALTER_TRIGGER,FOLLOW_ALTER_TRIGGER_in_alter_trigger1616); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_trigger_name_in_alter_trigger1618);
			trigger_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:221:13: ( ( ENABLE_VK | DISABLE_VK ) | ^( RENAME_VK trigger_name ) | ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
			int alt61=3;
			switch ( input.LA(1) ) {
			case DISABLE_VK:
			case ENABLE_VK:
				{
				alt61=1;
				}
				break;
			case RENAME_VK:
				{
				alt61=2;
				}
				break;
			case UP:
			case COMPILER_PARAMETER:
			case DEBUG_VK:
			case REUSE_VK:
				{
				alt61=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 61, 0, input);
				throw nvae;
			}
			switch (alt61) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:221:18: ( ENABLE_VK | DISABLE_VK )
					{
					if ( input.LA(1)==DISABLE_VK||input.LA(1)==ENABLE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:222:18: ^( RENAME_VK trigger_name )
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_alter_trigger1662); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_alter_trigger1664);
					trigger_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:223:18: ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )*
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:223:18: ( DEBUG_VK )?
					int alt58=2;
					int LA58_0 = input.LA(1);
					if ( (LA58_0==DEBUG_VK) ) {
						alt58=1;
					}
					switch (alt58) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:223:18: DEBUG_VK
							{
							match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_trigger1684); 
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:223:28: ( REUSE_VK )?
					int alt59=2;
					int LA59_0 = input.LA(1);
					if ( (LA59_0==REUSE_VK) ) {
						alt59=1;
					}
					switch (alt59) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:223:28: REUSE_VK
							{
							match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_trigger1687); 
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:223:38: ( compiler_parameters_clause )*
					loop60:
					while (true) {
						int alt60=2;
						int LA60_0 = input.LA(1);
						if ( (LA60_0==COMPILER_PARAMETER) ) {
							alt60=1;
						}

						switch (alt60) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:223:38: compiler_parameters_clause
							{
							pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger1690);
							compiler_parameters_clause();
							state._fsp--;

							}
							break;

						default :
							break loop60;
						}
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alter_trigger"



	// $ANTLR start "create_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:228:1: create_trigger : ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) ;
	public final void create_trigger() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:229:5: ( ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:229:10: ^( CREATE_TRIGGER ( REPLACE_VK )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( ENABLE_VK | DISABLE_VK )? ( trigger_when_clause )? trigger_body )
			{
			match(input,CREATE_TRIGGER,FOLLOW_CREATE_TRIGGER_in_create_trigger1736); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:229:27: ( REPLACE_VK )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==REPLACE_VK) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:229:27: REPLACE_VK
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_trigger1738); 
					}
					break;

			}

			pushFollow(FOLLOW_trigger_name_in_create_trigger1741);
			trigger_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:230:13: ( simple_dml_trigger )?
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==SIMPLE_DML) ) {
				alt63=1;
			}
			switch (alt63) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:230:13: simple_dml_trigger
					{
					pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger1757);
					simple_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:230:33: ( compound_dml_trigger )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==COMPOUND_DML) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:230:33: compound_dml_trigger
					{
					pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger1760);
					compound_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:230:55: ( non_dml_trigger )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==NON_DML) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:230:55: non_dml_trigger
					{
					pushFollow(FOLLOW_non_dml_trigger_in_create_trigger1763);
					non_dml_trigger();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:231:13: ( trigger_follows_clause )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==FOLLOWS_VK) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:231:13: trigger_follows_clause
					{
					pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger1778);
					trigger_follows_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:231:37: ( ENABLE_VK | DISABLE_VK )?
			int alt67=2;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==DISABLE_VK||LA67_0==ENABLE_VK) ) {
				alt67=1;
			}
			switch (alt67) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==DISABLE_VK||input.LA(1)==ENABLE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:231:61: ( trigger_when_clause )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==SQL92_RESERVED_WHEN) ) {
				alt68=1;
			}
			switch (alt68) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:231:61: trigger_when_clause
					{
					pushFollow(FOLLOW_trigger_when_clause_in_create_trigger1788);
					trigger_when_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_trigger_body_in_create_trigger1791);
			trigger_body();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "create_trigger"



	// $ANTLR start "trigger_follows_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:234:1: trigger_follows_clause : ^( FOLLOWS_VK ( trigger_name )+ ) ;
	public final void trigger_follows_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:235:5: ( ^( FOLLOWS_VK ( trigger_name )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:235:10: ^( FOLLOWS_VK ( trigger_name )+ )
			{
			match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_trigger_follows_clause1813); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:235:23: ( trigger_name )+
			int cnt69=0;
			loop69:
			while (true) {
				int alt69=2;
				int LA69_0 = input.LA(1);
				if ( (LA69_0==TRIGGER_NAME) ) {
					alt69=1;
				}

				switch (alt69) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:235:23: trigger_name
					{
					pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause1815);
					trigger_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt69 >= 1 ) break loop69;
					EarlyExitException eee = new EarlyExitException(69, input);
					throw eee;
				}
				cnt69++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "trigger_follows_clause"



	// $ANTLR start "trigger_when_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:238:1: trigger_when_clause : ^( SQL92_RESERVED_WHEN expression ) ;
	public final void trigger_when_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:239:5: ( ^( SQL92_RESERVED_WHEN expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:239:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause1838); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_trigger_when_clause1840);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "trigger_when_clause"



	// $ANTLR start "simple_dml_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:243:1: simple_dml_trigger : ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) ;
	public final void simple_dml_trigger() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:244:5: ( ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:244:10: ^( SIMPLE_DML ( BEFORE_VK | AFTER_VK | INSTEAD_VK ) ( FOR_EACH_ROW )? ( referencing_clause )? dml_event_clause )
			{
			match(input,SIMPLE_DML,FOLLOW_SIMPLE_DML_in_simple_dml_trigger1863); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==AFTER_VK||input.LA(1)==BEFORE_VK||input.LA(1)==INSTEAD_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:244:55: ( FOR_EACH_ROW )?
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==FOR_EACH_ROW) ) {
				alt70=1;
			}
			switch (alt70) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:244:55: FOR_EACH_ROW
					{
					match(input,FOR_EACH_ROW,FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger1873); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:244:69: ( referencing_clause )?
			int alt71=2;
			int LA71_0 = input.LA(1);
			if ( (LA71_0==REFERENCING_VK) ) {
				alt71=1;
			}
			switch (alt71) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:244:69: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger1876);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger1879);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "simple_dml_trigger"



	// $ANTLR start "compound_dml_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:247:1: compound_dml_trigger : ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) ;
	public final void compound_dml_trigger() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:248:5: ( ^( COMPOUND_DML ( referencing_clause )? dml_event_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:248:10: ^( COMPOUND_DML ( referencing_clause )? dml_event_clause )
			{
			match(input,COMPOUND_DML,FOLLOW_COMPOUND_DML_in_compound_dml_trigger1901); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:248:25: ( referencing_clause )?
			int alt72=2;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==REFERENCING_VK) ) {
				alt72=1;
			}
			switch (alt72) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:248:25: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger1903);
					referencing_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger1906);
			dml_event_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "compound_dml_trigger"



	// $ANTLR start "non_dml_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:251:1: non_dml_trigger : ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) ;
	public final void non_dml_trigger() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:5: ( ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:10: ^( NON_DML ( BEFORE_VK | AFTER_VK ) ( non_dml_event )+ ( DATABASE_VK | ( schema_name )? SCHEMA_VK ) )
			{
			match(input,NON_DML,FOLLOW_NON_DML_in_non_dml_trigger1928); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==AFTER_VK||input.LA(1)==BEFORE_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:41: ( non_dml_event )+
			int cnt73=0;
			loop73:
			while (true) {
				int alt73=2;
				switch ( input.LA(1) ) {
				case DATABASE_VK:
					{
					int LA73_1 = input.LA(2);
					if ( (LA73_1==SQL92_RESERVED_ALTER||LA73_1==SQL92_RESERVED_CREATE||LA73_1==SQL92_RESERVED_DROP||LA73_1==SQL92_RESERVED_GRANT||LA73_1==SQL92_RESERVED_REVOKE||LA73_1==ANALYZE_VK||LA73_1==ASSOCIATE_VK||LA73_1==AUDIT_VK||LA73_1==COMMENT_VK||LA73_1==DATABASE_VK||(LA73_1 >= DB_ROLE_CHANGE_VK && LA73_1 <= DDL_VK)||LA73_1==DISASSOCIATE_VK||LA73_1==FOLLOWS_VK||(LA73_1 >= LOGOFF_VK && LA73_1 <= LOGON_VK)||LA73_1==NOAUDIT_VK||LA73_1==RENAME_VK||(LA73_1 >= SCHEMA_NAME && LA73_1 <= SCHEMA_VK)||LA73_1==SERVERERROR_VK||LA73_1==SHUTDOWN_VK||LA73_1==STARTUP_VK||LA73_1==SUSPEND_VK||LA73_1==TRUNCATE_VK) ) {
						alt73=1;
					}

					}
					break;
				case SCHEMA_VK:
					{
					int LA73_3 = input.LA(2);
					if ( (LA73_3==SQL92_RESERVED_ALTER||LA73_3==SQL92_RESERVED_CREATE||LA73_3==SQL92_RESERVED_DROP||LA73_3==SQL92_RESERVED_GRANT||LA73_3==SQL92_RESERVED_REVOKE||LA73_3==ANALYZE_VK||LA73_3==ASSOCIATE_VK||LA73_3==AUDIT_VK||LA73_3==COMMENT_VK||LA73_3==DATABASE_VK||(LA73_3 >= DB_ROLE_CHANGE_VK && LA73_3 <= DDL_VK)||LA73_3==DISASSOCIATE_VK||LA73_3==FOLLOWS_VK||(LA73_3 >= LOGOFF_VK && LA73_3 <= LOGON_VK)||LA73_3==NOAUDIT_VK||LA73_3==RENAME_VK||(LA73_3 >= SCHEMA_NAME && LA73_3 <= SCHEMA_VK)||LA73_3==SERVERERROR_VK||LA73_3==SHUTDOWN_VK||LA73_3==STARTUP_VK||LA73_3==SUSPEND_VK||LA73_3==TRUNCATE_VK) ) {
						alt73=1;
					}

					}
					break;
				case SQL92_RESERVED_ALTER:
				case SQL92_RESERVED_CREATE:
				case SQL92_RESERVED_DROP:
				case SQL92_RESERVED_GRANT:
				case SQL92_RESERVED_REVOKE:
				case ANALYZE_VK:
				case ASSOCIATE_VK:
				case AUDIT_VK:
				case COMMENT_VK:
				case DB_ROLE_CHANGE_VK:
				case DDL_VK:
				case DISASSOCIATE_VK:
				case FOLLOWS_VK:
				case LOGOFF_VK:
				case LOGON_VK:
				case NOAUDIT_VK:
				case RENAME_VK:
				case SERVERERROR_VK:
				case SHUTDOWN_VK:
				case STARTUP_VK:
				case SUSPEND_VK:
				case TRUNCATE_VK:
					{
					alt73=1;
					}
					break;
				}
				switch (alt73) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:41: non_dml_event
					{
					pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger1936);
					non_dml_event();
					state._fsp--;

					}
					break;

				default :
					if ( cnt73 >= 1 ) break loop73;
					EarlyExitException eee = new EarlyExitException(73, input);
					throw eee;
				}
				cnt73++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:56: ( DATABASE_VK | ( schema_name )? SCHEMA_VK )
			int alt75=2;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==DATABASE_VK) ) {
				alt75=1;
			}
			else if ( ((LA75_0 >= SCHEMA_NAME && LA75_0 <= SCHEMA_VK)) ) {
				alt75=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}

			switch (alt75) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:57: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_trigger1940); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:69: ( schema_name )? SCHEMA_VK
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:69: ( schema_name )?
					int alt74=2;
					int LA74_0 = input.LA(1);
					if ( (LA74_0==SCHEMA_NAME) ) {
						alt74=1;
					}
					switch (alt74) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:252:69: schema_name
							{
							pushFollow(FOLLOW_schema_name_in_non_dml_trigger1942);
							schema_name();
							state._fsp--;

							}
							break;

					}

					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_trigger1945); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "non_dml_trigger"



	// $ANTLR start "trigger_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:255:1: trigger_body : ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) | ^( CALL_VK routine_name ( function_argument )? ) | ^( BODY_MODE block ) );
	public final void trigger_body() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:256:5: ( ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ ) | ^( CALL_VK routine_name ( function_argument )? ) | ^( BODY_MODE block ) )
			int alt79=3;
			switch ( input.LA(1) ) {
			case COMPOUND_VK:
				{
				alt79=1;
				}
				break;
			case CALL_VK:
				{
				alt79=2;
				}
				break;
			case BODY_MODE:
				{
				alt79=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 79, 0, input);
				throw nvae;
			}
			switch (alt79) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:256:10: ^( COMPOUND_VK trigger_name ( declare_spec )* ( timing_point_section )+ )
					{
					match(input,COMPOUND_VK,FOLLOW_COMPOUND_VK_in_trigger_body1968); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_trigger_name_in_trigger_body1970);
					trigger_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:256:37: ( declare_spec )*
					loop76:
					while (true) {
						int alt76=2;
						int LA76_0 = input.LA(1);
						if ( (LA76_0==CREATE_FUNCTION||LA76_0==CREATE_PROCEDURE||LA76_0==CURSOR_DECLARE||LA76_0==EXCEPTION_DECLARE||LA76_0==PRAGMA_DECLARE||LA76_0==RECORD_VAR_DECLARE||LA76_0==SUBTYPE_DECLARE||(LA76_0 >= TABLE_TYPE_DECLARE && LA76_0 <= TABLE_VAR_DECLARE)||LA76_0==VARIABLE_DECLARE||LA76_0==RECORD_TYPE_DECLARE) ) {
							alt76=1;
						}

						switch (alt76) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:256:37: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_trigger_body1972);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop76;
						}
					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:256:51: ( timing_point_section )+
					int cnt77=0;
					loop77:
					while (true) {
						int alt77=2;
						int LA77_0 = input.LA(1);
						if ( ((LA77_0 >= AFTER_EACH_ROW && LA77_0 <= AFTER_STATEMENT)||(LA77_0 >= BEFORE_EACH_ROW && LA77_0 <= BEFORE_STATEMENT)) ) {
							alt77=1;
						}

						switch (alt77) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:256:51: timing_point_section
							{
							pushFollow(FOLLOW_timing_point_section_in_trigger_body1975);
							timing_point_section();
							state._fsp--;

							}
							break;

						default :
							if ( cnt77 >= 1 ) break loop77;
							EarlyExitException eee = new EarlyExitException(77, input);
							throw eee;
						}
						cnt77++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:257:10: ^( CALL_VK routine_name ( function_argument )? )
					{
					match(input,CALL_VK,FOLLOW_CALL_VK_in_trigger_body1989); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_trigger_body1991);
					routine_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:257:33: ( function_argument )?
					int alt78=2;
					int LA78_0 = input.LA(1);
					if ( (LA78_0==ARGUMENTS) ) {
						alt78=1;
					}
					switch (alt78) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:257:33: function_argument
							{
							pushFollow(FOLLOW_function_argument_in_trigger_body1993);
							function_argument();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:258:10: ^( BODY_MODE block )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_trigger_body2008); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_trigger_body2010);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "trigger_body"



	// $ANTLR start "timing_point_section"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:261:1: timing_point_section : ( ^( BEFORE_STATEMENT block ) | ^( BEFORE_EACH_ROW block ) | ^( AFTER_STATEMENT block ) | ^( AFTER_EACH_ROW block ) );
	public final void timing_point_section() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:262:5: ( ^( BEFORE_STATEMENT block ) | ^( BEFORE_EACH_ROW block ) | ^( AFTER_STATEMENT block ) | ^( AFTER_EACH_ROW block ) )
			int alt80=4;
			switch ( input.LA(1) ) {
			case BEFORE_STATEMENT:
				{
				alt80=1;
				}
				break;
			case BEFORE_EACH_ROW:
				{
				alt80=2;
				}
				break;
			case AFTER_STATEMENT:
				{
				alt80=3;
				}
				break;
			case AFTER_EACH_ROW:
				{
				alt80=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 80, 0, input);
				throw nvae;
			}
			switch (alt80) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:262:10: ^( BEFORE_STATEMENT block )
					{
					match(input,BEFORE_STATEMENT,FOLLOW_BEFORE_STATEMENT_in_timing_point_section2032); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2034);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:263:10: ^( BEFORE_EACH_ROW block )
					{
					match(input,BEFORE_EACH_ROW,FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2047); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2049);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:264:10: ^( AFTER_STATEMENT block )
					{
					match(input,AFTER_STATEMENT,FOLLOW_AFTER_STATEMENT_in_timing_point_section2062); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2064);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:265:10: ^( AFTER_EACH_ROW block )
					{
					match(input,AFTER_EACH_ROW,FOLLOW_AFTER_EACH_ROW_in_timing_point_section2077); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_block_in_timing_point_section2079);
					block();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "timing_point_section"



	// $ANTLR start "non_dml_event"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:268:1: non_dml_event : ( SQL92_RESERVED_ALTER | ANALYZE_VK | ASSOCIATE_VK STATISTICS_VK | AUDIT_VK | COMMENT_VK | SQL92_RESERVED_CREATE | DISASSOCIATE_VK STATISTICS_VK | SQL92_RESERVED_DROP | SQL92_RESERVED_GRANT | NOAUDIT_VK | RENAME_VK | SQL92_RESERVED_REVOKE | TRUNCATE_VK | DDL_VK | STARTUP_VK | SHUTDOWN_VK | DB_ROLE_CHANGE_VK | LOGON_VK | LOGOFF_VK | SERVERERROR_VK | SUSPEND_VK | DATABASE_VK | SCHEMA_VK | FOLLOWS_VK );
	public final void non_dml_event() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:269:5: ( SQL92_RESERVED_ALTER | ANALYZE_VK | ASSOCIATE_VK STATISTICS_VK | AUDIT_VK | COMMENT_VK | SQL92_RESERVED_CREATE | DISASSOCIATE_VK STATISTICS_VK | SQL92_RESERVED_DROP | SQL92_RESERVED_GRANT | NOAUDIT_VK | RENAME_VK | SQL92_RESERVED_REVOKE | TRUNCATE_VK | DDL_VK | STARTUP_VK | SHUTDOWN_VK | DB_ROLE_CHANGE_VK | LOGON_VK | LOGOFF_VK | SERVERERROR_VK | SUSPEND_VK | DATABASE_VK | SCHEMA_VK | FOLLOWS_VK )
			int alt81=24;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ALTER:
				{
				alt81=1;
				}
				break;
			case ANALYZE_VK:
				{
				alt81=2;
				}
				break;
			case ASSOCIATE_VK:
				{
				alt81=3;
				}
				break;
			case AUDIT_VK:
				{
				alt81=4;
				}
				break;
			case COMMENT_VK:
				{
				alt81=5;
				}
				break;
			case SQL92_RESERVED_CREATE:
				{
				alt81=6;
				}
				break;
			case DISASSOCIATE_VK:
				{
				alt81=7;
				}
				break;
			case SQL92_RESERVED_DROP:
				{
				alt81=8;
				}
				break;
			case SQL92_RESERVED_GRANT:
				{
				alt81=9;
				}
				break;
			case NOAUDIT_VK:
				{
				alt81=10;
				}
				break;
			case RENAME_VK:
				{
				alt81=11;
				}
				break;
			case SQL92_RESERVED_REVOKE:
				{
				alt81=12;
				}
				break;
			case TRUNCATE_VK:
				{
				alt81=13;
				}
				break;
			case DDL_VK:
				{
				alt81=14;
				}
				break;
			case STARTUP_VK:
				{
				alt81=15;
				}
				break;
			case SHUTDOWN_VK:
				{
				alt81=16;
				}
				break;
			case DB_ROLE_CHANGE_VK:
				{
				alt81=17;
				}
				break;
			case LOGON_VK:
				{
				alt81=18;
				}
				break;
			case LOGOFF_VK:
				{
				alt81=19;
				}
				break;
			case SERVERERROR_VK:
				{
				alt81=20;
				}
				break;
			case SUSPEND_VK:
				{
				alt81=21;
				}
				break;
			case DATABASE_VK:
				{
				alt81=22;
				}
				break;
			case SCHEMA_VK:
				{
				alt81=23;
				}
				break;
			case FOLLOWS_VK:
				{
				alt81=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 81, 0, input);
				throw nvae;
			}
			switch (alt81) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:269:10: SQL92_RESERVED_ALTER
					{
					match(input,SQL92_RESERVED_ALTER,FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event2100); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:270:10: ANALYZE_VK
					{
					match(input,ANALYZE_VK,FOLLOW_ANALYZE_VK_in_non_dml_event2111); 
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:271:10: ASSOCIATE_VK STATISTICS_VK
					{
					match(input,ASSOCIATE_VK,FOLLOW_ASSOCIATE_VK_in_non_dml_event2122); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event2124); 
					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:272:10: AUDIT_VK
					{
					match(input,AUDIT_VK,FOLLOW_AUDIT_VK_in_non_dml_event2135); 
					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:273:10: COMMENT_VK
					{
					match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_non_dml_event2146); 
					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:274:10: SQL92_RESERVED_CREATE
					{
					match(input,SQL92_RESERVED_CREATE,FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event2157); 
					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:275:10: DISASSOCIATE_VK STATISTICS_VK
					{
					match(input,DISASSOCIATE_VK,FOLLOW_DISASSOCIATE_VK_in_non_dml_event2168); 
					match(input,STATISTICS_VK,FOLLOW_STATISTICS_VK_in_non_dml_event2170); 
					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:276:10: SQL92_RESERVED_DROP
					{
					match(input,SQL92_RESERVED_DROP,FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event2181); 
					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:277:10: SQL92_RESERVED_GRANT
					{
					match(input,SQL92_RESERVED_GRANT,FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event2192); 
					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:278:10: NOAUDIT_VK
					{
					match(input,NOAUDIT_VK,FOLLOW_NOAUDIT_VK_in_non_dml_event2203); 
					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:279:10: RENAME_VK
					{
					match(input,RENAME_VK,FOLLOW_RENAME_VK_in_non_dml_event2214); 
					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:280:10: SQL92_RESERVED_REVOKE
					{
					match(input,SQL92_RESERVED_REVOKE,FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event2225); 
					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:281:10: TRUNCATE_VK
					{
					match(input,TRUNCATE_VK,FOLLOW_TRUNCATE_VK_in_non_dml_event2236); 
					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:282:10: DDL_VK
					{
					match(input,DDL_VK,FOLLOW_DDL_VK_in_non_dml_event2247); 
					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:283:10: STARTUP_VK
					{
					match(input,STARTUP_VK,FOLLOW_STARTUP_VK_in_non_dml_event2258); 
					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:284:10: SHUTDOWN_VK
					{
					match(input,SHUTDOWN_VK,FOLLOW_SHUTDOWN_VK_in_non_dml_event2269); 
					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:285:10: DB_ROLE_CHANGE_VK
					{
					match(input,DB_ROLE_CHANGE_VK,FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event2280); 
					}
					break;
				case 18 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:286:10: LOGON_VK
					{
					match(input,LOGON_VK,FOLLOW_LOGON_VK_in_non_dml_event2291); 
					}
					break;
				case 19 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:287:10: LOGOFF_VK
					{
					match(input,LOGOFF_VK,FOLLOW_LOGOFF_VK_in_non_dml_event2302); 
					}
					break;
				case 20 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:288:10: SERVERERROR_VK
					{
					match(input,SERVERERROR_VK,FOLLOW_SERVERERROR_VK_in_non_dml_event2313); 
					}
					break;
				case 21 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:289:10: SUSPEND_VK
					{
					match(input,SUSPEND_VK,FOLLOW_SUSPEND_VK_in_non_dml_event2324); 
					}
					break;
				case 22 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:290:10: DATABASE_VK
					{
					match(input,DATABASE_VK,FOLLOW_DATABASE_VK_in_non_dml_event2335); 
					}
					break;
				case 23 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:291:10: SCHEMA_VK
					{
					match(input,SCHEMA_VK,FOLLOW_SCHEMA_VK_in_non_dml_event2346); 
					}
					break;
				case 24 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:292:10: FOLLOWS_VK
					{
					match(input,FOLLOWS_VK,FOLLOW_FOLLOWS_VK_in_non_dml_event2357); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "non_dml_event"



	// $ANTLR start "dml_event_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:295:1: dml_event_clause : ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) ;
	public final void dml_event_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:296:5: ( ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:296:10: ^( DML_EVENT ( dml_event_element )+ ^( SQL92_RESERVED_ON tableview_name ( dml_event_nested_clause )? ) )
			{
			match(input,DML_EVENT,FOLLOW_DML_EVENT_in_dml_event_clause2378); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:296:22: ( dml_event_element )+
			int cnt82=0;
			loop82:
			while (true) {
				int alt82=2;
				int LA82_0 = input.LA(1);
				if ( (LA82_0==DML_EVENT_ELEMENT) ) {
					alt82=1;
				}

				switch (alt82) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:296:22: dml_event_element
					{
					pushFollow(FOLLOW_dml_event_element_in_dml_event_clause2380);
					dml_event_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt82 >= 1 ) break loop82;
					EarlyExitException eee = new EarlyExitException(82, input);
					throw eee;
				}
				cnt82++;
			}

			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause2384); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_clause2386);
			tableview_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:296:76: ( dml_event_nested_clause )?
			int alt83=2;
			int LA83_0 = input.LA(1);
			if ( (LA83_0==NESTED_VK) ) {
				alt83=1;
			}
			switch (alt83) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:296:76: dml_event_nested_clause
					{
					pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause2388);
					dml_event_nested_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "dml_event_clause"



	// $ANTLR start "dml_event_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:299:1: dml_event_element : ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) ;
	public final void dml_event_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:300:5: ( ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:300:10: ^( DML_EVENT_ELEMENT ( SQL92_RESERVED_DELETE | SQL92_RESERVED_INSERT | SQL92_RESERVED_UPDATE ) ^( COLUMNS ( column_name )* ) )
			{
			match(input,DML_EVENT_ELEMENT,FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element2414); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_DELETE||input.LA(1)==SQL92_RESERVED_INSERT||input.LA(1)==SQL92_RESERVED_UPDATE ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input,COLUMNS,FOLLOW_COLUMNS_in_dml_event_element2425); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:300:108: ( column_name )*
				loop84:
				while (true) {
					int alt84=2;
					int LA84_0 = input.LA(1);
					if ( (LA84_0==COLUMN_NAME) ) {
						alt84=1;
					}

					switch (alt84) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:300:108: column_name
						{
						pushFollow(FOLLOW_column_name_in_dml_event_element2427);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop84;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "dml_event_element"



	// $ANTLR start "dml_event_nested_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:303:1: dml_event_nested_clause : ^( NESTED_VK tableview_name ) ;
	public final void dml_event_nested_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:304:5: ( ^( NESTED_VK tableview_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:304:10: ^( NESTED_VK tableview_name )
			{
			match(input,NESTED_VK,FOLLOW_NESTED_VK_in_dml_event_nested_clause2451); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause2453);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "dml_event_nested_clause"



	// $ANTLR start "referencing_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:307:1: referencing_clause : ^( REFERENCING_VK ( referencing_element )+ ) ;
	public final void referencing_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:308:5: ( ^( REFERENCING_VK ( referencing_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:308:10: ^( REFERENCING_VK ( referencing_element )+ )
			{
			match(input,REFERENCING_VK,FOLLOW_REFERENCING_VK_in_referencing_clause2475); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:308:27: ( referencing_element )+
			int cnt85=0;
			loop85:
			while (true) {
				int alt85=2;
				int LA85_0 = input.LA(1);
				if ( (LA85_0==NEW_VK||LA85_0==OLD_VK||LA85_0==PARENT_VK) ) {
					alt85=1;
				}

				switch (alt85) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:308:27: referencing_element
					{
					pushFollow(FOLLOW_referencing_element_in_referencing_clause2477);
					referencing_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt85 >= 1 ) break loop85;
					EarlyExitException eee = new EarlyExitException(85, input);
					throw eee;
				}
				cnt85++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "referencing_clause"



	// $ANTLR start "referencing_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:311:1: referencing_element : ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) ;
	public final void referencing_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:312:5: ( ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:312:10: ^( ( NEW_VK | OLD_VK | PARENT_VK ) alias )
			{
			if ( input.LA(1)==NEW_VK||input.LA(1)==OLD_VK||input.LA(1)==PARENT_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_alias_in_referencing_element2508);
			alias();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "referencing_element"



	// $ANTLR start "drop_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:320:1: drop_type : ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) ;
	public final void drop_type() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:321:5: ( ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:321:10: ^( DROP_TYPE type_name ( BODY_VK )? ( FORCE_VK )? ( VALIDATE_VK )? )
			{
			match(input,DROP_TYPE,FOLLOW_DROP_TYPE_in_drop_type2535); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_drop_type2537);
			type_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:321:32: ( BODY_VK )?
			int alt86=2;
			int LA86_0 = input.LA(1);
			if ( (LA86_0==BODY_VK) ) {
				alt86=1;
			}
			switch (alt86) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:321:32: BODY_VK
					{
					match(input,BODY_VK,FOLLOW_BODY_VK_in_drop_type2539); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:321:41: ( FORCE_VK )?
			int alt87=2;
			int LA87_0 = input.LA(1);
			if ( (LA87_0==FORCE_VK) ) {
				alt87=1;
			}
			switch (alt87) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:321:41: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_drop_type2542); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:321:51: ( VALIDATE_VK )?
			int alt88=2;
			int LA88_0 = input.LA(1);
			if ( (LA88_0==VALIDATE_VK) ) {
				alt88=1;
			}
			switch (alt88) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:321:51: VALIDATE_VK
					{
					match(input,VALIDATE_VK,FOLLOW_VALIDATE_VK_in_drop_type2545); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "drop_type"



	// $ANTLR start "alter_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:324:1: alter_type : ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) ;
	public final void alter_type() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:325:5: ( ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:325:10: ^( ALTER_TYPE type_name ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) ) ( dependent_handling_clause )? )
			{
			match(input,ALTER_TYPE,FOLLOW_ALTER_TYPE_in_alter_type2568); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_alter_type2570);
			type_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:326:13: ( ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? ) | ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) ) | ^( ALTER_METHOD ( alter_method_element )+ ) | alter_collection_clauses | modifier_clause | ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* ) )
			int alt97=6;
			switch ( input.LA(1) ) {
			case REPLACE_VK:
				{
				alt97=1;
				}
				break;
			case ALTER_ATTRIBUTE:
				{
				alt97=2;
				}
				break;
			case ALTER_METHOD:
				{
				alt97=3;
				}
				break;
			case ALTER_COLLECTION:
				{
				alt97=4;
				}
				break;
			case MODIFIER:
				{
				alt97=5;
				}
				break;
			case COMPILE_VK:
				{
				alt97=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 97, 0, input);
				throw nvae;
			}
			switch (alt97) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:326:18: ^( REPLACE_VK ^( OBJECT_MEMBERS ( element_spec )+ ) ( invoker_rights_clause )? )
					{
					match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_alter_type2591); 
					match(input, Token.DOWN, null); 
					match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_alter_type2594); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:326:48: ( element_spec )+
					int cnt89=0;
					loop89:
					while (true) {
						int alt89=2;
						int LA89_0 = input.LA(1);
						if ( (LA89_0==ELEMENT_SPEC) ) {
							alt89=1;
						}

						switch (alt89) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:326:48: element_spec
							{
							pushFollow(FOLLOW_element_spec_in_alter_type2596);
							element_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt89 >= 1 ) break loop89;
							EarlyExitException eee = new EarlyExitException(89, input);
							throw eee;
						}
						cnt89++;
					}

					match(input, Token.UP, null); 

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:326:63: ( invoker_rights_clause )?
					int alt90=2;
					int LA90_0 = input.LA(1);
					if ( (LA90_0==AUTHID_VK) ) {
						alt90=1;
					}
					switch (alt90) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:326:63: invoker_rights_clause
							{
							pushFollow(FOLLOW_invoker_rights_clause_in_alter_type2600);
							invoker_rights_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:327:18: ^( ALTER_ATTRIBUTE ( ADD_VK | MODIFY_VK | SQL92_RESERVED_DROP ) ^( ATTRIBUTES ( attribute_definition )+ ) )
					{
					match(input,ALTER_ATTRIBUTE,FOLLOW_ALTER_ATTRIBUTE_in_alter_type2622); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==SQL92_RESERVED_DROP||input.LA(1)==ADD_VK||input.LA(1)==MODIFY_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input,ATTRIBUTES,FOLLOW_ATTRIBUTES_in_alter_type2633); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:327:88: ( attribute_definition )+
					int cnt91=0;
					loop91:
					while (true) {
						int alt91=2;
						int LA91_0 = input.LA(1);
						if ( (LA91_0==ATTRIBUTE) ) {
							alt91=1;
						}

						switch (alt91) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:327:88: attribute_definition
							{
							pushFollow(FOLLOW_attribute_definition_in_alter_type2635);
							attribute_definition();
							state._fsp--;

							}
							break;

						default :
							if ( cnt91 >= 1 ) break loop91;
							EarlyExitException eee = new EarlyExitException(91, input);
							throw eee;
						}
						cnt91++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:328:18: ^( ALTER_METHOD ( alter_method_element )+ )
					{
					match(input,ALTER_METHOD,FOLLOW_ALTER_METHOD_in_alter_type2658); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:328:33: ( alter_method_element )+
					int cnt92=0;
					loop92:
					while (true) {
						int alt92=2;
						int LA92_0 = input.LA(1);
						if ( (LA92_0==ALTER_METHOD_ELEMENT) ) {
							alt92=1;
						}

						switch (alt92) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:328:33: alter_method_element
							{
							pushFollow(FOLLOW_alter_method_element_in_alter_type2660);
							alter_method_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt92 >= 1 ) break loop92;
							EarlyExitException eee = new EarlyExitException(92, input);
							throw eee;
						}
						cnt92++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:329:18: alter_collection_clauses
					{
					pushFollow(FOLLOW_alter_collection_clauses_in_alter_type2681);
					alter_collection_clauses();
					state._fsp--;

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:330:18: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_alter_type2700);
					modifier_clause();
					state._fsp--;

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:331:18: ^( COMPILE_VK ( SPECIFICATION_VK | BODY_VK )? ( DEBUG_VK )? ( REUSE_VK )? ( compiler_parameters_clause )* )
					{
					match(input,COMPILE_VK,FOLLOW_COMPILE_VK_in_alter_type2720); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:331:31: ( SPECIFICATION_VK | BODY_VK )?
						int alt93=2;
						int LA93_0 = input.LA(1);
						if ( (LA93_0==BODY_VK||LA93_0==SPECIFICATION_VK) ) {
							alt93=1;
						}
						switch (alt93) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
								{
								if ( input.LA(1)==BODY_VK||input.LA(1)==SPECIFICATION_VK ) {
									input.consume();
									state.errorRecovery=false;
								}
								else {
									MismatchedSetException mse = new MismatchedSetException(null,input);
									throw mse;
								}
								}
								break;

						}

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:331:59: ( DEBUG_VK )?
						int alt94=2;
						int LA94_0 = input.LA(1);
						if ( (LA94_0==DEBUG_VK) ) {
							alt94=1;
						}
						switch (alt94) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:331:59: DEBUG_VK
								{
								match(input,DEBUG_VK,FOLLOW_DEBUG_VK_in_alter_type2729); 
								}
								break;

						}

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:331:69: ( REUSE_VK )?
						int alt95=2;
						int LA95_0 = input.LA(1);
						if ( (LA95_0==REUSE_VK) ) {
							alt95=1;
						}
						switch (alt95) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:331:69: REUSE_VK
								{
								match(input,REUSE_VK,FOLLOW_REUSE_VK_in_alter_type2732); 
								}
								break;

						}

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:331:79: ( compiler_parameters_clause )*
						loop96:
						while (true) {
							int alt96=2;
							int LA96_0 = input.LA(1);
							if ( (LA96_0==COMPILER_PARAMETER) ) {
								alt96=1;
							}

							switch (alt96) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:331:79: compiler_parameters_clause
								{
								pushFollow(FOLLOW_compiler_parameters_clause_in_alter_type2735);
								compiler_parameters_clause();
								state._fsp--;

								}
								break;

							default :
								break loop96;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:333:13: ( dependent_handling_clause )?
			int alt98=2;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==DEPENDENT_HANDLING) ) {
				alt98=1;
			}
			switch (alt98) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:333:13: dependent_handling_clause
					{
					pushFollow(FOLLOW_dependent_handling_clause_in_alter_type2766);
					dependent_handling_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alter_type"



	// $ANTLR start "alter_method_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:339:1: alter_method_element : ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) ;
	public final void alter_method_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:340:5: ( ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:340:10: ^( ALTER_METHOD_ELEMENT ( ADD_VK | SQL92_RESERVED_DROP ) ( map_order_function_spec )? ( subprogram_spec )? )
			{
			match(input,ALTER_METHOD_ELEMENT,FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element2800); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_DROP||input.LA(1)==ADD_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:340:62: ( map_order_function_spec )?
			int alt99=2;
			int LA99_0 = input.LA(1);
			if ( (LA99_0==SQL92_RESERVED_ORDER||LA99_0==MAP_VK) ) {
				alt99=1;
			}
			switch (alt99) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:340:62: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element2808);
					map_order_function_spec();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:340:87: ( subprogram_spec )?
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==MEMBER_VK||LA100_0==STATIC_VK) ) {
				alt100=1;
			}
			switch (alt100) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:340:87: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_alter_method_element2811);
					subprogram_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alter_method_element"



	// $ANTLR start "attribute_definition"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:343:1: attribute_definition : ^( ATTRIBUTE attribute_name ( type_spec )? ) ;
	public final void attribute_definition() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:344:5: ( ^( ATTRIBUTE attribute_name ( type_spec )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:344:10: ^( ATTRIBUTE attribute_name ( type_spec )? )
			{
			match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_attribute_definition2834); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_attribute_name_in_attribute_definition2836);
			attribute_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:344:37: ( type_spec )?
			int alt101=2;
			int LA101_0 = input.LA(1);
			if ( (LA101_0==CUSTOM_TYPE||LA101_0==INTERVAL_DATATYPE||LA101_0==NATIVE_DATATYPE) ) {
				alt101=1;
			}
			switch (alt101) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:344:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_attribute_definition2838);
					type_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "attribute_definition"



	// $ANTLR start "alter_collection_clauses"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:347:1: alter_collection_clauses : ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) ;
	public final void alter_collection_clauses() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:348:5: ( ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:348:10: ^( ALTER_COLLECTION ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) ) )
			{
			match(input,ALTER_COLLECTION,FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses2861); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:349:13: ( ^( TYPE_VK type_spec ) | ^( LIMIT_VK expression ) )
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==TYPE_VK) ) {
				alt102=1;
			}
			else if ( (LA102_0==LIMIT_VK) ) {
				alt102=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				throw nvae;
			}

			switch (alt102) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:349:18: ^( TYPE_VK type_spec )
					{
					match(input,TYPE_VK,FOLLOW_TYPE_VK_in_alter_collection_clauses2882); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_alter_collection_clauses2884);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:350:18: ^( LIMIT_VK expression )
					{
					match(input,LIMIT_VK,FOLLOW_LIMIT_VK_in_alter_collection_clauses2905); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_alter_collection_clauses2907);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alter_collection_clauses"



	// $ANTLR start "dependent_handling_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:355:1: dependent_handling_clause : ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) ;
	public final void dependent_handling_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:356:5: ( ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:356:10: ^( DEPENDENT_HANDLING ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) ) )
			{
			match(input,DEPENDENT_HANDLING,FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause2954); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:357:13: ( INVALIDATE_VK | ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? ) )
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==INVALIDATE_VK) ) {
				alt105=1;
			}
			else if ( (LA105_0==CASCADE_VK) ) {
				alt105=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 105, 0, input);
				throw nvae;
			}

			switch (alt105) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:357:18: INVALIDATE_VK
					{
					match(input,INVALIDATE_VK,FOLLOW_INVALIDATE_VK_in_dependent_handling_clause2974); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:358:18: ^( CASCADE_VK ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )? )
					{
					match(input,CASCADE_VK,FOLLOW_CASCADE_VK_in_dependent_handling_clause2994); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:359:21: ( CONVERT_VK | ( SQL92_RESERVED_NOT )? INCLUDING_VK )?
						int alt104=3;
						int LA104_0 = input.LA(1);
						if ( (LA104_0==CONVERT_VK) ) {
							alt104=1;
						}
						else if ( (LA104_0==SQL92_RESERVED_NOT||LA104_0==INCLUDING_VK) ) {
							alt104=2;
						}
						switch (alt104) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:359:26: CONVERT_VK
								{
								match(input,CONVERT_VK,FOLLOW_CONVERT_VK_in_dependent_handling_clause3022); 
								}
								break;
							case 2 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:360:26: ( SQL92_RESERVED_NOT )? INCLUDING_VK
								{
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:360:26: ( SQL92_RESERVED_NOT )?
								int alt103=2;
								int LA103_0 = input.LA(1);
								if ( (LA103_0==SQL92_RESERVED_NOT) ) {
									alt103=1;
								}
								switch (alt103) {
									case 1 :
										// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:360:26: SQL92_RESERVED_NOT
										{
										match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause3049); 
										}
										break;

								}

								match(input,INCLUDING_VK,FOLLOW_INCLUDING_VK_in_dependent_handling_clause3052); 
								}
								break;

						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "dependent_handling_clause"



	// $ANTLR start "dependent_exceptions_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:367:1: dependent_exceptions_part : ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) ;
	public final void dependent_exceptions_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:368:5: ( ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:368:10: ^( EXCEPTIONS_VK ( FORCE_VK )? tableview_name )
			{
			match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part3138); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:368:26: ( FORCE_VK )?
			int alt106=2;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==FORCE_VK) ) {
				alt106=1;
			}
			switch (alt106) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:368:26: FORCE_VK
					{
					match(input,FORCE_VK,FOLLOW_FORCE_VK_in_dependent_exceptions_part3140); 
					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part3143);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "dependent_exceptions_part"



	// $ANTLR start "create_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:373:1: create_type : ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) | ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) );
	public final void create_type() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:374:5: ( ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ) | ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? ) )
			int alt112=2;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==CREATE_TYPE_BODY) ) {
				alt112=1;
			}
			else if ( (LA112_0==CREATE_TYPE_SPEC) ) {
				alt112=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 112, 0, input);
				throw nvae;
			}

			switch (alt112) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:374:10: ^( CREATE_TYPE_BODY ( REPLACE_VK )? type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
					{
					match(input,CREATE_TYPE_BODY,FOLLOW_CREATE_TYPE_BODY_in_create_type3167); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:374:29: ( REPLACE_VK )?
					int alt107=2;
					int LA107_0 = input.LA(1);
					if ( (LA107_0==REPLACE_VK) ) {
						alt107=1;
					}
					switch (alt107) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:374:29: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type3169); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type3172);
					type_name();
					state._fsp--;

					match(input,TYPE_BODY_ELEMENTS,FOLLOW_TYPE_BODY_ELEMENTS_in_create_type3175); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:374:72: ( type_body_elements )+
					int cnt108=0;
					loop108:
					while (true) {
						int alt108=2;
						int LA108_0 = input.LA(1);
						if ( (LA108_0==SQL92_RESERVED_ORDER||LA108_0==MAP_VK||LA108_0==MEMBER_VK||LA108_0==STATIC_VK) ) {
							alt108=1;
						}

						switch (alt108) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:374:72: type_body_elements
							{
							pushFollow(FOLLOW_type_body_elements_in_create_type3177);
							type_body_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt108 >= 1 ) break loop108;
							EarlyExitException eee = new EarlyExitException(108, input);
							throw eee;
						}
						cnt108++;
					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:375:10: ^( CREATE_TYPE_SPEC ( REPLACE_VK )? type_name ( CHAR_STRING )? ( object_type_def )? )
					{
					match(input,CREATE_TYPE_SPEC,FOLLOW_CREATE_TYPE_SPEC_in_create_type3192); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:375:29: ( REPLACE_VK )?
					int alt109=2;
					int LA109_0 = input.LA(1);
					if ( (LA109_0==REPLACE_VK) ) {
						alt109=1;
					}
					switch (alt109) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:375:29: REPLACE_VK
							{
							match(input,REPLACE_VK,FOLLOW_REPLACE_VK_in_create_type3194); 
							}
							break;

					}

					pushFollow(FOLLOW_type_name_in_create_type3197);
					type_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:375:51: ( CHAR_STRING )?
					int alt110=2;
					int LA110_0 = input.LA(1);
					if ( (LA110_0==CHAR_STRING) ) {
						alt110=1;
					}
					switch (alt110) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:375:51: CHAR_STRING
							{
							match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_create_type3199); 
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:375:64: ( object_type_def )?
					int alt111=2;
					int LA111_0 = input.LA(1);
					if ( (LA111_0==OBJECT_TYPE_DEF) ) {
						alt111=1;
					}
					switch (alt111) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:375:64: object_type_def
							{
							pushFollow(FOLLOW_object_type_def_in_create_type3202);
							object_type_def();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "create_type"



	// $ANTLR start "object_type_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:378:1: object_type_def : ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) ;
	public final void object_type_def() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:379:5: ( ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:379:10: ^( OBJECT_TYPE_DEF ( object_as_part | object_under_part ) ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( element_spec )* ) )
			{
			match(input,OBJECT_TYPE_DEF,FOLLOW_OBJECT_TYPE_DEF_in_object_type_def3225); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:379:28: ( object_as_part | object_under_part )
			int alt113=2;
			int LA113_0 = input.LA(1);
			if ( (LA113_0==OBJECT_AS) ) {
				alt113=1;
			}
			else if ( (LA113_0==UNDER_VK) ) {
				alt113=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				throw nvae;
			}

			switch (alt113) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:379:29: object_as_part
					{
					pushFollow(FOLLOW_object_as_part_in_object_type_def3228);
					object_as_part();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:379:44: object_under_part
					{
					pushFollow(FOLLOW_object_under_part_in_object_type_def3230);
					object_under_part();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:379:63: ( invoker_rights_clause )?
			int alt114=2;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==AUTHID_VK) ) {
				alt114=1;
			}
			switch (alt114) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:379:63: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def3233);
					invoker_rights_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:380:14: ( sqlj_object_type )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==JAVA_VK) ) {
				alt115=1;
			}
			switch (alt115) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:380:14: sqlj_object_type
					{
					pushFollow(FOLLOW_sqlj_object_type_in_object_type_def3249);
					sqlj_object_type();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:380:32: ( modifier_clause )*
			loop116:
			while (true) {
				int alt116=2;
				int LA116_0 = input.LA(1);
				if ( (LA116_0==MODIFIER) ) {
					alt116=1;
				}

				switch (alt116) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:380:32: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_object_type_def3252);
					modifier_clause();
					state._fsp--;

					}
					break;

				default :
					break loop116;
				}
			}

			match(input,OBJECT_MEMBERS,FOLLOW_OBJECT_MEMBERS_in_object_type_def3256); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:380:66: ( element_spec )*
				loop117:
				while (true) {
					int alt117=2;
					int LA117_0 = input.LA(1);
					if ( (LA117_0==ELEMENT_SPEC) ) {
						alt117=1;
					}

					switch (alt117) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:380:66: element_spec
						{
						pushFollow(FOLLOW_element_spec_in_object_type_def3258);
						element_spec();
						state._fsp--;

						}
						break;

					default :
						break loop117;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "object_type_def"



	// $ANTLR start "object_as_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:383:1: object_as_part : ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) ;
	public final void object_as_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:384:5: ( ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:384:10: ^( OBJECT_AS ( OBJECT_VK | varray_type_def | nested_table_type_def ) )
			{
			match(input,OBJECT_AS,FOLLOW_OBJECT_AS_in_object_as_part3284); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:384:22: ( OBJECT_VK | varray_type_def | nested_table_type_def )
			int alt118=3;
			switch ( input.LA(1) ) {
			case OBJECT_VK:
				{
				alt118=1;
				}
				break;
			case SQL92_RESERVED_NULL:
			case VARR_ARRAY_DEF:
				{
				alt118=2;
				}
				break;
			case NESTED_TABLE_TYPE_DEF:
				{
				alt118=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 118, 0, input);
				throw nvae;
			}
			switch (alt118) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:384:23: OBJECT_VK
					{
					match(input,OBJECT_VK,FOLLOW_OBJECT_VK_in_object_as_part3287); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:384:33: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_object_as_part3289);
					varray_type_def();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:384:49: nested_table_type_def
					{
					pushFollow(FOLLOW_nested_table_type_def_in_object_as_part3291);
					nested_table_type_def();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "object_as_part"



	// $ANTLR start "object_under_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:387:1: object_under_part : ^( UNDER_VK type_spec ) ;
	public final void object_under_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:388:5: ( ^( UNDER_VK type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:388:10: ^( UNDER_VK type_spec )
			{
			match(input,UNDER_VK,FOLLOW_UNDER_VK_in_object_under_part3314); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_object_under_part3316);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "object_under_part"



	// $ANTLR start "nested_table_type_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:391:1: nested_table_type_def : ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) ;
	public final void nested_table_type_def() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:392:5: ( ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:392:10: ^( NESTED_TABLE_TYPE_DEF type_spec ( SQL92_RESERVED_NULL )? ( table_indexed_by_part )? )
			{
			match(input,NESTED_TABLE_TYPE_DEF,FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def3338); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_nested_table_type_def3340);
			type_spec();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:392:44: ( SQL92_RESERVED_NULL )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==SQL92_RESERVED_NULL) ) {
				alt119=1;
			}
			switch (alt119) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:392:44: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def3342); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:392:65: ( table_indexed_by_part )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==INDEXED_BY) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:392:65: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_nested_table_type_def3345);
					table_indexed_by_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "nested_table_type_def"



	// $ANTLR start "sqlj_object_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:395:1: sqlj_object_type : ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) ;
	public final void sqlj_object_type() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:396:5: ( ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:396:10: ^( JAVA_VK expression ( SQLDATA_VK | CUSTOMDATUM_VK | ORADATA_VK ) )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_sqlj_object_type3368); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type3370);
			expression();
			state._fsp--;

			if ( input.LA(1)==CUSTOMDATUM_VK||input.LA(1)==ORADATA_VK||input.LA(1)==SQLDATA_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "sqlj_object_type"



	// $ANTLR start "type_body_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:399:1: type_body_elements : ( map_order_func_declaration | subprog_decl_in_type );
	public final void type_body_elements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:400:5: ( map_order_func_declaration | subprog_decl_in_type )
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==SQL92_RESERVED_ORDER||LA121_0==MAP_VK) ) {
				alt121=1;
			}
			else if ( (LA121_0==MEMBER_VK||LA121_0==STATIC_VK) ) {
				alt121=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 121, 0, input);
				throw nvae;
			}

			switch (alt121) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:400:10: map_order_func_declaration
					{
					pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements3399);
					map_order_func_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:401:10: subprog_decl_in_type
					{
					pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements3410);
					subprog_decl_in_type();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "type_body_elements"



	// $ANTLR start "map_order_func_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:404:1: map_order_func_declaration : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) ;
	public final void map_order_func_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:405:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:405:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) create_function_body )
			{
			if ( input.LA(1)==SQL92_RESERVED_ORDER||input.LA(1)==MAP_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_create_function_body_in_map_order_func_declaration3437);
			create_function_body();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "map_order_func_declaration"



	// $ANTLR start "subprog_decl_in_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:408:1: subprog_decl_in_type : ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) ;
	public final void subprog_decl_in_type() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:409:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:409:10: ^( ( MEMBER_VK | STATIC_VK ) ( create_procedure_body | create_function_body | constructor_declaration ) )
			{
			if ( input.LA(1)==MEMBER_VK||input.LA(1)==STATIC_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:410:13: ( create_procedure_body | create_function_body | constructor_declaration )
			int alt122=3;
			switch ( input.LA(1) ) {
			case CREATE_PROCEDURE:
				{
				alt122=1;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt122=2;
				}
				break;
			case CONSTRUCTOR_VK:
				{
				alt122=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 122, 0, input);
				throw nvae;
			}
			switch (alt122) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:410:18: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_subprog_decl_in_type3482);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:411:18: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_subprog_decl_in_type3501);
					create_function_body();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:412:18: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type3520);
					constructor_declaration();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subprog_decl_in_type"



	// $ANTLR start "constructor_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:417:1: constructor_declaration : ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) ;
	public final void constructor_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:418:5: ( ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:418:10: ^( CONSTRUCTOR_VK type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) ) )
			{
			match(input,CONSTRUCTOR_VK,FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration3565); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_declaration3567);
			type_spec();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:418:37: ( FINAL_VK )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==FINAL_VK) ) {
				alt123=1;
			}
			switch (alt123) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:418:37: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_declaration3569); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:418:47: ( INSTANTIABLE_VK )?
			int alt124=2;
			int LA124_0 = input.LA(1);
			if ( (LA124_0==INSTANTIABLE_VK) ) {
				alt124=1;
			}
			switch (alt124) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:418:47: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_declaration3572); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_declaration3576); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:418:77: ( type_elements_parameter )*
				loop125:
				while (true) {
					int alt125=2;
					int LA125_0 = input.LA(1);
					if ( (LA125_0==PARAMETER) ) {
						alt125=1;
					}

					switch (alt125) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:418:77: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration3578);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop125;
					}
				}

				match(input, Token.UP, null); 
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:419:13: ( ^( CALL_MODE call_spec ) | ^( BODY_MODE ( declare_spec )* body ) )
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==CALL_MODE) ) {
				alt127=1;
			}
			else if ( (LA127_0==BODY_MODE) ) {
				alt127=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 127, 0, input);
				throw nvae;
			}

			switch (alt127) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:419:18: ^( CALL_MODE call_spec )
					{
					match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_declaration3601); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_call_spec_in_constructor_declaration3603);
					call_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:420:18: ^( BODY_MODE ( declare_spec )* body )
					{
					match(input,BODY_MODE,FOLLOW_BODY_MODE_in_constructor_declaration3624); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:420:30: ( declare_spec )*
					loop126:
					while (true) {
						int alt126=2;
						int LA126_0 = input.LA(1);
						if ( (LA126_0==CREATE_FUNCTION||LA126_0==CREATE_PROCEDURE||LA126_0==CURSOR_DECLARE||LA126_0==EXCEPTION_DECLARE||LA126_0==PRAGMA_DECLARE||LA126_0==RECORD_VAR_DECLARE||LA126_0==SUBTYPE_DECLARE||(LA126_0 >= TABLE_TYPE_DECLARE && LA126_0 <= TABLE_VAR_DECLARE)||LA126_0==VARIABLE_DECLARE||LA126_0==RECORD_TYPE_DECLARE) ) {
							alt126=1;
						}

						switch (alt126) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:420:30: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_constructor_declaration3626);
							declare_spec();
							state._fsp--;

							}
							break;

						default :
							break loop126;
						}
					}

					pushFollow(FOLLOW_body_in_constructor_declaration3629);
					body();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "constructor_declaration"



	// $ANTLR start "modifier_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:429:1: modifier_clause : ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) ;
	public final void modifier_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:430:5: ( ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:430:10: ^( MODIFIER ( SQL92_RESERVED_NOT )? ( INSTANTIABLE_VK | FINAL_VK | OVERRIDING_VK ) )
			{
			match(input,MODIFIER,FOLLOW_MODIFIER_in_modifier_clause3679); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:430:21: ( SQL92_RESERVED_NOT )?
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==SQL92_RESERVED_NOT) ) {
				alt128=1;
			}
			switch (alt128) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:430:21: SQL92_RESERVED_NOT
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause3681); 
					}
					break;

			}

			if ( input.LA(1)==FINAL_VK||input.LA(1)==INSTANTIABLE_VK||input.LA(1)==OVERRIDING_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "modifier_clause"



	// $ANTLR start "sqlj_object_type_attr"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:433:1: sqlj_object_type_attr : ^( EXTERNAL_VK expression ) ;
	public final void sqlj_object_type_attr() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:434:5: ( ^( EXTERNAL_VK expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:434:10: ^( EXTERNAL_VK expression )
			{
			match(input,EXTERNAL_VK,FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr3712); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_sqlj_object_type_attr3714);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "sqlj_object_type_attr"



	// $ANTLR start "element_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:437:1: element_spec : ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) ;
	public final void element_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:438:5: ( ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:438:10: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
			{
			match(input,ELEMENT_SPEC,FOLLOW_ELEMENT_SPEC_in_element_spec3736); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:438:25: ( element_spec_options )+
			int cnt129=0;
			loop129:
			while (true) {
				int alt129=2;
				int LA129_0 = input.LA(1);
				if ( (LA129_0==SQL92_RESERVED_ORDER||LA129_0==CONSTRUCTOR_SPEC||LA129_0==FIELD_SPEC||LA129_0==MAP_VK||LA129_0==MEMBER_VK||LA129_0==STATIC_VK) ) {
					alt129=1;
				}

				switch (alt129) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:438:25: element_spec_options
					{
					pushFollow(FOLLOW_element_spec_options_in_element_spec3738);
					element_spec_options();
					state._fsp--;

					}
					break;

				default :
					if ( cnt129 >= 1 ) break loop129;
					EarlyExitException eee = new EarlyExitException(129, input);
					throw eee;
				}
				cnt129++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:438:47: ( modifier_clause )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==MODIFIER) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:438:47: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_element_spec3741);
					modifier_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:438:64: ( pragma_clause )?
			int alt131=2;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==PRAGMA_VK) ) {
				alt131=1;
			}
			switch (alt131) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:438:64: pragma_clause
					{
					pushFollow(FOLLOW_pragma_clause_in_element_spec3744);
					pragma_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "element_spec"



	// $ANTLR start "element_spec_options"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:441:1: element_spec_options : ( subprogram_spec | constructor_spec | map_order_function_spec | ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) );
	public final void element_spec_options() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:442:5: ( subprogram_spec | constructor_spec | map_order_function_spec | ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) )
			int alt133=4;
			switch ( input.LA(1) ) {
			case MEMBER_VK:
			case STATIC_VK:
				{
				alt133=1;
				}
				break;
			case CONSTRUCTOR_SPEC:
				{
				alt133=2;
				}
				break;
			case SQL92_RESERVED_ORDER:
			case MAP_VK:
				{
				alt133=3;
				}
				break;
			case FIELD_SPEC:
				{
				alt133=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 133, 0, input);
				throw nvae;
			}
			switch (alt133) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:442:10: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_element_spec_options3766);
					subprogram_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:443:10: constructor_spec
					{
					pushFollow(FOLLOW_constructor_spec_in_element_spec_options3777);
					constructor_spec();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:444:10: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options3788);
					map_order_function_spec();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:445:10: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
					{
					match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_element_spec_options3800); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_element_spec_options3802);
					id();
					state._fsp--;

					pushFollow(FOLLOW_type_spec_in_element_spec_options3804);
					type_spec();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:445:36: ( sqlj_object_type_attr )?
					int alt132=2;
					int LA132_0 = input.LA(1);
					if ( (LA132_0==EXTERNAL_VK) ) {
						alt132=1;
					}
					switch (alt132) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:445:36: sqlj_object_type_attr
							{
							pushFollow(FOLLOW_sqlj_object_type_attr_in_element_spec_options3806);
							sqlj_object_type_attr();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "element_spec_options"



	// $ANTLR start "subprogram_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:448:1: subprogram_spec : ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) ;
	public final void subprogram_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:449:5: ( ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:449:10: ^( ( MEMBER_VK | STATIC_VK ) ( procedure_spec | function_spec ) )
			{
			if ( input.LA(1)==MEMBER_VK||input.LA(1)==STATIC_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:450:13: ( procedure_spec | function_spec )
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==PROCEDURE_SPEC) ) {
				alt134=1;
			}
			else if ( (LA134_0==FUNCTION_SPEC) ) {
				alt134=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 134, 0, input);
				throw nvae;
			}

			switch (alt134) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:450:18: procedure_spec
					{
					pushFollow(FOLLOW_procedure_spec_in_subprogram_spec3852);
					procedure_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:451:18: function_spec
					{
					pushFollow(FOLLOW_function_spec_in_subprogram_spec3871);
					function_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subprogram_spec"



	// $ANTLR start "constructor_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:456:1: constructor_spec : ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) ;
	public final void constructor_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:5: ( ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:10: ^( CONSTRUCTOR_SPEC type_spec ( FINAL_VK )? ( INSTANTIABLE_VK )? ^( PARAMETERS ( type_elements_parameter )* ) ( constructor_call_mode )? )
			{
			match(input,CONSTRUCTOR_SPEC,FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec3916); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_constructor_spec3918);
			type_spec();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:39: ( FINAL_VK )?
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==FINAL_VK) ) {
				alt135=1;
			}
			switch (alt135) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:39: FINAL_VK
					{
					match(input,FINAL_VK,FOLLOW_FINAL_VK_in_constructor_spec3920); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:49: ( INSTANTIABLE_VK )?
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==INSTANTIABLE_VK) ) {
				alt136=1;
			}
			switch (alt136) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:49: INSTANTIABLE_VK
					{
					match(input,INSTANTIABLE_VK,FOLLOW_INSTANTIABLE_VK_in_constructor_spec3923); 
					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_constructor_spec3927); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:79: ( type_elements_parameter )*
				loop137:
				while (true) {
					int alt137=2;
					int LA137_0 = input.LA(1);
					if ( (LA137_0==PARAMETER) ) {
						alt137=1;
					}

					switch (alt137) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:79: type_elements_parameter
						{
						pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec3929);
						type_elements_parameter();
						state._fsp--;

						}
						break;

					default :
						break loop137;
					}
				}

				match(input, Token.UP, null); 
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:105: ( constructor_call_mode )?
			int alt138=2;
			int LA138_0 = input.LA(1);
			if ( (LA138_0==CALL_MODE) ) {
				alt138=1;
			}
			switch (alt138) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:457:105: constructor_call_mode
					{
					pushFollow(FOLLOW_constructor_call_mode_in_constructor_spec3933);
					constructor_call_mode();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "constructor_spec"



	// $ANTLR start "constructor_call_mode"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:460:1: constructor_call_mode : ^( CALL_MODE call_spec ) ;
	public final void constructor_call_mode() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:461:5: ( ^( CALL_MODE call_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:461:10: ^( CALL_MODE call_spec )
			{
			match(input,CALL_MODE,FOLLOW_CALL_MODE_in_constructor_call_mode3956); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_call_spec_in_constructor_call_mode3958);
			call_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "constructor_call_mode"



	// $ANTLR start "map_order_function_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:464:1: map_order_function_spec : ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) ;
	public final void map_order_function_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:465:5: ( ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:465:10: ^( ( MAP_VK | SQL92_RESERVED_ORDER ) function_spec )
			{
			if ( input.LA(1)==SQL92_RESERVED_ORDER||input.LA(1)==MAP_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_function_spec_in_map_order_function_spec3986);
			function_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "map_order_function_spec"



	// $ANTLR start "pragma_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:468:1: pragma_clause : ^( PRAGMA_VK ( pragma_elements )+ ) ;
	public final void pragma_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:469:5: ( ^( PRAGMA_VK ( pragma_elements )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:469:10: ^( PRAGMA_VK ( pragma_elements )+ )
			{
			match(input,PRAGMA_VK,FOLLOW_PRAGMA_VK_in_pragma_clause4008); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:469:22: ( pragma_elements )+
			int cnt139=0;
			loop139:
			while (true) {
				int alt139=2;
				int LA139_0 = input.LA(1);
				if ( (LA139_0==SQL92_RESERVED_DEFAULT||LA139_0==CHAR_SET_NAME||LA139_0==ID) ) {
					alt139=1;
				}

				switch (alt139) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:469:22: pragma_elements
					{
					pushFollow(FOLLOW_pragma_elements_in_pragma_clause4010);
					pragma_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt139 >= 1 ) break loop139;
					EarlyExitException eee = new EarlyExitException(139, input);
					throw eee;
				}
				cnt139++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pragma_clause"



	// $ANTLR start "pragma_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:472:1: pragma_elements : ( id | SQL92_RESERVED_DEFAULT );
	public final void pragma_elements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:473:5: ( id | SQL92_RESERVED_DEFAULT )
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==CHAR_SET_NAME||LA140_0==ID) ) {
				alt140=1;
			}
			else if ( (LA140_0==SQL92_RESERVED_DEFAULT) ) {
				alt140=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 140, 0, input);
				throw nvae;
			}

			switch (alt140) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:473:10: id
					{
					pushFollow(FOLLOW_id_in_pragma_elements4032);
					id();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:474:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements4043); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pragma_elements"



	// $ANTLR start "type_elements_parameter"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:477:1: type_elements_parameter : ^( PARAMETER parameter_name type_spec ) ;
	public final void type_elements_parameter() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:478:5: ( ^( PARAMETER parameter_name type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:478:10: ^( PARAMETER parameter_name type_spec )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_type_elements_parameter4064); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_type_elements_parameter4066);
			parameter_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_type_elements_parameter4068);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "type_elements_parameter"



	// $ANTLR start "drop_sequence"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:487:1: drop_sequence : ^( DROP_SEQUENCE sequence_name ) ;
	public final void drop_sequence() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:488:5: ( ^( DROP_SEQUENCE sequence_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:488:9: ^( DROP_SEQUENCE sequence_name )
			{
			match(input,DROP_SEQUENCE,FOLLOW_DROP_SEQUENCE_in_drop_sequence4095); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_drop_sequence4097);
			sequence_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "drop_sequence"



	// $ANTLR start "alter_sequence"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:491:1: alter_sequence : ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) ;
	public final void alter_sequence() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:492:5: ( ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:492:10: ^( ALTER_SEQUENCE sequence_name ( sequence_spec )+ )
			{
			match(input,ALTER_SEQUENCE,FOLLOW_ALTER_SEQUENCE_in_alter_sequence4119); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_alter_sequence4121);
			sequence_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:492:41: ( sequence_spec )+
			int cnt141=0;
			loop141:
			while (true) {
				int alt141=2;
				int LA141_0 = input.LA(1);
				if ( (LA141_0==CACHE_VK||LA141_0==CYCLE_VK||LA141_0==INCREMENT_VK||LA141_0==MAXVALUE_VK||LA141_0==MINVALUE_VK||LA141_0==NOCACHE_VK||LA141_0==NOCYCLE_VK||(LA141_0 >= NOMAXVALUE_VK && LA141_0 <= NOMINVALUE_VK)||LA141_0==NOORDER_VK||LA141_0==ORDER_VK||LA141_0==START_VK) ) {
					alt141=1;
				}

				switch (alt141) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:492:41: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_alter_sequence4123);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					if ( cnt141 >= 1 ) break loop141;
					EarlyExitException eee = new EarlyExitException(141, input);
					throw eee;
				}
				cnt141++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alter_sequence"



	// $ANTLR start "create_sequence"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:495:1: create_sequence : ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) ;
	public final void create_sequence() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:496:5: ( ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:496:10: ^( CREATE_SEQUENCE sequence_name ( sequence_spec )* )
			{
			match(input,CREATE_SEQUENCE,FOLLOW_CREATE_SEQUENCE_in_create_sequence4146); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_sequence_name_in_create_sequence4148);
			sequence_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:496:42: ( sequence_spec )*
			loop142:
			while (true) {
				int alt142=2;
				int LA142_0 = input.LA(1);
				if ( (LA142_0==CACHE_VK||LA142_0==CYCLE_VK||LA142_0==INCREMENT_VK||LA142_0==MAXVALUE_VK||LA142_0==MINVALUE_VK||LA142_0==NOCACHE_VK||LA142_0==NOCYCLE_VK||(LA142_0 >= NOMAXVALUE_VK && LA142_0 <= NOMINVALUE_VK)||LA142_0==NOORDER_VK||LA142_0==ORDER_VK||LA142_0==START_VK) ) {
					alt142=1;
				}

				switch (alt142) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:496:42: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_create_sequence4150);
					sequence_spec();
					state._fsp--;

					}
					break;

				default :
					break loop142;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "create_sequence"



	// $ANTLR start "sequence_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:501:1: sequence_spec : ( ^( START_VK UNSIGNED_INTEGER ) | ^( INCREMENT_VK UNSIGNED_INTEGER ) | ^( MAXVALUE_VK UNSIGNED_INTEGER ) | ^( MINVALUE_VK UNSIGNED_INTEGER ) | ^( CACHE_VK UNSIGNED_INTEGER ) | NOMAXVALUE_VK | NOMINVALUE_VK | CYCLE_VK | NOCYCLE_VK | NOCACHE_VK | ORDER_VK | NOORDER_VK );
	public final void sequence_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:502:5: ( ^( START_VK UNSIGNED_INTEGER ) | ^( INCREMENT_VK UNSIGNED_INTEGER ) | ^( MAXVALUE_VK UNSIGNED_INTEGER ) | ^( MINVALUE_VK UNSIGNED_INTEGER ) | ^( CACHE_VK UNSIGNED_INTEGER ) | NOMAXVALUE_VK | NOMINVALUE_VK | CYCLE_VK | NOCYCLE_VK | NOCACHE_VK | ORDER_VK | NOORDER_VK )
			int alt143=12;
			switch ( input.LA(1) ) {
			case START_VK:
				{
				alt143=1;
				}
				break;
			case INCREMENT_VK:
				{
				alt143=2;
				}
				break;
			case MAXVALUE_VK:
				{
				alt143=3;
				}
				break;
			case MINVALUE_VK:
				{
				alt143=4;
				}
				break;
			case CACHE_VK:
				{
				alt143=5;
				}
				break;
			case NOMAXVALUE_VK:
				{
				alt143=6;
				}
				break;
			case NOMINVALUE_VK:
				{
				alt143=7;
				}
				break;
			case CYCLE_VK:
				{
				alt143=8;
				}
				break;
			case NOCYCLE_VK:
				{
				alt143=9;
				}
				break;
			case NOCACHE_VK:
				{
				alt143=10;
				}
				break;
			case ORDER_VK:
				{
				alt143=11;
				}
				break;
			case NOORDER_VK:
				{
				alt143=12;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 143, 0, input);
				throw nvae;
			}
			switch (alt143) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:502:10: ^( START_VK UNSIGNED_INTEGER )
					{
					match(input,START_VK,FOLLOW_START_VK_in_sequence_spec4175); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4177); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:503:10: ^( INCREMENT_VK UNSIGNED_INTEGER )
					{
					match(input,INCREMENT_VK,FOLLOW_INCREMENT_VK_in_sequence_spec4190); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4192); 
					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:504:10: ^( MAXVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_sequence_spec4205); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4207); 
					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:505:10: ^( MINVALUE_VK UNSIGNED_INTEGER )
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_sequence_spec4220); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4222); 
					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:506:10: ^( CACHE_VK UNSIGNED_INTEGER )
					{
					match(input,CACHE_VK,FOLLOW_CACHE_VK_in_sequence_spec4235); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4237); 
					match(input, Token.UP, null); 

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:507:10: NOMAXVALUE_VK
					{
					match(input,NOMAXVALUE_VK,FOLLOW_NOMAXVALUE_VK_in_sequence_spec4249); 
					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:508:10: NOMINVALUE_VK
					{
					match(input,NOMINVALUE_VK,FOLLOW_NOMINVALUE_VK_in_sequence_spec4260); 
					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:509:10: CYCLE_VK
					{
					match(input,CYCLE_VK,FOLLOW_CYCLE_VK_in_sequence_spec4271); 
					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:510:10: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_sequence_spec4282); 
					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:511:10: NOCACHE_VK
					{
					match(input,NOCACHE_VK,FOLLOW_NOCACHE_VK_in_sequence_spec4293); 
					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:512:10: ORDER_VK
					{
					match(input,ORDER_VK,FOLLOW_ORDER_VK_in_sequence_spec4304); 
					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:513:10: NOORDER_VK
					{
					match(input,NOORDER_VK,FOLLOW_NOORDER_VK_in_sequence_spec4315); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "sequence_spec"



	// $ANTLR start "invoker_rights_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:522:1: invoker_rights_clause : ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) ;
	public final void invoker_rights_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:523:5: ( ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:523:10: ^( AUTHID_VK ( CURRENT_USER_VK | DEFINER_VK ) )
			{
			match(input,AUTHID_VK,FOLLOW_AUTHID_VK_in_invoker_rights_clause4342); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==CURRENT_USER_VK||input.LA(1)==DEFINER_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "invoker_rights_clause"



	// $ANTLR start "compiler_parameters_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:526:1: compiler_parameters_clause : ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) ;
	public final void compiler_parameters_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:527:5: ( ^( COMPILER_PARAMETER ^( ASSIGN id expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:527:10: ^( COMPILER_PARAMETER ^( ASSIGN id expression ) )
			{
			match(input,COMPILER_PARAMETER,FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause4370); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_compiler_parameters_clause4373); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_compiler_parameters_clause4375);
			id();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_compiler_parameters_clause4377);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "compiler_parameters_clause"



	// $ANTLR start "call_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:530:1: call_spec : ^( LANGUAGE_VK ( java_spec | c_spec ) ) ;
	public final void call_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:531:5: ( ^( LANGUAGE_VK ( java_spec | c_spec ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:531:10: ^( LANGUAGE_VK ( java_spec | c_spec ) )
			{
			match(input,LANGUAGE_VK,FOLLOW_LANGUAGE_VK_in_call_spec4400); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:531:24: ( java_spec | c_spec )
			int alt144=2;
			int LA144_0 = input.LA(1);
			if ( (LA144_0==JAVA_VK) ) {
				alt144=1;
			}
			else if ( (LA144_0==C_VK) ) {
				alt144=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				throw nvae;
			}

			switch (alt144) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:531:26: java_spec
					{
					pushFollow(FOLLOW_java_spec_in_call_spec4404);
					java_spec();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:531:38: c_spec
					{
					pushFollow(FOLLOW_c_spec_in_call_spec4408);
					c_spec();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "call_spec"



	// $ANTLR start "java_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:536:1: java_spec : ^( JAVA_VK CHAR_STRING ) ;
	public final void java_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:537:5: ( ^( JAVA_VK CHAR_STRING ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:537:10: ^( JAVA_VK CHAR_STRING )
			{
			match(input,JAVA_VK,FOLLOW_JAVA_VK_in_java_spec4434); 
			match(input, Token.DOWN, null); 
			match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec4436); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "java_spec"



	// $ANTLR start "c_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:540:1: c_spec : ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) ;
	public final void c_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:5: ( ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:10: ^( C_VK ( CHAR_STRING )? ( CONTEXT_VK )? ^( LIBRARY_VK id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
			{
			match(input,C_VK,FOLLOW_C_VK_in_c_spec4458); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:17: ( CHAR_STRING )?
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==CHAR_STRING) ) {
				alt145=1;
			}
			switch (alt145) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:17: CHAR_STRING
					{
					match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec4460); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:30: ( CONTEXT_VK )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==CONTEXT_VK) ) {
				alt146=1;
			}
			switch (alt146) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:30: CONTEXT_VK
					{
					match(input,CONTEXT_VK,FOLLOW_CONTEXT_VK_in_c_spec4463); 
					}
					break;

			}

			match(input,LIBRARY_VK,FOLLOW_LIBRARY_VK_in_c_spec4467); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_id_in_c_spec4469);
			id();
			state._fsp--;

			match(input, Token.UP, null); 

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:59: ( c_agent_in_clause )?
			int alt147=2;
			int LA147_0 = input.LA(1);
			if ( (LA147_0==AGENT_VK) ) {
				alt147=1;
			}
			switch (alt147) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:59: c_agent_in_clause
					{
					pushFollow(FOLLOW_c_agent_in_clause_in_c_spec4472);
					c_agent_in_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:78: ( c_parameters_clause )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==PARAMETERS_VK) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:541:78: c_parameters_clause
					{
					pushFollow(FOLLOW_c_parameters_clause_in_c_spec4475);
					c_parameters_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "c_spec"



	// $ANTLR start "c_agent_in_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:544:1: c_agent_in_clause : ^( AGENT_VK ( expression )+ ) ;
	public final void c_agent_in_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:545:5: ( ^( AGENT_VK ( expression )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:545:10: ^( AGENT_VK ( expression )+ )
			{
			match(input,AGENT_VK,FOLLOW_AGENT_VK_in_c_agent_in_clause4498); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:545:21: ( expression )+
			int cnt149=0;
			loop149:
			while (true) {
				int alt149=2;
				int LA149_0 = input.LA(1);
				if ( (LA149_0==EXPR||LA149_0==LOGIC_EXPR) ) {
					alt149=1;
				}

				switch (alt149) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:545:21: expression
					{
					pushFollow(FOLLOW_expression_in_c_agent_in_clause4500);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt149 >= 1 ) break loop149;
					EarlyExitException eee = new EarlyExitException(149, input);
					throw eee;
				}
				cnt149++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "c_agent_in_clause"



	// $ANTLR start "c_parameters_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:548:1: c_parameters_clause : ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) ;
	public final void c_parameters_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:549:5: ( ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:549:10: ^( PARAMETERS_VK ( THREE_DOTS | ( expression )+ ) )
			{
			match(input,PARAMETERS_VK,FOLLOW_PARAMETERS_VK_in_c_parameters_clause4523); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:549:26: ( THREE_DOTS | ( expression )+ )
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==THREE_DOTS) ) {
				alt151=1;
			}
			else if ( (LA151_0==EXPR||LA151_0==LOGIC_EXPR) ) {
				alt151=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 151, 0, input);
				throw nvae;
			}

			switch (alt151) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:549:27: THREE_DOTS
					{
					match(input,THREE_DOTS,FOLLOW_THREE_DOTS_in_c_parameters_clause4526); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:549:38: ( expression )+
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:549:38: ( expression )+
					int cnt150=0;
					loop150:
					while (true) {
						int alt150=2;
						int LA150_0 = input.LA(1);
						if ( (LA150_0==EXPR||LA150_0==LOGIC_EXPR) ) {
							alt150=1;
						}

						switch (alt150) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:549:38: expression
							{
							pushFollow(FOLLOW_expression_in_c_parameters_clause4528);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt150 >= 1 ) break loop150;
							EarlyExitException eee = new EarlyExitException(150, input);
							throw eee;
						}
						cnt150++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "c_parameters_clause"



	// $ANTLR start "parameter"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:554:1: parameter : ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) ;
	public final void parameter() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:555:5: ( ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:555:10: ^( PARAMETER parameter_name ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )* ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter4554); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter4556);
			parameter_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:555:37: ( SQL92_RESERVED_IN | OUT_VK | INOUT_VK )*
			loop152:
			while (true) {
				int alt152=2;
				int LA152_0 = input.LA(1);
				if ( (LA152_0==SQL92_RESERVED_IN||LA152_0==INOUT_VK||LA152_0==OUT_VK) ) {
					alt152=1;
				}

				switch (alt152) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==SQL92_RESERVED_IN||input.LA(1)==INOUT_VK||input.LA(1)==OUT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					break loop152;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:555:74: ( type_spec )?
			int alt153=2;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==CUSTOM_TYPE||LA153_0==INTERVAL_DATATYPE||LA153_0==NATIVE_DATATYPE) ) {
				alt153=1;
			}
			switch (alt153) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:555:74: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter4567);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:555:85: ( default_value_part )?
			int alt154=2;
			int LA154_0 = input.LA(1);
			if ( (LA154_0==DEFAULT_VALUE) ) {
				alt154=1;
			}
			switch (alt154) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:555:85: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter4570);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "parameter"



	// $ANTLR start "default_value_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:558:1: default_value_part : ^( DEFAULT_VALUE expression ) ;
	public final void default_value_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:559:5: ( ^( DEFAULT_VALUE expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:559:10: ^( DEFAULT_VALUE expression )
			{
			match(input,DEFAULT_VALUE,FOLLOW_DEFAULT_VALUE_in_default_value_part4593); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_default_value_part4595);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "default_value_part"



	// $ANTLR start "declare_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:568:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body );
	public final void declare_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:569:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body )
			int alt155=9;
			switch ( input.LA(1) ) {
			case VARIABLE_DECLARE:
				{
				alt155=1;
				}
				break;
			case SUBTYPE_DECLARE:
				{
				alt155=2;
				}
				break;
			case CURSOR_DECLARE:
				{
				alt155=3;
				}
				break;
			case EXCEPTION_DECLARE:
				{
				alt155=4;
				}
				break;
			case PRAGMA_DECLARE:
				{
				alt155=5;
				}
				break;
			case RECORD_VAR_DECLARE:
			case RECORD_TYPE_DECLARE:
				{
				alt155=6;
				}
				break;
			case TABLE_TYPE_DECLARE:
			case TABLE_VAR_DECLARE:
				{
				alt155=7;
				}
				break;
			case CREATE_PROCEDURE:
				{
				alt155=8;
				}
				break;
			case CREATE_FUNCTION:
				{
				alt155=9;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				throw nvae;
			}
			switch (alt155) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:569:10: variable_declaration
					{
					pushFollow(FOLLOW_variable_declaration_in_declare_spec4622);
					variable_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:570:11: subtype_declaration
					{
					pushFollow(FOLLOW_subtype_declaration_in_declare_spec4634);
					subtype_declaration();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:571:11: cursor_declaration
					{
					pushFollow(FOLLOW_cursor_declaration_in_declare_spec4646);
					cursor_declaration();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:572:11: exception_declaration
					{
					pushFollow(FOLLOW_exception_declaration_in_declare_spec4658);
					exception_declaration();
					state._fsp--;

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:573:11: pragma_declaration
					{
					pushFollow(FOLLOW_pragma_declaration_in_declare_spec4670);
					pragma_declaration();
					state._fsp--;

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:574:11: record_declaration
					{
					pushFollow(FOLLOW_record_declaration_in_declare_spec4682);
					record_declaration();
					state._fsp--;

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:575:11: table_declaration
					{
					pushFollow(FOLLOW_table_declaration_in_declare_spec4694);
					table_declaration();
					state._fsp--;

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:576:11: create_procedure_body
					{
					pushFollow(FOLLOW_create_procedure_body_in_declare_spec4706);
					create_procedure_body();
					state._fsp--;

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:577:11: create_function_body
					{
					pushFollow(FOLLOW_create_function_body_in_declare_spec4718);
					create_function_body();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "declare_spec"



	// $ANTLR start "variable_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:581:1: variable_declaration : ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) ;
	public final void variable_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:582:5: ( ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:582:10: ^( VARIABLE_DECLARE variable_name type_spec ( CONSTANT_VK )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,VARIABLE_DECLARE,FOLLOW_VARIABLE_DECLARE_in_variable_declaration4740); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_variable_declaration4742);
			variable_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_variable_declaration4744);
			type_spec();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:582:53: ( CONSTANT_VK )?
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==CONSTANT_VK) ) {
				alt156=1;
			}
			switch (alt156) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:582:53: CONSTANT_VK
					{
					match(input,CONSTANT_VK,FOLLOW_CONSTANT_VK_in_variable_declaration4746); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:582:66: ( SQL92_RESERVED_NULL )?
			int alt157=2;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==SQL92_RESERVED_NULL) ) {
				alt157=1;
			}
			switch (alt157) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:582:66: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration4749); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:582:87: ( default_value_part )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==DEFAULT_VALUE) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:582:87: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_variable_declaration4752);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "variable_declaration"



	// $ANTLR start "subtype_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:585:1: subtype_declaration : ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) ;
	public final void subtype_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:586:7: ( ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:586:12: ^( SUBTYPE_DECLARE type_name type_spec ( SQL92_RESERVED_NULL )? ( subtype_range )? )
			{
			match(input,SUBTYPE_DECLARE,FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration4781); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_subtype_declaration4783);
			type_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_subtype_declaration4785);
			type_spec();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:586:50: ( SQL92_RESERVED_NULL )?
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==SQL92_RESERVED_NULL) ) {
				alt159=1;
			}
			switch (alt159) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:586:50: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration4787); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:586:71: ( subtype_range )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==RANGE_VK) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:586:71: subtype_range
					{
					pushFollow(FOLLOW_subtype_range_in_subtype_declaration4790);
					subtype_range();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subtype_declaration"



	// $ANTLR start "subtype_range"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:589:1: subtype_range : ^( RANGE_VK ( expression )+ ) ;
	public final void subtype_range() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:590:5: ( ^( RANGE_VK ( expression )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:590:10: ^( RANGE_VK ( expression )+ )
			{
			match(input,RANGE_VK,FOLLOW_RANGE_VK_in_subtype_range4815); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:590:21: ( expression )+
			int cnt161=0;
			loop161:
			while (true) {
				int alt161=2;
				int LA161_0 = input.LA(1);
				if ( (LA161_0==EXPR||LA161_0==LOGIC_EXPR) ) {
					alt161=1;
				}

				switch (alt161) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:590:21: expression
					{
					pushFollow(FOLLOW_expression_in_subtype_range4817);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt161 >= 1 ) break loop161;
					EarlyExitException eee = new EarlyExitException(161, input);
					throw eee;
				}
				cnt161++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subtype_range"



	// $ANTLR start "cursor_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:594:1: cursor_declaration : ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) ;
	public final void cursor_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:595:5: ( ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:595:10: ^( CURSOR_DECLARE cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
			{
			match(input,CURSOR_DECLARE,FOLLOW_CURSOR_DECLARE_in_cursor_declaration4841); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_cursor_declaration4843);
			cursor_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:595:39: ( type_spec )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==CUSTOM_TYPE||LA162_0==INTERVAL_DATATYPE||LA162_0==NATIVE_DATATYPE) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:595:39: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_cursor_declaration4845);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:595:50: ( select_statement )?
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==SELECT_STATEMENT) ) {
				alt163=1;
			}
			switch (alt163) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:595:50: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_cursor_declaration4848);
					select_statement();
					state._fsp--;

					}
					break;

			}

			match(input,PARAMETERS,FOLLOW_PARAMETERS_in_cursor_declaration4852); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:595:81: ( parameter_spec )*
				loop164:
				while (true) {
					int alt164=2;
					int LA164_0 = input.LA(1);
					if ( (LA164_0==PARAMETER) ) {
						alt164=1;
					}

					switch (alt164) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:595:81: parameter_spec
						{
						pushFollow(FOLLOW_parameter_spec_in_cursor_declaration4854);
						parameter_spec();
						state._fsp--;

						}
						break;

					default :
						break loop164;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "cursor_declaration"



	// $ANTLR start "parameter_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:598:1: parameter_spec : ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) ;
	public final void parameter_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:599:5: ( ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:599:10: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
			{
			match(input,PARAMETER,FOLLOW_PARAMETER_in_parameter_spec4879); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_parameter_name_in_parameter_spec4881);
			parameter_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:599:37: ( type_spec )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==CUSTOM_TYPE||LA165_0==INTERVAL_DATATYPE||LA165_0==NATIVE_DATATYPE) ) {
				alt165=1;
			}
			switch (alt165) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:599:37: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter_spec4883);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:599:48: ( default_value_part )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==DEFAULT_VALUE) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:599:48: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter_spec4886);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "parameter_spec"



	// $ANTLR start "exception_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:602:1: exception_declaration : ^( EXCEPTION_DECLARE exception_name ) ;
	public final void exception_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:603:5: ( ^( EXCEPTION_DECLARE exception_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:603:10: ^( EXCEPTION_DECLARE exception_name )
			{
			match(input,EXCEPTION_DECLARE,FOLLOW_EXCEPTION_DECLARE_in_exception_declaration4910); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_exception_name_in_exception_declaration4912);
			exception_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "exception_declaration"



	// $ANTLR start "pragma_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:606:1: pragma_declaration : ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) ) ;
	public final void pragma_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:607:5: ( ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:607:10: ^( PRAGMA_DECLARE ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) ) )
			{
			match(input,PRAGMA_DECLARE,FOLLOW_PRAGMA_DECLARE_in_pragma_declaration4947); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:608:13: ( SERIALLY_REUSABLE_VK | AUTONOMOUS_TRANSACTION_VK | ^( EXCEPTION_INIT_VK exception_name constant ) | ^( INLINE_VK id expression ) | ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* ) )
			int alt169=5;
			switch ( input.LA(1) ) {
			case SERIALLY_REUSABLE_VK:
				{
				alt169=1;
				}
				break;
			case AUTONOMOUS_TRANSACTION_VK:
				{
				alt169=2;
				}
				break;
			case EXCEPTION_INIT_VK:
				{
				alt169=3;
				}
				break;
			case INLINE_VK:
				{
				alt169=4;
				}
				break;
			case RESTRICT_REFERENCES_VK:
				{
				alt169=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 169, 0, input);
				throw nvae;
			}
			switch (alt169) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:608:18: SERIALLY_REUSABLE_VK
					{
					match(input,SERIALLY_REUSABLE_VK,FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration4967); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:609:19: AUTONOMOUS_TRANSACTION_VK
					{
					match(input,AUTONOMOUS_TRANSACTION_VK,FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration4987); 
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:610:18: ^( EXCEPTION_INIT_VK exception_name constant )
					{
					match(input,EXCEPTION_INIT_VK,FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration5007); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_exception_name_in_pragma_declaration5009);
					exception_name();
					state._fsp--;

					pushFollow(FOLLOW_constant_in_pragma_declaration5011);
					constant();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:611:18: ^( INLINE_VK id expression )
					{
					match(input,INLINE_VK,FOLLOW_INLINE_VK_in_pragma_declaration5032); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_id_in_pragma_declaration5034);
					id();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_pragma_declaration5036);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:612:18: ^( RESTRICT_REFERENCES_VK ( SQL92_RESERVED_DEFAULT )? ( id )* )
					{
					match(input,RESTRICT_REFERENCES_VK,FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration5057); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:612:43: ( SQL92_RESERVED_DEFAULT )?
						int alt167=2;
						int LA167_0 = input.LA(1);
						if ( (LA167_0==SQL92_RESERVED_DEFAULT) ) {
							alt167=1;
						}
						switch (alt167) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:612:43: SQL92_RESERVED_DEFAULT
								{
								match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration5059); 
								}
								break;

						}

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:612:67: ( id )*
						loop168:
						while (true) {
							int alt168=2;
							int LA168_0 = input.LA(1);
							if ( (LA168_0==CHAR_SET_NAME||LA168_0==ID) ) {
								alt168=1;
							}

							switch (alt168) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:612:67: id
								{
								pushFollow(FOLLOW_id_in_pragma_declaration5062);
								id();
								state._fsp--;

								}
								break;

							default :
								break loop168;
							}
						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pragma_declaration"



	// $ANTLR start "record_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:617:1: record_declaration : ( record_type_dec | record_var_dec );
	public final void record_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:618:5: ( record_type_dec | record_var_dec )
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==RECORD_TYPE_DECLARE) ) {
				alt170=1;
			}
			else if ( (LA170_0==RECORD_VAR_DECLARE) ) {
				alt170=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 170, 0, input);
				throw nvae;
			}

			switch (alt170) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:618:10: record_type_dec
					{
					pushFollow(FOLLOW_record_type_dec_in_record_declaration5108);
					record_type_dec();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:619:10: record_var_dec
					{
					pushFollow(FOLLOW_record_var_dec_in_record_declaration5119);
					record_var_dec();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "record_declaration"



	// $ANTLR start "record_type_dec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:625:1: record_type_dec : ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) ) ;
	public final void record_type_dec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:626:5: ( ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:626:10: ^( RECORD_TYPE_DECLARE type_name ( REF_VK )? ( type_spec )? ^( FIELDS ( field_spec )* ) )
			{
			match(input,RECORD_TYPE_DECLARE,FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec5143); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_record_type_dec5145);
			type_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:626:42: ( REF_VK )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==REF_VK) ) {
				alt171=1;
			}
			switch (alt171) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:626:42: REF_VK
					{
					match(input,REF_VK,FOLLOW_REF_VK_in_record_type_dec5147); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:626:50: ( type_spec )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==CUSTOM_TYPE||LA172_0==INTERVAL_DATATYPE||LA172_0==NATIVE_DATATYPE) ) {
				alt172=1;
			}
			switch (alt172) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:626:50: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_record_type_dec5150);
					type_spec();
					state._fsp--;

					}
					break;

			}

			match(input,FIELDS,FOLLOW_FIELDS_in_record_type_dec5154); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:626:70: ( field_spec )*
				loop173:
				while (true) {
					int alt173=2;
					int LA173_0 = input.LA(1);
					if ( (LA173_0==FIELD_SPEC) ) {
						alt173=1;
					}

					switch (alt173) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:626:70: field_spec
						{
						pushFollow(FOLLOW_field_spec_in_record_type_dec5156);
						field_spec();
						state._fsp--;

						}
						break;

					default :
						break loop173;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "record_type_dec"



	// $ANTLR start "field_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:629:1: field_spec : ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) ;
	public final void field_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:630:5: ( ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:630:10: ^( FIELD_SPEC column_name ( type_spec )? ( SQL92_RESERVED_NULL )? ( default_value_part )? )
			{
			match(input,FIELD_SPEC,FOLLOW_FIELD_SPEC_in_field_spec5180); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_field_spec5182);
			column_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:630:35: ( type_spec )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==CUSTOM_TYPE||LA174_0==INTERVAL_DATATYPE||LA174_0==NATIVE_DATATYPE) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:630:35: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_field_spec5184);
					type_spec();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:630:46: ( SQL92_RESERVED_NULL )?
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==SQL92_RESERVED_NULL) ) {
				alt175=1;
			}
			switch (alt175) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:630:46: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_field_spec5187); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:630:67: ( default_value_part )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==DEFAULT_VALUE) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:630:67: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_field_spec5190);
					default_value_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "field_spec"



	// $ANTLR start "record_var_dec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:633:1: record_var_dec : ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) ;
	public final void record_var_dec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:634:5: ( ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:634:10: ^( RECORD_VAR_DECLARE record_name type_name ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK ) )
			{
			match(input,RECORD_VAR_DECLARE,FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec5213); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_record_name_in_record_var_dec5215);
			record_name();
			state._fsp--;

			pushFollow(FOLLOW_type_name_in_record_var_dec5217);
			type_name();
			state._fsp--;

			if ( (input.LA(1) >= PERCENT_ROWTYPE_VK && input.LA(1) <= PERCENT_TYPE_VK) ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "record_var_dec"



	// $ANTLR start "table_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:639:1: table_declaration : ( table_type_dec | table_var_dec );
	public final void table_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:640:5: ( table_type_dec | table_var_dec )
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==TABLE_TYPE_DECLARE) ) {
				alt177=1;
			}
			else if ( (LA177_0==TABLE_VAR_DECLARE) ) {
				alt177=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 177, 0, input);
				throw nvae;
			}

			switch (alt177) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:640:10: table_type_dec
					{
					pushFollow(FOLLOW_table_type_dec_in_table_declaration5246);
					table_type_dec();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:641:10: table_var_dec
					{
					pushFollow(FOLLOW_table_var_dec_in_table_declaration5257);
					table_var_dec();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "table_declaration"



	// $ANTLR start "table_type_dec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:644:1: table_type_dec : ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) ) ;
	public final void table_type_dec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:645:5: ( ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:645:10: ^( TABLE_TYPE_DECLARE type_name ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) ) )
			{
			match(input,TABLE_TYPE_DECLARE,FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec5278); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_name_in_table_type_dec5280);
			type_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:646:13: ( varray_type_def | ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? ) )
			int alt180=2;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NULL:
				{
				int LA180_1 = input.LA(2);
				if ( (LA180_1==VARR_ARRAY_DEF) ) {
					alt180=1;
				}
				else if ( (LA180_1==SQL92_RESERVED_TABLE) ) {
					alt180=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 180, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARR_ARRAY_DEF:
				{
				alt180=1;
				}
				break;
			case SQL92_RESERVED_TABLE:
				{
				alt180=2;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 180, 0, input);
				throw nvae;
			}
			switch (alt180) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:646:18: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_table_type_dec5300);
					varray_type_def();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:647:18: ( SQL92_RESERVED_NULL )? ^( SQL92_RESERVED_TABLE type_spec ( table_indexed_by_part )? )
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:647:18: ( SQL92_RESERVED_NULL )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==SQL92_RESERVED_NULL) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:647:18: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec5319); 
							}
							break;

					}

					match(input,SQL92_RESERVED_TABLE,FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec5323); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_spec_in_table_type_dec5325);
					type_spec();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:647:72: ( table_indexed_by_part )?
					int alt179=2;
					int LA179_0 = input.LA(1);
					if ( (LA179_0==INDEXED_BY) ) {
						alt179=1;
					}
					switch (alt179) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:647:72: table_indexed_by_part
							{
							pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec5327);
							table_indexed_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "table_type_dec"



	// $ANTLR start "table_indexed_by_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:652:1: table_indexed_by_part : ^( INDEXED_BY type_spec ) ;
	public final void table_indexed_by_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:653:5: ( ^( INDEXED_BY type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:653:10: ^( INDEXED_BY type_spec )
			{
			match(input,INDEXED_BY,FOLLOW_INDEXED_BY_in_table_indexed_by_part5374); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_type_spec_in_table_indexed_by_part5376);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "table_indexed_by_part"



	// $ANTLR start "varray_type_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:656:1: varray_type_def : ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) ;
	public final void varray_type_def() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:657:5: ( ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:657:10: ( SQL92_RESERVED_NULL )? ^( VARR_ARRAY_DEF expression type_spec )
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:657:10: ( SQL92_RESERVED_NULL )?
			int alt181=2;
			int LA181_0 = input.LA(1);
			if ( (LA181_0==SQL92_RESERVED_NULL) ) {
				alt181=1;
			}
			switch (alt181) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:657:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def5397); 
					}
					break;

			}

			match(input,VARR_ARRAY_DEF,FOLLOW_VARR_ARRAY_DEF_in_varray_type_def5401); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_varray_type_def5403);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_varray_type_def5405);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "varray_type_def"



	// $ANTLR start "table_var_dec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:660:1: table_var_dec : ^( TABLE_VAR_DECLARE table_var_name type_spec ) ;
	public final void table_var_dec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:661:5: ( ^( TABLE_VAR_DECLARE table_var_name type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:661:10: ^( TABLE_VAR_DECLARE table_var_name type_spec )
			{
			match(input,TABLE_VAR_DECLARE,FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec5427); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_var_name_in_table_var_dec5429);
			table_var_name();
			state._fsp--;

			pushFollow(FOLLOW_type_spec_in_table_var_dec5431);
			type_spec();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "table_var_dec"



	// $ANTLR start "seq_of_statements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:668:1: seq_of_statements : ^( STATEMENTS ( statement )+ ) ;
	public final void seq_of_statements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:669:5: ( ^( STATEMENTS ( statement )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:669:11: ^( STATEMENTS ( statement )+ )
			{
			match(input,STATEMENTS,FOLLOW_STATEMENTS_in_seq_of_statements5458); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:669:24: ( statement )+
			int cnt182=0;
			loop182:
			while (true) {
				int alt182=2;
				int LA182_0 = input.LA(1);
				if ( (LA182_0==PLSQL_RESERVED_IF||LA182_0==PLSQL_RESERVED_LOCK||LA182_0==SQL92_RESERVED_DELETE||LA182_0==SQL92_RESERVED_FETCH||LA182_0==SQL92_RESERVED_GOTO||LA182_0==SQL92_RESERVED_INSERT||LA182_0==SQL92_RESERVED_NULL||LA182_0==SQL92_RESERVED_UPDATE||LA182_0==ASSIGN||LA182_0==BLOCK||LA182_0==BODY||LA182_0==CLOSE_VK||LA182_0==COMMIT_VK||LA182_0==CONTINUE_VK||(LA182_0 >= EXECUTE_VK && LA182_0 <= EXIT_VK)||LA182_0==FORALL_VK||LA182_0==FOR_LOOP||LA182_0==LABEL_DECLARE||LA182_0==LOOP_VK||LA182_0==MERGE_VK||LA182_0==OPEN_VK||LA182_0==PIPE_ROW||LA182_0==RAISE_VK||LA182_0==RETURN_VK||LA182_0==ROLLBACK_VK||LA182_0==ROUTINE_CALL||LA182_0==SAVEPOINT_VK||LA182_0==SEARCHED_CASE||LA182_0==SELECT_STATEMENT||LA182_0==SET_CONSTRAINT||LA182_0==SET_TRANSACTION||LA182_0==SIMPLE_CASE||LA182_0==WHILE_LOOP) ) {
					alt182=1;
				}

				switch (alt182) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:669:24: statement
					{
					pushFollow(FOLLOW_statement_in_seq_of_statements5460);
					statement();
					state._fsp--;

					}
					break;

				default :
					if ( cnt182 >= 1 ) break loop182;
					EarlyExitException eee = new EarlyExitException(182, input);
					throw eee;
				}
				cnt182++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "seq_of_statements"



	// $ANTLR start "statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:672:1: statement : ( label_declaration | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | pipe_row_statement | case_statement | sql_statement | function_call | body | block );
	public final void statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:673:5: ( label_declaration | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | pipe_row_statement | case_statement | sql_statement | function_call | body | block )
			int alt183=17;
			switch ( input.LA(1) ) {
			case LABEL_DECLARE:
				{
				alt183=1;
				}
				break;
			case ASSIGN:
				{
				alt183=2;
				}
				break;
			case CONTINUE_VK:
				{
				alt183=3;
				}
				break;
			case EXIT_VK:
				{
				alt183=4;
				}
				break;
			case SQL92_RESERVED_GOTO:
				{
				alt183=5;
				}
				break;
			case PLSQL_RESERVED_IF:
				{
				alt183=6;
				}
				break;
			case FOR_LOOP:
			case LOOP_VK:
			case WHILE_LOOP:
				{
				alt183=7;
				}
				break;
			case FORALL_VK:
				{
				alt183=8;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt183=9;
				}
				break;
			case RAISE_VK:
				{
				alt183=10;
				}
				break;
			case RETURN_VK:
				{
				alt183=11;
				}
				break;
			case PIPE_ROW:
				{
				alt183=12;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt183=13;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_FETCH:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case CLOSE_VK:
			case COMMIT_VK:
			case EXECUTE_VK:
			case MERGE_VK:
			case OPEN_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SELECT_STATEMENT:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt183=14;
				}
				break;
			case ROUTINE_CALL:
				{
				alt183=15;
				}
				break;
			case BODY:
				{
				alt183=16;
				}
				break;
			case BLOCK:
				{
				alt183=17;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 183, 0, input);
				throw nvae;
			}
			switch (alt183) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:673:10: label_declaration
					{
					pushFollow(FOLLOW_label_declaration_in_statement5482);
					label_declaration();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:674:10: assignment_statement
					{
					pushFollow(FOLLOW_assignment_statement_in_statement5493);
					assignment_statement();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:675:10: continue_statement
					{
					pushFollow(FOLLOW_continue_statement_in_statement5504);
					continue_statement();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:676:10: exit_statement
					{
					pushFollow(FOLLOW_exit_statement_in_statement5515);
					exit_statement();
					state._fsp--;

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:677:10: goto_statement
					{
					pushFollow(FOLLOW_goto_statement_in_statement5526);
					goto_statement();
					state._fsp--;

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:678:10: if_statement
					{
					pushFollow(FOLLOW_if_statement_in_statement5537);
					if_statement();
					state._fsp--;

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:679:10: loop_statement
					{
					pushFollow(FOLLOW_loop_statement_in_statement5548);
					loop_statement();
					state._fsp--;

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:680:10: forall_statement
					{
					pushFollow(FOLLOW_forall_statement_in_statement5559);
					forall_statement();
					state._fsp--;

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:681:10: null_statement
					{
					pushFollow(FOLLOW_null_statement_in_statement5570);
					null_statement();
					state._fsp--;

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:682:10: raise_statement
					{
					pushFollow(FOLLOW_raise_statement_in_statement5581);
					raise_statement();
					state._fsp--;

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:683:10: return_statement
					{
					pushFollow(FOLLOW_return_statement_in_statement5592);
					return_statement();
					state._fsp--;

					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:684:10: pipe_row_statement
					{
					pushFollow(FOLLOW_pipe_row_statement_in_statement5603);
					pipe_row_statement();
					state._fsp--;

					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:685:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_statement5614);
					case_statement();
					state._fsp--;

					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:686:10: sql_statement
					{
					pushFollow(FOLLOW_sql_statement_in_statement5625);
					sql_statement();
					state._fsp--;

					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:687:10: function_call
					{
					pushFollow(FOLLOW_function_call_in_statement5636);
					function_call();
					state._fsp--;

					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:688:10: body
					{
					pushFollow(FOLLOW_body_in_statement5647);
					body();
					state._fsp--;

					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:689:10: block
					{
					pushFollow(FOLLOW_block_in_statement5658);
					block();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "statement"



	// $ANTLR start "label_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:692:1: label_declaration : ^( LABEL_DECLARE label_name ) ;
	public final void label_declaration() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:693:5: ( ^( LABEL_DECLARE label_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:693:10: ^( LABEL_DECLARE label_name )
			{
			match(input,LABEL_DECLARE,FOLLOW_LABEL_DECLARE_in_label_declaration5679); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_label_declaration5681);
			label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "label_declaration"



	// $ANTLR start "assignment_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:696:1: assignment_statement : ^( ASSIGN general_element expression ) ;
	public final void assignment_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:697:5: ( ^( ASSIGN general_element expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:697:11: ^( ASSIGN general_element expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_assignment_statement5704); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_element_in_assignment_statement5706);
			general_element();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_assignment_statement5708);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "assignment_statement"



	// $ANTLR start "continue_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:700:1: continue_statement : ^( CONTINUE_VK ( label_name )? ( general_when )? ) ;
	public final void continue_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:701:5: ( ^( CONTINUE_VK ( label_name )? ( general_when )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:701:10: ^( CONTINUE_VK ( label_name )? ( general_when )? )
			{
			match(input,CONTINUE_VK,FOLLOW_CONTINUE_VK_in_continue_statement5730); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:701:24: ( label_name )?
				int alt184=2;
				int LA184_0 = input.LA(1);
				if ( (LA184_0==LABEL_NAME) ) {
					alt184=1;
				}
				switch (alt184) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:701:24: label_name
						{
						pushFollow(FOLLOW_label_name_in_continue_statement5732);
						label_name();
						state._fsp--;

						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:701:36: ( general_when )?
				int alt185=2;
				int LA185_0 = input.LA(1);
				if ( (LA185_0==SQL92_RESERVED_WHEN) ) {
					alt185=1;
				}
				switch (alt185) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:701:36: general_when
						{
						pushFollow(FOLLOW_general_when_in_continue_statement5735);
						general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "continue_statement"



	// $ANTLR start "general_when"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:704:1: general_when : ^( SQL92_RESERVED_WHEN expression ) ;
	public final void general_when() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:705:5: ( ^( SQL92_RESERVED_WHEN expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:705:10: ^( SQL92_RESERVED_WHEN expression )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_general_when5758); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_general_when5760);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "general_when"



	// $ANTLR start "exit_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:708:1: exit_statement : ^( EXIT_VK ( label_name )? ( general_when )? ) ;
	public final void exit_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:709:5: ( ^( EXIT_VK ( label_name )? ( general_when )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:709:10: ^( EXIT_VK ( label_name )? ( general_when )? )
			{
			match(input,EXIT_VK,FOLLOW_EXIT_VK_in_exit_statement5782); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:709:20: ( label_name )?
				int alt186=2;
				int LA186_0 = input.LA(1);
				if ( (LA186_0==LABEL_NAME) ) {
					alt186=1;
				}
				switch (alt186) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:709:20: label_name
						{
						pushFollow(FOLLOW_label_name_in_exit_statement5784);
						label_name();
						state._fsp--;

						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:709:32: ( general_when )?
				int alt187=2;
				int LA187_0 = input.LA(1);
				if ( (LA187_0==SQL92_RESERVED_WHEN) ) {
					alt187=1;
				}
				switch (alt187) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:709:32: general_when
						{
						pushFollow(FOLLOW_general_when_in_exit_statement5787);
						general_when();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "exit_statement"



	// $ANTLR start "goto_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:712:1: goto_statement : ^( SQL92_RESERVED_GOTO label_name ) ;
	public final void goto_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:713:5: ( ^( SQL92_RESERVED_GOTO label_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:713:10: ^( SQL92_RESERVED_GOTO label_name )
			{
			match(input,SQL92_RESERVED_GOTO,FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement5810); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_label_name_in_goto_statement5812);
			label_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "goto_statement"



	// $ANTLR start "if_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:716:1: if_statement : ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? ) ;
	public final void if_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:717:5: ( ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:717:10: ^( PLSQL_RESERVED_IF expression seq_of_statements ( elsif_part )* ( else_part )? )
			{
			match(input,PLSQL_RESERVED_IF,FOLLOW_PLSQL_RESERVED_IF_in_if_statement5834); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_if_statement5836);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_if_statement5838);
			seq_of_statements();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:717:59: ( elsif_part )*
			loop188:
			while (true) {
				int alt188=2;
				int LA188_0 = input.LA(1);
				if ( (LA188_0==PLSQL_NON_RESERVED_ELSIF) ) {
					alt188=1;
				}

				switch (alt188) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:717:59: elsif_part
					{
					pushFollow(FOLLOW_elsif_part_in_if_statement5840);
					elsif_part();
					state._fsp--;

					}
					break;

				default :
					break loop188;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:717:71: ( else_part )?
			int alt189=2;
			int LA189_0 = input.LA(1);
			if ( (LA189_0==SQL92_RESERVED_ELSE) ) {
				alt189=1;
			}
			switch (alt189) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:717:71: else_part
					{
					pushFollow(FOLLOW_else_part_in_if_statement5843);
					else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "if_statement"



	// $ANTLR start "elsif_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:720:1: elsif_part : ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) ;
	public final void elsif_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:721:5: ( ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:721:10: ^( PLSQL_NON_RESERVED_ELSIF expression seq_of_statements )
			{
			match(input,PLSQL_NON_RESERVED_ELSIF,FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part5866); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_elsif_part5868);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_seq_of_statements_in_elsif_part5870);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "elsif_part"



	// $ANTLR start "else_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:724:1: else_part : ^( SQL92_RESERVED_ELSE seq_of_statements ) ;
	public final void else_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:725:5: ( ^( SQL92_RESERVED_ELSE seq_of_statements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:725:10: ^( SQL92_RESERVED_ELSE seq_of_statements )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_else_part5892); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_seq_of_statements_in_else_part5894);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "else_part"



	// $ANTLR start "loop_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:728:1: loop_statement : ( ^( WHILE_LOOP ( label_name )* expression seq_of_statements ) | ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements ) | ^( LOOP_VK ( label_name )* seq_of_statements ) );
	public final void loop_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:729:5: ( ^( WHILE_LOOP ( label_name )* expression seq_of_statements ) | ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements ) | ^( LOOP_VK ( label_name )* seq_of_statements ) )
			int alt193=3;
			switch ( input.LA(1) ) {
			case WHILE_LOOP:
				{
				alt193=1;
				}
				break;
			case FOR_LOOP:
				{
				alt193=2;
				}
				break;
			case LOOP_VK:
				{
				alt193=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}
			switch (alt193) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:729:10: ^( WHILE_LOOP ( label_name )* expression seq_of_statements )
					{
					match(input,WHILE_LOOP,FOLLOW_WHILE_LOOP_in_loop_statement5916); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:729:23: ( label_name )*
					loop190:
					while (true) {
						int alt190=2;
						int LA190_0 = input.LA(1);
						if ( (LA190_0==LABEL_NAME) ) {
							alt190=1;
						}

						switch (alt190) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:729:23: label_name
							{
							pushFollow(FOLLOW_label_name_in_loop_statement5918);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop190;
						}
					}

					pushFollow(FOLLOW_expression_in_loop_statement5921);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement5923);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:730:10: ^( FOR_LOOP ( label_name )* cursor_loop_param seq_of_statements )
					{
					match(input,FOR_LOOP,FOLLOW_FOR_LOOP_in_loop_statement5936); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:730:21: ( label_name )*
					loop191:
					while (true) {
						int alt191=2;
						int LA191_0 = input.LA(1);
						if ( (LA191_0==LABEL_NAME) ) {
							alt191=1;
						}

						switch (alt191) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:730:21: label_name
							{
							pushFollow(FOLLOW_label_name_in_loop_statement5938);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop191;
						}
					}

					pushFollow(FOLLOW_cursor_loop_param_in_loop_statement5941);
					cursor_loop_param();
					state._fsp--;

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement5943);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:731:10: ^( LOOP_VK ( label_name )* seq_of_statements )
					{
					match(input,LOOP_VK,FOLLOW_LOOP_VK_in_loop_statement5956); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:731:20: ( label_name )*
					loop192:
					while (true) {
						int alt192=2;
						int LA192_0 = input.LA(1);
						if ( (LA192_0==LABEL_NAME) ) {
							alt192=1;
						}

						switch (alt192) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:731:20: label_name
							{
							pushFollow(FOLLOW_label_name_in_loop_statement5958);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop192;
						}
					}

					pushFollow(FOLLOW_seq_of_statements_in_loop_statement5961);
					seq_of_statements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "loop_statement"



	// $ANTLR start "cursor_loop_param"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:736:1: cursor_loop_param : ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) ) | ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) | ^( SELECT_BASED_FOR record_name select_statement ) );
	public final void cursor_loop_param() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:737:5: ( ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) ) | ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? ) | ^( SELECT_BASED_FOR record_name select_statement ) )
			int alt196=3;
			switch ( input.LA(1) ) {
			case INDEXED_FOR:
				{
				alt196=1;
				}
				break;
			case CURSOR_BASED_FOR:
				{
				alt196=2;
				}
				break;
			case SELECT_BASED_FOR:
				{
				alt196=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 196, 0, input);
				throw nvae;
			}
			switch (alt196) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:737:10: ^( INDEXED_FOR index_name ( REVERSE_VK )? ^( SIMPLE_BOUND expression expression ) )
					{
					match(input,INDEXED_FOR,FOLLOW_INDEXED_FOR_in_cursor_loop_param5985); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_cursor_loop_param5987);
					index_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:737:35: ( REVERSE_VK )?
					int alt194=2;
					int LA194_0 = input.LA(1);
					if ( (LA194_0==REVERSE_VK) ) {
						alt194=1;
					}
					switch (alt194) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:737:35: REVERSE_VK
							{
							match(input,REVERSE_VK,FOLLOW_REVERSE_VK_in_cursor_loop_param5989); 
							}
							break;

					}

					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_cursor_loop_param5993); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_cursor_loop_param5995);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_cursor_loop_param5997);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:738:10: ^( CURSOR_BASED_FOR record_name cursor_name ( expression_list )? )
					{
					match(input,CURSOR_BASED_FOR,FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param6011); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param6013);
					record_name();
					state._fsp--;

					pushFollow(FOLLOW_cursor_name_in_cursor_loop_param6015);
					cursor_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:738:53: ( expression_list )?
					int alt195=2;
					int LA195_0 = input.LA(1);
					if ( (LA195_0==EXPR_LIST) ) {
						alt195=1;
					}
					switch (alt195) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:738:53: expression_list
							{
							pushFollow(FOLLOW_expression_list_in_cursor_loop_param6017);
							expression_list();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:739:10: ^( SELECT_BASED_FOR record_name select_statement )
					{
					match(input,SELECT_BASED_FOR,FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param6031); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_record_name_in_cursor_loop_param6033);
					record_name();
					state._fsp--;

					pushFollow(FOLLOW_select_statement_in_cursor_loop_param6035);
					select_statement();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "cursor_loop_param"



	// $ANTLR start "forall_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:744:1: forall_statement : ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) ;
	public final void forall_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:745:5: ( ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:745:10: ^( FORALL_VK index_name bounds_clause sql_statement ( EXCEPTIONS_VK )? )
			{
			match(input,FORALL_VK,FOLLOW_FORALL_VK_in_forall_statement6059); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_index_name_in_forall_statement6061);
			index_name();
			state._fsp--;

			pushFollow(FOLLOW_bounds_clause_in_forall_statement6063);
			bounds_clause();
			state._fsp--;

			pushFollow(FOLLOW_sql_statement_in_forall_statement6065);
			sql_statement();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:745:61: ( EXCEPTIONS_VK )?
			int alt197=2;
			int LA197_0 = input.LA(1);
			if ( (LA197_0==EXCEPTIONS_VK) ) {
				alt197=1;
			}
			switch (alt197) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:745:61: EXCEPTIONS_VK
					{
					match(input,EXCEPTIONS_VK,FOLLOW_EXCEPTIONS_VK_in_forall_statement6067); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "forall_statement"



	// $ANTLR start "bounds_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:748:1: bounds_clause : ( ^( SIMPLE_BOUND expression expression ) | ^( INDICES_BOUND collection_name ( between_bound )? ) | ^( VALUES_BOUND index_name ) );
	public final void bounds_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:749:5: ( ^( SIMPLE_BOUND expression expression ) | ^( INDICES_BOUND collection_name ( between_bound )? ) | ^( VALUES_BOUND index_name ) )
			int alt199=3;
			switch ( input.LA(1) ) {
			case SIMPLE_BOUND:
				{
				alt199=1;
				}
				break;
			case INDICES_BOUND:
				{
				alt199=2;
				}
				break;
			case VALUES_BOUND:
				{
				alt199=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 199, 0, input);
				throw nvae;
			}
			switch (alt199) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:749:10: ^( SIMPLE_BOUND expression expression )
					{
					match(input,SIMPLE_BOUND,FOLLOW_SIMPLE_BOUND_in_bounds_clause6090); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_bounds_clause6092);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_bounds_clause6094);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:750:10: ^( INDICES_BOUND collection_name ( between_bound )? )
					{
					match(input,INDICES_BOUND,FOLLOW_INDICES_BOUND_in_bounds_clause6107); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_collection_name_in_bounds_clause6109);
					collection_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:750:42: ( between_bound )?
					int alt198=2;
					int LA198_0 = input.LA(1);
					if ( (LA198_0==SQL92_RESERVED_BETWEEN) ) {
						alt198=1;
					}
					switch (alt198) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:750:42: between_bound
							{
							pushFollow(FOLLOW_between_bound_in_bounds_clause6111);
							between_bound();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:751:10: ^( VALUES_BOUND index_name )
					{
					match(input,VALUES_BOUND,FOLLOW_VALUES_BOUND_in_bounds_clause6125); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_index_name_in_bounds_clause6127);
					index_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "bounds_clause"



	// $ANTLR start "between_bound"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:754:1: between_bound : ^( SQL92_RESERVED_BETWEEN expression expression ) ;
	public final void between_bound() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:755:5: ( ^( SQL92_RESERVED_BETWEEN expression expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:755:10: ^( SQL92_RESERVED_BETWEEN expression expression )
			{
			match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound6150); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_between_bound6152);
			expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_between_bound6154);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "between_bound"



	// $ANTLR start "null_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:758:1: null_statement : SQL92_RESERVED_NULL ;
	public final void null_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:759:5: ( SQL92_RESERVED_NULL )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:759:10: SQL92_RESERVED_NULL
			{
			match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_null_statement6175); 
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "null_statement"



	// $ANTLR start "raise_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:762:1: raise_statement : ^( RAISE_VK ( exception_name )? ) ;
	public final void raise_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:763:5: ( ^( RAISE_VK ( exception_name )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:763:10: ^( RAISE_VK ( exception_name )? )
			{
			match(input,RAISE_VK,FOLLOW_RAISE_VK_in_raise_statement6196); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:763:21: ( exception_name )?
				int alt200=2;
				int LA200_0 = input.LA(1);
				if ( (LA200_0==EXCEPTION_NAME) ) {
					alt200=1;
				}
				switch (alt200) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:763:21: exception_name
						{
						pushFollow(FOLLOW_exception_name_in_raise_statement6198);
						exception_name();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "raise_statement"



	// $ANTLR start "return_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:766:1: return_statement : ^( RETURN_VK ( expression )? ) ;
	public final void return_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:767:5: ( ^( RETURN_VK ( expression )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:767:10: ^( RETURN_VK ( expression )? )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_statement6221); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:767:22: ( expression )?
				int alt201=2;
				int LA201_0 = input.LA(1);
				if ( (LA201_0==EXPR||LA201_0==LOGIC_EXPR) ) {
					alt201=1;
				}
				switch (alt201) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:767:22: expression
						{
						pushFollow(FOLLOW_expression_in_return_statement6223);
						expression();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "return_statement"



	// $ANTLR start "function_call"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:770:1: function_call : ^( ROUTINE_CALL general_element ) ;
	public final void function_call() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:771:5: ( ^( ROUTINE_CALL general_element ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:771:10: ^( ROUTINE_CALL general_element )
			{
			match(input,ROUTINE_CALL,FOLLOW_ROUTINE_CALL_in_function_call6246); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_element_in_function_call6248);
			general_element();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "function_call"



	// $ANTLR start "body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:774:1: body : ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) ;
	public final void body() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:775:5: ( ^( BODY ( label_name )? seq_of_statements ( exception_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:775:10: ^( BODY ( label_name )? seq_of_statements ( exception_clause )? )
			{
			match(input,BODY,FOLLOW_BODY_in_body6270); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:775:17: ( label_name )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==LABEL_NAME) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:775:17: label_name
					{
					pushFollow(FOLLOW_label_name_in_body6272);
					label_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_seq_of_statements_in_body6275);
			seq_of_statements();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:775:47: ( exception_clause )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==SQL92_RESERVED_EXCEPTION) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:775:47: exception_clause
					{
					pushFollow(FOLLOW_exception_clause_in_body6277);
					exception_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "body"



	// $ANTLR start "exception_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:780:1: exception_clause : ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ ) ;
	public final void exception_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:781:5: ( ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:781:10: ^( SQL92_RESERVED_EXCEPTION ( exception_handler )+ )
			{
			match(input,SQL92_RESERVED_EXCEPTION,FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause6303); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:781:37: ( exception_handler )+
			int cnt204=0;
			loop204:
			while (true) {
				int alt204=2;
				int LA204_0 = input.LA(1);
				if ( (LA204_0==SQL92_RESERVED_WHEN) ) {
					alt204=1;
				}

				switch (alt204) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:781:37: exception_handler
					{
					pushFollow(FOLLOW_exception_handler_in_exception_clause6305);
					exception_handler();
					state._fsp--;

					}
					break;

				default :
					if ( cnt204 >= 1 ) break loop204;
					EarlyExitException eee = new EarlyExitException(204, input);
					throw eee;
				}
				cnt204++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "exception_clause"



	// $ANTLR start "exception_handler"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:784:1: exception_handler : ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements ) ;
	public final void exception_handler() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:785:5: ( ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:785:10: ^( SQL92_RESERVED_WHEN ( exception_name )+ seq_of_statements )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler6328); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:785:32: ( exception_name )+
			int cnt205=0;
			loop205:
			while (true) {
				int alt205=2;
				int LA205_0 = input.LA(1);
				if ( (LA205_0==EXCEPTION_NAME) ) {
					alt205=1;
				}

				switch (alt205) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:785:32: exception_name
					{
					pushFollow(FOLLOW_exception_name_in_exception_handler6330);
					exception_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt205 >= 1 ) break loop205;
					EarlyExitException eee = new EarlyExitException(205, input);
					throw eee;
				}
				cnt205++;
			}

			pushFollow(FOLLOW_seq_of_statements_in_exception_handler6333);
			seq_of_statements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "exception_handler"



	// $ANTLR start "block"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:790:1: block : ^( BLOCK ( declare_spec )* body ) ;
	public final void block() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:791:5: ( ^( BLOCK ( declare_spec )* body ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:791:10: ^( BLOCK ( declare_spec )* body )
			{
			match(input,BLOCK,FOLLOW_BLOCK_in_block6357); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:791:18: ( declare_spec )*
			loop206:
			while (true) {
				int alt206=2;
				int LA206_0 = input.LA(1);
				if ( (LA206_0==CREATE_FUNCTION||LA206_0==CREATE_PROCEDURE||LA206_0==CURSOR_DECLARE||LA206_0==EXCEPTION_DECLARE||LA206_0==PRAGMA_DECLARE||LA206_0==RECORD_VAR_DECLARE||LA206_0==SUBTYPE_DECLARE||(LA206_0 >= TABLE_TYPE_DECLARE && LA206_0 <= TABLE_VAR_DECLARE)||LA206_0==VARIABLE_DECLARE||LA206_0==RECORD_TYPE_DECLARE) ) {
					alt206=1;
				}

				switch (alt206) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:791:18: declare_spec
					{
					pushFollow(FOLLOW_declare_spec_in_block6359);
					declare_spec();
					state._fsp--;

					}
					break;

				default :
					break loop206;
				}
			}

			pushFollow(FOLLOW_body_in_block6362);
			body();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "block"



	// $ANTLR start "sql_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:798:1: sql_statement : ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements );
	public final void sql_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:799:5: ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements )
			int alt207=4;
			switch ( input.LA(1) ) {
			case EXECUTE_VK:
				{
				alt207=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_UPDATE:
			case MERGE_VK:
			case SELECT_STATEMENT:
				{
				alt207=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
			case CLOSE_VK:
			case OPEN_VK:
				{
				alt207=3;
				}
				break;
			case COMMIT_VK:
			case ROLLBACK_VK:
			case SAVEPOINT_VK:
			case SET_CONSTRAINT:
			case SET_TRANSACTION:
				{
				alt207=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 207, 0, input);
				throw nvae;
			}
			switch (alt207) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:799:10: execute_immediate
					{
					pushFollow(FOLLOW_execute_immediate_in_sql_statement6387);
					execute_immediate();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:800:10: data_manipulation_language_statements
					{
					pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement6398);
					data_manipulation_language_statements();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:801:10: cursor_manipulation_statements
					{
					pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement6409);
					cursor_manipulation_statements();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:802:10: transaction_control_statements
					{
					pushFollow(FOLLOW_transaction_control_statements_in_sql_statement6420);
					transaction_control_statements();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "sql_statement"



	// $ANTLR start "execute_immediate"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:805:1: execute_immediate : ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? ) ;
	public final void execute_immediate() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:806:5: ( ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:806:10: ^( EXECUTE_VK expression ( into_clause | using_clause | dynamic_returning_clause )? )
			{
			match(input,EXECUTE_VK,FOLLOW_EXECUTE_VK_in_execute_immediate6441); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_execute_immediate6443);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:806:34: ( into_clause | using_clause | dynamic_returning_clause )?
			int alt208=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_INTO:
				case BULK_VK:
					{
					alt208=1;
					}
					break;
				case PLSQL_NON_RESERVED_USING:
					{
					alt208=2;
					}
					break;
				case DYNAMIC_RETURN:
					{
					alt208=3;
					}
					break;
			}
			switch (alt208) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:806:35: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_execute_immediate6446);
					into_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:806:47: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_execute_immediate6448);
					using_clause();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:806:60: dynamic_returning_clause
					{
					pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate6450);
					dynamic_returning_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "execute_immediate"



	// $ANTLR start "dynamic_returning_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:810:1: dynamic_returning_clause : ^( DYNAMIC_RETURN into_clause ) ;
	public final void dynamic_returning_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:811:5: ( ^( DYNAMIC_RETURN into_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:811:10: ^( DYNAMIC_RETURN into_clause )
			{
			match(input,DYNAMIC_RETURN,FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause6476); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause6478);
			into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "dynamic_returning_clause"



	// $ANTLR start "data_manipulation_language_statements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:818:1: data_manipulation_language_statements : ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement );
	public final void data_manipulation_language_statements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:819:5: ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement )
			int alt209=6;
			switch ( input.LA(1) ) {
			case MERGE_VK:
				{
				alt209=1;
				}
				break;
			case PLSQL_RESERVED_LOCK:
				{
				alt209=2;
				}
				break;
			case SELECT_STATEMENT:
				{
				alt209=3;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt209=4;
				}
				break;
			case SQL92_RESERVED_DELETE:
				{
				alt209=5;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt209=6;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 209, 0, input);
				throw nvae;
			}
			switch (alt209) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:819:10: merge_statement
					{
					pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements6503);
					merge_statement();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:820:10: lock_table_statement
					{
					pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements6514);
					lock_table_statement();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:821:10: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements6525);
					select_statement();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:822:11: update_statement
					{
					pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements6537);
					update_statement();
					state._fsp--;

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:823:11: delete_statement
					{
					pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements6549);
					delete_statement();
					state._fsp--;

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:824:10: insert_statement
					{
					pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements6560);
					insert_statement();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "data_manipulation_language_statements"



	// $ANTLR start "select_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:827:1: select_statement : ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) ;
	public final void select_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:828:5: ( ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:828:10: ^( SELECT_STATEMENT ( subquery_factoring_clause )? subquery ( for_update_clause )* ( order_by_clause )* )
			{
			match(input,SELECT_STATEMENT,FOLLOW_SELECT_STATEMENT_in_select_statement6581); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:828:29: ( subquery_factoring_clause )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==SQL92_RESERVED_WITH) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:828:29: subquery_factoring_clause
					{
					pushFollow(FOLLOW_subquery_factoring_clause_in_select_statement6583);
					subquery_factoring_clause();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_subquery_in_select_statement6586);
			subquery();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:828:65: ( for_update_clause )*
			loop211:
			while (true) {
				int alt211=2;
				int LA211_0 = input.LA(1);
				if ( (LA211_0==SQL92_RESERVED_FOR) ) {
					alt211=1;
				}

				switch (alt211) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:828:65: for_update_clause
					{
					pushFollow(FOLLOW_for_update_clause_in_select_statement6588);
					for_update_clause();
					state._fsp--;

					}
					break;

				default :
					break loop211;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:828:84: ( order_by_clause )*
			loop212:
			while (true) {
				int alt212=2;
				int LA212_0 = input.LA(1);
				if ( (LA212_0==SQL92_RESERVED_ORDER) ) {
					alt212=1;
				}

				switch (alt212) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:828:84: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_select_statement6591);
					order_by_clause();
					state._fsp--;

					}
					break;

				default :
					break loop212;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "select_statement"



	// $ANTLR start "subquery_factoring_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:832:1: subquery_factoring_clause : ^( SQL92_RESERVED_WITH ( factoring_element )+ ) ;
	public final void subquery_factoring_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:833:5: ( ^( SQL92_RESERVED_WITH ( factoring_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:833:10: ^( SQL92_RESERVED_WITH ( factoring_element )+ )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause6617); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:833:32: ( factoring_element )+
			int cnt213=0;
			loop213:
			while (true) {
				int alt213=2;
				int LA213_0 = input.LA(1);
				if ( (LA213_0==FACTORING) ) {
					alt213=1;
				}

				switch (alt213) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:833:32: factoring_element
					{
					pushFollow(FOLLOW_factoring_element_in_subquery_factoring_clause6619);
					factoring_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt213 >= 1 ) break loop213;
					EarlyExitException eee = new EarlyExitException(213, input);
					throw eee;
				}
				cnt213++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subquery_factoring_clause"



	// $ANTLR start "factoring_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:836:1: factoring_element : ^( FACTORING query_name subquery ) ;
	public final void factoring_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:837:5: ( ^( FACTORING query_name subquery ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:837:10: ^( FACTORING query_name subquery )
			{
			match(input,FACTORING,FOLLOW_FACTORING_in_factoring_element6642); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_query_name_in_factoring_element6644);
			query_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_factoring_element6646);
			subquery();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "factoring_element"



	// $ANTLR start "subquery"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:840:1: subquery : ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) ;
	public final void subquery() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:841:5: ( ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:841:10: ^( SUBQUERY subquery_basic_elements ( subquery_operation_part )* )
			{
			match(input,SUBQUERY,FOLLOW_SUBQUERY_in_subquery6668); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_subquery_basic_elements_in_subquery6670);
			subquery_basic_elements();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:841:45: ( subquery_operation_part )*
			loop214:
			while (true) {
				int alt214=2;
				int LA214_0 = input.LA(1);
				if ( (LA214_0==PLSQL_RESERVED_MINUS||LA214_0==SQL92_RESERVED_INTERSECT||LA214_0==SQL92_RESERVED_UNION) ) {
					alt214=1;
				}

				switch (alt214) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:841:45: subquery_operation_part
					{
					pushFollow(FOLLOW_subquery_operation_part_in_subquery6672);
					subquery_operation_part();
					state._fsp--;

					}
					break;

				default :
					break loop214;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subquery"



	// $ANTLR start "subquery_operation_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:844:1: subquery_operation_part : ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) ;
	public final void subquery_operation_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:845:5: ( ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:845:10: ^( ( SQL92_RESERVED_UNION | SQL92_RESERVED_INTERSECT | PLSQL_RESERVED_MINUS ) ( SQL92_RESERVED_ALL )? subquery_basic_elements )
			{
			if ( input.LA(1)==PLSQL_RESERVED_MINUS||input.LA(1)==SQL92_RESERVED_INTERSECT||input.LA(1)==SQL92_RESERVED_UNION ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:845:81: ( SQL92_RESERVED_ALL )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==SQL92_RESERVED_ALL) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:845:81: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part6703); 
					}
					break;

			}

			pushFollow(FOLLOW_subquery_basic_elements_in_subquery_operation_part6706);
			subquery_basic_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subquery_operation_part"



	// $ANTLR start "subquery_basic_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:848:1: subquery_basic_elements : ( query_block | subquery );
	public final void subquery_basic_elements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:849:5: ( query_block | subquery )
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==SQL92_RESERVED_SELECT) ) {
				alt216=1;
			}
			else if ( (LA216_0==SUBQUERY) ) {
				alt216=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 216, 0, input);
				throw nvae;
			}

			switch (alt216) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:849:10: query_block
					{
					pushFollow(FOLLOW_query_block_in_subquery_basic_elements6727);
					query_block();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:850:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_subquery_basic_elements6738);
					subquery();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subquery_basic_elements"



	// $ANTLR start "query_block"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:853:1: query_block : ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? ) ;
	public final void query_block() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:854:5: ( ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:854:10: ^( SQL92_RESERVED_SELECT from_clause ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? ( SQL92_RESERVED_ALL )? ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) ) ( into_clause )? ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( having_clause )? ( model_clause )? )
			{
			match(input,SQL92_RESERVED_SELECT,FOLLOW_SQL92_RESERVED_SELECT_in_query_block6759); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_from_clause_in_query_block6774);
			from_clause();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:856:13: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
			int alt217=2;
			int LA217_0 = input.LA(1);
			if ( (LA217_0==SQL92_RESERVED_DISTINCT||LA217_0==SQL92_RESERVED_UNIQUE) ) {
				alt217=1;
			}
			switch (alt217) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==SQL92_RESERVED_DISTINCT||input.LA(1)==SQL92_RESERVED_UNIQUE ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:856:62: ( SQL92_RESERVED_ALL )?
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==SQL92_RESERVED_ALL) ) {
				alt218=1;
			}
			switch (alt218) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:856:62: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_query_block6796); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:857:13: ( ASTERISK | ^( SELECT_LIST ( selected_element )+ ) )
			int alt220=2;
			int LA220_0 = input.LA(1);
			if ( (LA220_0==ASTERISK) ) {
				alt220=1;
			}
			else if ( (LA220_0==SELECT_LIST) ) {
				alt220=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 220, 0, input);
				throw nvae;
			}

			switch (alt220) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:857:18: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_query_block6817); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:858:18: ^( SELECT_LIST ( selected_element )+ )
					{
					match(input,SELECT_LIST,FOLLOW_SELECT_LIST_in_query_block6837); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:858:32: ( selected_element )+
					int cnt219=0;
					loop219:
					while (true) {
						int alt219=2;
						int LA219_0 = input.LA(1);
						if ( (LA219_0==SELECT_ITEM) ) {
							alt219=1;
						}

						switch (alt219) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:858:32: selected_element
							{
							pushFollow(FOLLOW_selected_element_in_query_block6839);
							selected_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt219 >= 1 ) break loop219;
							EarlyExitException eee = new EarlyExitException(219, input);
							throw eee;
						}
						cnt219++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:860:13: ( into_clause )?
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==SQL92_RESERVED_INTO||LA221_0==BULK_VK) ) {
				alt221=1;
			}
			switch (alt221) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:860:13: into_clause
					{
					pushFollow(FOLLOW_into_clause_in_query_block6869);
					into_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:860:26: ( where_clause )?
			int alt222=2;
			int LA222_0 = input.LA(1);
			if ( (LA222_0==SQL92_RESERVED_WHERE) ) {
				alt222=1;
			}
			switch (alt222) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:860:26: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_query_block6872);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:860:40: ( hierarchical_query_clause )?
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==HIERARCHICAL) ) {
				alt223=1;
			}
			switch (alt223) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:860:40: hierarchical_query_clause
					{
					pushFollow(FOLLOW_hierarchical_query_clause_in_query_block6875);
					hierarchical_query_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:861:13: ( group_by_clause )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==SQL92_RESERVED_GROUP) ) {
				alt224=1;
			}
			switch (alt224) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:861:13: group_by_clause
					{
					pushFollow(FOLLOW_group_by_clause_in_query_block6891);
					group_by_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:861:30: ( having_clause )?
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==SQL92_RESERVED_HAVING) ) {
				alt225=1;
			}
			switch (alt225) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:861:30: having_clause
					{
					pushFollow(FOLLOW_having_clause_in_query_block6894);
					having_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:861:45: ( model_clause )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:861:45: model_clause
					{
					pushFollow(FOLLOW_model_clause_in_query_block6897);
					model_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "query_block"



	// $ANTLR start "selected_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:865:1: selected_element : ^( SELECT_ITEM expression ( alias )? ) ;
	public final void selected_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:866:5: ( ^( SELECT_ITEM expression ( alias )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:866:10: ^( SELECT_ITEM expression ( alias )? )
			{
			match(input,SELECT_ITEM,FOLLOW_SELECT_ITEM_in_selected_element6929); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_selected_element6931);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:866:35: ( alias )?
			int alt227=2;
			int LA227_0 = input.LA(1);
			if ( (LA227_0==ALIAS) ) {
				alt227=1;
			}
			switch (alt227) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:866:35: alias
					{
					pushFollow(FOLLOW_alias_in_selected_element6933);
					alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "selected_element"



	// $ANTLR start "from_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:869:1: from_clause : ^( SQL92_RESERVED_FROM ( table_ref )+ ) ;
	public final void from_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:870:5: ( ^( SQL92_RESERVED_FROM ( table_ref )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:870:10: ^( SQL92_RESERVED_FROM ( table_ref )+ )
			{
			match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_from_clause6956); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:870:32: ( table_ref )+
			int cnt228=0;
			loop228:
			while (true) {
				int alt228=2;
				int LA228_0 = input.LA(1);
				if ( (LA228_0==TABLE_REF) ) {
					alt228=1;
				}

				switch (alt228) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:870:32: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_from_clause6958);
					table_ref();
					state._fsp--;

					}
					break;

				default :
					if ( cnt228 >= 1 ) break loop228;
					EarlyExitException eee = new EarlyExitException(228, input);
					throw eee;
				}
				cnt228++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "from_clause"



	// $ANTLR start "table_ref"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:873:1: table_ref : ^( TABLE_REF table_ref_aux ( join_clause )* ) ;
	public final void table_ref() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:874:5: ( ^( TABLE_REF table_ref_aux ( join_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:874:10: ^( TABLE_REF table_ref_aux ( join_clause )* )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_table_ref6981); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_table_ref_aux_in_table_ref6983);
			table_ref_aux();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:874:36: ( join_clause )*
			loop229:
			while (true) {
				int alt229=2;
				int LA229_0 = input.LA(1);
				if ( (LA229_0==JOIN_DEF) ) {
					alt229=1;
				}

				switch (alt229) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:874:36: join_clause
					{
					pushFollow(FOLLOW_join_clause_in_table_ref6985);
					join_clause();
					state._fsp--;

					}
					break;

				default :
					break loop229;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "table_ref"



	// $ANTLR start "table_ref_aux"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:877:1: table_ref_aux : ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) ;
	public final void table_ref_aux() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:5: ( ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:10: ^( TABLE_REF_ELEMENT ( alias )? dml_table_expression_clause ( ONLY_VK )? ( pivot_clause )? ( unpivot_clause )? ( flashback_query_clause )* )
			{
			match(input,TABLE_REF_ELEMENT,FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux7008); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:30: ( alias )?
			int alt230=2;
			int LA230_0 = input.LA(1);
			if ( (LA230_0==ALIAS) ) {
				alt230=1;
			}
			switch (alt230) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:30: alias
					{
					pushFollow(FOLLOW_alias_in_table_ref_aux7010);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_table_ref_aux7013);
			dml_table_expression_clause();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:65: ( ONLY_VK )?
			int alt231=2;
			int LA231_0 = input.LA(1);
			if ( (LA231_0==ONLY_VK) ) {
				alt231=1;
			}
			switch (alt231) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:65: ONLY_VK
					{
					match(input,ONLY_VK,FOLLOW_ONLY_VK_in_table_ref_aux7015); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:74: ( pivot_clause )?
			int alt232=2;
			int LA232_0 = input.LA(1);
			if ( (LA232_0==PIVOT_VK) ) {
				alt232=1;
			}
			switch (alt232) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:74: pivot_clause
					{
					pushFollow(FOLLOW_pivot_clause_in_table_ref_aux7018);
					pivot_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:88: ( unpivot_clause )?
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==UNPIVOT_VK) ) {
				alt233=1;
			}
			switch (alt233) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:88: unpivot_clause
					{
					pushFollow(FOLLOW_unpivot_clause_in_table_ref_aux7021);
					unpivot_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:104: ( flashback_query_clause )*
			loop234:
			while (true) {
				int alt234=2;
				int LA234_0 = input.LA(1);
				if ( (LA234_0==SQL92_RESERVED_AS||LA234_0==VERSIONS_VK) ) {
					alt234=1;
				}

				switch (alt234) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:878:104: flashback_query_clause
					{
					pushFollow(FOLLOW_flashback_query_clause_in_table_ref_aux7024);
					flashback_query_clause();
					state._fsp--;

					}
					break;

				default :
					break loop234;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "table_ref_aux"



	// $ANTLR start "join_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:881:1: join_clause : ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? ) ;
	public final void join_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:5: ( ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:10: ^( JOIN_DEF ( CROSS_VK | NATURAL_VK )? ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )? table_ref_aux ( query_partition_clause )* ( join_on_part | join_using_part )? )
			{
			match(input,JOIN_DEF,FOLLOW_JOIN_DEF_in_join_clause7047); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:21: ( CROSS_VK | NATURAL_VK )?
			int alt235=2;
			int LA235_0 = input.LA(1);
			if ( (LA235_0==CROSS_VK||LA235_0==NATURAL_VK) ) {
				alt235=1;
			}
			switch (alt235) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==CROSS_VK||input.LA(1)==NATURAL_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:44: ( INNER_VK | FULL_VK | LEFT_VK | RIGHT_VK )?
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==FULL_VK||LA236_0==INNER_VK||LA236_0==LEFT_VK||LA236_0==RIGHT_VK) ) {
				alt236=1;
			}
			switch (alt236) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==FULL_VK||input.LA(1)==INNER_VK||input.LA(1)==LEFT_VK||input.LA(1)==RIGHT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			pushFollow(FOLLOW_table_ref_aux_in_join_clause7067);
			table_ref_aux();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:95: ( query_partition_clause )*
			loop237:
			while (true) {
				int alt237=2;
				int LA237_0 = input.LA(1);
				if ( (LA237_0==PARTITION_VK) ) {
					alt237=1;
				}

				switch (alt237) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:95: query_partition_clause
					{
					pushFollow(FOLLOW_query_partition_clause_in_join_clause7069);
					query_partition_clause();
					state._fsp--;

					}
					break;

				default :
					break loop237;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:119: ( join_on_part | join_using_part )?
			int alt238=3;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==SQL92_RESERVED_ON) ) {
				alt238=1;
			}
			else if ( (LA238_0==PLSQL_NON_RESERVED_USING) ) {
				alt238=2;
			}
			switch (alt238) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:120: join_on_part
					{
					pushFollow(FOLLOW_join_on_part_in_join_clause7073);
					join_on_part();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:882:133: join_using_part
					{
					pushFollow(FOLLOW_join_using_part_in_join_clause7075);
					join_using_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "join_clause"



	// $ANTLR start "join_on_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:885:1: join_on_part : ^( SQL92_RESERVED_ON expression ) ;
	public final void join_on_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:886:5: ( ^( SQL92_RESERVED_ON expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:886:10: ^( SQL92_RESERVED_ON expression )
			{
			match(input,SQL92_RESERVED_ON,FOLLOW_SQL92_RESERVED_ON_in_join_on_part7100); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_join_on_part7102);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "join_on_part"



	// $ANTLR start "join_using_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:889:1: join_using_part : ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) ;
	public final void join_using_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:890:5: ( ^( PLSQL_NON_RESERVED_USING ( column_name )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:890:10: ^( PLSQL_NON_RESERVED_USING ( column_name )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part7125); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:890:37: ( column_name )+
			int cnt239=0;
			loop239:
			while (true) {
				int alt239=2;
				int LA239_0 = input.LA(1);
				if ( (LA239_0==COLUMN_NAME) ) {
					alt239=1;
				}

				switch (alt239) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:890:37: column_name
					{
					pushFollow(FOLLOW_column_name_in_join_using_part7127);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt239 >= 1 ) break loop239;
					EarlyExitException eee = new EarlyExitException(239, input);
					throw eee;
				}
				cnt239++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "join_using_part"



	// $ANTLR start "query_partition_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:893:1: query_partition_clause : ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) ) ;
	public final void query_partition_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:894:5: ( ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:894:10: ^( PARTITION_VK ( subquery | expression_list | ( expression )+ ) )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_query_partition_clause7150); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:894:25: ( subquery | expression_list | ( expression )+ )
			int alt241=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt241=1;
				}
				break;
			case EXPR_LIST:
				{
				alt241=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt241=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 241, 0, input);
				throw nvae;
			}
			switch (alt241) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:894:26: subquery
					{
					pushFollow(FOLLOW_subquery_in_query_partition_clause7153);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:894:35: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_query_partition_clause7155);
					expression_list();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:894:51: ( expression )+
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:894:51: ( expression )+
					int cnt240=0;
					loop240:
					while (true) {
						int alt240=2;
						int LA240_0 = input.LA(1);
						if ( (LA240_0==EXPR||LA240_0==LOGIC_EXPR) ) {
							alt240=1;
						}

						switch (alt240) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:894:51: expression
							{
							pushFollow(FOLLOW_expression_in_query_partition_clause7157);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt240 >= 1 ) break loop240;
							EarlyExitException eee = new EarlyExitException(240, input);
							throw eee;
						}
						cnt240++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "query_partition_clause"



	// $ANTLR start "flashback_query_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:897:1: flashback_query_clause : ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) ;
	public final void flashback_query_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:898:5: ( ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:898:10: ^( ( VERSIONS_VK | SQL92_RESERVED_AS ) ( SCN_VK | TIMESTAMP_VK )? expression )
			{
			if ( input.LA(1)==SQL92_RESERVED_AS||input.LA(1)==VERSIONS_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:898:44: ( SCN_VK | TIMESTAMP_VK )?
			int alt242=2;
			int LA242_0 = input.LA(1);
			if ( (LA242_0==SCN_VK||LA242_0==TIMESTAMP_VK) ) {
				alt242=1;
			}
			switch (alt242) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==SCN_VK||input.LA(1)==TIMESTAMP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_flashback_query_clause7194);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "flashback_query_clause"



	// $ANTLR start "pivot_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:901:1: pivot_clause : ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) ;
	public final void pivot_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:902:5: ( ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:902:10: ^( PIVOT_VK ( XML_VK )? ( pivot_element )+ pivot_for_clause pivot_in_clause )
			{
			match(input,PIVOT_VK,FOLLOW_PIVOT_VK_in_pivot_clause7217); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:902:21: ( XML_VK )?
			int alt243=2;
			int LA243_0 = input.LA(1);
			if ( (LA243_0==XML_VK) ) {
				alt243=1;
			}
			switch (alt243) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:902:21: XML_VK
					{
					match(input,XML_VK,FOLLOW_XML_VK_in_pivot_clause7219); 
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:902:29: ( pivot_element )+
			int cnt244=0;
			loop244:
			while (true) {
				int alt244=2;
				int LA244_0 = input.LA(1);
				if ( (LA244_0==PIVOT_ELEMENT) ) {
					alt244=1;
				}

				switch (alt244) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:902:29: pivot_element
					{
					pushFollow(FOLLOW_pivot_element_in_pivot_clause7222);
					pivot_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt244 >= 1 ) break loop244;
					EarlyExitException eee = new EarlyExitException(244, input);
					throw eee;
				}
				cnt244++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_pivot_clause7225);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_pivot_in_clause_in_pivot_clause7227);
			pivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pivot_clause"



	// $ANTLR start "pivot_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:905:1: pivot_element : ^( PIVOT_ELEMENT ( alias )? expression ) ;
	public final void pivot_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:906:5: ( ^( PIVOT_ELEMENT ( alias )? expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:906:10: ^( PIVOT_ELEMENT ( alias )? expression )
			{
			match(input,PIVOT_ELEMENT,FOLLOW_PIVOT_ELEMENT_in_pivot_element7249); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:906:26: ( alias )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==ALIAS) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:906:26: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_element7251);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_pivot_element7254);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pivot_element"



	// $ANTLR start "pivot_for_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:909:1: pivot_for_clause : ^( SQL92_RESERVED_FOR ( column_name )+ ) ;
	public final void pivot_for_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:910:5: ( ^( SQL92_RESERVED_FOR ( column_name )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:910:10: ^( SQL92_RESERVED_FOR ( column_name )+ )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause7276); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:910:31: ( column_name )+
			int cnt246=0;
			loop246:
			while (true) {
				int alt246=2;
				int LA246_0 = input.LA(1);
				if ( (LA246_0==COLUMN_NAME) ) {
					alt246=1;
				}

				switch (alt246) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:910:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_pivot_for_clause7278);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt246 >= 1 ) break loop246;
					EarlyExitException eee = new EarlyExitException(246, input);
					throw eee;
				}
				cnt246++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pivot_for_clause"



	// $ANTLR start "pivot_in_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:913:1: pivot_in_clause : ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) ;
	public final void pivot_in_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:914:5: ( ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:914:10: ^( SQL92_RESERVED_IN ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) ) )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause7301); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:915:9: ( subquery | ^( ANY_MODE ( SQL92_RESERVED_ANY )+ ) | ^( ELEMENTS_MODE ( pivot_in_clause_element )+ ) )
			int alt249=3;
			switch ( input.LA(1) ) {
			case SUBQUERY:
				{
				alt249=1;
				}
				break;
			case ANY_MODE:
				{
				alt249=2;
				}
				break;
			case ELEMENTS_MODE:
				{
				alt249=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 249, 0, input);
				throw nvae;
			}
			switch (alt249) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:915:14: subquery
					{
					pushFollow(FOLLOW_subquery_in_pivot_in_clause7317);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:916:14: ^( ANY_MODE ( SQL92_RESERVED_ANY )+ )
					{
					match(input,ANY_MODE,FOLLOW_ANY_MODE_in_pivot_in_clause7333); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:916:25: ( SQL92_RESERVED_ANY )+
					int cnt247=0;
					loop247:
					while (true) {
						int alt247=2;
						int LA247_0 = input.LA(1);
						if ( (LA247_0==SQL92_RESERVED_ANY) ) {
							alt247=1;
						}

						switch (alt247) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:916:25: SQL92_RESERVED_ANY
							{
							match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause7335); 
							}
							break;

						default :
							if ( cnt247 >= 1 ) break loop247;
							EarlyExitException eee = new EarlyExitException(247, input);
							throw eee;
						}
						cnt247++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:917:14: ^( ELEMENTS_MODE ( pivot_in_clause_element )+ )
					{
					match(input,ELEMENTS_MODE,FOLLOW_ELEMENTS_MODE_in_pivot_in_clause7353); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:917:30: ( pivot_in_clause_element )+
					int cnt248=0;
					loop248:
					while (true) {
						int alt248=2;
						int LA248_0 = input.LA(1);
						if ( (LA248_0==PIVOT_IN_ELEMENT) ) {
							alt248=1;
						}

						switch (alt248) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:917:30: pivot_in_clause_element
							{
							pushFollow(FOLLOW_pivot_in_clause_element_in_pivot_in_clause7355);
							pivot_in_clause_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt248 >= 1 ) break loop248;
							EarlyExitException eee = new EarlyExitException(248, input);
							throw eee;
						}
						cnt248++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pivot_in_clause"



	// $ANTLR start "pivot_in_clause_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:922:1: pivot_in_clause_element : ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) ;
	public final void pivot_in_clause_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:923:5: ( ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:923:10: ^( PIVOT_IN_ELEMENT ( alias )? ( expression | expression_list ) )
			{
			match(input,PIVOT_IN_ELEMENT,FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element7398); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:923:29: ( alias )?
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==ALIAS) ) {
				alt250=1;
			}
			switch (alt250) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:923:29: alias
					{
					pushFollow(FOLLOW_alias_in_pivot_in_clause_element7400);
					alias();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:923:36: ( expression | expression_list )
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==EXPR||LA251_0==LOGIC_EXPR) ) {
				alt251=1;
			}
			else if ( (LA251_0==EXPR_LIST) ) {
				alt251=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 251, 0, input);
				throw nvae;
			}

			switch (alt251) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:923:37: expression
					{
					pushFollow(FOLLOW_expression_in_pivot_in_clause_element7404);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:923:48: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_pivot_in_clause_element7406);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pivot_in_clause_element"



	// $ANTLR start "unpivot_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:926:1: unpivot_clause : ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) ;
	public final void unpivot_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:927:5: ( ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:927:10: ^( UNPIVOT_VK ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )? ( column_name )+ pivot_for_clause unpivot_in_clause )
			{
			match(input,UNPIVOT_VK,FOLLOW_UNPIVOT_VK_in_unpivot_clause7429); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:927:23: ( ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )? )?
			int alt253=2;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==EXCLUDE_VK||LA253_0==INCLUDE_VK) ) {
				alt253=1;
			}
			switch (alt253) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:927:24: ( INCLUDE_VK | EXCLUDE_VK ) ( NULLS_VK )?
					{
					if ( input.LA(1)==EXCLUDE_VK||input.LA(1)==INCLUDE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:927:48: ( NULLS_VK )?
					int alt252=2;
					int LA252_0 = input.LA(1);
					if ( (LA252_0==NULLS_VK) ) {
						alt252=1;
					}
					switch (alt252) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:927:48: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_unpivot_clause7438); 
							}
							break;

					}

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:927:60: ( column_name )+
			int cnt254=0;
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==COLUMN_NAME) ) {
					alt254=1;
				}

				switch (alt254) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:927:60: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_clause7443);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt254 >= 1 ) break loop254;
					EarlyExitException eee = new EarlyExitException(254, input);
					throw eee;
				}
				cnt254++;
			}

			pushFollow(FOLLOW_pivot_for_clause_in_unpivot_clause7446);
			pivot_for_clause();
			state._fsp--;

			pushFollow(FOLLOW_unpivot_in_clause_in_unpivot_clause7448);
			unpivot_in_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "unpivot_clause"



	// $ANTLR start "unpivot_in_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:930:1: unpivot_in_clause : ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) ;
	public final void unpivot_in_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:931:5: ( ^( SQL92_RESERVED_IN ( unpivot_in_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:931:10: ^( SQL92_RESERVED_IN ( unpivot_in_element )+ )
			{
			match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause7470); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:931:30: ( unpivot_in_element )+
			int cnt255=0;
			loop255:
			while (true) {
				int alt255=2;
				int LA255_0 = input.LA(1);
				if ( (LA255_0==UNPIVOT_IN_ELEMENT) ) {
					alt255=1;
				}

				switch (alt255) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:931:30: unpivot_in_element
					{
					pushFollow(FOLLOW_unpivot_in_element_in_unpivot_in_clause7472);
					unpivot_in_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt255 >= 1 ) break loop255;
					EarlyExitException eee = new EarlyExitException(255, input);
					throw eee;
				}
				cnt255++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "unpivot_in_clause"



	// $ANTLR start "unpivot_in_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:934:1: unpivot_in_element : ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) ;
	public final void unpivot_in_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:935:5: ( ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:935:10: ^( UNPIVOT_IN_ELEMENT ( column_name )+ ^( PIVOT_ALIAS ( expression | expression_list ) ) )
			{
			match(input,UNPIVOT_IN_ELEMENT,FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element7495); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:935:31: ( column_name )+
			int cnt256=0;
			loop256:
			while (true) {
				int alt256=2;
				int LA256_0 = input.LA(1);
				if ( (LA256_0==COLUMN_NAME) ) {
					alt256=1;
				}

				switch (alt256) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:935:31: column_name
					{
					pushFollow(FOLLOW_column_name_in_unpivot_in_element7497);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt256 >= 1 ) break loop256;
					EarlyExitException eee = new EarlyExitException(256, input);
					throw eee;
				}
				cnt256++;
			}

			match(input,PIVOT_ALIAS,FOLLOW_PIVOT_ALIAS_in_unpivot_in_element7501); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:935:58: ( expression | expression_list )
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==EXPR||LA257_0==LOGIC_EXPR) ) {
				alt257=1;
			}
			else if ( (LA257_0==EXPR_LIST) ) {
				alt257=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 257, 0, input);
				throw nvae;
			}

			switch (alt257) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:935:59: expression
					{
					pushFollow(FOLLOW_expression_in_unpivot_in_element7504);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:935:70: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_unpivot_in_element7506);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "unpivot_in_element"



	// $ANTLR start "hierarchical_query_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:938:1: hierarchical_query_clause : ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) ;
	public final void hierarchical_query_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:939:5: ( ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:939:10: ^( HIERARCHICAL ( start_part )? ^( SQL92_RESERVED_CONNECT ( NOCYCLE_VK )? expression ) )
			{
			match(input,HIERARCHICAL,FOLLOW_HIERARCHICAL_in_hierarchical_query_clause7530); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:939:25: ( start_part )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==PLSQL_RESERVED_START) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:939:25: start_part
					{
					pushFollow(FOLLOW_start_part_in_hierarchical_query_clause7532);
					start_part();
					state._fsp--;

					}
					break;

			}

			match(input,SQL92_RESERVED_CONNECT,FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause7536); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:939:62: ( NOCYCLE_VK )?
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==NOCYCLE_VK) ) {
				alt259=1;
			}
			switch (alt259) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:939:62: NOCYCLE_VK
					{
					match(input,NOCYCLE_VK,FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause7538); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_hierarchical_query_clause7541);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "hierarchical_query_clause"



	// $ANTLR start "start_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:942:1: start_part : ^( PLSQL_RESERVED_START expression ) ;
	public final void start_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:943:5: ( ^( PLSQL_RESERVED_START expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:943:10: ^( PLSQL_RESERVED_START expression )
			{
			match(input,PLSQL_RESERVED_START,FOLLOW_PLSQL_RESERVED_START_in_start_part7564); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_start_part7566);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "start_part"



	// $ANTLR start "group_by_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:946:1: group_by_clause : ^( SQL92_RESERVED_GROUP ( group_by_element )+ ) ;
	public final void group_by_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:947:5: ( ^( SQL92_RESERVED_GROUP ( group_by_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:947:10: ^( SQL92_RESERVED_GROUP ( group_by_element )+ )
			{
			match(input,SQL92_RESERVED_GROUP,FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause7588); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:947:33: ( group_by_element )+
			int cnt260=0;
			loop260:
			while (true) {
				int alt260=2;
				int LA260_0 = input.LA(1);
				if ( (LA260_0==GROUP_BY_ELEMENT) ) {
					alt260=1;
				}

				switch (alt260) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:947:33: group_by_element
					{
					pushFollow(FOLLOW_group_by_element_in_group_by_clause7590);
					group_by_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt260 >= 1 ) break loop260;
					EarlyExitException eee = new EarlyExitException(260, input);
					throw eee;
				}
				cnt260++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "group_by_clause"



	// $ANTLR start "group_by_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:950:1: group_by_element : ^( GROUP_BY_ELEMENT group_by_elements ) ;
	public final void group_by_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:951:5: ( ^( GROUP_BY_ELEMENT group_by_elements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:951:10: ^( GROUP_BY_ELEMENT group_by_elements )
			{
			match(input,GROUP_BY_ELEMENT,FOLLOW_GROUP_BY_ELEMENT_in_group_by_element7613); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_group_by_elements_in_group_by_element7615);
			group_by_elements();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "group_by_element"



	// $ANTLR start "group_by_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:954:1: group_by_elements : ( ^( GROUPING_VK ( groupin_set )+ ) | grouping_element );
	public final void group_by_elements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:955:5: ( ^( GROUPING_VK ( groupin_set )+ ) | grouping_element )
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==GROUPING_VK) ) {
				alt262=1;
			}
			else if ( (LA262_0==CUBE_VK||(LA262_0 >= EXPR && LA262_0 <= EXPR_LIST)||LA262_0==LOGIC_EXPR||LA262_0==ROLLUP_VK) ) {
				alt262=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 262, 0, input);
				throw nvae;
			}

			switch (alt262) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:955:10: ^( GROUPING_VK ( groupin_set )+ )
					{
					match(input,GROUPING_VK,FOLLOW_GROUPING_VK_in_group_by_elements7637); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:955:24: ( groupin_set )+
					int cnt261=0;
					loop261:
					while (true) {
						int alt261=2;
						int LA261_0 = input.LA(1);
						if ( (LA261_0==GROUPIN_SET) ) {
							alt261=1;
						}

						switch (alt261) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:955:24: groupin_set
							{
							pushFollow(FOLLOW_groupin_set_in_group_by_elements7639);
							groupin_set();
							state._fsp--;

							}
							break;

						default :
							if ( cnt261 >= 1 ) break loop261;
							EarlyExitException eee = new EarlyExitException(261, input);
							throw eee;
						}
						cnt261++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:956:10: grouping_element
					{
					pushFollow(FOLLOW_grouping_element_in_group_by_elements7652);
					grouping_element();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "group_by_elements"



	// $ANTLR start "groupin_set"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:959:1: groupin_set : ^( GROUPIN_SET grouping_element ) ;
	public final void groupin_set() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:960:5: ( ^( GROUPIN_SET grouping_element ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:960:10: ^( GROUPIN_SET grouping_element )
			{
			match(input,GROUPIN_SET,FOLLOW_GROUPIN_SET_in_groupin_set7674); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_grouping_element_in_groupin_set7676);
			grouping_element();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "groupin_set"



	// $ANTLR start "grouping_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:963:1: grouping_element : ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) | expression_list | expression );
	public final void grouping_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:964:5: ( ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ ) | expression_list | expression )
			int alt264=3;
			switch ( input.LA(1) ) {
			case CUBE_VK:
			case ROLLUP_VK:
				{
				alt264=1;
				}
				break;
			case EXPR_LIST:
				{
				alt264=2;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt264=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 264, 0, input);
				throw nvae;
			}
			switch (alt264) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:964:10: ^( ( ROLLUP_VK | CUBE_VK ) ( grouping_element )+ )
					{
					if ( input.LA(1)==CUBE_VK||input.LA(1)==ROLLUP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:964:32: ( grouping_element )+
					int cnt263=0;
					loop263:
					while (true) {
						int alt263=2;
						int LA263_0 = input.LA(1);
						if ( (LA263_0==CUBE_VK||(LA263_0 >= EXPR && LA263_0 <= EXPR_LIST)||LA263_0==LOGIC_EXPR||LA263_0==ROLLUP_VK) ) {
							alt263=1;
						}

						switch (alt263) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:964:32: grouping_element
							{
							pushFollow(FOLLOW_grouping_element_in_grouping_element7704);
							grouping_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt263 >= 1 ) break loop263;
							EarlyExitException eee = new EarlyExitException(263, input);
							throw eee;
						}
						cnt263++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:965:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_grouping_element7717);
					expression_list();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:966:10: expression
					{
					pushFollow(FOLLOW_expression_in_grouping_element7728);
					expression();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "grouping_element"



	// $ANTLR start "having_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:969:1: having_clause : ^( SQL92_RESERVED_HAVING expression ) ;
	public final void having_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:970:5: ( ^( SQL92_RESERVED_HAVING expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:970:10: ^( SQL92_RESERVED_HAVING expression )
			{
			match(input,SQL92_RESERVED_HAVING,FOLLOW_SQL92_RESERVED_HAVING_in_having_clause7750); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_having_clause7752);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "having_clause"



	// $ANTLR start "model_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:973:1: model_clause : ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) ;
	public final void model_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:974:5: ( ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:974:10: ^( PLSQL_NON_RESERVED_MODEL main_model ( cell_reference_options )* ( return_rows_clause )? ( reference_model )* )
			{
			match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause7774); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_main_model_in_model_clause7776);
			main_model();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:974:48: ( cell_reference_options )*
			loop265:
			while (true) {
				int alt265=2;
				int LA265_0 = input.LA(1);
				if ( (LA265_0==SQL92_RESERVED_UNIQUE||LA265_0==IGNORE_VK||LA265_0==KEEP_VK) ) {
					alt265=1;
				}

				switch (alt265) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:974:48: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_model_clause7778);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop265;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:974:72: ( return_rows_clause )?
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==RETURN_VK) ) {
				alt266=1;
			}
			switch (alt266) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:974:72: return_rows_clause
					{
					pushFollow(FOLLOW_return_rows_clause_in_model_clause7781);
					return_rows_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:974:92: ( reference_model )*
			loop267:
			while (true) {
				int alt267=2;
				int LA267_0 = input.LA(1);
				if ( (LA267_0==REFERENCE_VK) ) {
					alt267=1;
				}

				switch (alt267) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:974:92: reference_model
					{
					pushFollow(FOLLOW_reference_model_in_model_clause7784);
					reference_model();
					state._fsp--;

					}
					break;

				default :
					break loop267;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_clause"



	// $ANTLR start "cell_reference_options"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:977:1: cell_reference_options : ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) );
	public final void cell_reference_options() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:978:5: ( ^( ( IGNORE_VK | KEEP_VK ) NAV_VK ) | ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) ) )
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==IGNORE_VK||LA268_0==KEEP_VK) ) {
				alt268=1;
			}
			else if ( (LA268_0==SQL92_RESERVED_UNIQUE) ) {
				alt268=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 268, 0, input);
				throw nvae;
			}

			switch (alt268) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:978:10: ^( ( IGNORE_VK | KEEP_VK ) NAV_VK )
					{
					if ( input.LA(1)==IGNORE_VK||input.LA(1)==KEEP_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					match(input,NAV_VK,FOLLOW_NAV_VK_in_cell_reference_options7813); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:979:10: ^( SQL92_RESERVED_UNIQUE ( DIMENSION_VK | SINGLE_VK ) )
					{
					match(input,SQL92_RESERVED_UNIQUE,FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options7826); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==DIMENSION_VK||input.LA(1)==SINGLE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "cell_reference_options"



	// $ANTLR start "return_rows_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:982:1: return_rows_clause : ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) ;
	public final void return_rows_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:983:5: ( ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:983:10: ^( RETURN_VK ( UPDATED_VK | SQL92_RESERVED_ALL ) )
			{
			match(input,RETURN_VK,FOLLOW_RETURN_VK_in_return_rows_clause7854); 
			match(input, Token.DOWN, null); 
			if ( input.LA(1)==SQL92_RESERVED_ALL||input.LA(1)==UPDATED_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "return_rows_clause"



	// $ANTLR start "reference_model"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:986:1: reference_model : ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) ;
	public final void reference_model() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:987:5: ( ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:987:10: ^( REFERENCE_VK reference_model_name subquery model_column_clauses ( cell_reference_options )* )
			{
			match(input,REFERENCE_VK,FOLLOW_REFERENCE_VK_in_reference_model7882); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_reference_model_name_in_reference_model7884);
			reference_model_name();
			state._fsp--;

			pushFollow(FOLLOW_subquery_in_reference_model7886);
			subquery();
			state._fsp--;

			pushFollow(FOLLOW_model_column_clauses_in_reference_model7888);
			model_column_clauses();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:987:76: ( cell_reference_options )*
			loop269:
			while (true) {
				int alt269=2;
				int LA269_0 = input.LA(1);
				if ( (LA269_0==SQL92_RESERVED_UNIQUE||LA269_0==IGNORE_VK||LA269_0==KEEP_VK) ) {
					alt269=1;
				}

				switch (alt269) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:987:76: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_reference_model7890);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop269;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "reference_model"



	// $ANTLR start "main_model"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:990:1: main_model : ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) ;
	public final void main_model() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:991:5: ( ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:991:10: ^( MAIN_MODEL ( main_model_name )? model_column_clauses model_rules_clause ( cell_reference_options )* )
			{
			match(input,MAIN_MODEL,FOLLOW_MAIN_MODEL_in_main_model7913); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:991:23: ( main_model_name )?
			int alt270=2;
			int LA270_0 = input.LA(1);
			if ( (LA270_0==MAIN_MODEL_NAME) ) {
				alt270=1;
			}
			switch (alt270) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:991:23: main_model_name
					{
					pushFollow(FOLLOW_main_model_name_in_main_model7915);
					main_model_name();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_model_column_clauses_in_main_model7918);
			model_column_clauses();
			state._fsp--;

			pushFollow(FOLLOW_model_rules_clause_in_main_model7920);
			model_rules_clause();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:991:80: ( cell_reference_options )*
			loop271:
			while (true) {
				int alt271=2;
				int LA271_0 = input.LA(1);
				if ( (LA271_0==SQL92_RESERVED_UNIQUE||LA271_0==IGNORE_VK||LA271_0==KEEP_VK) ) {
					alt271=1;
				}

				switch (alt271) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:991:80: cell_reference_options
					{
					pushFollow(FOLLOW_cell_reference_options_in_main_model7922);
					cell_reference_options();
					state._fsp--;

					}
					break;

				default :
					break loop271;
				}
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "main_model"



	// $ANTLR start "model_column_clauses"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:994:1: model_column_clauses : ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) ;
	public final void model_column_clauses() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:995:5: ( ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:995:10: ^( MODEL_COLUMN ^( DIMENSION_VK model_column_list ) ^( MEASURES_VK model_column_list ) ( model_column_partition_part )? )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column_clauses7945); 
			match(input, Token.DOWN, null); 
			match(input,DIMENSION_VK,FOLLOW_DIMENSION_VK_in_model_column_clauses7948); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses7950);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			match(input,MEASURES_VK,FOLLOW_MEASURES_VK_in_model_column_clauses7954); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_clauses7956);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:995:92: ( model_column_partition_part )?
			int alt272=2;
			int LA272_0 = input.LA(1);
			if ( (LA272_0==PARTITION_VK) ) {
				alt272=1;
			}
			switch (alt272) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:995:92: model_column_partition_part
					{
					pushFollow(FOLLOW_model_column_partition_part_in_model_column_clauses7959);
					model_column_partition_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_column_clauses"



	// $ANTLR start "model_column_partition_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:998:1: model_column_partition_part : ^( PARTITION_VK model_column_list ) ;
	public final void model_column_partition_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:999:5: ( ^( PARTITION_VK model_column_list ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:999:10: ^( PARTITION_VK model_column_list )
			{
			match(input,PARTITION_VK,FOLLOW_PARTITION_VK_in_model_column_partition_part7982); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_column_list_in_model_column_partition_part7984);
			model_column_list();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_column_partition_part"



	// $ANTLR start "model_column_list"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1002:1: model_column_list : ^( MODEL_COLUMNS ( model_column )+ ) ;
	public final void model_column_list() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1003:5: ( ^( MODEL_COLUMNS ( model_column )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1003:10: ^( MODEL_COLUMNS ( model_column )+ )
			{
			match(input,MODEL_COLUMNS,FOLLOW_MODEL_COLUMNS_in_model_column_list8006); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1003:26: ( model_column )+
			int cnt273=0;
			loop273:
			while (true) {
				int alt273=2;
				int LA273_0 = input.LA(1);
				if ( (LA273_0==MODEL_COLUMN) ) {
					alt273=1;
				}

				switch (alt273) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1003:26: model_column
					{
					pushFollow(FOLLOW_model_column_in_model_column_list8008);
					model_column();
					state._fsp--;

					}
					break;

				default :
					if ( cnt273 >= 1 ) break loop273;
					EarlyExitException eee = new EarlyExitException(273, input);
					throw eee;
				}
				cnt273++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_column_list"



	// $ANTLR start "model_column"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1006:1: model_column : ^( MODEL_COLUMN ( alias )? expression ) ;
	public final void model_column() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1007:5: ( ^( MODEL_COLUMN ( alias )? expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1007:10: ^( MODEL_COLUMN ( alias )? expression )
			{
			match(input,MODEL_COLUMN,FOLLOW_MODEL_COLUMN_in_model_column8031); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1007:25: ( alias )?
			int alt274=2;
			int LA274_0 = input.LA(1);
			if ( (LA274_0==ALIAS) ) {
				alt274=1;
			}
			switch (alt274) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1007:25: alias
					{
					pushFollow(FOLLOW_alias_in_model_column8033);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_expression_in_model_column8036);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_column"



	// $ANTLR start "model_rules_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1010:1: model_rules_clause : ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) ;
	public final void model_rules_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1011:5: ( ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1011:10: ^( MODEL_RULES ( model_rules_element )+ ( model_rules_part )? )
			{
			match(input,MODEL_RULES,FOLLOW_MODEL_RULES_in_model_rules_clause8059); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1011:24: ( model_rules_element )+
			int cnt275=0;
			loop275:
			while (true) {
				int alt275=2;
				int LA275_0 = input.LA(1);
				if ( (LA275_0==MODEL_RULE) ) {
					alt275=1;
				}

				switch (alt275) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1011:24: model_rules_element
					{
					pushFollow(FOLLOW_model_rules_element_in_model_rules_clause8061);
					model_rules_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt275 >= 1 ) break loop275;
					EarlyExitException eee = new EarlyExitException(275, input);
					throw eee;
				}
				cnt275++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1011:45: ( model_rules_part )?
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==RULES_VK) ) {
				alt276=1;
			}
			switch (alt276) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1011:45: model_rules_part
					{
					pushFollow(FOLLOW_model_rules_part_in_model_rules_clause8064);
					model_rules_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_rules_clause"



	// $ANTLR start "model_rules_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1014:1: model_rules_part : ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) ;
	public final void model_rules_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1015:5: ( ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1015:10: ^( RULES_VK ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( AUTOMATIC_VK | SEQUENTIAL_VK )? ( model_iterate_clause )? )
			{
			match(input,RULES_VK,FOLLOW_RULES_VK_in_model_rules_part8087); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1016:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
				int alt278=3;
				int LA278_0 = input.LA(1);
				if ( (LA278_0==SQL92_RESERVED_UPDATE) ) {
					alt278=1;
				}
				else if ( (LA278_0==UPSERT_VK) ) {
					alt278=2;
				}
				switch (alt278) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1016:14: SQL92_RESERVED_UPDATE
						{
						match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part8103); 
						}
						break;
					case 2 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1016:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
						{
						match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_part8105); 
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1016:46: ( SQL92_RESERVED_ALL )?
						int alt277=2;
						int LA277_0 = input.LA(1);
						if ( (LA277_0==SQL92_RESERVED_ALL) ) {
							alt277=1;
						}
						switch (alt277) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1016:46: SQL92_RESERVED_ALL
								{
								match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part8107); 
								}
								break;

						}

						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1017:13: ( AUTOMATIC_VK | SEQUENTIAL_VK )?
				int alt279=2;
				int LA279_0 = input.LA(1);
				if ( (LA279_0==AUTOMATIC_VK||LA279_0==SEQUENTIAL_VK) ) {
					alt279=1;
				}
				switch (alt279) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
						{
						if ( input.LA(1)==AUTOMATIC_VK||input.LA(1)==SEQUENTIAL_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1018:13: ( model_iterate_clause )?
				int alt280=2;
				int LA280_0 = input.LA(1);
				if ( (LA280_0==ITERATE_VK) ) {
					alt280=1;
				}
				switch (alt280) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1018:13: model_iterate_clause
						{
						pushFollow(FOLLOW_model_iterate_clause_in_model_rules_part8145);
						model_iterate_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_rules_part"



	// $ANTLR start "model_rules_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1022:1: model_rules_element : ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) ;
	public final void model_rules_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1023:5: ( ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1023:10: ^( MODEL_RULE ^( ASSIGN model_expression expression ) ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )? ( order_by_clause )? )
			{
			match(input,MODEL_RULE,FOLLOW_MODEL_RULE_in_model_rules_element8177); 
			match(input, Token.DOWN, null); 
			match(input,ASSIGN,FOLLOW_ASSIGN_in_model_rules_element8193); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_model_expression_in_model_rules_element8195);
			model_expression();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_model_rules_element8197);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1025:13: ( SQL92_RESERVED_UPDATE | UPSERT_VK ( SQL92_RESERVED_ALL )? )?
			int alt282=3;
			int LA282_0 = input.LA(1);
			if ( (LA282_0==SQL92_RESERVED_UPDATE) ) {
				alt282=1;
			}
			else if ( (LA282_0==UPSERT_VK) ) {
				alt282=2;
			}
			switch (alt282) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1025:14: SQL92_RESERVED_UPDATE
					{
					match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element8214); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1025:36: UPSERT_VK ( SQL92_RESERVED_ALL )?
					{
					match(input,UPSERT_VK,FOLLOW_UPSERT_VK_in_model_rules_element8216); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1025:46: ( SQL92_RESERVED_ALL )?
					int alt281=2;
					int LA281_0 = input.LA(1);
					if ( (LA281_0==SQL92_RESERVED_ALL) ) {
						alt281=1;
					}
					switch (alt281) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1025:46: SQL92_RESERVED_ALL
							{
							match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element8218); 
							}
							break;

					}

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1026:13: ( order_by_clause )?
			int alt283=2;
			int LA283_0 = input.LA(1);
			if ( (LA283_0==SQL92_RESERVED_ORDER) ) {
				alt283=1;
			}
			switch (alt283) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1026:13: order_by_clause
					{
					pushFollow(FOLLOW_order_by_clause_in_model_rules_element8236);
					order_by_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_rules_element"



	// $ANTLR start "model_iterate_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1030:1: model_iterate_clause : ^( ITERATE_VK expression ( until_part )? ) ;
	public final void model_iterate_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1031:5: ( ^( ITERATE_VK expression ( until_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1031:10: ^( ITERATE_VK expression ( until_part )? )
			{
			match(input,ITERATE_VK,FOLLOW_ITERATE_VK_in_model_iterate_clause8268); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_model_iterate_clause8270);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1031:34: ( until_part )?
			int alt284=2;
			int LA284_0 = input.LA(1);
			if ( (LA284_0==UNTIL_VK) ) {
				alt284=1;
			}
			switch (alt284) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1031:34: until_part
					{
					pushFollow(FOLLOW_until_part_in_model_iterate_clause8272);
					until_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_iterate_clause"



	// $ANTLR start "until_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1034:1: until_part : ^( UNTIL_VK expression ) ;
	public final void until_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1035:5: ( ^( UNTIL_VK expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1035:10: ^( UNTIL_VK expression )
			{
			match(input,UNTIL_VK,FOLLOW_UNTIL_VK_in_until_part8295); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_until_part8297);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "until_part"



	// $ANTLR start "order_by_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1038:1: order_by_clause : ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) ;
	public final void order_by_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1039:5: ( ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1039:10: ^( SQL92_RESERVED_ORDER ( SIBLINGS_VK )? ^( ORDER_BY_ELEMENTS ( order_by_elements )+ ) )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause8319); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1039:33: ( SIBLINGS_VK )?
			int alt285=2;
			int LA285_0 = input.LA(1);
			if ( (LA285_0==SIBLINGS_VK) ) {
				alt285=1;
			}
			switch (alt285) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1039:33: SIBLINGS_VK
					{
					match(input,SIBLINGS_VK,FOLLOW_SIBLINGS_VK_in_order_by_clause8321); 
					}
					break;

			}

			match(input,ORDER_BY_ELEMENTS,FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause8325); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1039:66: ( order_by_elements )+
			int cnt286=0;
			loop286:
			while (true) {
				int alt286=2;
				int LA286_0 = input.LA(1);
				if ( (LA286_0==ORDER_BY_ELEMENT) ) {
					alt286=1;
				}

				switch (alt286) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1039:66: order_by_elements
					{
					pushFollow(FOLLOW_order_by_elements_in_order_by_clause8327);
					order_by_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt286 >= 1 ) break loop286;
					EarlyExitException eee = new EarlyExitException(286, input);
					throw eee;
				}
				cnt286++;
			}

			match(input, Token.UP, null); 

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "order_by_clause"



	// $ANTLR start "order_by_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1042:1: order_by_elements : ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) ;
	public final void order_by_elements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1043:5: ( ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1043:10: ^( ORDER_BY_ELEMENT expression ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )? ( NULLS_VK ( FIRST_VK | LAST_VK ) )? )
			{
			match(input,ORDER_BY_ELEMENT,FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements8351); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_order_by_elements8353);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1043:40: ( SQL92_RESERVED_ASC | SQL92_RESERVED_DESC )?
			int alt287=2;
			int LA287_0 = input.LA(1);
			if ( (LA287_0==SQL92_RESERVED_ASC||LA287_0==SQL92_RESERVED_DESC) ) {
				alt287=1;
			}
			switch (alt287) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==SQL92_RESERVED_ASC||input.LA(1)==SQL92_RESERVED_DESC ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1043:82: ( NULLS_VK ( FIRST_VK | LAST_VK ) )?
			int alt288=2;
			int LA288_0 = input.LA(1);
			if ( (LA288_0==NULLS_VK) ) {
				alt288=1;
			}
			switch (alt288) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1043:83: NULLS_VK ( FIRST_VK | LAST_VK )
					{
					match(input,NULLS_VK,FOLLOW_NULLS_VK_in_order_by_elements8363); 
					if ( input.LA(1)==FIRST_VK||input.LA(1)==LAST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "order_by_elements"



	// $ANTLR start "for_update_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1046:1: for_update_clause : ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) ;
	public final void for_update_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1047:5: ( ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1047:10: ^( SQL92_RESERVED_FOR ( for_update_of_part )? ( for_update_options )? )
			{
			match(input,SQL92_RESERVED_FOR,FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause8393); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1047:31: ( for_update_of_part )?
				int alt289=2;
				int LA289_0 = input.LA(1);
				if ( (LA289_0==SQL92_RESERVED_OF) ) {
					alt289=1;
				}
				switch (alt289) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1047:31: for_update_of_part
						{
						pushFollow(FOLLOW_for_update_of_part_in_for_update_clause8395);
						for_update_of_part();
						state._fsp--;

						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1047:51: ( for_update_options )?
				int alt290=2;
				int LA290_0 = input.LA(1);
				if ( (LA290_0==PLSQL_RESERVED_NOWAIT||LA290_0==SKIP_VK||LA290_0==WAIT_VK) ) {
					alt290=1;
				}
				switch (alt290) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1047:51: for_update_options
						{
						pushFollow(FOLLOW_for_update_options_in_for_update_clause8398);
						for_update_options();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "for_update_clause"



	// $ANTLR start "for_update_of_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1050:1: for_update_of_part : ^( SQL92_RESERVED_OF ( column_name )+ ) ;
	public final void for_update_of_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1051:5: ( ^( SQL92_RESERVED_OF ( column_name )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1051:10: ^( SQL92_RESERVED_OF ( column_name )+ )
			{
			match(input,SQL92_RESERVED_OF,FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part8421); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1051:30: ( column_name )+
			int cnt291=0;
			loop291:
			while (true) {
				int alt291=2;
				int LA291_0 = input.LA(1);
				if ( (LA291_0==COLUMN_NAME) ) {
					alt291=1;
				}

				switch (alt291) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1051:30: column_name
					{
					pushFollow(FOLLOW_column_name_in_for_update_of_part8423);
					column_name();
					state._fsp--;

					}
					break;

				default :
					if ( cnt291 >= 1 ) break loop291;
					EarlyExitException eee = new EarlyExitException(291, input);
					throw eee;
				}
				cnt291++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "for_update_of_part"



	// $ANTLR start "for_update_options"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1054:1: for_update_options : ( SKIP_VK | PLSQL_RESERVED_NOWAIT | ^( WAIT_VK expression ) );
	public final void for_update_options() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1055:5: ( SKIP_VK | PLSQL_RESERVED_NOWAIT | ^( WAIT_VK expression ) )
			int alt292=3;
			switch ( input.LA(1) ) {
			case SKIP_VK:
				{
				alt292=1;
				}
				break;
			case PLSQL_RESERVED_NOWAIT:
				{
				alt292=2;
				}
				break;
			case WAIT_VK:
				{
				alt292=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 292, 0, input);
				throw nvae;
			}
			switch (alt292) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1055:10: SKIP_VK
					{
					match(input,SKIP_VK,FOLLOW_SKIP_VK_in_for_update_options8445); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1056:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options8456); 
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1057:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_for_update_options8468); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_update_options8470);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "for_update_options"



	// $ANTLR start "update_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1062:1: update_statement : ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) ;
	public final void update_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1063:5: ( ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1063:10: ^( SQL92_RESERVED_UPDATE general_table_ref update_set_clause ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement8494); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_update_statement8496);
			general_table_ref();
			state._fsp--;

			pushFollow(FOLLOW_update_set_clause_in_update_statement8510);
			update_set_clause();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1065:13: ( where_clause )?
			int alt293=2;
			int LA293_0 = input.LA(1);
			if ( (LA293_0==SQL92_RESERVED_WHERE) ) {
				alt293=1;
			}
			switch (alt293) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1065:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_update_statement8524);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1065:27: ( static_returning_clause )?
			int alt294=2;
			int LA294_0 = input.LA(1);
			if ( (LA294_0==STATIC_RETURNING) ) {
				alt294=1;
			}
			switch (alt294) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1065:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_update_statement8527);
					static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1065:52: ( error_logging_clause )?
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==LOG_VK) ) {
				alt295=1;
			}
			switch (alt295) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1065:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_update_statement8530);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "update_statement"



	// $ANTLR start "update_set_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1070:1: update_set_clause : ^( SET_VK ( update_set_elements )+ ) ;
	public final void update_set_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1071:5: ( ^( SET_VK ( update_set_elements )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1071:10: ^( SET_VK ( update_set_elements )+ )
			{
			match(input,SET_VK,FOLLOW_SET_VK_in_update_set_clause8563); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1071:19: ( update_set_elements )+
			int cnt296=0;
			loop296:
			while (true) {
				int alt296=2;
				int LA296_0 = input.LA(1);
				if ( (LA296_0==ASSIGN||LA296_0==VALUE_VK) ) {
					alt296=1;
				}

				switch (alt296) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1071:19: update_set_elements
					{
					pushFollow(FOLLOW_update_set_elements_in_update_set_clause8565);
					update_set_elements();
					state._fsp--;

					}
					break;

				default :
					if ( cnt296 >= 1 ) break loop296;
					EarlyExitException eee = new EarlyExitException(296, input);
					throw eee;
				}
				cnt296++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "update_set_clause"



	// $ANTLR start "update_set_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1074:1: update_set_elements : ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) );
	public final void update_set_elements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1075:5: ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) )
			int alt299=3;
			alt299 = dfa299.predict(input);
			switch (alt299) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1075:10: ^( ASSIGN column_name expression )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements8588); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_update_set_elements8590);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_expression_in_update_set_elements8592);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1076:10: ^( ASSIGN ( column_name )+ subquery )
					{
					match(input,ASSIGN,FOLLOW_ASSIGN_in_update_set_elements8605); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1076:19: ( column_name )+
					int cnt297=0;
					loop297:
					while (true) {
						int alt297=2;
						int LA297_0 = input.LA(1);
						if ( (LA297_0==COLUMN_NAME) ) {
							alt297=1;
						}

						switch (alt297) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1076:19: column_name
							{
							pushFollow(FOLLOW_column_name_in_update_set_elements8607);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt297 >= 1 ) break loop297;
							EarlyExitException eee = new EarlyExitException(297, input);
							throw eee;
						}
						cnt297++;
					}

					pushFollow(FOLLOW_subquery_in_update_set_elements8610);
					subquery();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1077:10: ^( VALUE_VK ( char_set_name )? ID expression )
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_update_set_elements8623); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1077:21: ( char_set_name )?
					int alt298=2;
					int LA298_0 = input.LA(1);
					if ( (LA298_0==CHAR_SET_NAME) ) {
						alt298=1;
					}
					switch (alt298) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1077:21: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_update_set_elements8625);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					match(input,ID,FOLLOW_ID_in_update_set_elements8628); 
					pushFollow(FOLLOW_expression_in_update_set_elements8630);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "update_set_elements"



	// $ANTLR start "delete_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1082:1: delete_statement : ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) ;
	public final void delete_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1083:5: ( ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1083:10: ^( SQL92_RESERVED_DELETE general_table_ref ( where_clause )? ( static_returning_clause )? ( error_logging_clause )? )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement8654); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_delete_statement8656);
			general_table_ref();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1084:13: ( where_clause )?
			int alt300=2;
			int LA300_0 = input.LA(1);
			if ( (LA300_0==SQL92_RESERVED_WHERE) ) {
				alt300=1;
			}
			switch (alt300) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1084:13: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_delete_statement8670);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1084:27: ( static_returning_clause )?
			int alt301=2;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==STATIC_RETURNING) ) {
				alt301=1;
			}
			switch (alt301) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1084:27: static_returning_clause
					{
					pushFollow(FOLLOW_static_returning_clause_in_delete_statement8673);
					static_returning_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1084:52: ( error_logging_clause )?
			int alt302=2;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==LOG_VK) ) {
				alt302=1;
			}
			switch (alt302) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1084:52: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_delete_statement8676);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "delete_statement"



	// $ANTLR start "insert_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1087:1: insert_statement : ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) ) ;
	public final void insert_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1088:5: ( ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1088:10: ^( SQL92_RESERVED_INSERT ( single_table_insert | multi_table_insert ) )
			{
			match(input,SQL92_RESERVED_INSERT,FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement8699); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1089:9: ( single_table_insert | multi_table_insert )
			int alt303=2;
			int LA303_0 = input.LA(1);
			if ( (LA303_0==SINGLE_TABLE_MODE) ) {
				alt303=1;
			}
			else if ( (LA303_0==MULTI_TABLE_MODE) ) {
				alt303=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 303, 0, input);
				throw nvae;
			}

			switch (alt303) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1089:14: single_table_insert
					{
					pushFollow(FOLLOW_single_table_insert_in_insert_statement8714);
					single_table_insert();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1090:14: multi_table_insert
					{
					pushFollow(FOLLOW_multi_table_insert_in_insert_statement8729);
					multi_table_insert();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "insert_statement"



	// $ANTLR start "single_table_insert"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1097:1: single_table_insert : ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) ;
	public final void single_table_insert() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:5: ( ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:10: ^( SINGLE_TABLE_MODE insert_into_clause ( values_clause ( static_returning_clause )? | select_statement ) ( error_logging_clause )? )
			{
			match(input,SINGLE_TABLE_MODE,FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert8772); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_single_table_insert8774);
			insert_into_clause();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:49: ( values_clause ( static_returning_clause )? | select_statement )
			int alt305=2;
			int LA305_0 = input.LA(1);
			if ( (LA305_0==SQL92_RESERVED_VALUES) ) {
				alt305=1;
			}
			else if ( (LA305_0==SELECT_STATEMENT) ) {
				alt305=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 305, 0, input);
				throw nvae;
			}

			switch (alt305) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:50: values_clause ( static_returning_clause )?
					{
					pushFollow(FOLLOW_values_clause_in_single_table_insert8777);
					values_clause();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:64: ( static_returning_clause )?
					int alt304=2;
					int LA304_0 = input.LA(1);
					if ( (LA304_0==STATIC_RETURNING) ) {
						alt304=1;
					}
					switch (alt304) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:64: static_returning_clause
							{
							pushFollow(FOLLOW_static_returning_clause_in_single_table_insert8779);
							static_returning_clause();
							state._fsp--;

							}
							break;

					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:90: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_single_table_insert8783);
					select_statement();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:108: ( error_logging_clause )?
			int alt306=2;
			int LA306_0 = input.LA(1);
			if ( (LA306_0==LOG_VK) ) {
				alt306=1;
			}
			switch (alt306) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1098:108: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_single_table_insert8786);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "single_table_insert"



	// $ANTLR start "multi_table_insert"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1101:1: multi_table_insert : ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) ;
	public final void multi_table_insert() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1102:5: ( ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1102:10: ^( MULTI_TABLE_MODE select_statement ( conditional_insert_clause | ( multi_table_element )+ ) )
			{
			match(input,MULTI_TABLE_MODE,FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert8809); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_select_statement_in_multi_table_insert8811);
			select_statement();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1102:46: ( conditional_insert_clause | ( multi_table_element )+ )
			int alt308=2;
			int LA308_0 = input.LA(1);
			if ( (LA308_0==CONDITIONAL_INSERT) ) {
				alt308=1;
			}
			else if ( (LA308_0==TABLE_ELEMENT) ) {
				alt308=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 308, 0, input);
				throw nvae;
			}

			switch (alt308) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1102:47: conditional_insert_clause
					{
					pushFollow(FOLLOW_conditional_insert_clause_in_multi_table_insert8814);
					conditional_insert_clause();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1102:73: ( multi_table_element )+
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1102:73: ( multi_table_element )+
					int cnt307=0;
					loop307:
					while (true) {
						int alt307=2;
						int LA307_0 = input.LA(1);
						if ( (LA307_0==TABLE_ELEMENT) ) {
							alt307=1;
						}

						switch (alt307) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1102:73: multi_table_element
							{
							pushFollow(FOLLOW_multi_table_element_in_multi_table_insert8816);
							multi_table_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt307 >= 1 ) break loop307;
							EarlyExitException eee = new EarlyExitException(307, input);
							throw eee;
						}
						cnt307++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "multi_table_insert"



	// $ANTLR start "multi_table_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1105:1: multi_table_element : ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) ;
	public final void multi_table_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1106:5: ( ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1106:10: ^( TABLE_ELEMENT insert_into_clause ( values_clause )? ( error_logging_clause )? )
			{
			match(input,TABLE_ELEMENT,FOLLOW_TABLE_ELEMENT_in_multi_table_element8840); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_insert_into_clause_in_multi_table_element8842);
			insert_into_clause();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1106:45: ( values_clause )?
			int alt309=2;
			int LA309_0 = input.LA(1);
			if ( (LA309_0==SQL92_RESERVED_VALUES) ) {
				alt309=1;
			}
			switch (alt309) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1106:45: values_clause
					{
					pushFollow(FOLLOW_values_clause_in_multi_table_element8844);
					values_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1106:60: ( error_logging_clause )?
			int alt310=2;
			int LA310_0 = input.LA(1);
			if ( (LA310_0==LOG_VK) ) {
				alt310=1;
			}
			switch (alt310) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1106:60: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_multi_table_element8847);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "multi_table_element"



	// $ANTLR start "conditional_insert_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1109:1: conditional_insert_clause : ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) ;
	public final void conditional_insert_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1110:5: ( ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1110:10: ^( CONDITIONAL_INSERT ( SQL92_RESERVED_ALL | FIRST_VK )? ( conditional_insert_when_part )+ ( conditional_insert_else_part )? )
			{
			match(input,CONDITIONAL_INSERT,FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause8870); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1110:31: ( SQL92_RESERVED_ALL | FIRST_VK )?
			int alt311=2;
			int LA311_0 = input.LA(1);
			if ( (LA311_0==SQL92_RESERVED_ALL||LA311_0==FIRST_VK) ) {
				alt311=1;
			}
			switch (alt311) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==SQL92_RESERVED_ALL||input.LA(1)==FIRST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1110:62: ( conditional_insert_when_part )+
			int cnt312=0;
			loop312:
			while (true) {
				int alt312=2;
				int LA312_0 = input.LA(1);
				if ( (LA312_0==SQL92_RESERVED_WHEN) ) {
					alt312=1;
				}

				switch (alt312) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1110:62: conditional_insert_when_part
					{
					pushFollow(FOLLOW_conditional_insert_when_part_in_conditional_insert_clause8879);
					conditional_insert_when_part();
					state._fsp--;

					}
					break;

				default :
					if ( cnt312 >= 1 ) break loop312;
					EarlyExitException eee = new EarlyExitException(312, input);
					throw eee;
				}
				cnt312++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1110:92: ( conditional_insert_else_part )?
			int alt313=2;
			int LA313_0 = input.LA(1);
			if ( (LA313_0==SQL92_RESERVED_ELSE) ) {
				alt313=1;
			}
			switch (alt313) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1110:92: conditional_insert_else_part
					{
					pushFollow(FOLLOW_conditional_insert_else_part_in_conditional_insert_clause8882);
					conditional_insert_else_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "conditional_insert_clause"



	// $ANTLR start "conditional_insert_when_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1113:1: conditional_insert_when_part : ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) ;
	public final void conditional_insert_when_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1114:5: ( ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1114:10: ^( SQL92_RESERVED_WHEN expression ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part8906); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_conditional_insert_when_part8908);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1114:43: ( multi_table_element )+
			int cnt314=0;
			loop314:
			while (true) {
				int alt314=2;
				int LA314_0 = input.LA(1);
				if ( (LA314_0==TABLE_ELEMENT) ) {
					alt314=1;
				}

				switch (alt314) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1114:43: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_when_part8910);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt314 >= 1 ) break loop314;
					EarlyExitException eee = new EarlyExitException(314, input);
					throw eee;
				}
				cnt314++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "conditional_insert_when_part"



	// $ANTLR start "conditional_insert_else_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1117:1: conditional_insert_else_part : ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) ;
	public final void conditional_insert_else_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1118:5: ( ^( SQL92_RESERVED_ELSE ( multi_table_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1118:10: ^( SQL92_RESERVED_ELSE ( multi_table_element )+ )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part8933); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1118:32: ( multi_table_element )+
			int cnt315=0;
			loop315:
			while (true) {
				int alt315=2;
				int LA315_0 = input.LA(1);
				if ( (LA315_0==TABLE_ELEMENT) ) {
					alt315=1;
				}

				switch (alt315) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1118:32: multi_table_element
					{
					pushFollow(FOLLOW_multi_table_element_in_conditional_insert_else_part8935);
					multi_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt315 >= 1 ) break loop315;
					EarlyExitException eee = new EarlyExitException(315, input);
					throw eee;
				}
				cnt315++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "conditional_insert_else_part"



	// $ANTLR start "insert_into_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1121:1: insert_into_clause : ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) ) ;
	public final void insert_into_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1122:5: ( ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1122:10: ^( SQL92_RESERVED_INTO general_table_ref ^( COLUMNS ( column_name )* ) )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause8958); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_general_table_ref_in_insert_into_clause8960);
			general_table_ref();
			state._fsp--;

			match(input,COLUMNS,FOLLOW_COLUMNS_in_insert_into_clause8963); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1122:60: ( column_name )*
				loop316:
				while (true) {
					int alt316=2;
					int LA316_0 = input.LA(1);
					if ( (LA316_0==COLUMN_NAME) ) {
						alt316=1;
					}

					switch (alt316) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1122:60: column_name
						{
						pushFollow(FOLLOW_column_name_in_insert_into_clause8965);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop316;
					}
				}

				match(input, Token.UP, null); 
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "insert_into_clause"



	// $ANTLR start "values_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1125:1: values_clause : ^( SQL92_RESERVED_VALUES ( expression_list | expression ) ) ;
	public final void values_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1126:5: ( ^( SQL92_RESERVED_VALUES ( expression_list | expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1126:10: ^( SQL92_RESERVED_VALUES ( expression_list | expression ) )
			{
			match(input,SQL92_RESERVED_VALUES,FOLLOW_SQL92_RESERVED_VALUES_in_values_clause8989); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1126:34: ( expression_list | expression )
			int alt317=2;
			int LA317_0 = input.LA(1);
			if ( (LA317_0==EXPR_LIST) ) {
				alt317=1;
			}
			else if ( (LA317_0==EXPR||LA317_0==LOGIC_EXPR) ) {
				alt317=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 317, 0, input);
				throw nvae;
			}

			switch (alt317) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1126:35: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_values_clause8992);
					expression_list();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1126:51: expression
					{
					pushFollow(FOLLOW_expression_in_values_clause8994);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "values_clause"



	// $ANTLR start "merge_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1130:1: merge_statement : ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) ;
	public final void merge_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1131:5: ( ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1131:10: ^( MERGE_VK ( alias )? tableview_name ^( PLSQL_NON_RESERVED_USING selected_tableview expression ) ( merge_update_clause )? ( merge_insert_clause )? ( error_logging_clause )? )
			{
			match(input,MERGE_VK,FOLLOW_MERGE_VK_in_merge_statement9018); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1131:21: ( alias )?
			int alt318=2;
			int LA318_0 = input.LA(1);
			if ( (LA318_0==ALIAS) ) {
				alt318=1;
			}
			switch (alt318) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1131:21: alias
					{
					pushFollow(FOLLOW_alias_in_merge_statement9020);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_merge_statement9023);
			tableview_name();
			state._fsp--;

			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement9039); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_selected_tableview_in_merge_statement9041);
			selected_tableview();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_statement9043);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1133:14: ( merge_update_clause )?
			int alt319=2;
			int LA319_0 = input.LA(1);
			if ( (LA319_0==MERGE_UPDATE) ) {
				alt319=1;
			}
			switch (alt319) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1133:14: merge_update_clause
					{
					pushFollow(FOLLOW_merge_update_clause_in_merge_statement9059);
					merge_update_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1133:35: ( merge_insert_clause )?
			int alt320=2;
			int LA320_0 = input.LA(1);
			if ( (LA320_0==MERGE_INSERT) ) {
				alt320=1;
			}
			switch (alt320) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1133:35: merge_insert_clause
					{
					pushFollow(FOLLOW_merge_insert_clause_in_merge_statement9062);
					merge_insert_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1133:56: ( error_logging_clause )?
			int alt321=2;
			int LA321_0 = input.LA(1);
			if ( (LA321_0==LOG_VK) ) {
				alt321=1;
			}
			switch (alt321) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1133:56: error_logging_clause
					{
					pushFollow(FOLLOW_error_logging_clause_in_merge_statement9065);
					error_logging_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "merge_statement"



	// $ANTLR start "merge_update_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1138:1: merge_update_clause : ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) ;
	public final void merge_update_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1139:5: ( ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1139:10: ^( MERGE_UPDATE ( merge_element )+ ( where_clause )? ( merge_update_delete_part )? )
			{
			match(input,MERGE_UPDATE,FOLLOW_MERGE_UPDATE_in_merge_update_clause9090); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1139:25: ( merge_element )+
			int cnt322=0;
			loop322:
			while (true) {
				int alt322=2;
				int LA322_0 = input.LA(1);
				if ( (LA322_0==ASSIGN) ) {
					alt322=1;
				}

				switch (alt322) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1139:25: merge_element
					{
					pushFollow(FOLLOW_merge_element_in_merge_update_clause9092);
					merge_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt322 >= 1 ) break loop322;
					EarlyExitException eee = new EarlyExitException(322, input);
					throw eee;
				}
				cnt322++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1139:40: ( where_clause )?
			int alt323=2;
			int LA323_0 = input.LA(1);
			if ( (LA323_0==SQL92_RESERVED_WHERE) ) {
				alt323=1;
			}
			switch (alt323) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1139:40: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_update_clause9095);
					where_clause();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1139:54: ( merge_update_delete_part )?
			int alt324=2;
			int LA324_0 = input.LA(1);
			if ( (LA324_0==SQL92_RESERVED_DELETE) ) {
				alt324=1;
			}
			switch (alt324) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1139:54: merge_update_delete_part
					{
					pushFollow(FOLLOW_merge_update_delete_part_in_merge_update_clause9098);
					merge_update_delete_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "merge_update_clause"



	// $ANTLR start "merge_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1142:1: merge_element : ^( ASSIGN column_name expression ) ;
	public final void merge_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1143:5: ( ^( ASSIGN column_name expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1143:10: ^( ASSIGN column_name expression )
			{
			match(input,ASSIGN,FOLLOW_ASSIGN_in_merge_element9121); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_column_name_in_merge_element9123);
			column_name();
			state._fsp--;

			pushFollow(FOLLOW_expression_in_merge_element9125);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "merge_element"



	// $ANTLR start "merge_update_delete_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1146:1: merge_update_delete_part : ^( SQL92_RESERVED_DELETE where_clause ) ;
	public final void merge_update_delete_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1147:5: ( ^( SQL92_RESERVED_DELETE where_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1147:10: ^( SQL92_RESERVED_DELETE where_clause )
			{
			match(input,SQL92_RESERVED_DELETE,FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part9147); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_where_clause_in_merge_update_delete_part9149);
			where_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "merge_update_delete_part"



	// $ANTLR start "merge_insert_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1150:1: merge_insert_clause : ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) ;
	public final void merge_insert_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1151:5: ( ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1151:10: ^( MERGE_INSERT ^( COLUMNS ( column_name )* ) expression_list ( where_clause )? )
			{
			match(input,MERGE_INSERT,FOLLOW_MERGE_INSERT_in_merge_insert_clause9171); 
			match(input, Token.DOWN, null); 
			match(input,COLUMNS,FOLLOW_COLUMNS_in_merge_insert_clause9174); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1151:35: ( column_name )*
				loop325:
				while (true) {
					int alt325=2;
					int LA325_0 = input.LA(1);
					if ( (LA325_0==COLUMN_NAME) ) {
						alt325=1;
					}

					switch (alt325) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1151:35: column_name
						{
						pushFollow(FOLLOW_column_name_in_merge_insert_clause9176);
						column_name();
						state._fsp--;

						}
						break;

					default :
						break loop325;
					}
				}

				match(input, Token.UP, null); 
			}

			pushFollow(FOLLOW_expression_list_in_merge_insert_clause9180);
			expression_list();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1151:65: ( where_clause )?
			int alt326=2;
			int LA326_0 = input.LA(1);
			if ( (LA326_0==SQL92_RESERVED_WHERE) ) {
				alt326=1;
			}
			switch (alt326) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1151:65: where_clause
					{
					pushFollow(FOLLOW_where_clause_in_merge_insert_clause9182);
					where_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "merge_insert_clause"



	// $ANTLR start "selected_tableview"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1154:1: selected_tableview : ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) ) ;
	public final void selected_tableview() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1155:5: ( ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1155:10: ^( SELECTED_TABLEVIEW ( alias )? ( tableview_name | subquery ) )
			{
			match(input,SELECTED_TABLEVIEW,FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview9206); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1155:31: ( alias )?
			int alt327=2;
			int LA327_0 = input.LA(1);
			if ( (LA327_0==ALIAS) ) {
				alt327=1;
			}
			switch (alt327) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1155:31: alias
					{
					pushFollow(FOLLOW_alias_in_selected_tableview9208);
					alias();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1155:38: ( tableview_name | subquery )
			int alt328=2;
			int LA328_0 = input.LA(1);
			if ( (LA328_0==TABLEVIEW_NAME) ) {
				alt328=1;
			}
			else if ( (LA328_0==SUBQUERY) ) {
				alt328=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 328, 0, input);
				throw nvae;
			}

			switch (alt328) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1155:39: tableview_name
					{
					pushFollow(FOLLOW_tableview_name_in_selected_tableview9212);
					tableview_name();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1155:54: subquery
					{
					pushFollow(FOLLOW_subquery_in_selected_tableview9214);
					subquery();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "selected_tableview"



	// $ANTLR start "lock_table_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1160:1: lock_table_statement : ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) ;
	public final void lock_table_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1161:5: ( ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1161:10: ^( PLSQL_RESERVED_LOCK ( lock_table_element )+ lock_mode ( wait_nowait_part )? )
			{
			match(input,PLSQL_RESERVED_LOCK,FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement9239); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1161:32: ( lock_table_element )+
			int cnt329=0;
			loop329:
			while (true) {
				int alt329=2;
				int LA329_0 = input.LA(1);
				if ( (LA329_0==LOCK_TABLE_ELEMENT) ) {
					alt329=1;
				}

				switch (alt329) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1161:32: lock_table_element
					{
					pushFollow(FOLLOW_lock_table_element_in_lock_table_statement9241);
					lock_table_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt329 >= 1 ) break loop329;
					EarlyExitException eee = new EarlyExitException(329, input);
					throw eee;
				}
				cnt329++;
			}

			pushFollow(FOLLOW_lock_mode_in_lock_table_statement9244);
			lock_mode();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1161:62: ( wait_nowait_part )?
			int alt330=2;
			int LA330_0 = input.LA(1);
			if ( (LA330_0==PLSQL_RESERVED_NOWAIT||LA330_0==WAIT_VK) ) {
				alt330=1;
			}
			switch (alt330) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1161:62: wait_nowait_part
					{
					pushFollow(FOLLOW_wait_nowait_part_in_lock_table_statement9246);
					wait_nowait_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "lock_table_statement"



	// $ANTLR start "wait_nowait_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1164:1: wait_nowait_part : ( ^( WAIT_VK expression ) | PLSQL_RESERVED_NOWAIT );
	public final void wait_nowait_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1165:5: ( ^( WAIT_VK expression ) | PLSQL_RESERVED_NOWAIT )
			int alt331=2;
			int LA331_0 = input.LA(1);
			if ( (LA331_0==WAIT_VK) ) {
				alt331=1;
			}
			else if ( (LA331_0==PLSQL_RESERVED_NOWAIT) ) {
				alt331=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 331, 0, input);
				throw nvae;
			}

			switch (alt331) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1165:10: ^( WAIT_VK expression )
					{
					match(input,WAIT_VK,FOLLOW_WAIT_VK_in_wait_nowait_part9269); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_wait_nowait_part9271);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1166:10: PLSQL_RESERVED_NOWAIT
					{
					match(input,PLSQL_RESERVED_NOWAIT,FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part9283); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "wait_nowait_part"



	// $ANTLR start "lock_table_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1171:1: lock_table_element : ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) ;
	public final void lock_table_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1172:5: ( ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1172:10: ^( LOCK_TABLE_ELEMENT tableview_name ( partition_extension_clause )? )
			{
			match(input,LOCK_TABLE_ELEMENT,FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element9306); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_lock_table_element9308);
			tableview_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1172:46: ( partition_extension_clause )?
			int alt332=2;
			int LA332_0 = input.LA(1);
			if ( (LA332_0==PARTITION_VK||LA332_0==SUBPARTITION_VK) ) {
				alt332=1;
			}
			switch (alt332) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1172:46: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_lock_table_element9310);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "lock_table_element"



	// $ANTLR start "lock_mode"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1175:1: lock_mode : ( ROW_VK PLSQL_RESERVED_SHARE | ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? | PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_EXCLUSIVE );
	public final void lock_mode() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1176:5: ( ROW_VK PLSQL_RESERVED_SHARE | ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )? | PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE | PLSQL_RESERVED_EXCLUSIVE )
			int alt334=5;
			switch ( input.LA(1) ) {
			case ROW_VK:
				{
				int LA334_1 = input.LA(2);
				if ( (LA334_1==PLSQL_RESERVED_SHARE) ) {
					alt334=1;
				}
				else if ( (LA334_1==PLSQL_RESERVED_EXCLUSIVE) ) {
					alt334=2;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 334, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_SHARE:
				{
				int LA334_2 = input.LA(2);
				if ( (LA334_2==ROW_VK) ) {
					alt334=4;
				}
				else if ( (LA334_2==UP||LA334_2==PLSQL_RESERVED_NOWAIT||LA334_2==SQL92_RESERVED_UPDATE||LA334_2==WAIT_VK) ) {
					alt334=3;
				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 334, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_RESERVED_EXCLUSIVE:
				{
				alt334=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 334, 0, input);
				throw nvae;
			}
			switch (alt334) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1176:10: ROW_VK PLSQL_RESERVED_SHARE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9332); 
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9334); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1177:10: ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9345); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9347); 
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1178:10: PLSQL_RESERVED_SHARE ( SQL92_RESERVED_UPDATE )?
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9358); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1178:31: ( SQL92_RESERVED_UPDATE )?
					int alt333=2;
					int LA333_0 = input.LA(1);
					if ( (LA333_0==SQL92_RESERVED_UPDATE) ) {
						alt333=1;
					}
					switch (alt333) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1178:31: SQL92_RESERVED_UPDATE
							{
							match(input,SQL92_RESERVED_UPDATE,FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode9360); 
							}
							break;

					}

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1179:10: PLSQL_RESERVED_SHARE ROW_VK PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_SHARE,FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9372); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_lock_mode9374); 
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9376); 
					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1180:10: PLSQL_RESERVED_EXCLUSIVE
					{
					match(input,PLSQL_RESERVED_EXCLUSIVE,FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9387); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "lock_mode"



	// $ANTLR start "general_table_ref"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1186:1: general_table_ref : ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) ;
	public final void general_table_ref() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1187:5: ( ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1187:10: ^( TABLE_REF ( alias )? dml_table_expression_clause ( ONLY_VK )? )
			{
			match(input,TABLE_REF,FOLLOW_TABLE_REF_in_general_table_ref9411); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1187:22: ( alias )?
			int alt335=2;
			int LA335_0 = input.LA(1);
			if ( (LA335_0==ALIAS) ) {
				alt335=1;
			}
			switch (alt335) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1187:22: alias
					{
					pushFollow(FOLLOW_alias_in_general_table_ref9413);
					alias();
					state._fsp--;

					}
					break;

			}

			pushFollow(FOLLOW_dml_table_expression_clause_in_general_table_ref9416);
			dml_table_expression_clause();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1187:57: ( ONLY_VK )?
			int alt336=2;
			int LA336_0 = input.LA(1);
			if ( (LA336_0==ONLY_VK) ) {
				alt336=1;
			}
			switch (alt336) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1187:57: ONLY_VK
					{
					match(input,ONLY_VK,FOLLOW_ONLY_VK_in_general_table_ref9418); 
					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "general_table_ref"



	// $ANTLR start "static_returning_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1190:1: static_returning_clause : ^( STATIC_RETURNING ( expression )+ into_clause ) ;
	public final void static_returning_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1191:5: ( ^( STATIC_RETURNING ( expression )+ into_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1191:10: ^( STATIC_RETURNING ( expression )+ into_clause )
			{
			match(input,STATIC_RETURNING,FOLLOW_STATIC_RETURNING_in_static_returning_clause9441); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1191:29: ( expression )+
			int cnt337=0;
			loop337:
			while (true) {
				int alt337=2;
				int LA337_0 = input.LA(1);
				if ( (LA337_0==EXPR||LA337_0==LOGIC_EXPR) ) {
					alt337=1;
				}

				switch (alt337) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1191:29: expression
					{
					pushFollow(FOLLOW_expression_in_static_returning_clause9443);
					expression();
					state._fsp--;

					}
					break;

				default :
					if ( cnt337 >= 1 ) break loop337;
					EarlyExitException eee = new EarlyExitException(337, input);
					throw eee;
				}
				cnt337++;
			}

			pushFollow(FOLLOW_into_clause_in_static_returning_clause9446);
			into_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "static_returning_clause"



	// $ANTLR start "error_logging_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1194:1: error_logging_clause : ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) ;
	public final void error_logging_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1195:5: ( ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1195:10: ^( LOG_VK ( error_logging_into_part )? ( expression )? ( error_logging_reject_part )? )
			{
			match(input,LOG_VK,FOLLOW_LOG_VK_in_error_logging_clause9468); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1195:19: ( error_logging_into_part )?
				int alt338=2;
				int LA338_0 = input.LA(1);
				if ( (LA338_0==SQL92_RESERVED_INTO) ) {
					alt338=1;
				}
				switch (alt338) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1195:19: error_logging_into_part
						{
						pushFollow(FOLLOW_error_logging_into_part_in_error_logging_clause9470);
						error_logging_into_part();
						state._fsp--;

						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1195:44: ( expression )?
				int alt339=2;
				int LA339_0 = input.LA(1);
				if ( (LA339_0==EXPR||LA339_0==LOGIC_EXPR) ) {
					alt339=1;
				}
				switch (alt339) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1195:44: expression
						{
						pushFollow(FOLLOW_expression_in_error_logging_clause9473);
						expression();
						state._fsp--;

						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1195:56: ( error_logging_reject_part )?
				int alt340=2;
				int LA340_0 = input.LA(1);
				if ( (LA340_0==REJECT_VK) ) {
					alt340=1;
				}
				switch (alt340) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1195:56: error_logging_reject_part
						{
						pushFollow(FOLLOW_error_logging_reject_part_in_error_logging_clause9476);
						error_logging_reject_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "error_logging_clause"



	// $ANTLR start "error_logging_into_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1198:1: error_logging_into_part : ^( SQL92_RESERVED_INTO tableview_name ) ;
	public final void error_logging_into_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1199:5: ( ^( SQL92_RESERVED_INTO tableview_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1199:10: ^( SQL92_RESERVED_INTO tableview_name )
			{
			match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part9499); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_tableview_name_in_error_logging_into_part9501);
			tableview_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "error_logging_into_part"



	// $ANTLR start "error_logging_reject_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1202:1: error_logging_reject_part : ^( REJECT_VK ( UNLIMITED_VK | expression ) ) ;
	public final void error_logging_reject_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1203:5: ( ^( REJECT_VK ( UNLIMITED_VK | expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1203:10: ^( REJECT_VK ( UNLIMITED_VK | expression ) )
			{
			match(input,REJECT_VK,FOLLOW_REJECT_VK_in_error_logging_reject_part9523); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1203:22: ( UNLIMITED_VK | expression )
			int alt341=2;
			int LA341_0 = input.LA(1);
			if ( (LA341_0==UNLIMITED_VK) ) {
				alt341=1;
			}
			else if ( (LA341_0==EXPR||LA341_0==LOGIC_EXPR) ) {
				alt341=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 341, 0, input);
				throw nvae;
			}

			switch (alt341) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1203:23: UNLIMITED_VK
					{
					match(input,UNLIMITED_VK,FOLLOW_UNLIMITED_VK_in_error_logging_reject_part9526); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1203:36: expression
					{
					pushFollow(FOLLOW_expression_in_error_logging_reject_part9528);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "error_logging_reject_part"



	// $ANTLR start "dml_table_expression_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1206:1: dml_table_expression_clause : ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) | general_element ) ) | table_ref );
	public final void dml_table_expression_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1207:5: ( ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) | general_element ) ) | table_ref )
			int alt346=2;
			int LA346_0 = input.LA(1);
			if ( (LA346_0==TABLE_EXPRESSION) ) {
				alt346=1;
			}
			else if ( (LA346_0==TABLE_REF) ) {
				alt346=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 346, 0, input);
				throw nvae;
			}

			switch (alt346) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1207:10: ^( TABLE_EXPRESSION ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) | general_element ) )
					{
					match(input,TABLE_EXPRESSION,FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause9551); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1208:9: ( ^( COLLECTION_MODE expression ( PLUS_SIGN )? ) | ^( SELECT_MODE select_statement ( subquery_restriction_clause )? ) | ^( DIRECT_MODE tableview_name ( sample_clause )? ) | general_element )
					int alt345=4;
					switch ( input.LA(1) ) {
					case COLLECTION_MODE:
						{
						alt345=1;
						}
						break;
					case SELECT_MODE:
						{
						alt345=2;
						}
						break;
					case DIRECT_MODE:
						{
						alt345=3;
						}
						break;
					case ANY_ELEMENT:
					case CASCATED_ELEMENT:
					case HOSTED_VARIABLE:
					case HOSTED_VARIABLE_ROUTINE_CALL:
					case ROUTINE_CALL:
						{
						alt345=4;
						}
						break;
					default:
						NoViableAltException nvae =
							new NoViableAltException("", 345, 0, input);
						throw nvae;
					}
					switch (alt345) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1208:14: ^( COLLECTION_MODE expression ( PLUS_SIGN )? )
							{
							match(input,COLLECTION_MODE,FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause9568); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_expression_in_dml_table_expression_clause9570);
							expression();
							state._fsp--;

							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1208:43: ( PLUS_SIGN )?
							int alt342=2;
							int LA342_0 = input.LA(1);
							if ( (LA342_0==PLUS_SIGN) ) {
								alt342=1;
							}
							switch (alt342) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1208:43: PLUS_SIGN
									{
									match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_dml_table_expression_clause9572); 
									}
									break;

							}

							match(input, Token.UP, null); 

							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1209:14: ^( SELECT_MODE select_statement ( subquery_restriction_clause )? )
							{
							match(input,SELECT_MODE,FOLLOW_SELECT_MODE_in_dml_table_expression_clause9590); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_select_statement_in_dml_table_expression_clause9592);
							select_statement();
							state._fsp--;

							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1209:45: ( subquery_restriction_clause )?
							int alt343=2;
							int LA343_0 = input.LA(1);
							if ( (LA343_0==SQL92_RESERVED_WITH) ) {
								alt343=1;
							}
							switch (alt343) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1209:45: subquery_restriction_clause
									{
									pushFollow(FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause9594);
									subquery_restriction_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							}
							break;
						case 3 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1210:14: ^( DIRECT_MODE tableview_name ( sample_clause )? )
							{
							match(input,DIRECT_MODE,FOLLOW_DIRECT_MODE_in_dml_table_expression_clause9612); 
							match(input, Token.DOWN, null); 
							pushFollow(FOLLOW_tableview_name_in_dml_table_expression_clause9614);
							tableview_name();
							state._fsp--;

							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1210:43: ( sample_clause )?
							int alt344=2;
							int LA344_0 = input.LA(1);
							if ( (LA344_0==SAMPLE_VK) ) {
								alt344=1;
							}
							switch (alt344) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1210:43: sample_clause
									{
									pushFollow(FOLLOW_sample_clause_in_dml_table_expression_clause9616);
									sample_clause();
									state._fsp--;

									}
									break;

							}

							match(input, Token.UP, null); 

							}
							break;
						case 4 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1211:14: general_element
							{
							pushFollow(FOLLOW_general_element_in_dml_table_expression_clause9633);
							general_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1214:14: table_ref
					{
					pushFollow(FOLLOW_table_ref_in_dml_table_expression_clause9668);
					table_ref();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "dml_table_expression_clause"



	// $ANTLR start "subquery_restriction_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1217:1: subquery_restriction_clause : ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) ;
	public final void subquery_restriction_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1218:5: ( ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1218:10: ^( SQL92_RESERVED_WITH ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? ) )
			{
			match(input,SQL92_RESERVED_WITH,FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause9689); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1218:32: ( READ_VK | SQL92_RESERVED_CHECK ( constraint_name )? )
			int alt348=2;
			int LA348_0 = input.LA(1);
			if ( (LA348_0==READ_VK) ) {
				alt348=1;
			}
			else if ( (LA348_0==SQL92_RESERVED_CHECK) ) {
				alt348=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 348, 0, input);
				throw nvae;
			}

			switch (alt348) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1218:33: READ_VK
					{
					match(input,READ_VK,FOLLOW_READ_VK_in_subquery_restriction_clause9692); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1218:41: SQL92_RESERVED_CHECK ( constraint_name )?
					{
					match(input,SQL92_RESERVED_CHECK,FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause9694); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1218:62: ( constraint_name )?
					int alt347=2;
					int LA347_0 = input.LA(1);
					if ( (LA347_0==CONSTRAINT_NAME) ) {
						alt347=1;
					}
					switch (alt347) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1218:62: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_subquery_restriction_clause9696);
							constraint_name();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "subquery_restriction_clause"



	// $ANTLR start "sample_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1221:1: sample_clause : ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) ;
	public final void sample_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1222:5: ( ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1222:10: ^( SAMPLE_VK ( BLOCK_VK )? expression ( seed_part )? )
			{
			match(input,SAMPLE_VK,FOLLOW_SAMPLE_VK_in_sample_clause9720); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1222:22: ( BLOCK_VK )?
			int alt349=2;
			int LA349_0 = input.LA(1);
			if ( (LA349_0==BLOCK_VK) ) {
				alt349=1;
			}
			switch (alt349) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1222:22: BLOCK_VK
					{
					match(input,BLOCK_VK,FOLLOW_BLOCK_VK_in_sample_clause9722); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_sample_clause9725);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1222:43: ( seed_part )?
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==SEED_VK) ) {
				alt350=1;
			}
			switch (alt350) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1222:43: seed_part
					{
					pushFollow(FOLLOW_seed_part_in_sample_clause9727);
					seed_part();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "sample_clause"



	// $ANTLR start "seed_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1225:1: seed_part : ^( SEED_VK expression ) ;
	public final void seed_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1226:5: ( ^( SEED_VK expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1226:10: ^( SEED_VK expression )
			{
			match(input,SEED_VK,FOLLOW_SEED_VK_in_seed_part9751); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_seed_part9753);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "seed_part"



	// $ANTLR start "cursor_manipulation_statements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1235:1: cursor_manipulation_statements : ( close_statement | open_statement | fetch_statement | open_for_statement );
	public final void cursor_manipulation_statements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1236:5: ( close_statement | open_statement | fetch_statement | open_for_statement )
			int alt351=4;
			switch ( input.LA(1) ) {
			case CLOSE_VK:
				{
				alt351=1;
				}
				break;
			case OPEN_VK:
				{
				int LA351_2 = input.LA(2);
				if ( (LA351_2==DOWN) ) {
					int LA351_4 = input.LA(3);
					if ( (LA351_4==CURSOR_NAME) ) {
						alt351=2;
					}
					else if ( (LA351_4==HOSTED_VARIABLE_NAME||LA351_4==VARIABLE_NAME) ) {
						alt351=4;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 351, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 351, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_FETCH:
				{
				alt351=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 351, 0, input);
				throw nvae;
			}
			switch (alt351) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1236:10: close_statement
					{
					pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements9780);
					close_statement();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1237:10: open_statement
					{
					pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements9791);
					open_statement();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1238:10: fetch_statement
					{
					pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements9802);
					fetch_statement();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1239:10: open_for_statement
					{
					pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements9813);
					open_for_statement();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "cursor_manipulation_statements"



	// $ANTLR start "close_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1242:1: close_statement : ^( CLOSE_VK variable_name ) ;
	public final void close_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1243:5: ( ^( CLOSE_VK variable_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1243:11: ^( CLOSE_VK variable_name )
			{
			match(input,CLOSE_VK,FOLLOW_CLOSE_VK_in_close_statement9835); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_close_statement9837);
			variable_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "close_statement"



	// $ANTLR start "open_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1246:1: open_statement : ^( OPEN_VK cursor_name ( expression_list )? ) ;
	public final void open_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1247:5: ( ^( OPEN_VK cursor_name ( expression_list )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1247:10: ^( OPEN_VK cursor_name ( expression_list )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_statement9860); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_open_statement9862);
			cursor_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1247:32: ( expression_list )?
			int alt352=2;
			int LA352_0 = input.LA(1);
			if ( (LA352_0==EXPR_LIST) ) {
				alt352=1;
			}
			switch (alt352) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1247:32: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_open_statement9864);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "open_statement"



	// $ANTLR start "fetch_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1250:1: fetch_statement : ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) ;
	public final void fetch_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1251:5: ( ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1251:10: ^( SQL92_RESERVED_FETCH cursor_name ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) ) )
			{
			match(input,SQL92_RESERVED_FETCH,FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement9887); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_cursor_name_in_fetch_statement9889);
			cursor_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1252:13: ( ^( SQL92_RESERVED_INTO ( variable_name )+ ) | ^( BULK_VK ( variable_name )+ ) )
			int alt355=2;
			int LA355_0 = input.LA(1);
			if ( (LA355_0==SQL92_RESERVED_INTO) ) {
				alt355=1;
			}
			else if ( (LA355_0==BULK_VK) ) {
				alt355=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 355, 0, input);
				throw nvae;
			}

			switch (alt355) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1252:18: ^( SQL92_RESERVED_INTO ( variable_name )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement9910); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1252:40: ( variable_name )+
					int cnt353=0;
					loop353:
					while (true) {
						int alt353=2;
						int LA353_0 = input.LA(1);
						if ( (LA353_0==HOSTED_VARIABLE_NAME||LA353_0==VARIABLE_NAME) ) {
							alt353=1;
						}

						switch (alt353) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1252:40: variable_name
							{
							pushFollow(FOLLOW_variable_name_in_fetch_statement9912);
							variable_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt353 >= 1 ) break loop353;
							EarlyExitException eee = new EarlyExitException(353, input);
							throw eee;
						}
						cnt353++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1253:18: ^( BULK_VK ( variable_name )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_fetch_statement9934); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1253:28: ( variable_name )+
					int cnt354=0;
					loop354:
					while (true) {
						int alt354=2;
						int LA354_0 = input.LA(1);
						if ( (LA354_0==HOSTED_VARIABLE_NAME||LA354_0==VARIABLE_NAME) ) {
							alt354=1;
						}

						switch (alt354) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1253:28: variable_name
							{
							pushFollow(FOLLOW_variable_name_in_fetch_statement9936);
							variable_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt354 >= 1 ) break loop354;
							EarlyExitException eee = new EarlyExitException(354, input);
							throw eee;
						}
						cnt354++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "fetch_statement"



	// $ANTLR start "open_for_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1258:1: open_for_statement : ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) ;
	public final void open_for_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1259:5: ( ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1259:10: ^( OPEN_VK variable_name ( expression | select_statement ) ( using_clause )? )
			{
			match(input,OPEN_VK,FOLLOW_OPEN_VK_in_open_for_statement9983); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_variable_name_in_open_for_statement9985);
			variable_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1259:34: ( expression | select_statement )
			int alt356=2;
			int LA356_0 = input.LA(1);
			if ( (LA356_0==EXPR||LA356_0==LOGIC_EXPR) ) {
				alt356=1;
			}
			else if ( (LA356_0==SELECT_STATEMENT) ) {
				alt356=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 356, 0, input);
				throw nvae;
			}

			switch (alt356) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1259:35: expression
					{
					pushFollow(FOLLOW_expression_in_open_for_statement9988);
					expression();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1259:46: select_statement
					{
					pushFollow(FOLLOW_select_statement_in_open_for_statement9990);
					select_statement();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1259:64: ( using_clause )?
			int alt357=2;
			int LA357_0 = input.LA(1);
			if ( (LA357_0==PLSQL_NON_RESERVED_USING) ) {
				alt357=1;
			}
			switch (alt357) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1259:64: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_open_for_statement9993);
					using_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "open_for_statement"



	// $ANTLR start "transaction_control_statements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1266:1: transaction_control_statements : ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement );
	public final void transaction_control_statements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1267:5: ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement )
			int alt358=5;
			switch ( input.LA(1) ) {
			case SET_TRANSACTION:
				{
				alt358=1;
				}
				break;
			case SET_CONSTRAINT:
				{
				alt358=2;
				}
				break;
			case COMMIT_VK:
				{
				alt358=3;
				}
				break;
			case ROLLBACK_VK:
				{
				alt358=4;
				}
				break;
			case SAVEPOINT_VK:
				{
				alt358=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 358, 0, input);
				throw nvae;
			}
			switch (alt358) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1267:10: set_transaction_command
					{
					pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements10019);
					set_transaction_command();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1268:10: set_constraint_command
					{
					pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements10030);
					set_constraint_command();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1269:10: commit_statement
					{
					pushFollow(FOLLOW_commit_statement_in_transaction_control_statements10041);
					commit_statement();
					state._fsp--;

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1270:10: rollback_statement
					{
					pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements10052);
					rollback_statement();
					state._fsp--;

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1271:10: savepoint_statement
					{
					pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements10063);
					savepoint_statement();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "transaction_control_statements"



	// $ANTLR start "set_transaction_command"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1274:1: set_transaction_command : ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) ;
	public final void set_transaction_command() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1275:5: ( ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1275:10: ^( SET_TRANSACTION ( CHAR_STRING )? ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )? )
			{
			match(input,SET_TRANSACTION,FOLLOW_SET_TRANSACTION_in_set_transaction_command10084); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1275:28: ( CHAR_STRING )?
				int alt359=2;
				int LA359_0 = input.LA(1);
				if ( (LA359_0==CHAR_STRING) ) {
					alt359=1;
				}
				switch (alt359) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1275:28: CHAR_STRING
						{
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_set_transaction_command10086); 
						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1276:13: ( ^( READ_VK ( ONLY_VK | WRITE_VK ) ) | ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) ) | ^( ROLLBACK_VK rollback_segment_name ) )?
				int alt360=4;
				switch ( input.LA(1) ) {
					case READ_VK:
						{
						alt360=1;
						}
						break;
					case ISOLATION_VK:
						{
						alt360=2;
						}
						break;
					case ROLLBACK_VK:
						{
						alt360=3;
						}
						break;
				}
				switch (alt360) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1276:18: ^( READ_VK ( ONLY_VK | WRITE_VK ) )
						{
						match(input,READ_VK,FOLLOW_READ_VK_in_set_transaction_command10107); 
						match(input, Token.DOWN, null); 
						if ( input.LA(1)==ONLY_VK||input.LA(1)==WRITE_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1277:18: ^( ISOLATION_VK ( SERIALIZABLE_VK | COMMITTED_VK ) )
						{
						match(input,ISOLATION_VK,FOLLOW_ISOLATION_VK_in_set_transaction_command10134); 
						match(input, Token.DOWN, null); 
						if ( input.LA(1)==COMMITTED_VK||input.LA(1)==SERIALIZABLE_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						match(input, Token.UP, null); 

						}
						break;
					case 3 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1278:18: ^( ROLLBACK_VK rollback_segment_name )
						{
						match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_set_transaction_command10161); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command10163);
						rollback_segment_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "set_transaction_command"



	// $ANTLR start "set_constraint_command"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1283:1: set_constraint_command : ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) ;
	public final void set_constraint_command() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1284:5: ( ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1284:10: ^( SET_CONSTRAINT ( SQL92_RESERVED_ALL | ( constraint_name )+ ) ( IMMEDIATE_VK | DEFERRED_VK ) )
			{
			match(input,SET_CONSTRAINT,FOLLOW_SET_CONSTRAINT_in_set_constraint_command10210); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1284:27: ( SQL92_RESERVED_ALL | ( constraint_name )+ )
			int alt362=2;
			int LA362_0 = input.LA(1);
			if ( (LA362_0==SQL92_RESERVED_ALL) ) {
				alt362=1;
			}
			else if ( (LA362_0==CONSTRAINT_NAME) ) {
				alt362=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 362, 0, input);
				throw nvae;
			}

			switch (alt362) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1284:28: SQL92_RESERVED_ALL
					{
					match(input,SQL92_RESERVED_ALL,FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command10213); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1284:47: ( constraint_name )+
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1284:47: ( constraint_name )+
					int cnt361=0;
					loop361:
					while (true) {
						int alt361=2;
						int LA361_0 = input.LA(1);
						if ( (LA361_0==CONSTRAINT_NAME) ) {
							alt361=1;
						}

						switch (alt361) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1284:47: constraint_name
							{
							pushFollow(FOLLOW_constraint_name_in_set_constraint_command10215);
							constraint_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt361 >= 1 ) break loop361;
							EarlyExitException eee = new EarlyExitException(361, input);
							throw eee;
						}
						cnt361++;
					}

					}
					break;

			}

			if ( input.LA(1)==DEFERRED_VK||input.LA(1)==IMMEDIATE_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "set_constraint_command"



	// $ANTLR start "commit_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1287:1: commit_statement : ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) ;
	public final void commit_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1288:5: ( ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1288:11: ^( COMMIT_VK ( WORK_VK )? ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )? ( write_clause )? )
			{
			match(input,COMMIT_VK,FOLLOW_COMMIT_VK_in_commit_statement10246); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1288:23: ( WORK_VK )?
				int alt363=2;
				int LA363_0 = input.LA(1);
				if ( (LA363_0==WORK_VK) ) {
					alt363=1;
				}
				switch (alt363) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1288:23: WORK_VK
						{
						match(input,WORK_VK,FOLLOW_WORK_VK_in_commit_statement10248); 
						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1289:13: ( ^( COMMENT_VK expression ) | ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) ) )?
				int alt366=3;
				int LA366_0 = input.LA(1);
				if ( (LA366_0==COMMENT_VK) ) {
					alt366=1;
				}
				else if ( (LA366_0==FORCE_VK) ) {
					alt366=2;
				}
				switch (alt366) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1289:18: ^( COMMENT_VK expression )
						{
						match(input,COMMENT_VK,FOLLOW_COMMENT_VK_in_commit_statement10270); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_expression_in_commit_statement10272);
						expression();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1290:18: ^( FORCE_VK ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? ) )
						{
						match(input,FORCE_VK,FOLLOW_FORCE_VK_in_commit_statement10293); 
						match(input, Token.DOWN, null); 
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1290:29: ( CORRUPT_XID_VK expression | CORRUPT_XID_ALL_VK | expression ( expression )? )
						int alt365=3;
						switch ( input.LA(1) ) {
						case CORRUPT_XID_VK:
							{
							alt365=1;
							}
							break;
						case CORRUPT_XID_ALL_VK:
							{
							alt365=2;
							}
							break;
						case EXPR:
						case LOGIC_EXPR:
							{
							alt365=3;
							}
							break;
						default:
							NoViableAltException nvae =
								new NoViableAltException("", 365, 0, input);
							throw nvae;
						}
						switch (alt365) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1290:30: CORRUPT_XID_VK expression
								{
								match(input,CORRUPT_XID_VK,FOLLOW_CORRUPT_XID_VK_in_commit_statement10296); 
								pushFollow(FOLLOW_expression_in_commit_statement10298);
								expression();
								state._fsp--;

								}
								break;
							case 2 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1290:56: CORRUPT_XID_ALL_VK
								{
								match(input,CORRUPT_XID_ALL_VK,FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement10300); 
								}
								break;
							case 3 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1290:75: expression ( expression )?
								{
								pushFollow(FOLLOW_expression_in_commit_statement10302);
								expression();
								state._fsp--;

								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1290:86: ( expression )?
								int alt364=2;
								int LA364_0 = input.LA(1);
								if ( (LA364_0==EXPR||LA364_0==LOGIC_EXPR) ) {
									alt364=1;
								}
								switch (alt364) {
									case 1 :
										// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1290:86: expression
										{
										pushFollow(FOLLOW_expression_in_commit_statement10304);
										expression();
										state._fsp--;

										}
										break;

								}

								}
								break;

						}

						match(input, Token.UP, null); 

						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1292:13: ( write_clause )?
				int alt367=2;
				int LA367_0 = input.LA(1);
				if ( (LA367_0==WRITE_VK) ) {
					alt367=1;
				}
				switch (alt367) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1292:13: write_clause
						{
						pushFollow(FOLLOW_write_clause_in_commit_statement10336);
						write_clause();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "commit_statement"



	// $ANTLR start "write_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1296:1: write_clause : ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) ;
	public final void write_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1297:5: ( ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1297:10: ^( WRITE_VK ( WAIT_VK | PLSQL_RESERVED_NOWAIT )? ( IMMEDIATE_VK | BATCH_VK )? )
			{
			match(input,WRITE_VK,FOLLOW_WRITE_VK_in_write_clause10368); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1297:21: ( WAIT_VK | PLSQL_RESERVED_NOWAIT )?
				int alt368=2;
				int LA368_0 = input.LA(1);
				if ( (LA368_0==PLSQL_RESERVED_NOWAIT||LA368_0==WAIT_VK) ) {
					alt368=1;
				}
				switch (alt368) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
						{
						if ( input.LA(1)==PLSQL_RESERVED_NOWAIT||input.LA(1)==WAIT_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1297:54: ( IMMEDIATE_VK | BATCH_VK )?
				int alt369=2;
				int LA369_0 = input.LA(1);
				if ( (LA369_0==BATCH_VK||LA369_0==IMMEDIATE_VK) ) {
					alt369=1;
				}
				switch (alt369) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
						{
						if ( input.LA(1)==BATCH_VK||input.LA(1)==IMMEDIATE_VK ) {
							input.consume();
							state.errorRecovery=false;
						}
						else {
							MismatchedSetException mse = new MismatchedSetException(null,input);
							throw mse;
						}
						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "write_clause"



	// $ANTLR start "rollback_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1300:1: rollback_statement : ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) ;
	public final void rollback_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1301:5: ( ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1301:11: ^( ROLLBACK_VK ( WORK_VK )? ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )? )
			{
			match(input,ROLLBACK_VK,FOLLOW_ROLLBACK_VK_in_rollback_statement10405); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1301:25: ( WORK_VK )?
				int alt370=2;
				int LA370_0 = input.LA(1);
				if ( (LA370_0==WORK_VK) ) {
					alt370=1;
				}
				switch (alt370) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1301:25: WORK_VK
						{
						match(input,WORK_VK,FOLLOW_WORK_VK_in_rollback_statement10407); 
						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1302:13: ( ^( SQL92_RESERVED_TO savepoint_name ) | ^( FORCE_VK CHAR_STRING ) )?
				int alt371=3;
				int LA371_0 = input.LA(1);
				if ( (LA371_0==SQL92_RESERVED_TO) ) {
					alt371=1;
				}
				else if ( (LA371_0==FORCE_VK) ) {
					alt371=2;
				}
				switch (alt371) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1302:18: ^( SQL92_RESERVED_TO savepoint_name )
						{
						match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_rollback_statement10429); 
						match(input, Token.DOWN, null); 
						pushFollow(FOLLOW_savepoint_name_in_rollback_statement10431);
						savepoint_name();
						state._fsp--;

						match(input, Token.UP, null); 

						}
						break;
					case 2 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1303:18: ^( FORCE_VK CHAR_STRING )
						{
						match(input,FORCE_VK,FOLLOW_FORCE_VK_in_rollback_statement10452); 
						match(input, Token.DOWN, null); 
						match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_rollback_statement10454); 
						match(input, Token.UP, null); 

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "rollback_statement"



	// $ANTLR start "savepoint_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1308:1: savepoint_statement : ^( SAVEPOINT_VK savepoint_name ) ;
	public final void savepoint_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1309:5: ( ^( SAVEPOINT_VK savepoint_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1309:10: ^( SAVEPOINT_VK savepoint_name )
			{
			match(input,SAVEPOINT_VK,FOLLOW_SAVEPOINT_VK_in_savepoint_statement10501); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_savepoint_name_in_savepoint_statement10503);
			savepoint_name();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "savepoint_statement"



	// $ANTLR start "pipe_row_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1312:1: pipe_row_statement : ^( PIPE_ROW expression ) ;
	public final void pipe_row_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1313:5: ( ^( PIPE_ROW expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1313:10: ^( PIPE_ROW expression )
			{
			match(input,PIPE_ROW,FOLLOW_PIPE_ROW_in_pipe_row_statement10530); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_pipe_row_statement10532);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "pipe_row_statement"



	// $ANTLR start "expression_list"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1320:1: expression_list : ^( EXPR_LIST ( expression )* ) ;
	public final void expression_list() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1321:5: ( ^( EXPR_LIST ( expression )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1321:10: ^( EXPR_LIST ( expression )* )
			{
			match(input,EXPR_LIST,FOLLOW_EXPR_LIST_in_expression_list10558); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1321:22: ( expression )*
				loop372:
				while (true) {
					int alt372=2;
					int LA372_0 = input.LA(1);
					if ( (LA372_0==EXPR||LA372_0==LOGIC_EXPR) ) {
						alt372=1;
					}

					switch (alt372) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1321:22: expression
						{
						pushFollow(FOLLOW_expression_in_expression_list10560);
						expression();
						state._fsp--;

						}
						break;

					default :
						break loop372;
					}
				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "expression_list"



	// $ANTLR start "expression"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1324:1: expression : ( ^( LOGIC_EXPR expression_element ) | ^( EXPR expression_element ) );
	public final void expression() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1325:5: ( ^( LOGIC_EXPR expression_element ) | ^( EXPR expression_element ) )
			int alt373=2;
			int LA373_0 = input.LA(1);
			if ( (LA373_0==LOGIC_EXPR) ) {
				alt373=1;
			}
			else if ( (LA373_0==EXPR) ) {
				alt373=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 373, 0, input);
				throw nvae;
			}

			switch (alt373) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1325:10: ^( LOGIC_EXPR expression_element )
					{
					match(input,LOGIC_EXPR,FOLLOW_LOGIC_EXPR_in_expression10583); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression10585);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1326:10: ^( EXPR expression_element )
					{
					match(input,EXPR,FOLLOW_EXPR_in_expression10598); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression10600);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "expression"



	// $ANTLR start "expression_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1329:1: expression_element : ( ^( SQL92_RESERVED_OR expression_element expression_element ) | ^( SQL92_RESERVED_AND expression_element expression_element ) | ^( SQL92_RESERVED_NOT expression_element ) | ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element ) | ^( IS_NOT_NULL expression_element ) | ^( IS_NULL expression_element ) | ^( IS_NOT_NAN expression_element ) | ^( IS_NAN expression_element ) | ^( IS_NOT_PRESENT expression_element ) | ^( IS_PRESENT expression_element ) | ^( IS_NOT_INFINITE expression_element ) | ^( IS_INFINITE expression_element ) | ^( IS_NOT_A_SET expression_element ) | ^( IS_A_SET expression_element ) | ^( IS_NOT_EMPTY expression_element ) | ^( IS_EMPTY expression_element ) | ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) | ^( IS_OF_TYPE expression_element ( type_spec )+ ) | ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) | ^( NOT_IN expression_element in_elements ) | ^( SQL92_RESERVED_IN expression_element in_elements ) | ^( NOT_BETWEEN expression_element expression_element expression_element ) | ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) | ^( NOT_LIKE expression_element expression_element ( expression_element )? ) | ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) | ^( CONCATENATION_OP expression_element expression_element ) | ^( PLUS_SIGN expression_element expression_element ) | ^( MINUS_SIGN expression_element expression_element ) | ^( ASTERISK expression_element expression_element ) | ^( SOLIDUS expression_element expression_element ) | ^( MOD_VK expression_element expression_element ) | ^( DIV_VK expression_element expression_element ) | ^( PIPE_VK expression_element expression_element ) | ^( UNARY_OPERATOR expression_element ) | ^( SQL92_RESERVED_PRIOR expression_element ) | ^( NEW_VK expression ) | ^( SQL92_RESERVED_DISTINCT expression_element ) | ^( STANDARD_FUNCTION standard_function ) | ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) | ^( VECTOR_EXPR ( expression_element )+ ) | ^( DATETIME_OP expression_element datetime_element ) | model_expression | ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) | ^( DOT_ASTERISK tableview_name ) | ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) | ^( OUTER_JOIN_SIGN expression_element ) | case_statement | constant | general_element | subquery );
	public final void expression_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1330:5: ( ^( SQL92_RESERVED_OR expression_element expression_element ) | ^( SQL92_RESERVED_AND expression_element expression_element ) | ^( SQL92_RESERVED_NOT expression_element ) | ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element ) | ^( IS_NOT_NULL expression_element ) | ^( IS_NULL expression_element ) | ^( IS_NOT_NAN expression_element ) | ^( IS_NAN expression_element ) | ^( IS_NOT_PRESENT expression_element ) | ^( IS_PRESENT expression_element ) | ^( IS_NOT_INFINITE expression_element ) | ^( IS_INFINITE expression_element ) | ^( IS_NOT_A_SET expression_element ) | ^( IS_A_SET expression_element ) | ^( IS_NOT_EMPTY expression_element ) | ^( IS_EMPTY expression_element ) | ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ ) | ^( IS_OF_TYPE expression_element ( type_spec )+ ) | ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element ) | ^( NOT_IN expression_element in_elements ) | ^( SQL92_RESERVED_IN expression_element in_elements ) | ^( NOT_BETWEEN expression_element expression_element expression_element ) | ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element ) | ^( NOT_LIKE expression_element expression_element ( expression_element )? ) | ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? ) | ^( CONCATENATION_OP expression_element expression_element ) | ^( PLUS_SIGN expression_element expression_element ) | ^( MINUS_SIGN expression_element expression_element ) | ^( ASTERISK expression_element expression_element ) | ^( SOLIDUS expression_element expression_element ) | ^( MOD_VK expression_element expression_element ) | ^( DIV_VK expression_element expression_element ) | ^( PIPE_VK expression_element expression_element ) | ^( UNARY_OPERATOR expression_element ) | ^( SQL92_RESERVED_PRIOR expression_element ) | ^( NEW_VK expression ) | ^( SQL92_RESERVED_DISTINCT expression_element ) | ^( STANDARD_FUNCTION standard_function ) | ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element ) | ^( VECTOR_EXPR ( expression_element )+ ) | ^( DATETIME_OP expression_element datetime_element ) | model_expression | ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? ) | ^( DOT_ASTERISK tableview_name ) | ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name ) | ^( OUTER_JOIN_SIGN expression_element ) | case_statement | constant | general_element | subquery )
			int alt380=50;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_OR:
				{
				alt380=1;
				}
				break;
			case SQL92_RESERVED_AND:
				{
				alt380=2;
				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt380=3;
				}
				break;
			case EQUALS_OP:
			case GREATER_THAN_OP:
			case GREATER_THAN_OR_EQUALS_OP:
			case LESS_THAN_OP:
			case LESS_THAN_OR_EQUALS_OP:
			case NOT_EQUAL_OP:
				{
				alt380=4;
				}
				break;
			case IS_NOT_NULL:
				{
				alt380=5;
				}
				break;
			case IS_NULL:
				{
				alt380=6;
				}
				break;
			case IS_NOT_NAN:
				{
				alt380=7;
				}
				break;
			case IS_NAN:
				{
				alt380=8;
				}
				break;
			case IS_NOT_PRESENT:
				{
				alt380=9;
				}
				break;
			case IS_PRESENT:
				{
				alt380=10;
				}
				break;
			case IS_NOT_INFINITE:
				{
				alt380=11;
				}
				break;
			case IS_INFINITE:
				{
				alt380=12;
				}
				break;
			case IS_NOT_A_SET:
				{
				alt380=13;
				}
				break;
			case IS_A_SET:
				{
				alt380=14;
				}
				break;
			case IS_NOT_EMPTY:
				{
				alt380=15;
				}
				break;
			case IS_EMPTY:
				{
				alt380=16;
				}
				break;
			case IS_NOT_OF_TYPE:
				{
				alt380=17;
				}
				break;
			case IS_OF_TYPE:
				{
				alt380=18;
				}
				break;
			case MEMBER_VK:
			case SUBMULTISET_VK:
				{
				alt380=19;
				}
				break;
			case NOT_IN:
				{
				alt380=20;
				}
				break;
			case SQL92_RESERVED_IN:
				{
				alt380=21;
				}
				break;
			case NOT_BETWEEN:
				{
				alt380=22;
				}
				break;
			case SQL92_RESERVED_BETWEEN:
				{
				alt380=23;
				}
				break;
			case NOT_LIKE:
				{
				alt380=24;
				}
				break;
			case SQL92_RESERVED_LIKE:
			case LIKE2_VK:
			case LIKE4_VK:
			case LIKEC_VK:
				{
				alt380=25;
				}
				break;
			case CONCATENATION_OP:
				{
				alt380=26;
				}
				break;
			case PLUS_SIGN:
				{
				alt380=27;
				}
				break;
			case MINUS_SIGN:
				{
				int LA380_28 = input.LA(2);
				if ( (LA380_28==DOWN) ) {
					int LA380_51 = input.LA(3);
					if ( (LA380_51==UNSIGNED_INTEGER) ) {
						int LA380_52 = input.LA(4);
						if ( (LA380_52==UP) ) {
							alt380=48;
						}
						else if ( (LA380_52==APPROXIMATE_NUM_LIT||LA380_52==ASTERISK||LA380_52==CHAR_STRING||LA380_52==CONCATENATION_OP||(LA380_52 >= EQUALS_OP && LA380_52 <= EXACT_NUM_LIT)||(LA380_52 >= GREATER_THAN_OP && LA380_52 <= GREATER_THAN_OR_EQUALS_OP)||(LA380_52 >= LESS_THAN_OP && LA380_52 <= LESS_THAN_OR_EQUALS_OP)||LA380_52==MINUS_SIGN||LA380_52==NOT_EQUAL_OP||LA380_52==PLUS_SIGN||LA380_52==SOLIDUS||LA380_52==SQL92_RESERVED_ALL||(LA380_52 >= SQL92_RESERVED_AND && LA380_52 <= SQL92_RESERVED_ANY)||LA380_52==SQL92_RESERVED_BETWEEN||LA380_52==SQL92_RESERVED_DEFAULT||LA380_52==SQL92_RESERVED_DISTINCT||(LA380_52 >= SQL92_RESERVED_EXISTS && LA380_52 <= SQL92_RESERVED_FALSE)||LA380_52==SQL92_RESERVED_IN||(LA380_52 >= SQL92_RESERVED_LIKE && LA380_52 <= SQL92_RESERVED_NULL)||LA380_52==SQL92_RESERVED_OR||LA380_52==SQL92_RESERVED_PRIOR||LA380_52==SQL92_RESERVED_TRUE||LA380_52==UNSIGNED_INTEGER||LA380_52==ANY_ELEMENT||LA380_52==CASCATED_ELEMENT||LA380_52==DATETIME_OP||LA380_52==DBTIMEZONE_VK||LA380_52==DIV_VK||LA380_52==DOT_ASTERISK||LA380_52==HOSTED_VARIABLE||LA380_52==HOSTED_VARIABLE_ROUTINE_CALL||(LA380_52 >= IS_A_SET && LA380_52 <= IS_PRESENT)||LA380_52==KEEP_VK||(LA380_52 >= LIKE2_VK && LA380_52 <= LIKEC_VK)||LA380_52==MAXVALUE_VK||LA380_52==MEMBER_VK||LA380_52==MINVALUE_VK||LA380_52==MODEL_EXPRESSION||LA380_52==MOD_VK||LA380_52==NEW_VK||LA380_52==NOT_BETWEEN||(LA380_52 >= NOT_IN && LA380_52 <= NOT_LIKE)||LA380_52==OUTER_JOIN_SIGN||(LA380_52 >= PERCENT_FOUND_VK && LA380_52 <= PERCENT_ROWCOUNT_VK)||LA380_52==PIPE_VK||LA380_52==ROUTINE_CALL||LA380_52==SEARCHED_CASE||LA380_52==SESSIONTIMEZONE_VK||LA380_52==SIMPLE_CASE||LA380_52==SOME_VK||LA380_52==STANDARD_FUNCTION||LA380_52==SUBMULTISET_VK||LA380_52==SUBQUERY||LA380_52==VECTOR_EXPR||LA380_52==UNARY_OPERATOR) ) {
							alt380=28;
						}

						else {
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 380, 52, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA380_51==APPROXIMATE_NUM_LIT||LA380_51==ASTERISK||LA380_51==CHAR_STRING||LA380_51==CONCATENATION_OP||(LA380_51 >= EQUALS_OP && LA380_51 <= EXACT_NUM_LIT)||(LA380_51 >= GREATER_THAN_OP && LA380_51 <= GREATER_THAN_OR_EQUALS_OP)||(LA380_51 >= LESS_THAN_OP && LA380_51 <= LESS_THAN_OR_EQUALS_OP)||LA380_51==MINUS_SIGN||LA380_51==NOT_EQUAL_OP||LA380_51==PLUS_SIGN||LA380_51==SOLIDUS||LA380_51==SQL92_RESERVED_ALL||(LA380_51 >= SQL92_RESERVED_AND && LA380_51 <= SQL92_RESERVED_ANY)||LA380_51==SQL92_RESERVED_BETWEEN||LA380_51==SQL92_RESERVED_DEFAULT||LA380_51==SQL92_RESERVED_DISTINCT||(LA380_51 >= SQL92_RESERVED_EXISTS && LA380_51 <= SQL92_RESERVED_FALSE)||LA380_51==SQL92_RESERVED_IN||(LA380_51 >= SQL92_RESERVED_LIKE && LA380_51 <= SQL92_RESERVED_NULL)||LA380_51==SQL92_RESERVED_OR||LA380_51==SQL92_RESERVED_PRIOR||LA380_51==SQL92_RESERVED_TRUE||LA380_51==ANY_ELEMENT||LA380_51==CASCATED_ELEMENT||LA380_51==DATETIME_OP||LA380_51==DBTIMEZONE_VK||LA380_51==DIV_VK||LA380_51==DOT_ASTERISK||LA380_51==HOSTED_VARIABLE||LA380_51==HOSTED_VARIABLE_ROUTINE_CALL||(LA380_51 >= IS_A_SET && LA380_51 <= IS_PRESENT)||LA380_51==KEEP_VK||(LA380_51 >= LIKE2_VK && LA380_51 <= LIKEC_VK)||LA380_51==MAXVALUE_VK||LA380_51==MEMBER_VK||LA380_51==MINVALUE_VK||LA380_51==MODEL_EXPRESSION||LA380_51==MOD_VK||LA380_51==NEW_VK||LA380_51==NOT_BETWEEN||(LA380_51 >= NOT_IN && LA380_51 <= NOT_LIKE)||LA380_51==OUTER_JOIN_SIGN||(LA380_51 >= PERCENT_FOUND_VK && LA380_51 <= PERCENT_ROWCOUNT_VK)||LA380_51==PIPE_VK||LA380_51==ROUTINE_CALL||LA380_51==SEARCHED_CASE||LA380_51==SESSIONTIMEZONE_VK||LA380_51==SIMPLE_CASE||LA380_51==SOME_VK||LA380_51==STANDARD_FUNCTION||LA380_51==SUBMULTISET_VK||LA380_51==SUBQUERY||LA380_51==VECTOR_EXPR||LA380_51==UNARY_OPERATOR) ) {
						alt380=28;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 380, 51, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 380, 28, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ASTERISK:
				{
				alt380=29;
				}
				break;
			case SOLIDUS:
				{
				alt380=30;
				}
				break;
			case MOD_VK:
				{
				alt380=31;
				}
				break;
			case DIV_VK:
				{
				alt380=32;
				}
				break;
			case PIPE_VK:
				{
				alt380=33;
				}
				break;
			case UNARY_OPERATOR:
				{
				alt380=34;
				}
				break;
			case SQL92_RESERVED_PRIOR:
				{
				alt380=35;
				}
				break;
			case NEW_VK:
				{
				alt380=36;
				}
				break;
			case SQL92_RESERVED_DISTINCT:
				{
				alt380=37;
				}
				break;
			case STANDARD_FUNCTION:
				{
				alt380=38;
				}
				break;
			case SQL92_RESERVED_ALL:
			case SQL92_RESERVED_ANY:
			case SQL92_RESERVED_EXISTS:
			case SOME_VK:
				{
				alt380=39;
				}
				break;
			case VECTOR_EXPR:
				{
				alt380=40;
				}
				break;
			case DATETIME_OP:
				{
				alt380=41;
				}
				break;
			case MODEL_EXPRESSION:
				{
				alt380=42;
				}
				break;
			case KEEP_VK:
				{
				alt380=43;
				}
				break;
			case DOT_ASTERISK:
				{
				alt380=44;
				}
				break;
			case PERCENT_FOUND_VK:
			case PERCENT_ISOPEN_VK:
			case PERCENT_NOTFOUND_VK:
			case PERCENT_ROWCOUNT_VK:
				{
				alt380=45;
				}
				break;
			case OUTER_JOIN_SIGN:
				{
				alt380=46;
				}
				break;
			case SEARCHED_CASE:
			case SIMPLE_CASE:
				{
				alt380=47;
				}
				break;
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case EXACT_NUM_LIT:
			case SQL92_RESERVED_DEFAULT:
			case SQL92_RESERVED_FALSE:
			case SQL92_RESERVED_NULL:
			case SQL92_RESERVED_TRUE:
			case UNSIGNED_INTEGER:
			case DBTIMEZONE_VK:
			case MAXVALUE_VK:
			case MINVALUE_VK:
			case SESSIONTIMEZONE_VK:
				{
				alt380=48;
				}
				break;
			case ANY_ELEMENT:
			case CASCATED_ELEMENT:
			case HOSTED_VARIABLE:
			case HOSTED_VARIABLE_ROUTINE_CALL:
			case ROUTINE_CALL:
				{
				alt380=49;
				}
				break;
			case SUBQUERY:
				{
				alt380=50;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 380, 0, input);
				throw nvae;
			}
			switch (alt380) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1330:10: ^( SQL92_RESERVED_OR expression_element expression_element )
					{
					match(input,SQL92_RESERVED_OR,FOLLOW_SQL92_RESERVED_OR_in_expression_element10622); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10624);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10626);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1331:10: ^( SQL92_RESERVED_AND expression_element expression_element )
					{
					match(input,SQL92_RESERVED_AND,FOLLOW_SQL92_RESERVED_AND_in_expression_element10639); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10641);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10643);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1332:10: ^( SQL92_RESERVED_NOT expression_element )
					{
					match(input,SQL92_RESERVED_NOT,FOLLOW_SQL92_RESERVED_NOT_in_expression_element10656); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10658);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1333:10: ^( ( EQUALS_OP | NOT_EQUAL_OP | LESS_THAN_OP | GREATER_THAN_OP | LESS_THAN_OR_EQUALS_OP | GREATER_THAN_OR_EQUALS_OP ) expression_element expression_element )
					{
					if ( input.LA(1)==EQUALS_OP||(input.LA(1) >= GREATER_THAN_OP && input.LA(1) <= GREATER_THAN_OR_EQUALS_OP)||(input.LA(1) >= LESS_THAN_OP && input.LA(1) <= LESS_THAN_OR_EQUALS_OP)||input.LA(1)==NOT_EQUAL_OP ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10685);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10687);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1335:10: ^( IS_NOT_NULL expression_element )
					{
					match(input,IS_NOT_NULL,FOLLOW_IS_NOT_NULL_in_expression_element10701); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10703);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1336:10: ^( IS_NULL expression_element )
					{
					match(input,IS_NULL,FOLLOW_IS_NULL_in_expression_element10716); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10718);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1337:10: ^( IS_NOT_NAN expression_element )
					{
					match(input,IS_NOT_NAN,FOLLOW_IS_NOT_NAN_in_expression_element10731); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10733);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1338:10: ^( IS_NAN expression_element )
					{
					match(input,IS_NAN,FOLLOW_IS_NAN_in_expression_element10746); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10748);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1339:10: ^( IS_NOT_PRESENT expression_element )
					{
					match(input,IS_NOT_PRESENT,FOLLOW_IS_NOT_PRESENT_in_expression_element10761); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10763);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1340:10: ^( IS_PRESENT expression_element )
					{
					match(input,IS_PRESENT,FOLLOW_IS_PRESENT_in_expression_element10776); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10778);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1341:10: ^( IS_NOT_INFINITE expression_element )
					{
					match(input,IS_NOT_INFINITE,FOLLOW_IS_NOT_INFINITE_in_expression_element10791); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10793);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1342:10: ^( IS_INFINITE expression_element )
					{
					match(input,IS_INFINITE,FOLLOW_IS_INFINITE_in_expression_element10806); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10808);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1343:10: ^( IS_NOT_A_SET expression_element )
					{
					match(input,IS_NOT_A_SET,FOLLOW_IS_NOT_A_SET_in_expression_element10821); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10823);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1344:10: ^( IS_A_SET expression_element )
					{
					match(input,IS_A_SET,FOLLOW_IS_A_SET_in_expression_element10836); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10838);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1345:10: ^( IS_NOT_EMPTY expression_element )
					{
					match(input,IS_NOT_EMPTY,FOLLOW_IS_NOT_EMPTY_in_expression_element10851); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10853);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1346:10: ^( IS_EMPTY expression_element )
					{
					match(input,IS_EMPTY,FOLLOW_IS_EMPTY_in_expression_element10866); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10868);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1347:10: ^( IS_NOT_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_NOT_OF_TYPE,FOLLOW_IS_NOT_OF_TYPE_in_expression_element10881); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10883);
					expression_element();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1347:46: ( type_spec )+
					int cnt374=0;
					loop374:
					while (true) {
						int alt374=2;
						int LA374_0 = input.LA(1);
						if ( (LA374_0==CUSTOM_TYPE||LA374_0==INTERVAL_DATATYPE||LA374_0==NATIVE_DATATYPE) ) {
							alt374=1;
						}

						switch (alt374) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1347:46: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element10885);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt374 >= 1 ) break loop374;
							EarlyExitException eee = new EarlyExitException(374, input);
							throw eee;
						}
						cnt374++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 18 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1348:10: ^( IS_OF_TYPE expression_element ( type_spec )+ )
					{
					match(input,IS_OF_TYPE,FOLLOW_IS_OF_TYPE_in_expression_element10899); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10901);
					expression_element();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1348:42: ( type_spec )+
					int cnt375=0;
					loop375:
					while (true) {
						int alt375=2;
						int LA375_0 = input.LA(1);
						if ( (LA375_0==CUSTOM_TYPE||LA375_0==INTERVAL_DATATYPE||LA375_0==NATIVE_DATATYPE) ) {
							alt375=1;
						}

						switch (alt375) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1348:42: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_expression_element10903);
							type_spec();
							state._fsp--;

							}
							break;

						default :
							if ( cnt375 >= 1 ) break loop375;
							EarlyExitException eee = new EarlyExitException(375, input);
							throw eee;
						}
						cnt375++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 19 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1350:10: ^( ( MEMBER_VK | SUBMULTISET_VK ) expression_element expression_element )
					{
					if ( input.LA(1)==MEMBER_VK||input.LA(1)==SUBMULTISET_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10924);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10926);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 20 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1352:10: ^( NOT_IN expression_element in_elements )
					{
					match(input,NOT_IN,FOLLOW_NOT_IN_in_expression_element10940); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10942);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element10944);
					in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 21 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1353:10: ^( SQL92_RESERVED_IN expression_element in_elements )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_expression_element10957); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10959);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_in_elements_in_expression_element10961);
					in_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 22 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1354:10: ^( NOT_BETWEEN expression_element expression_element expression_element )
					{
					match(input,NOT_BETWEEN,FOLLOW_NOT_BETWEEN_in_expression_element10974); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10976);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10978);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10980);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 23 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1355:10: ^( SQL92_RESERVED_BETWEEN expression_element expression_element expression_element )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element10993); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element10995);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10997);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element10999);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 24 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1356:10: ^( NOT_LIKE expression_element expression_element ( expression_element )? )
					{
					match(input,NOT_LIKE,FOLLOW_NOT_LIKE_in_expression_element11012); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11014);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11016);
					expression_element();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1356:59: ( expression_element )?
					int alt376=2;
					int LA376_0 = input.LA(1);
					if ( (LA376_0==APPROXIMATE_NUM_LIT||LA376_0==ASTERISK||LA376_0==CHAR_STRING||LA376_0==CONCATENATION_OP||(LA376_0 >= EQUALS_OP && LA376_0 <= EXACT_NUM_LIT)||(LA376_0 >= GREATER_THAN_OP && LA376_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA376_0 >= LESS_THAN_OP && LA376_0 <= LESS_THAN_OR_EQUALS_OP)||LA376_0==MINUS_SIGN||LA376_0==NOT_EQUAL_OP||LA376_0==PLUS_SIGN||LA376_0==SOLIDUS||LA376_0==SQL92_RESERVED_ALL||(LA376_0 >= SQL92_RESERVED_AND && LA376_0 <= SQL92_RESERVED_ANY)||LA376_0==SQL92_RESERVED_BETWEEN||LA376_0==SQL92_RESERVED_DEFAULT||LA376_0==SQL92_RESERVED_DISTINCT||(LA376_0 >= SQL92_RESERVED_EXISTS && LA376_0 <= SQL92_RESERVED_FALSE)||LA376_0==SQL92_RESERVED_IN||(LA376_0 >= SQL92_RESERVED_LIKE && LA376_0 <= SQL92_RESERVED_NULL)||LA376_0==SQL92_RESERVED_OR||LA376_0==SQL92_RESERVED_PRIOR||LA376_0==SQL92_RESERVED_TRUE||LA376_0==UNSIGNED_INTEGER||LA376_0==ANY_ELEMENT||LA376_0==CASCATED_ELEMENT||LA376_0==DATETIME_OP||LA376_0==DBTIMEZONE_VK||LA376_0==DIV_VK||LA376_0==DOT_ASTERISK||LA376_0==HOSTED_VARIABLE||LA376_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA376_0 >= IS_A_SET && LA376_0 <= IS_PRESENT)||LA376_0==KEEP_VK||(LA376_0 >= LIKE2_VK && LA376_0 <= LIKEC_VK)||LA376_0==MAXVALUE_VK||LA376_0==MEMBER_VK||LA376_0==MINVALUE_VK||LA376_0==MODEL_EXPRESSION||LA376_0==MOD_VK||LA376_0==NEW_VK||LA376_0==NOT_BETWEEN||(LA376_0 >= NOT_IN && LA376_0 <= NOT_LIKE)||LA376_0==OUTER_JOIN_SIGN||(LA376_0 >= PERCENT_FOUND_VK && LA376_0 <= PERCENT_ROWCOUNT_VK)||LA376_0==PIPE_VK||LA376_0==ROUTINE_CALL||LA376_0==SEARCHED_CASE||LA376_0==SESSIONTIMEZONE_VK||LA376_0==SIMPLE_CASE||LA376_0==SOME_VK||LA376_0==STANDARD_FUNCTION||LA376_0==SUBMULTISET_VK||LA376_0==SUBQUERY||LA376_0==VECTOR_EXPR||LA376_0==UNARY_OPERATOR) ) {
						alt376=1;
					}
					switch (alt376) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1356:59: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element11018);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 25 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1357:10: ^( ( SQL92_RESERVED_LIKE | LIKEC_VK | LIKE2_VK | LIKE4_VK ) expression_element expression_element ( expression_element )? )
					{
					if ( input.LA(1)==SQL92_RESERVED_LIKE||(input.LA(1) >= LIKE2_VK && input.LA(1) <= LIKEC_VK) ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11042);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11044);
					expression_element();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1357:99: ( expression_element )?
					int alt377=2;
					int LA377_0 = input.LA(1);
					if ( (LA377_0==APPROXIMATE_NUM_LIT||LA377_0==ASTERISK||LA377_0==CHAR_STRING||LA377_0==CONCATENATION_OP||(LA377_0 >= EQUALS_OP && LA377_0 <= EXACT_NUM_LIT)||(LA377_0 >= GREATER_THAN_OP && LA377_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA377_0 >= LESS_THAN_OP && LA377_0 <= LESS_THAN_OR_EQUALS_OP)||LA377_0==MINUS_SIGN||LA377_0==NOT_EQUAL_OP||LA377_0==PLUS_SIGN||LA377_0==SOLIDUS||LA377_0==SQL92_RESERVED_ALL||(LA377_0 >= SQL92_RESERVED_AND && LA377_0 <= SQL92_RESERVED_ANY)||LA377_0==SQL92_RESERVED_BETWEEN||LA377_0==SQL92_RESERVED_DEFAULT||LA377_0==SQL92_RESERVED_DISTINCT||(LA377_0 >= SQL92_RESERVED_EXISTS && LA377_0 <= SQL92_RESERVED_FALSE)||LA377_0==SQL92_RESERVED_IN||(LA377_0 >= SQL92_RESERVED_LIKE && LA377_0 <= SQL92_RESERVED_NULL)||LA377_0==SQL92_RESERVED_OR||LA377_0==SQL92_RESERVED_PRIOR||LA377_0==SQL92_RESERVED_TRUE||LA377_0==UNSIGNED_INTEGER||LA377_0==ANY_ELEMENT||LA377_0==CASCATED_ELEMENT||LA377_0==DATETIME_OP||LA377_0==DBTIMEZONE_VK||LA377_0==DIV_VK||LA377_0==DOT_ASTERISK||LA377_0==HOSTED_VARIABLE||LA377_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA377_0 >= IS_A_SET && LA377_0 <= IS_PRESENT)||LA377_0==KEEP_VK||(LA377_0 >= LIKE2_VK && LA377_0 <= LIKEC_VK)||LA377_0==MAXVALUE_VK||LA377_0==MEMBER_VK||LA377_0==MINVALUE_VK||LA377_0==MODEL_EXPRESSION||LA377_0==MOD_VK||LA377_0==NEW_VK||LA377_0==NOT_BETWEEN||(LA377_0 >= NOT_IN && LA377_0 <= NOT_LIKE)||LA377_0==OUTER_JOIN_SIGN||(LA377_0 >= PERCENT_FOUND_VK && LA377_0 <= PERCENT_ROWCOUNT_VK)||LA377_0==PIPE_VK||LA377_0==ROUTINE_CALL||LA377_0==SEARCHED_CASE||LA377_0==SESSIONTIMEZONE_VK||LA377_0==SIMPLE_CASE||LA377_0==SOME_VK||LA377_0==STANDARD_FUNCTION||LA377_0==SUBMULTISET_VK||LA377_0==SUBQUERY||LA377_0==VECTOR_EXPR||LA377_0==UNARY_OPERATOR) ) {
						alt377=1;
					}
					switch (alt377) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1357:99: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element11046);
							expression_element();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 26 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1359:10: ^( CONCATENATION_OP expression_element expression_element )
					{
					match(input,CONCATENATION_OP,FOLLOW_CONCATENATION_OP_in_expression_element11061); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11063);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11065);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 27 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1360:10: ^( PLUS_SIGN expression_element expression_element )
					{
					match(input,PLUS_SIGN,FOLLOW_PLUS_SIGN_in_expression_element11078); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11080);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11082);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 28 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1361:10: ^( MINUS_SIGN expression_element expression_element )
					{
					match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_expression_element11095); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11097);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11099);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 29 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1362:10: ^( ASTERISK expression_element expression_element )
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_expression_element11112); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11114);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11116);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 30 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1363:10: ^( SOLIDUS expression_element expression_element )
					{
					match(input,SOLIDUS,FOLLOW_SOLIDUS_in_expression_element11129); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11131);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11133);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 31 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1364:10: ^( MOD_VK expression_element expression_element )
					{
					match(input,MOD_VK,FOLLOW_MOD_VK_in_expression_element11146); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11148);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11150);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 32 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1365:10: ^( DIV_VK expression_element expression_element )
					{
					match(input,DIV_VK,FOLLOW_DIV_VK_in_expression_element11163); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11165);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11167);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 33 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1366:10: ^( PIPE_VK expression_element expression_element )
					{
					match(input,PIPE_VK,FOLLOW_PIPE_VK_in_expression_element11180); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11182);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_expression_element_in_expression_element11184);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 34 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1368:10: ^( UNARY_OPERATOR expression_element )
					{
					match(input,UNARY_OPERATOR,FOLLOW_UNARY_OPERATOR_in_expression_element11198); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11200);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 35 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1369:10: ^( SQL92_RESERVED_PRIOR expression_element )
					{
					match(input,SQL92_RESERVED_PRIOR,FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element11213); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11215);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 36 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1370:10: ^( NEW_VK expression )
					{
					match(input,NEW_VK,FOLLOW_NEW_VK_in_expression_element11228); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_expression_element11230);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 37 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1371:10: ^( SQL92_RESERVED_DISTINCT expression_element )
					{
					match(input,SQL92_RESERVED_DISTINCT,FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element11243); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11245);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 38 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1372:10: ^( STANDARD_FUNCTION standard_function )
					{
					match(input,STANDARD_FUNCTION,FOLLOW_STANDARD_FUNCTION_in_expression_element11258); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_standard_function_in_expression_element11260);
					standard_function();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 39 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1373:10: ^( ( SOME_VK | SQL92_RESERVED_EXISTS | SQL92_RESERVED_ALL | SQL92_RESERVED_ANY ) expression_element )
					{
					if ( input.LA(1)==SQL92_RESERVED_ALL||input.LA(1)==SQL92_RESERVED_ANY||input.LA(1)==SQL92_RESERVED_EXISTS||input.LA(1)==SOME_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11283);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 40 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1374:10: ^( VECTOR_EXPR ( expression_element )+ )
					{
					match(input,VECTOR_EXPR,FOLLOW_VECTOR_EXPR_in_expression_element11296); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1374:24: ( expression_element )+
					int cnt378=0;
					loop378:
					while (true) {
						int alt378=2;
						int LA378_0 = input.LA(1);
						if ( (LA378_0==APPROXIMATE_NUM_LIT||LA378_0==ASTERISK||LA378_0==CHAR_STRING||LA378_0==CONCATENATION_OP||(LA378_0 >= EQUALS_OP && LA378_0 <= EXACT_NUM_LIT)||(LA378_0 >= GREATER_THAN_OP && LA378_0 <= GREATER_THAN_OR_EQUALS_OP)||(LA378_0 >= LESS_THAN_OP && LA378_0 <= LESS_THAN_OR_EQUALS_OP)||LA378_0==MINUS_SIGN||LA378_0==NOT_EQUAL_OP||LA378_0==PLUS_SIGN||LA378_0==SOLIDUS||LA378_0==SQL92_RESERVED_ALL||(LA378_0 >= SQL92_RESERVED_AND && LA378_0 <= SQL92_RESERVED_ANY)||LA378_0==SQL92_RESERVED_BETWEEN||LA378_0==SQL92_RESERVED_DEFAULT||LA378_0==SQL92_RESERVED_DISTINCT||(LA378_0 >= SQL92_RESERVED_EXISTS && LA378_0 <= SQL92_RESERVED_FALSE)||LA378_0==SQL92_RESERVED_IN||(LA378_0 >= SQL92_RESERVED_LIKE && LA378_0 <= SQL92_RESERVED_NULL)||LA378_0==SQL92_RESERVED_OR||LA378_0==SQL92_RESERVED_PRIOR||LA378_0==SQL92_RESERVED_TRUE||LA378_0==UNSIGNED_INTEGER||LA378_0==ANY_ELEMENT||LA378_0==CASCATED_ELEMENT||LA378_0==DATETIME_OP||LA378_0==DBTIMEZONE_VK||LA378_0==DIV_VK||LA378_0==DOT_ASTERISK||LA378_0==HOSTED_VARIABLE||LA378_0==HOSTED_VARIABLE_ROUTINE_CALL||(LA378_0 >= IS_A_SET && LA378_0 <= IS_PRESENT)||LA378_0==KEEP_VK||(LA378_0 >= LIKE2_VK && LA378_0 <= LIKEC_VK)||LA378_0==MAXVALUE_VK||LA378_0==MEMBER_VK||LA378_0==MINVALUE_VK||LA378_0==MODEL_EXPRESSION||LA378_0==MOD_VK||LA378_0==NEW_VK||LA378_0==NOT_BETWEEN||(LA378_0 >= NOT_IN && LA378_0 <= NOT_LIKE)||LA378_0==OUTER_JOIN_SIGN||(LA378_0 >= PERCENT_FOUND_VK && LA378_0 <= PERCENT_ROWCOUNT_VK)||LA378_0==PIPE_VK||LA378_0==ROUTINE_CALL||LA378_0==SEARCHED_CASE||LA378_0==SESSIONTIMEZONE_VK||LA378_0==SIMPLE_CASE||LA378_0==SOME_VK||LA378_0==STANDARD_FUNCTION||LA378_0==SUBMULTISET_VK||LA378_0==SUBQUERY||LA378_0==VECTOR_EXPR||LA378_0==UNARY_OPERATOR) ) {
							alt378=1;
						}

						switch (alt378) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1374:24: expression_element
							{
							pushFollow(FOLLOW_expression_element_in_expression_element11298);
							expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt378 >= 1 ) break loop378;
							EarlyExitException eee = new EarlyExitException(378, input);
							throw eee;
						}
						cnt378++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 41 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1376:10: ^( DATETIME_OP expression_element datetime_element )
					{
					match(input,DATETIME_OP,FOLLOW_DATETIME_OP_in_expression_element11313); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11315);
					expression_element();
					state._fsp--;

					pushFollow(FOLLOW_datetime_element_in_expression_element11317);
					datetime_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 42 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1377:10: model_expression
					{
					pushFollow(FOLLOW_model_expression_in_expression_element11329);
					model_expression();
					state._fsp--;

					}
					break;
				case 43 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1378:10: ^( KEEP_VK expression_element DENSE_RANK_VK ( FIRST_VK | LAST_VK ) order_by_clause ( over_clause )? )
					{
					match(input,KEEP_VK,FOLLOW_KEEP_VK_in_expression_element11341); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11343);
					expression_element();
					state._fsp--;

					match(input,DENSE_RANK_VK,FOLLOW_DENSE_RANK_VK_in_expression_element11345); 
					if ( input.LA(1)==FIRST_VK||input.LA(1)==LAST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_order_by_clause_in_expression_element11353);
					order_by_clause();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1378:88: ( over_clause )?
					int alt379=2;
					int LA379_0 = input.LA(1);
					if ( (LA379_0==OVER_VK) ) {
						alt379=1;
					}
					switch (alt379) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1378:88: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_expression_element11355);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 44 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1380:10: ^( DOT_ASTERISK tableview_name )
					{
					match(input,DOT_ASTERISK,FOLLOW_DOT_ASTERISK_in_expression_element11370); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_tableview_name_in_expression_element11372);
					tableview_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 45 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1381:10: ^( ( PERCENT_FOUND_VK | PERCENT_NOTFOUND_VK | PERCENT_ROWCOUNT_VK | PERCENT_ISOPEN_VK ) cursor_name )
					{
					if ( (input.LA(1) >= PERCENT_FOUND_VK && input.LA(1) <= PERCENT_ROWCOUNT_VK) ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_cursor_name_in_expression_element11395);
					cursor_name();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 46 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1382:10: ^( OUTER_JOIN_SIGN expression_element )
					{
					match(input,OUTER_JOIN_SIGN,FOLLOW_OUTER_JOIN_SIGN_in_expression_element11408); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_expression_element11410);
					expression_element();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 47 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1384:10: case_statement
					{
					pushFollow(FOLLOW_case_statement_in_expression_element11423);
					case_statement();
					state._fsp--;

					}
					break;
				case 48 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1385:10: constant
					{
					pushFollow(FOLLOW_constant_in_expression_element11434);
					constant();
					state._fsp--;

					}
					break;
				case 49 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1386:10: general_element
					{
					pushFollow(FOLLOW_general_element_in_expression_element11445);
					general_element();
					state._fsp--;

					}
					break;
				case 50 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1387:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_expression_element11456);
					subquery();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "expression_element"



	// $ANTLR start "in_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1390:1: in_elements : ( subquery | expression_list );
	public final void in_elements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1391:5: ( subquery | expression_list )
			int alt381=2;
			int LA381_0 = input.LA(1);
			if ( (LA381_0==SUBQUERY) ) {
				alt381=1;
			}
			else if ( (LA381_0==EXPR_LIST) ) {
				alt381=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 381, 0, input);
				throw nvae;
			}

			switch (alt381) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1391:10: subquery
					{
					pushFollow(FOLLOW_subquery_in_in_elements11476);
					subquery();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1392:10: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_in_elements11487);
					expression_list();
					state._fsp--;

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "in_elements"



	// $ANTLR start "datetime_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1395:1: datetime_element : ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) | ^( DAY_VK SECOND_VK ( expression )* ) | ^( YEAR_VK MONTH_VK expression ) );
	public final void datetime_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1396:5: ( ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) ) | ^( DAY_VK SECOND_VK ( expression )* ) | ^( YEAR_VK MONTH_VK expression ) )
			int alt384=3;
			switch ( input.LA(1) ) {
			case AT_VK:
				{
				alt384=1;
				}
				break;
			case DAY_VK:
				{
				alt384=2;
				}
				break;
			case YEAR_VK:
				{
				alt384=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 384, 0, input);
				throw nvae;
			}
			switch (alt384) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1396:10: ^( AT_VK expression_element ( LOCAL_VK | TIME_VK expression ) )
					{
					match(input,AT_VK,FOLLOW_AT_VK_in_datetime_element11508); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_element_in_datetime_element11510);
					expression_element();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1396:37: ( LOCAL_VK | TIME_VK expression )
					int alt382=2;
					int LA382_0 = input.LA(1);
					if ( (LA382_0==LOCAL_VK) ) {
						alt382=1;
					}
					else if ( (LA382_0==TIME_VK) ) {
						alt382=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 382, 0, input);
						throw nvae;
					}

					switch (alt382) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1396:38: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_datetime_element11513); 
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1396:47: TIME_VK expression
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_datetime_element11515); 
							pushFollow(FOLLOW_expression_in_datetime_element11517);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1397:10: ^( DAY_VK SECOND_VK ( expression )* )
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_datetime_element11531); 
					match(input, Token.DOWN, null); 
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_datetime_element11533); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1397:29: ( expression )*
					loop383:
					while (true) {
						int alt383=2;
						int LA383_0 = input.LA(1);
						if ( (LA383_0==EXPR||LA383_0==LOGIC_EXPR) ) {
							alt383=1;
						}

						switch (alt383) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1397:29: expression
							{
							pushFollow(FOLLOW_expression_in_datetime_element11535);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop383;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1398:10: ^( YEAR_VK MONTH_VK expression )
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_datetime_element11549); 
					match(input, Token.DOWN, null); 
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_datetime_element11551); 
					pushFollow(FOLLOW_expression_in_datetime_element11553);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "datetime_element"



	// $ANTLR start "model_expression"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1401:1: model_expression : ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) ;
	public final void model_expression() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1402:5: ( ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1402:10: ^( MODEL_EXPRESSION expression_element ( model_expression_element )+ )
			{
			match(input,MODEL_EXPRESSION,FOLLOW_MODEL_EXPRESSION_in_model_expression11575); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_element_in_model_expression11577);
			expression_element();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1402:48: ( model_expression_element )+
			int cnt385=0;
			loop385:
			while (true) {
				int alt385=2;
				int LA385_0 = input.LA(1);
				if ( (LA385_0==SQL92_RESERVED_ANY||LA385_0==EXPR||(LA385_0 >= FOR_MULTI_COLUMN && LA385_0 <= FOR_SINGLE_COLUMN)||LA385_0==LOGIC_EXPR) ) {
					alt385=1;
				}

				switch (alt385) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1402:48: model_expression_element
					{
					pushFollow(FOLLOW_model_expression_element_in_model_expression11579);
					model_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt385 >= 1 ) break loop385;
					EarlyExitException eee = new EarlyExitException(385, input);
					throw eee;
				}
				cnt385++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_expression"



	// $ANTLR start "model_expression_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1405:1: model_expression_element : ( SQL92_RESERVED_ANY | expression | ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) | ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) );
	public final void model_expression_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1406:5: ( SQL92_RESERVED_ANY | expression | ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? ) | ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) ) )
			int alt390=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_ANY:
				{
				alt390=1;
				}
				break;
			case EXPR:
			case LOGIC_EXPR:
				{
				alt390=2;
				}
				break;
			case FOR_SINGLE_COLUMN:
				{
				alt390=3;
				}
				break;
			case FOR_MULTI_COLUMN:
				{
				alt390=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 390, 0, input);
				throw nvae;
			}
			switch (alt390) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1406:10: SQL92_RESERVED_ANY
					{
					match(input,SQL92_RESERVED_ANY,FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element11601); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1407:10: expression
					{
					pushFollow(FOLLOW_expression_in_model_expression_element11612);
					expression();
					state._fsp--;

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1408:10: ^( FOR_SINGLE_COLUMN column_name for_single_column_element ( for_like_part )? )
					{
					match(input,FOR_SINGLE_COLUMN,FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element11624); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_column_name_in_model_expression_element11626);
					column_name();
					state._fsp--;

					pushFollow(FOLLOW_for_single_column_element_in_model_expression_element11628);
					for_single_column_element();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1408:68: ( for_like_part )?
					int alt386=2;
					int LA386_0 = input.LA(1);
					if ( (LA386_0==SQL92_RESERVED_LIKE) ) {
						alt386=1;
					}
					switch (alt386) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1408:68: for_like_part
							{
							pushFollow(FOLLOW_for_like_part_in_model_expression_element11630);
							for_like_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1409:10: ^( FOR_MULTI_COLUMN ( column_name )+ ^( SQL92_RESERVED_IN ( subquery | ( expression_list )+ ) ) )
					{
					match(input,FOR_MULTI_COLUMN,FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element11644); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1409:29: ( column_name )+
					int cnt387=0;
					loop387:
					while (true) {
						int alt387=2;
						int LA387_0 = input.LA(1);
						if ( (LA387_0==COLUMN_NAME) ) {
							alt387=1;
						}

						switch (alt387) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1409:29: column_name
							{
							pushFollow(FOLLOW_column_name_in_model_expression_element11646);
							column_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt387 >= 1 ) break loop387;
							EarlyExitException eee = new EarlyExitException(387, input);
							throw eee;
						}
						cnt387++;
					}

					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_model_expression_element11650); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1409:62: ( subquery | ( expression_list )+ )
					int alt389=2;
					int LA389_0 = input.LA(1);
					if ( (LA389_0==SUBQUERY) ) {
						alt389=1;
					}
					else if ( (LA389_0==EXPR_LIST) ) {
						alt389=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 389, 0, input);
						throw nvae;
					}

					switch (alt389) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1409:63: subquery
							{
							pushFollow(FOLLOW_subquery_in_model_expression_element11653);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1409:72: ( expression_list )+
							{
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1409:72: ( expression_list )+
							int cnt388=0;
							loop388:
							while (true) {
								int alt388=2;
								int LA388_0 = input.LA(1);
								if ( (LA388_0==EXPR_LIST) ) {
									alt388=1;
								}

								switch (alt388) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1409:72: expression_list
									{
									pushFollow(FOLLOW_expression_list_in_model_expression_element11655);
									expression_list();
									state._fsp--;

									}
									break;

								default :
									if ( cnt388 >= 1 ) break loop388;
									EarlyExitException eee = new EarlyExitException(388, input);
									throw eee;
								}
								cnt388++;
							}

							}
							break;

					}

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "model_expression_element"



	// $ANTLR start "for_single_column_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1412:1: for_single_column_element : ( ^( SQL92_RESERVED_IN expression_list ) | ^( SQL92_RESERVED_FROM expression ) | ^( SQL92_RESERVED_TO expression ) | ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) );
	public final void for_single_column_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1413:5: ( ^( SQL92_RESERVED_IN expression_list ) | ^( SQL92_RESERVED_FROM expression ) | ^( SQL92_RESERVED_TO expression ) | ^( ( INCREMENT_VK | DECREMENT_VK ) expression ) )
			int alt391=4;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_IN:
				{
				alt391=1;
				}
				break;
			case SQL92_RESERVED_FROM:
				{
				alt391=2;
				}
				break;
			case SQL92_RESERVED_TO:
				{
				alt391=3;
				}
				break;
			case DECREMENT_VK:
			case INCREMENT_VK:
				{
				alt391=4;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 391, 0, input);
				throw nvae;
			}
			switch (alt391) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1413:10: ^( SQL92_RESERVED_IN expression_list )
					{
					match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element11680); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_list_in_for_single_column_element11682);
					expression_list();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1414:10: ^( SQL92_RESERVED_FROM expression )
					{
					match(input,SQL92_RESERVED_FROM,FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element11695); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element11697);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1415:10: ^( SQL92_RESERVED_TO expression )
					{
					match(input,SQL92_RESERVED_TO,FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element11711); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element11713);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1416:10: ^( ( INCREMENT_VK | DECREMENT_VK ) expression )
					{
					if ( input.LA(1)==DECREMENT_VK||input.LA(1)==INCREMENT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_for_single_column_element11733);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "for_single_column_element"



	// $ANTLR start "for_like_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1419:1: for_like_part : ^( SQL92_RESERVED_LIKE expression ) ;
	public final void for_like_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1420:5: ( ^( SQL92_RESERVED_LIKE expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1420:10: ^( SQL92_RESERVED_LIKE expression )
			{
			match(input,SQL92_RESERVED_LIKE,FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part11756); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_for_like_part11758);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "for_like_part"



	// $ANTLR start "case_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1423:1: case_statement : ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) | ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) );
	public final void case_statement() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1424:5: ( ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? ) | ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? ) )
			int alt398=2;
			int LA398_0 = input.LA(1);
			if ( (LA398_0==SIMPLE_CASE) ) {
				alt398=1;
			}
			else if ( (LA398_0==SEARCHED_CASE) ) {
				alt398=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 398, 0, input);
				throw nvae;
			}

			switch (alt398) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1424:10: ^( SIMPLE_CASE ( label_name )* expression ( case_when_part )+ ( case_else_part )? )
					{
					match(input,SIMPLE_CASE,FOLLOW_SIMPLE_CASE_in_case_statement11780); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1424:24: ( label_name )*
					loop392:
					while (true) {
						int alt392=2;
						int LA392_0 = input.LA(1);
						if ( (LA392_0==LABEL_NAME) ) {
							alt392=1;
						}

						switch (alt392) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1424:24: label_name
							{
							pushFollow(FOLLOW_label_name_in_case_statement11782);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop392;
						}
					}

					pushFollow(FOLLOW_expression_in_case_statement11785);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1424:47: ( case_when_part )+
					int cnt393=0;
					loop393:
					while (true) {
						int alt393=2;
						int LA393_0 = input.LA(1);
						if ( (LA393_0==SQL92_RESERVED_WHEN) ) {
							alt393=1;
						}

						switch (alt393) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1424:47: case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement11787);
							case_when_part();
							state._fsp--;

							}
							break;

						default :
							if ( cnt393 >= 1 ) break loop393;
							EarlyExitException eee = new EarlyExitException(393, input);
							throw eee;
						}
						cnt393++;
					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1424:63: ( case_else_part )?
					int alt394=2;
					int LA394_0 = input.LA(1);
					if ( (LA394_0==SQL92_RESERVED_ELSE) ) {
						alt394=1;
					}
					switch (alt394) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1424:63: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement11790);
							case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1425:10: ^( SEARCHED_CASE ( label_name )* ( case_when_part )+ ( case_else_part )? )
					{
					match(input,SEARCHED_CASE,FOLLOW_SEARCHED_CASE_in_case_statement11806); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1425:26: ( label_name )*
					loop395:
					while (true) {
						int alt395=2;
						int LA395_0 = input.LA(1);
						if ( (LA395_0==LABEL_NAME) ) {
							alt395=1;
						}

						switch (alt395) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1425:26: label_name
							{
							pushFollow(FOLLOW_label_name_in_case_statement11808);
							label_name();
							state._fsp--;

							}
							break;

						default :
							break loop395;
						}
					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1425:38: ( case_when_part )+
					int cnt396=0;
					loop396:
					while (true) {
						int alt396=2;
						int LA396_0 = input.LA(1);
						if ( (LA396_0==SQL92_RESERVED_WHEN) ) {
							alt396=1;
						}

						switch (alt396) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1425:38: case_when_part
							{
							pushFollow(FOLLOW_case_when_part_in_case_statement11811);
							case_when_part();
							state._fsp--;

							}
							break;

						default :
							if ( cnt396 >= 1 ) break loop396;
							EarlyExitException eee = new EarlyExitException(396, input);
							throw eee;
						}
						cnt396++;
					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1425:54: ( case_else_part )?
					int alt397=2;
					int LA397_0 = input.LA(1);
					if ( (LA397_0==SQL92_RESERVED_ELSE) ) {
						alt397=1;
					}
					switch (alt397) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1425:54: case_else_part
							{
							pushFollow(FOLLOW_case_else_part_in_case_statement11814);
							case_else_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "case_statement"



	// $ANTLR start "case_when_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1430:1: case_when_part : ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) ;
	public final void case_when_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1431:5: ( ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1431:10: ^( SQL92_RESERVED_WHEN expression ( seq_of_statements | expression ) )
			{
			match(input,SQL92_RESERVED_WHEN,FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part11840); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_case_when_part11842);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1431:43: ( seq_of_statements | expression )
			int alt399=2;
			int LA399_0 = input.LA(1);
			if ( (LA399_0==STATEMENTS) ) {
				alt399=1;
			}
			else if ( (LA399_0==EXPR||LA399_0==LOGIC_EXPR) ) {
				alt399=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 399, 0, input);
				throw nvae;
			}

			switch (alt399) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1431:44: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_when_part11845);
					seq_of_statements();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1431:62: expression
					{
					pushFollow(FOLLOW_expression_in_case_when_part11847);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "case_when_part"



	// $ANTLR start "case_else_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1434:1: case_else_part : ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) ;
	public final void case_else_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1435:5: ( ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1435:10: ^( SQL92_RESERVED_ELSE ( seq_of_statements | expression ) )
			{
			match(input,SQL92_RESERVED_ELSE,FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part11870); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1435:32: ( seq_of_statements | expression )
			int alt400=2;
			int LA400_0 = input.LA(1);
			if ( (LA400_0==STATEMENTS) ) {
				alt400=1;
			}
			else if ( (LA400_0==EXPR||LA400_0==LOGIC_EXPR) ) {
				alt400=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 400, 0, input);
				throw nvae;
			}

			switch (alt400) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1435:33: seq_of_statements
					{
					pushFollow(FOLLOW_seq_of_statements_in_case_else_part11873);
					seq_of_statements();
					state._fsp--;

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1435:51: expression
					{
					pushFollow(FOLLOW_expression_in_case_else_part11875);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "case_else_part"



	// $ANTLR start "standard_function"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1439:1: standard_function : ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) | ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) | ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? ) | ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) | ^( CHR_VK expression NCHAR_CS_VK ) | ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) | ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) | ^( EXTRACT_VK REGULAR_ID expression ) | ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) | ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) | ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) | ^( TREAT_VK expression ( REF_VK )? type_spec ) | ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? ) | ^( XMLAGG_VK expression ( order_by_clause )? ) | ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) | ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) | ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) | ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) | ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) | ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) | ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) | ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) | ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) );
	public final void standard_function() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1440:5: ( ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? ) | ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? ) | ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? ) | ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec ) | ^( CHR_VK expression NCHAR_CS_VK ) | ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? ) | ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ ) | ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? ) | ^( EXTRACT_VK REGULAR_ID expression ) | ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause ) | ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? ) | ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* ) | ^( TREAT_VK expression ( REF_VK )? type_spec ) | ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? ) | ^( XMLAGG_VK expression ( order_by_clause )? ) | ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ ) | ^( XMLEXISTS_VK expression ( xml_passing_clause )? ) | ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? ) | ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? ) | ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? ) | ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* ) | ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* ) | ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? ) | ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? ) )
			int alt442=24;
			switch ( input.LA(1) ) {
			case FUNCTION_ENABLING_OVER:
				{
				alt442=1;
				}
				break;
			case FUNCTION_ENABLING_USING:
				{
				alt442=2;
				}
				break;
			case COUNT_VK:
				{
				alt442=3;
				}
				break;
			case CAST_VK:
			case XMLCAST_VK:
				{
				alt442=4;
				}
				break;
			case CHR_VK:
				{
				alt442=5;
				}
				break;
			case COLLECT_VK:
				{
				alt442=6;
				}
				break;
			case FUNCTION_ENABLING_WITHIN_OR_OVER:
				{
				alt442=7;
				}
				break;
			case DECOMPOSE_VK:
				{
				alt442=8;
				}
				break;
			case EXTRACT_VK:
				{
				alt442=9;
				}
				break;
			case FIRST_VALUE_VK:
			case LAST_VALUE_VK:
				{
				alt442=10;
				}
				break;
			case PREDICTION_FUNCTION:
				{
				alt442=11;
				}
				break;
			case TRANSLATE_VK:
				{
				alt442=12;
				}
				break;
			case TREAT_VK:
				{
				alt442=13;
				}
				break;
			case TRIM_VK:
				{
				alt442=14;
				}
				break;
			case XMLAGG_VK:
				{
				alt442=15;
				}
				break;
			case XMLCOLATTVAL_VK:
			case XMLFOREST_VK:
				{
				alt442=16;
				}
				break;
			case XMLEXISTS_VK:
				{
				alt442=17;
				}
				break;
			case XMLPARSE_VK:
				{
				alt442=18;
				}
				break;
			case XMLQUERY_VK:
				{
				alt442=19;
				}
				break;
			case XMLROOT_VK:
				{
				alt442=20;
				}
				break;
			case XMLTABLE_VK:
				{
				alt442=21;
				}
				break;
			case XMLELEMENT_VK:
				{
				alt442=22;
				}
				break;
			case XMLPI_VK:
				{
				alt442=23;
				}
				break;
			case XMLSERIALIZE_VK:
				{
				alt442=24;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 442, 0, input);
				throw nvae;
			}
			switch (alt442) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1440:10: ^( FUNCTION_ENABLING_OVER function_argument ( over_clause )? )
					{
					match(input,FUNCTION_ENABLING_OVER,FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function11899); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function11901);
					function_argument();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1440:53: ( over_clause )?
					int alt401=2;
					int LA401_0 = input.LA(1);
					if ( (LA401_0==OVER_VK) ) {
						alt401=1;
					}
					switch (alt401) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1440:53: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function11903);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1441:10: ^( FUNCTION_ENABLING_USING function_argument ( using_clause )? )
					{
					match(input,FUNCTION_ENABLING_USING,FOLLOW_FUNCTION_ENABLING_USING_in_standard_function11917); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function11919);
					function_argument();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1441:54: ( using_clause )?
					int alt402=2;
					int LA402_0 = input.LA(1);
					if ( (LA402_0==PLSQL_NON_RESERVED_USING) ) {
						alt402=1;
					}
					switch (alt402) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1441:54: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function11921);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1442:10: ^( COUNT_VK ( ASTERISK | expression ) ( over_clause )? )
					{
					match(input,COUNT_VK,FOLLOW_COUNT_VK_in_standard_function11935); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1442:21: ( ASTERISK | expression )
					int alt403=2;
					int LA403_0 = input.LA(1);
					if ( (LA403_0==ASTERISK) ) {
						alt403=1;
					}
					else if ( (LA403_0==EXPR||LA403_0==LOGIC_EXPR) ) {
						alt403=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 403, 0, input);
						throw nvae;
					}

					switch (alt403) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1442:23: ASTERISK
							{
							match(input,ASTERISK,FOLLOW_ASTERISK_in_standard_function11939); 
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1442:34: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function11943);
							expression();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1442:47: ( over_clause )?
					int alt404=2;
					int LA404_0 = input.LA(1);
					if ( (LA404_0==OVER_VK) ) {
						alt404=1;
					}
					switch (alt404) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1442:47: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function11947);
							over_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1443:10: ^( ( CAST_VK | XMLCAST_VK ) ( subquery | expression ) type_spec )
					{
					if ( input.LA(1)==CAST_VK||input.LA(1)==XMLCAST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1443:33: ( subquery | expression )
					int alt405=2;
					int LA405_0 = input.LA(1);
					if ( (LA405_0==SUBQUERY) ) {
						alt405=1;
					}
					else if ( (LA405_0==EXPR||LA405_0==LOGIC_EXPR) ) {
						alt405=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 405, 0, input);
						throw nvae;
					}

					switch (alt405) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1443:34: subquery
							{
							pushFollow(FOLLOW_subquery_in_standard_function11968);
							subquery();
							state._fsp--;

							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1443:43: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function11970);
							expression();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function11973);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1444:10: ^( CHR_VK expression NCHAR_CS_VK )
					{
					match(input,CHR_VK,FOLLOW_CHR_VK_in_standard_function11986); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function11988);
					expression();
					state._fsp--;

					match(input,NCHAR_CS_VK,FOLLOW_NCHAR_CS_VK_in_standard_function11990); 
					match(input, Token.UP, null); 

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1445:10: ^( COLLECT_VK ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )? column_name ( collect_order_by_part )? )
					{
					match(input,COLLECT_VK,FOLLOW_COLLECT_VK_in_standard_function12003); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1445:23: ( SQL92_RESERVED_DISTINCT | SQL92_RESERVED_UNIQUE )?
					int alt406=2;
					int LA406_0 = input.LA(1);
					if ( (LA406_0==SQL92_RESERVED_DISTINCT||LA406_0==SQL92_RESERVED_UNIQUE) ) {
						alt406=1;
					}
					switch (alt406) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
							{
							if ( input.LA(1)==SQL92_RESERVED_DISTINCT||input.LA(1)==SQL92_RESERVED_UNIQUE ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_column_name_in_standard_function12012);
					column_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1445:84: ( collect_order_by_part )?
					int alt407=2;
					int LA407_0 = input.LA(1);
					if ( (LA407_0==SQL92_RESERVED_ORDER) ) {
						alt407=1;
					}
					switch (alt407) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1445:84: collect_order_by_part
							{
							pushFollow(FOLLOW_collect_order_by_part_in_standard_function12014);
							collect_order_by_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1446:10: ^( FUNCTION_ENABLING_WITHIN_OR_OVER function_argument ( within_clause | over_clause )+ )
					{
					match(input,FUNCTION_ENABLING_WITHIN_OR_OVER,FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function12028); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_function_argument_in_standard_function12030);
					function_argument();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1446:63: ( within_clause | over_clause )+
					int cnt408=0;
					loop408:
					while (true) {
						int alt408=3;
						int LA408_0 = input.LA(1);
						if ( (LA408_0==WITHIN_VK) ) {
							alt408=1;
						}
						else if ( (LA408_0==OVER_VK) ) {
							alt408=2;
						}

						switch (alt408) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1446:64: within_clause
							{
							pushFollow(FOLLOW_within_clause_in_standard_function12033);
							within_clause();
							state._fsp--;

							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1446:78: over_clause
							{
							pushFollow(FOLLOW_over_clause_in_standard_function12035);
							over_clause();
							state._fsp--;

							}
							break;

						default :
							if ( cnt408 >= 1 ) break loop408;
							EarlyExitException eee = new EarlyExitException(408, input);
							throw eee;
						}
						cnt408++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1447:10: ^( DECOMPOSE_VK expression ( CANONICAL_VK | COMPATIBILITY_VK )? )
					{
					match(input,DECOMPOSE_VK,FOLLOW_DECOMPOSE_VK_in_standard_function12051); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12053);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1447:36: ( CANONICAL_VK | COMPATIBILITY_VK )?
					int alt409=2;
					int LA409_0 = input.LA(1);
					if ( (LA409_0==CANONICAL_VK||LA409_0==COMPATIBILITY_VK) ) {
						alt409=1;
					}
					switch (alt409) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
							{
							if ( input.LA(1)==CANONICAL_VK||input.LA(1)==COMPATIBILITY_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1448:10: ^( EXTRACT_VK REGULAR_ID expression )
					{
					match(input,EXTRACT_VK,FOLLOW_EXTRACT_VK_in_standard_function12074); 
					match(input, Token.DOWN, null); 
					match(input,REGULAR_ID,FOLLOW_REGULAR_ID_in_standard_function12076); 
					pushFollow(FOLLOW_expression_in_standard_function12078);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1449:10: ^( ( FIRST_VALUE_VK | LAST_VALUE_VK ) expression ( NULLS_VK )? over_clause )
					{
					if ( input.LA(1)==FIRST_VALUE_VK||input.LA(1)==LAST_VALUE_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12097);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1449:54: ( NULLS_VK )?
					int alt410=2;
					int LA410_0 = input.LA(1);
					if ( (LA410_0==NULLS_VK) ) {
						alt410=1;
					}
					switch (alt410) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1449:54: NULLS_VK
							{
							match(input,NULLS_VK,FOLLOW_NULLS_VK_in_standard_function12099); 
							}
							break;

					}

					pushFollow(FOLLOW_over_clause_in_standard_function12102);
					over_clause();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1450:10: ^( PREDICTION_FUNCTION ( expression )+ ( cost_matrix_clause )? ( using_clause )? )
					{
					match(input,PREDICTION_FUNCTION,FOLLOW_PREDICTION_FUNCTION_in_standard_function12116); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1450:32: ( expression )+
					int cnt411=0;
					loop411:
					while (true) {
						int alt411=2;
						int LA411_0 = input.LA(1);
						if ( (LA411_0==EXPR||LA411_0==LOGIC_EXPR) ) {
							alt411=1;
						}

						switch (alt411) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1450:32: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12118);
							expression();
							state._fsp--;

							}
							break;

						default :
							if ( cnt411 >= 1 ) break loop411;
							EarlyExitException eee = new EarlyExitException(411, input);
							throw eee;
						}
						cnt411++;
					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1450:44: ( cost_matrix_clause )?
					int alt412=2;
					int LA412_0 = input.LA(1);
					if ( (LA412_0==COST_VK) ) {
						alt412=1;
					}
					switch (alt412) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1450:44: cost_matrix_clause
							{
							pushFollow(FOLLOW_cost_matrix_clause_in_standard_function12121);
							cost_matrix_clause();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1450:64: ( using_clause )?
					int alt413=2;
					int LA413_0 = input.LA(1);
					if ( (LA413_0==PLSQL_NON_RESERVED_USING) ) {
						alt413=1;
					}
					switch (alt413) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1450:64: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_standard_function12124);
							using_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1451:10: ^( TRANSLATE_VK expression ( CHAR_CS_VK | NCHAR_CS_VK )? ( expression )* )
					{
					match(input,TRANSLATE_VK,FOLLOW_TRANSLATE_VK_in_standard_function12138); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12140);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1451:36: ( CHAR_CS_VK | NCHAR_CS_VK )?
					int alt414=2;
					int LA414_0 = input.LA(1);
					if ( (LA414_0==CHAR_CS_VK||LA414_0==NCHAR_CS_VK) ) {
						alt414=1;
					}
					switch (alt414) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
							{
							if ( input.LA(1)==CHAR_CS_VK||input.LA(1)==NCHAR_CS_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1451:62: ( expression )*
					loop415:
					while (true) {
						int alt415=2;
						int LA415_0 = input.LA(1);
						if ( (LA415_0==EXPR||LA415_0==LOGIC_EXPR) ) {
							alt415=1;
						}

						switch (alt415) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1451:62: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12149);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop415;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1452:10: ^( TREAT_VK expression ( REF_VK )? type_spec )
					{
					match(input,TREAT_VK,FOLLOW_TREAT_VK_in_standard_function12163); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12165);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1452:32: ( REF_VK )?
					int alt416=2;
					int LA416_0 = input.LA(1);
					if ( (LA416_0==REF_VK) ) {
						alt416=1;
					}
					switch (alt416) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1452:32: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_standard_function12167); 
							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_standard_function12170);
					type_spec();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1453:10: ^( TRIM_VK ( LEADING_VK | TRAILING_VK | BOTH_VK )? expression ( expression )? )
					{
					match(input,TRIM_VK,FOLLOW_TRIM_VK_in_standard_function12183); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1453:20: ( LEADING_VK | TRAILING_VK | BOTH_VK )?
					int alt417=2;
					int LA417_0 = input.LA(1);
					if ( (LA417_0==BOTH_VK||LA417_0==LEADING_VK||LA417_0==TRAILING_VK) ) {
						alt417=1;
					}
					switch (alt417) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
							{
							if ( input.LA(1)==BOTH_VK||input.LA(1)==LEADING_VK||input.LA(1)==TRAILING_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function12194);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1453:65: ( expression )?
					int alt418=2;
					int LA418_0 = input.LA(1);
					if ( (LA418_0==EXPR||LA418_0==LOGIC_EXPR) ) {
						alt418=1;
					}
					switch (alt418) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1453:65: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12196);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1455:10: ^( XMLAGG_VK expression ( order_by_clause )? )
					{
					match(input,XMLAGG_VK,FOLLOW_XMLAGG_VK_in_standard_function12212); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12214);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1455:33: ( order_by_clause )?
					int alt419=2;
					int LA419_0 = input.LA(1);
					if ( (LA419_0==SQL92_RESERVED_ORDER) ) {
						alt419=1;
					}
					switch (alt419) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1455:33: order_by_clause
							{
							pushFollow(FOLLOW_order_by_clause_in_standard_function12216);
							order_by_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1456:10: ^( ( XMLCOLATTVAL_VK | XMLFOREST_VK ) ( xml_multiuse_expression_element )+ )
					{
					if ( input.LA(1)==XMLCOLATTVAL_VK||input.LA(1)==XMLFOREST_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1456:43: ( xml_multiuse_expression_element )+
					int cnt420=0;
					loop420:
					while (true) {
						int alt420=2;
						int LA420_0 = input.LA(1);
						if ( (LA420_0==XML_ELEMENT) ) {
							alt420=1;
						}

						switch (alt420) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1456:43: xml_multiuse_expression_element
							{
							pushFollow(FOLLOW_xml_multiuse_expression_element_in_standard_function12236);
							xml_multiuse_expression_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt420 >= 1 ) break loop420;
							EarlyExitException eee = new EarlyExitException(420, input);
							throw eee;
						}
						cnt420++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1457:10: ^( XMLEXISTS_VK expression ( xml_passing_clause )? )
					{
					match(input,XMLEXISTS_VK,FOLLOW_XMLEXISTS_VK_in_standard_function12250); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12252);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1457:36: ( xml_passing_clause )?
					int alt421=2;
					int LA421_0 = input.LA(1);
					if ( (LA421_0==PASSING_VK) ) {
						alt421=1;
					}
					switch (alt421) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1457:36: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function12254);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 18 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1458:10: ^( XMLPARSE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( WELLFORMED_VK )? )
					{
					match(input,XMLPARSE_VK,FOLLOW_XMLPARSE_VK_in_standard_function12268); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==CONTENT_VK||input.LA(1)==DOCUMENT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_expression_in_standard_function12276);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1458:60: ( WELLFORMED_VK )?
					int alt422=2;
					int LA422_0 = input.LA(1);
					if ( (LA422_0==WELLFORMED_VK) ) {
						alt422=1;
					}
					switch (alt422) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1458:60: WELLFORMED_VK
							{
							match(input,WELLFORMED_VK,FOLLOW_WELLFORMED_VK_in_standard_function12278); 
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 19 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1459:10: ^( XMLQUERY_VK expression ( xml_passing_clause )? ( SQL92_RESERVED_NULL )? )
					{
					match(input,XMLQUERY_VK,FOLLOW_XMLQUERY_VK_in_standard_function12292); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12294);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1459:35: ( xml_passing_clause )?
					int alt423=2;
					int LA423_0 = input.LA(1);
					if ( (LA423_0==PASSING_VK) ) {
						alt423=1;
					}
					switch (alt423) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1459:35: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function12296);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1459:55: ( SQL92_RESERVED_NULL )?
					int alt424=2;
					int LA424_0 = input.LA(1);
					if ( (LA424_0==SQL92_RESERVED_NULL) ) {
						alt424=1;
					}
					switch (alt424) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1459:55: SQL92_RESERVED_NULL
							{
							match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_standard_function12299); 
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 20 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1460:10: ^( XMLROOT_VK expression xml_param_version_part ( xmlroot_param_standalone_part )? )
					{
					match(input,XMLROOT_VK,FOLLOW_XMLROOT_VK_in_standard_function12313); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_standard_function12315);
					expression();
					state._fsp--;

					pushFollow(FOLLOW_xml_param_version_part_in_standard_function12317);
					xml_param_version_part();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1460:57: ( xmlroot_param_standalone_part )?
					int alt425=2;
					int LA425_0 = input.LA(1);
					if ( (LA425_0==STANDALONE_VK) ) {
						alt425=1;
					}
					switch (alt425) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1460:57: xmlroot_param_standalone_part
							{
							pushFollow(FOLLOW_xmlroot_param_standalone_part_in_standard_function12319);
							xmlroot_param_standalone_part();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 21 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1461:10: ^( XMLTABLE_VK ( xml_namespaces_clause )? expression ( xml_passing_clause )? ( xml_table_column )* )
					{
					match(input,XMLTABLE_VK,FOLLOW_XMLTABLE_VK_in_standard_function12333); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1461:24: ( xml_namespaces_clause )?
					int alt426=2;
					int LA426_0 = input.LA(1);
					if ( (LA426_0==XMLNAMESPACES_VK) ) {
						alt426=1;
					}
					switch (alt426) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1461:24: xml_namespaces_clause
							{
							pushFollow(FOLLOW_xml_namespaces_clause_in_standard_function12335);
							xml_namespaces_clause();
							state._fsp--;

							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function12338);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1461:58: ( xml_passing_clause )?
					int alt427=2;
					int LA427_0 = input.LA(1);
					if ( (LA427_0==PASSING_VK) ) {
						alt427=1;
					}
					switch (alt427) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1461:58: xml_passing_clause
							{
							pushFollow(FOLLOW_xml_passing_clause_in_standard_function12340);
							xml_passing_clause();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1461:78: ( xml_table_column )*
					loop428:
					while (true) {
						int alt428=2;
						int LA428_0 = input.LA(1);
						if ( (LA428_0==XML_COLUMN) ) {
							alt428=1;
						}

						switch (alt428) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1461:78: xml_table_column
							{
							pushFollow(FOLLOW_xml_table_column_in_standard_function12343);
							xml_table_column();
							state._fsp--;

							}
							break;

						default :
							break loop428;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 22 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1462:10: ^( XMLELEMENT_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( NAME_VK | EVALNAME_VK )? expression ( xml_attributes_clause )? ( expression ( alias )? )* )
					{
					match(input,XMLELEMENT_VK,FOLLOW_XMLELEMENT_VK_in_standard_function12357); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1463:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
					int alt429=2;
					int LA429_0 = input.LA(1);
					if ( (LA429_0==ENTITYESCAPING_VK||LA429_0==NOENTITYESCAPING_VK) ) {
						alt429=1;
					}
					switch (alt429) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
							{
							if ( input.LA(1)==ENTITYESCAPING_VK||input.LA(1)==NOENTITYESCAPING_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1464:13: ( NAME_VK | EVALNAME_VK )?
					int alt430=2;
					int LA430_0 = input.LA(1);
					if ( (LA430_0==EVALNAME_VK||LA430_0==NAME_VK) ) {
						alt430=1;
					}
					switch (alt430) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
							{
							if ( input.LA(1)==EVALNAME_VK||input.LA(1)==NAME_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_standard_function12397);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1465:13: ( xml_attributes_clause )?
					int alt431=2;
					int LA431_0 = input.LA(1);
					if ( (LA431_0==XMLATTRIBUTES_VK) ) {
						alt431=1;
					}
					switch (alt431) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1465:13: xml_attributes_clause
							{
							pushFollow(FOLLOW_xml_attributes_clause_in_standard_function12411);
							xml_attributes_clause();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1465:36: ( expression ( alias )? )*
					loop433:
					while (true) {
						int alt433=2;
						int LA433_0 = input.LA(1);
						if ( (LA433_0==EXPR||LA433_0==LOGIC_EXPR) ) {
							alt433=1;
						}

						switch (alt433) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1465:37: expression ( alias )?
							{
							pushFollow(FOLLOW_expression_in_standard_function12415);
							expression();
							state._fsp--;

							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1465:48: ( alias )?
							int alt432=2;
							int LA432_0 = input.LA(1);
							if ( (LA432_0==ALIAS) ) {
								alt432=1;
							}
							switch (alt432) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1465:48: alias
									{
									pushFollow(FOLLOW_alias_in_standard_function12417);
									alias();
									state._fsp--;

									}
									break;

							}

							}
							break;

						default :
							break loop433;
						}
					}

					match(input, Token.UP, null); 

					}
					break;
				case 23 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1467:10: ^( XMLPI_VK ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression ) ( expression )? )
					{
					match(input,XMLPI_VK,FOLLOW_XMLPI_VK_in_standard_function12442); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1468:17: ( NAME_VK ( char_set_name )? ID | EVALNAME_VK expression )
					int alt435=2;
					int LA435_0 = input.LA(1);
					if ( (LA435_0==NAME_VK) ) {
						alt435=1;
					}
					else if ( (LA435_0==EVALNAME_VK) ) {
						alt435=2;
					}

					else {
						NoViableAltException nvae =
							new NoViableAltException("", 435, 0, input);
						throw nvae;
					}

					switch (alt435) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1468:22: NAME_VK ( char_set_name )? ID
							{
							match(input,NAME_VK,FOLLOW_NAME_VK_in_standard_function12465); 
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1468:30: ( char_set_name )?
							int alt434=2;
							int LA434_0 = input.LA(1);
							if ( (LA434_0==CHAR_SET_NAME) ) {
								alt434=1;
							}
							switch (alt434) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1468:30: char_set_name
									{
									pushFollow(FOLLOW_char_set_name_in_standard_function12467);
									char_set_name();
									state._fsp--;

									}
									break;

							}

							match(input,ID,FOLLOW_ID_in_standard_function12470); 
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1469:22: EVALNAME_VK expression
							{
							match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_standard_function12493); 
							pushFollow(FOLLOW_expression_in_standard_function12495);
							expression();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1471:17: ( expression )?
					int alt436=2;
					int LA436_0 = input.LA(1);
					if ( (LA436_0==EXPR||LA436_0==LOGIC_EXPR) ) {
						alt436=1;
					}
					switch (alt436) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1471:17: expression
							{
							pushFollow(FOLLOW_expression_in_standard_function12531);
							expression();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 24 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1473:10: ^( XMLSERIALIZE_VK ( DOCUMENT_VK | CONTENT_VK ) expression ( type_spec )? ( xmlserialize_param_enconding_part )? ( xml_param_version_part )? ( xmlserialize_param_ident_part )? ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )? )
					{
					match(input,XMLSERIALIZE_VK,FOLLOW_XMLSERIALIZE_VK_in_standard_function12554); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==CONTENT_VK||input.LA(1)==DOCUMENT_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					pushFollow(FOLLOW_expression_in_standard_function12594);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1475:28: ( type_spec )?
					int alt437=2;
					int LA437_0 = input.LA(1);
					if ( (LA437_0==CUSTOM_TYPE||LA437_0==INTERVAL_DATATYPE||LA437_0==NATIVE_DATATYPE) ) {
						alt437=1;
					}
					switch (alt437) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1475:28: type_spec
							{
							pushFollow(FOLLOW_type_spec_in_standard_function12596);
							type_spec();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1476:17: ( xmlserialize_param_enconding_part )?
					int alt438=2;
					int LA438_0 = input.LA(1);
					if ( (LA438_0==ENCODING_VK) ) {
						alt438=1;
					}
					switch (alt438) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1476:17: xmlserialize_param_enconding_part
							{
							pushFollow(FOLLOW_xmlserialize_param_enconding_part_in_standard_function12615);
							xmlserialize_param_enconding_part();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1477:17: ( xml_param_version_part )?
					int alt439=2;
					int LA439_0 = input.LA(1);
					if ( (LA439_0==VERSION_VK) ) {
						alt439=1;
					}
					switch (alt439) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1477:17: xml_param_version_part
							{
							pushFollow(FOLLOW_xml_param_version_part_in_standard_function12634);
							xml_param_version_part();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1478:17: ( xmlserialize_param_ident_part )?
					int alt440=2;
					int LA440_0 = input.LA(1);
					if ( (LA440_0==INDENT_VK||LA440_0==NO_VK) ) {
						alt440=1;
					}
					switch (alt440) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1478:17: xmlserialize_param_ident_part
							{
							pushFollow(FOLLOW_xmlserialize_param_ident_part_in_standard_function12653);
							xmlserialize_param_ident_part();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1479:17: ( ( HIDE_VK | SHOW_VK ) DEFAULTS_VK )?
					int alt441=2;
					int LA441_0 = input.LA(1);
					if ( (LA441_0==HIDE_VK||LA441_0==SHOW_VK) ) {
						alt441=1;
					}
					switch (alt441) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1479:18: ( HIDE_VK | SHOW_VK ) DEFAULTS_VK
							{
							if ( input.LA(1)==HIDE_VK||input.LA(1)==SHOW_VK ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							match(input,DEFAULTS_VK,FOLLOW_DEFAULTS_VK_in_standard_function12679); 
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "standard_function"



	// $ANTLR start "over_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1483:1: over_clause : ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) ;
	public final void over_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1484:5: ( ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1484:10: ^( OVER_VK ( query_partition_clause )? ( order_by_clause ( windowing_clause )? )? )
			{
			match(input,OVER_VK,FOLLOW_OVER_VK_in_over_clause12712); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1484:20: ( query_partition_clause )?
				int alt443=2;
				int LA443_0 = input.LA(1);
				if ( (LA443_0==PARTITION_VK) ) {
					alt443=1;
				}
				switch (alt443) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1484:20: query_partition_clause
						{
						pushFollow(FOLLOW_query_partition_clause_in_over_clause12714);
						query_partition_clause();
						state._fsp--;

						}
						break;

				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1484:44: ( order_by_clause ( windowing_clause )? )?
				int alt445=2;
				int LA445_0 = input.LA(1);
				if ( (LA445_0==SQL92_RESERVED_ORDER) ) {
					alt445=1;
				}
				switch (alt445) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1484:45: order_by_clause ( windowing_clause )?
						{
						pushFollow(FOLLOW_order_by_clause_in_over_clause12718);
						order_by_clause();
						state._fsp--;

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1484:61: ( windowing_clause )?
						int alt444=2;
						int LA444_0 = input.LA(1);
						if ( (LA444_0==RANGE_VK||LA444_0==ROWS_VK) ) {
							alt444=1;
						}
						switch (alt444) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1484:61: windowing_clause
								{
								pushFollow(FOLLOW_windowing_clause_in_over_clause12720);
								windowing_clause();
								state._fsp--;

								}
								break;

						}

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "over_clause"



	// $ANTLR start "windowing_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1487:1: windowing_clause : ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) ;
	public final void windowing_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1488:5: ( ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1488:10: ^( ( ROWS_VK | RANGE_VK ) ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ ) )
			{
			if ( input.LA(1)==RANGE_VK||input.LA(1)==ROWS_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1489:13: ( ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements ) | ( windowing_elements )+ )
			int alt447=2;
			int LA447_0 = input.LA(1);
			if ( (LA447_0==SQL92_RESERVED_BETWEEN) ) {
				alt447=1;
			}
			else if ( (LA447_0==CURRENT_VK||LA447_0==FOLLOWING_VK||LA447_0==PRECEDING_VK||LA447_0==UNBOUNDED_VK) ) {
				alt447=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 447, 0, input);
				throw nvae;
			}

			switch (alt447) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1489:18: ^( SQL92_RESERVED_BETWEEN windowing_elements windowing_elements )
					{
					match(input,SQL92_RESERVED_BETWEEN,FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause12769); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_windowing_elements_in_windowing_clause12771);
					windowing_elements();
					state._fsp--;

					pushFollow(FOLLOW_windowing_elements_in_windowing_clause12773);
					windowing_elements();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1490:18: ( windowing_elements )+
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1490:18: ( windowing_elements )+
					int cnt446=0;
					loop446:
					while (true) {
						int alt446=2;
						int LA446_0 = input.LA(1);
						if ( (LA446_0==CURRENT_VK||LA446_0==FOLLOWING_VK||LA446_0==PRECEDING_VK||LA446_0==UNBOUNDED_VK) ) {
							alt446=1;
						}

						switch (alt446) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1490:18: windowing_elements
							{
							pushFollow(FOLLOW_windowing_elements_in_windowing_clause12793);
							windowing_elements();
							state._fsp--;

							}
							break;

						default :
							if ( cnt446 >= 1 ) break loop446;
							EarlyExitException eee = new EarlyExitException(446, input);
							throw eee;
						}
						cnt446++;
					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "windowing_clause"



	// $ANTLR start "windowing_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1495:1: windowing_elements : ( ^( UNBOUNDED_VK PRECEDING_VK ) | ^( CURRENT_VK ROW_VK ) | ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) );
	public final void windowing_elements() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1496:5: ( ^( UNBOUNDED_VK PRECEDING_VK ) | ^( CURRENT_VK ROW_VK ) | ^( ( PRECEDING_VK | FOLLOWING_VK ) expression ) )
			int alt448=3;
			switch ( input.LA(1) ) {
			case UNBOUNDED_VK:
				{
				alt448=1;
				}
				break;
			case CURRENT_VK:
				{
				alt448=2;
				}
				break;
			case FOLLOWING_VK:
			case PRECEDING_VK:
				{
				alt448=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 448, 0, input);
				throw nvae;
			}
			switch (alt448) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1496:10: ^( UNBOUNDED_VK PRECEDING_VK )
					{
					match(input,UNBOUNDED_VK,FOLLOW_UNBOUNDED_VK_in_windowing_elements12839); 
					match(input, Token.DOWN, null); 
					match(input,PRECEDING_VK,FOLLOW_PRECEDING_VK_in_windowing_elements12841); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1497:10: ^( CURRENT_VK ROW_VK )
					{
					match(input,CURRENT_VK,FOLLOW_CURRENT_VK_in_windowing_elements12854); 
					match(input, Token.DOWN, null); 
					match(input,ROW_VK,FOLLOW_ROW_VK_in_windowing_elements12856); 
					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1498:10: ^( ( PRECEDING_VK | FOLLOWING_VK ) expression )
					{
					if ( input.LA(1)==FOLLOWING_VK||input.LA(1)==PRECEDING_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_windowing_elements12875);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "windowing_elements"



	// $ANTLR start "using_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1501:1: using_clause : ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) ;
	public final void using_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1502:5: ( ^( PLSQL_NON_RESERVED_USING ( using_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1502:10: ^( PLSQL_NON_RESERVED_USING ( using_element )+ )
			{
			match(input,PLSQL_NON_RESERVED_USING,FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause12897); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1502:37: ( using_element )+
			int cnt449=0;
			loop449:
			while (true) {
				int alt449=2;
				int LA449_0 = input.LA(1);
				if ( (LA449_0==ASTERISK||LA449_0==ELEMENT) ) {
					alt449=1;
				}

				switch (alt449) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1502:37: using_element
					{
					pushFollow(FOLLOW_using_element_in_using_clause12899);
					using_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt449 >= 1 ) break loop449;
					EarlyExitException eee = new EarlyExitException(449, input);
					throw eee;
				}
				cnt449++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "using_clause"



	// $ANTLR start "using_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1505:1: using_element : ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) | ASTERISK );
	public final void using_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1506:5: ( ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? ) | ASTERISK )
			int alt453=2;
			int LA453_0 = input.LA(1);
			if ( (LA453_0==ELEMENT) ) {
				alt453=1;
			}
			else if ( (LA453_0==ASTERISK) ) {
				alt453=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 453, 0, input);
				throw nvae;
			}

			switch (alt453) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1506:10: ^( ELEMENT ( SQL92_RESERVED_IN )? ( OUT_VK )? expression ( alias )? )
					{
					match(input,ELEMENT,FOLLOW_ELEMENT_in_using_element12922); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1506:20: ( SQL92_RESERVED_IN )?
					int alt450=2;
					int LA450_0 = input.LA(1);
					if ( (LA450_0==SQL92_RESERVED_IN) ) {
						alt450=1;
					}
					switch (alt450) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1506:20: SQL92_RESERVED_IN
							{
							match(input,SQL92_RESERVED_IN,FOLLOW_SQL92_RESERVED_IN_in_using_element12924); 
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1506:39: ( OUT_VK )?
					int alt451=2;
					int LA451_0 = input.LA(1);
					if ( (LA451_0==OUT_VK) ) {
						alt451=1;
					}
					switch (alt451) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1506:39: OUT_VK
							{
							match(input,OUT_VK,FOLLOW_OUT_VK_in_using_element12927); 
							}
							break;

					}

					pushFollow(FOLLOW_expression_in_using_element12930);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1506:58: ( alias )?
					int alt452=2;
					int LA452_0 = input.LA(1);
					if ( (LA452_0==ALIAS) ) {
						alt452=1;
					}
					switch (alt452) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1506:58: alias
							{
							pushFollow(FOLLOW_alias_in_using_element12932);
							alias();
							state._fsp--;

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1507:10: ASTERISK
					{
					match(input,ASTERISK,FOLLOW_ASTERISK_in_using_element12945); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "using_element"



	// $ANTLR start "collect_order_by_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1510:1: collect_order_by_part : ^( SQL92_RESERVED_ORDER expression ) ;
	public final void collect_order_by_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1511:5: ( ^( SQL92_RESERVED_ORDER expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1511:10: ^( SQL92_RESERVED_ORDER expression )
			{
			match(input,SQL92_RESERVED_ORDER,FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part12966); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_collect_order_by_part12968);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "collect_order_by_part"



	// $ANTLR start "within_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1514:1: within_clause : ^( WITHIN_VK order_by_clause ) ;
	public final void within_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1515:5: ( ^( WITHIN_VK order_by_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1515:10: ^( WITHIN_VK order_by_clause )
			{
			match(input,WITHIN_VK,FOLLOW_WITHIN_VK_in_within_clause12990); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_order_by_clause_in_within_clause12992);
			order_by_clause();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "within_clause"



	// $ANTLR start "cost_matrix_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1518:1: cost_matrix_clause : ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) ;
	public final void cost_matrix_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1519:5: ( ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1519:10: ^( COST_VK ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list ) )
			{
			match(input,COST_VK,FOLLOW_COST_VK_in_cost_matrix_clause13014); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1520:13: ( PLSQL_NON_RESERVED_MODEL ( AUTO_VK )? | ( cost_class_name )+ expression_list )
			int alt456=2;
			int LA456_0 = input.LA(1);
			if ( (LA456_0==PLSQL_NON_RESERVED_MODEL) ) {
				alt456=1;
			}
			else if ( (LA456_0==COST_CLASS_NAME) ) {
				alt456=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 456, 0, input);
				throw nvae;
			}

			switch (alt456) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1520:18: PLSQL_NON_RESERVED_MODEL ( AUTO_VK )?
					{
					match(input,PLSQL_NON_RESERVED_MODEL,FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause13033); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1520:43: ( AUTO_VK )?
					int alt454=2;
					int LA454_0 = input.LA(1);
					if ( (LA454_0==AUTO_VK) ) {
						alt454=1;
					}
					switch (alt454) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1520:43: AUTO_VK
							{
							match(input,AUTO_VK,FOLLOW_AUTO_VK_in_cost_matrix_clause13035); 
							}
							break;

					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1521:18: ( cost_class_name )+ expression_list
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1521:18: ( cost_class_name )+
					int cnt455=0;
					loop455:
					while (true) {
						int alt455=2;
						int LA455_0 = input.LA(1);
						if ( (LA455_0==COST_CLASS_NAME) ) {
							alt455=1;
						}

						switch (alt455) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1521:18: cost_class_name
							{
							pushFollow(FOLLOW_cost_class_name_in_cost_matrix_clause13055);
							cost_class_name();
							state._fsp--;

							}
							break;

						default :
							if ( cnt455 >= 1 ) break loop455;
							EarlyExitException eee = new EarlyExitException(455, input);
							throw eee;
						}
						cnt455++;
					}

					pushFollow(FOLLOW_expression_list_in_cost_matrix_clause13058);
					expression_list();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "cost_matrix_clause"



	// $ANTLR start "xml_passing_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1526:1: xml_passing_clause : ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) ;
	public final void xml_passing_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:5: ( ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:10: ^( PASSING_VK ( VALUE_VK )? expression ( alias )? ( expression ( alias )? )? )
			{
			match(input,PASSING_VK,FOLLOW_PASSING_VK_in_xml_passing_clause13103); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:23: ( VALUE_VK )?
			int alt457=2;
			int LA457_0 = input.LA(1);
			if ( (LA457_0==VALUE_VK) ) {
				alt457=1;
			}
			switch (alt457) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:23: VALUE_VK
					{
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_passing_clause13105); 
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_xml_passing_clause13108);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:44: ( alias )?
			int alt458=2;
			int LA458_0 = input.LA(1);
			if ( (LA458_0==ALIAS) ) {
				alt458=1;
			}
			switch (alt458) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:44: alias
					{
					pushFollow(FOLLOW_alias_in_xml_passing_clause13110);
					alias();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:51: ( expression ( alias )? )?
			int alt460=2;
			int LA460_0 = input.LA(1);
			if ( (LA460_0==EXPR||LA460_0==LOGIC_EXPR) ) {
				alt460=1;
			}
			switch (alt460) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:52: expression ( alias )?
					{
					pushFollow(FOLLOW_expression_in_xml_passing_clause13114);
					expression();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:63: ( alias )?
					int alt459=2;
					int LA459_0 = input.LA(1);
					if ( (LA459_0==ALIAS) ) {
						alt459=1;
					}
					switch (alt459) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1527:63: alias
							{
							pushFollow(FOLLOW_alias_in_xml_passing_clause13116);
							alias();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_passing_clause"



	// $ANTLR start "xml_attributes_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1530:1: xml_attributes_clause : ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) ;
	public final void xml_attributes_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1531:5: ( ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1531:10: ^( XMLATTRIBUTES_VK ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )? ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )? ( xml_multiuse_expression_element )+ )
			{
			match(input,XMLATTRIBUTES_VK,FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause13141); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1532:13: ( ENTITYESCAPING_VK | NOENTITYESCAPING_VK )?
			int alt461=2;
			int LA461_0 = input.LA(1);
			if ( (LA461_0==ENTITYESCAPING_VK||LA461_0==NOENTITYESCAPING_VK) ) {
				alt461=1;
			}
			switch (alt461) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==ENTITYESCAPING_VK||input.LA(1)==NOENTITYESCAPING_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1533:13: ( SCHEMACHECK_VK | NOSCHEMACHECK_VK )?
			int alt462=2;
			int LA462_0 = input.LA(1);
			if ( (LA462_0==NOSCHEMACHECK_VK||LA462_0==SCHEMACHECK_VK) ) {
				alt462=1;
			}
			switch (alt462) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==NOSCHEMACHECK_VK||input.LA(1)==SCHEMACHECK_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1534:13: ( xml_multiuse_expression_element )+
			int cnt463=0;
			loop463:
			while (true) {
				int alt463=2;
				int LA463_0 = input.LA(1);
				if ( (LA463_0==XML_ELEMENT) ) {
					alt463=1;
				}

				switch (alt463) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1534:13: xml_multiuse_expression_element
					{
					pushFollow(FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause13193);
					xml_multiuse_expression_element();
					state._fsp--;

					}
					break;

				default :
					if ( cnt463 >= 1 ) break loop463;
					EarlyExitException eee = new EarlyExitException(463, input);
					throw eee;
				}
				cnt463++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_attributes_clause"



	// $ANTLR start "xml_namespaces_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1538:1: xml_namespaces_clause : ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) ;
	public final void xml_namespaces_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1539:5: ( ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1539:10: ^( XMLNAMESPACES_VK ( expression ( alias )? )* ( xml_general_default_part )? )
			{
			match(input,XMLNAMESPACES_VK,FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause13225); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1540:13: ( expression ( alias )? )*
				loop465:
				while (true) {
					int alt465=2;
					int LA465_0 = input.LA(1);
					if ( (LA465_0==EXPR||LA465_0==LOGIC_EXPR) ) {
						alt465=1;
					}

					switch (alt465) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1540:14: expression ( alias )?
						{
						pushFollow(FOLLOW_expression_in_xml_namespaces_clause13240);
						expression();
						state._fsp--;

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1540:25: ( alias )?
						int alt464=2;
						int LA464_0 = input.LA(1);
						if ( (LA464_0==ALIAS) ) {
							alt464=1;
						}
						switch (alt464) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1540:25: alias
								{
								pushFollow(FOLLOW_alias_in_xml_namespaces_clause13242);
								alias();
								state._fsp--;

								}
								break;

						}

						}
						break;

					default :
						break loop465;
					}
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1540:34: ( xml_general_default_part )?
				int alt466=2;
				int LA466_0 = input.LA(1);
				if ( (LA466_0==SQL92_RESERVED_DEFAULT) ) {
					alt466=1;
				}
				switch (alt466) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1540:34: xml_general_default_part
						{
						pushFollow(FOLLOW_xml_general_default_part_in_xml_namespaces_clause13247);
						xml_general_default_part();
						state._fsp--;

						}
						break;

				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_namespaces_clause"



	// $ANTLR start "xml_table_column"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1544:1: xml_table_column : ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) ;
	public final void xml_table_column() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:5: ( ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:10: ^( XML_COLUMN xml_column_name ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? ) )
			{
			match(input,XML_COLUMN,FOLLOW_XML_COLUMN_in_xml_table_column13279); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_xml_column_name_in_xml_table_column13281);
			xml_column_name();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:39: ( ORDINALITY_VK | type_spec ( expression )? ( xml_general_default_part )? )
			int alt469=2;
			int LA469_0 = input.LA(1);
			if ( (LA469_0==ORDINALITY_VK) ) {
				alt469=1;
			}
			else if ( (LA469_0==CUSTOM_TYPE||LA469_0==INTERVAL_DATATYPE||LA469_0==NATIVE_DATATYPE) ) {
				alt469=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 469, 0, input);
				throw nvae;
			}

			switch (alt469) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:40: ORDINALITY_VK
					{
					match(input,ORDINALITY_VK,FOLLOW_ORDINALITY_VK_in_xml_table_column13284); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:54: type_spec ( expression )? ( xml_general_default_part )?
					{
					pushFollow(FOLLOW_type_spec_in_xml_table_column13286);
					type_spec();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:64: ( expression )?
					int alt467=2;
					int LA467_0 = input.LA(1);
					if ( (LA467_0==EXPR||LA467_0==LOGIC_EXPR) ) {
						alt467=1;
					}
					switch (alt467) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:64: expression
							{
							pushFollow(FOLLOW_expression_in_xml_table_column13288);
							expression();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:76: ( xml_general_default_part )?
					int alt468=2;
					int LA468_0 = input.LA(1);
					if ( (LA468_0==SQL92_RESERVED_DEFAULT) ) {
						alt468=1;
					}
					switch (alt468) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1545:76: xml_general_default_part
							{
							pushFollow(FOLLOW_xml_general_default_part_in_xml_table_column13291);
							xml_general_default_part();
							state._fsp--;

							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_table_column"



	// $ANTLR start "xml_general_default_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1548:1: xml_general_default_part : ^( SQL92_RESERVED_DEFAULT expression ) ;
	public final void xml_general_default_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1549:5: ( ^( SQL92_RESERVED_DEFAULT expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1549:10: ^( SQL92_RESERVED_DEFAULT expression )
			{
			match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part13316); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_general_default_part13318);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_general_default_part"



	// $ANTLR start "xml_multiuse_expression_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1552:1: xml_multiuse_expression_element : ^( XML_ELEMENT expression ( xml_alias )? ) ;
	public final void xml_multiuse_expression_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1553:5: ( ^( XML_ELEMENT expression ( xml_alias )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1553:10: ^( XML_ELEMENT expression ( xml_alias )? )
			{
			match(input,XML_ELEMENT,FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element13340); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xml_multiuse_expression_element13342);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1553:35: ( xml_alias )?
			int alt470=2;
			int LA470_0 = input.LA(1);
			if ( (LA470_0==XML_ALIAS) ) {
				alt470=1;
			}
			switch (alt470) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1553:35: xml_alias
					{
					pushFollow(FOLLOW_xml_alias_in_xml_multiuse_expression_element13344);
					xml_alias();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_multiuse_expression_element"



	// $ANTLR start "xml_alias"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1556:1: xml_alias : ( ^( XML_ALIAS ID ) | ^( XML_ALIAS ^( EVALNAME_VK expression ) ) );
	public final void xml_alias() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1557:5: ( ^( XML_ALIAS ID ) | ^( XML_ALIAS ^( EVALNAME_VK expression ) ) )
			int alt471=2;
			int LA471_0 = input.LA(1);
			if ( (LA471_0==XML_ALIAS) ) {
				int LA471_1 = input.LA(2);
				if ( (LA471_1==DOWN) ) {
					int LA471_2 = input.LA(3);
					if ( (LA471_2==ID) ) {
						alt471=1;
					}
					else if ( (LA471_2==EVALNAME_VK) ) {
						alt471=2;
					}

					else {
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 471, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 471, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 471, 0, input);
				throw nvae;
			}

			switch (alt471) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1557:10: ^( XML_ALIAS ID )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias13367); 
					match(input, Token.DOWN, null); 
					match(input,ID,FOLLOW_ID_in_xml_alias13369); 
					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1558:10: ^( XML_ALIAS ^( EVALNAME_VK expression ) )
					{
					match(input,XML_ALIAS,FOLLOW_XML_ALIAS_in_xml_alias13382); 
					match(input, Token.DOWN, null); 
					match(input,EVALNAME_VK,FOLLOW_EVALNAME_VK_in_xml_alias13385); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_expression_in_xml_alias13387);
					expression();
					state._fsp--;

					match(input, Token.UP, null); 

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_alias"



	// $ANTLR start "xml_param_version_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1561:1: xml_param_version_part : ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) ;
	public final void xml_param_version_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1562:5: ( ^( VERSION_VK ( NO_VK VALUE_VK | expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1562:10: ^( VERSION_VK ( NO_VK VALUE_VK | expression ) )
			{
			match(input,VERSION_VK,FOLLOW_VERSION_VK_in_xml_param_version_part13410); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1562:23: ( NO_VK VALUE_VK | expression )
			int alt472=2;
			int LA472_0 = input.LA(1);
			if ( (LA472_0==NO_VK) ) {
				alt472=1;
			}
			else if ( (LA472_0==EXPR||LA472_0==LOGIC_EXPR) ) {
				alt472=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 472, 0, input);
				throw nvae;
			}

			switch (alt472) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1562:24: NO_VK VALUE_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xml_param_version_part13413); 
					match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xml_param_version_part13415); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1562:39: expression
					{
					pushFollow(FOLLOW_expression_in_xml_param_version_part13417);
					expression();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_param_version_part"



	// $ANTLR start "xmlroot_param_standalone_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1565:1: xmlroot_param_standalone_part : ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) ;
	public final void xmlroot_param_standalone_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1566:5: ( ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1566:10: ^( STANDALONE_VK ( YES_VK | NO_VK ( VALUE_VK )? ) )
			{
			match(input,STANDALONE_VK,FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part13440); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1566:26: ( YES_VK | NO_VK ( VALUE_VK )? )
			int alt474=2;
			int LA474_0 = input.LA(1);
			if ( (LA474_0==YES_VK) ) {
				alt474=1;
			}
			else if ( (LA474_0==NO_VK) ) {
				alt474=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 474, 0, input);
				throw nvae;
			}

			switch (alt474) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1566:27: YES_VK
					{
					match(input,YES_VK,FOLLOW_YES_VK_in_xmlroot_param_standalone_part13443); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1566:34: NO_VK ( VALUE_VK )?
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlroot_param_standalone_part13445); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1566:40: ( VALUE_VK )?
					int alt473=2;
					int LA473_0 = input.LA(1);
					if ( (LA473_0==VALUE_VK) ) {
						alt473=1;
					}
					switch (alt473) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1566:40: VALUE_VK
							{
							match(input,VALUE_VK,FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part13447); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xmlroot_param_standalone_part"



	// $ANTLR start "xmlserialize_param_enconding_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1569:1: xmlserialize_param_enconding_part : ^( ENCODING_VK expression ) ;
	public final void xmlserialize_param_enconding_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1570:5: ( ^( ENCODING_VK expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1570:10: ^( ENCODING_VK expression )
			{
			match(input,ENCODING_VK,FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part13471); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_xmlserialize_param_enconding_part13473);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xmlserialize_param_enconding_part"



	// $ANTLR start "xmlserialize_param_ident_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1573:1: xmlserialize_param_ident_part : ( NO_VK INDENT_VK | ^( INDENT_VK ( expression )? ) );
	public final void xmlserialize_param_ident_part() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1574:5: ( NO_VK INDENT_VK | ^( INDENT_VK ( expression )? ) )
			int alt476=2;
			int LA476_0 = input.LA(1);
			if ( (LA476_0==NO_VK) ) {
				alt476=1;
			}
			else if ( (LA476_0==INDENT_VK) ) {
				alt476=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 476, 0, input);
				throw nvae;
			}

			switch (alt476) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1574:10: NO_VK INDENT_VK
					{
					match(input,NO_VK,FOLLOW_NO_VK_in_xmlserialize_param_ident_part13494); 
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13496); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1575:10: ^( INDENT_VK ( expression )? )
					{
					match(input,INDENT_VK,FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13508); 
					if ( input.LA(1)==Token.DOWN ) {
						match(input, Token.DOWN, null); 
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1575:22: ( expression )?
						int alt475=2;
						int LA475_0 = input.LA(1);
						if ( (LA475_0==EXPR||LA475_0==LOGIC_EXPR) ) {
							alt475=1;
						}
						switch (alt475) {
							case 1 :
								// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1575:22: expression
								{
								pushFollow(FOLLOW_expression_in_xmlserialize_param_ident_part13510);
								expression();
								state._fsp--;

								}
								break;

						}

						match(input, Token.UP, null); 
					}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xmlserialize_param_ident_part"



	// $ANTLR start "partition_extension_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1582:1: partition_extension_clause : ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) ;
	public final void partition_extension_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1583:5: ( ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1583:10: ^( ( SUBPARTITION_VK | PARTITION_VK ) expression_list )
			{
			if ( input.LA(1)==PARTITION_VK||input.LA(1)==SUBPARTITION_VK ) {
				input.consume();
				state.errorRecovery=false;
			}
			else {
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_list_in_partition_extension_clause13543);
			expression_list();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "partition_extension_clause"



	// $ANTLR start "alias"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1586:1: alias : ^( ALIAS ( char_set_name )? ID ) ;
	public final void alias() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1587:5: ( ^( ALIAS ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1587:10: ^( ALIAS ( char_set_name )? ID )
			{
			match(input,ALIAS,FOLLOW_ALIAS_in_alias13565); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1587:18: ( char_set_name )?
			int alt477=2;
			int LA477_0 = input.LA(1);
			if ( (LA477_0==CHAR_SET_NAME) ) {
				alt477=1;
			}
			switch (alt477) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1587:18: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_alias13567);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_alias13570); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "alias"



	// $ANTLR start "where_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1590:1: where_clause : ^( SQL92_RESERVED_WHERE expression ) ;
	public final void where_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1591:5: ( ^( SQL92_RESERVED_WHERE expression ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1591:10: ^( SQL92_RESERVED_WHERE expression )
			{
			match(input,SQL92_RESERVED_WHERE,FOLLOW_SQL92_RESERVED_WHERE_in_where_clause13592); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_where_clause13594);
			expression();
			state._fsp--;

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "where_clause"



	// $ANTLR start "into_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1594:1: into_clause : ( ^( SQL92_RESERVED_INTO ( general_element )+ ) | ^( BULK_VK ( general_element )+ ) );
	public final void into_clause() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1595:5: ( ^( SQL92_RESERVED_INTO ( general_element )+ ) | ^( BULK_VK ( general_element )+ ) )
			int alt480=2;
			int LA480_0 = input.LA(1);
			if ( (LA480_0==SQL92_RESERVED_INTO) ) {
				alt480=1;
			}
			else if ( (LA480_0==BULK_VK) ) {
				alt480=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 480, 0, input);
				throw nvae;
			}

			switch (alt480) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1595:10: ^( SQL92_RESERVED_INTO ( general_element )+ )
					{
					match(input,SQL92_RESERVED_INTO,FOLLOW_SQL92_RESERVED_INTO_in_into_clause13616); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1595:32: ( general_element )+
					int cnt478=0;
					loop478:
					while (true) {
						int alt478=2;
						int LA478_0 = input.LA(1);
						if ( (LA478_0==ANY_ELEMENT||LA478_0==CASCATED_ELEMENT||LA478_0==HOSTED_VARIABLE||LA478_0==HOSTED_VARIABLE_ROUTINE_CALL||LA478_0==ROUTINE_CALL) ) {
							alt478=1;
						}

						switch (alt478) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1595:32: general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause13618);
							general_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt478 >= 1 ) break loop478;
							EarlyExitException eee = new EarlyExitException(478, input);
							throw eee;
						}
						cnt478++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1596:10: ^( BULK_VK ( general_element )+ )
					{
					match(input,BULK_VK,FOLLOW_BULK_VK_in_into_clause13633); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1596:20: ( general_element )+
					int cnt479=0;
					loop479:
					while (true) {
						int alt479=2;
						int LA479_0 = input.LA(1);
						if ( (LA479_0==ANY_ELEMENT||LA479_0==CASCATED_ELEMENT||LA479_0==HOSTED_VARIABLE||LA479_0==HOSTED_VARIABLE_ROUTINE_CALL||LA479_0==ROUTINE_CALL) ) {
							alt479=1;
						}

						switch (alt479) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1596:20: general_element
							{
							pushFollow(FOLLOW_general_element_in_into_clause13635);
							general_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt479 >= 1 ) break loop479;
							EarlyExitException eee = new EarlyExitException(479, input);
							throw eee;
						}
						cnt479++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "into_clause"



	// $ANTLR start "xml_column_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1603:1: xml_column_name : ^( XML_COLUMN_NAME ( char_set_name )? ID ) ;
	public final void xml_column_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1604:5: ( ^( XML_COLUMN_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1604:10: ^( XML_COLUMN_NAME ( char_set_name )? ID )
			{
			match(input,XML_COLUMN_NAME,FOLLOW_XML_COLUMN_NAME_in_xml_column_name13663); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1604:28: ( char_set_name )?
			int alt481=2;
			int LA481_0 = input.LA(1);
			if ( (LA481_0==CHAR_SET_NAME) ) {
				alt481=1;
			}
			switch (alt481) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1604:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_xml_column_name13665);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_xml_column_name13668); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "xml_column_name"



	// $ANTLR start "cost_class_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1607:1: cost_class_name : ^( COST_CLASS_NAME ( char_set_name )? ID ) ;
	public final void cost_class_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1608:5: ( ^( COST_CLASS_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1608:10: ^( COST_CLASS_NAME ( char_set_name )? ID )
			{
			match(input,COST_CLASS_NAME,FOLLOW_COST_CLASS_NAME_in_cost_class_name13690); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1608:28: ( char_set_name )?
			int alt482=2;
			int LA482_0 = input.LA(1);
			if ( (LA482_0==CHAR_SET_NAME) ) {
				alt482=1;
			}
			switch (alt482) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1608:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cost_class_name13692);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_cost_class_name13695); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "cost_class_name"



	// $ANTLR start "attribute_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1611:1: attribute_name : ^( ATTRIBUTE_NAME ( char_set_name )? ID ) ;
	public final void attribute_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1612:5: ( ^( ATTRIBUTE_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1612:10: ^( ATTRIBUTE_NAME ( char_set_name )? ID )
			{
			match(input,ATTRIBUTE_NAME,FOLLOW_ATTRIBUTE_NAME_in_attribute_name13717); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1612:27: ( char_set_name )?
			int alt483=2;
			int LA483_0 = input.LA(1);
			if ( (LA483_0==CHAR_SET_NAME) ) {
				alt483=1;
			}
			switch (alt483) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1612:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_attribute_name13719);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_attribute_name13722); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "attribute_name"



	// $ANTLR start "savepoint_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1615:1: savepoint_name : ^( SAVEPOINT_NAME ( char_set_name )? ID ) ;
	public final void savepoint_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1616:5: ( ^( SAVEPOINT_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1616:10: ^( SAVEPOINT_NAME ( char_set_name )? ID )
			{
			match(input,SAVEPOINT_NAME,FOLLOW_SAVEPOINT_NAME_in_savepoint_name13744); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1616:27: ( char_set_name )?
			int alt484=2;
			int LA484_0 = input.LA(1);
			if ( (LA484_0==CHAR_SET_NAME) ) {
				alt484=1;
			}
			switch (alt484) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1616:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_savepoint_name13746);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_savepoint_name13749); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "savepoint_name"



	// $ANTLR start "rollback_segment_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1619:1: rollback_segment_name : ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) ;
	public final void rollback_segment_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1620:5: ( ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1620:10: ^( ROLLBACK_SEGMENT_NAME ( char_set_name )? ID )
			{
			match(input,ROLLBACK_SEGMENT_NAME,FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name13771); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1620:34: ( char_set_name )?
			int alt485=2;
			int LA485_0 = input.LA(1);
			if ( (LA485_0==CHAR_SET_NAME) ) {
				alt485=1;
			}
			switch (alt485) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1620:34: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_rollback_segment_name13773);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_rollback_segment_name13776); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "rollback_segment_name"



	// $ANTLR start "table_var_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1624:1: table_var_name : ^( TABLE_VAR_NAME ( char_set_name )? ID ) ;
	public final void table_var_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1625:5: ( ^( TABLE_VAR_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1625:10: ^( TABLE_VAR_NAME ( char_set_name )? ID )
			{
			match(input,TABLE_VAR_NAME,FOLLOW_TABLE_VAR_NAME_in_table_var_name13799); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1625:27: ( char_set_name )?
			int alt486=2;
			int LA486_0 = input.LA(1);
			if ( (LA486_0==CHAR_SET_NAME) ) {
				alt486=1;
			}
			switch (alt486) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1625:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_table_var_name13801);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_table_var_name13804); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "table_var_name"



	// $ANTLR start "schema_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1628:1: schema_name : ^( SCHEMA_NAME ( char_set_name )? ID ) ;
	public final void schema_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1629:5: ( ^( SCHEMA_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1629:10: ^( SCHEMA_NAME ( char_set_name )? ID )
			{
			match(input,SCHEMA_NAME,FOLLOW_SCHEMA_NAME_in_schema_name13826); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1629:24: ( char_set_name )?
			int alt487=2;
			int LA487_0 = input.LA(1);
			if ( (LA487_0==CHAR_SET_NAME) ) {
				alt487=1;
			}
			switch (alt487) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1629:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_schema_name13828);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_schema_name13831); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "schema_name"



	// $ANTLR start "routine_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1632:1: routine_name : ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) ;
	public final void routine_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1633:5: ( ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1633:10: ^( ROUTINE_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,ROUTINE_NAME,FOLLOW_ROUTINE_NAME_in_routine_name13853); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1633:25: ( char_set_name )?
			int alt488=2;
			int LA488_0 = input.LA(1);
			if ( (LA488_0==CHAR_SET_NAME) ) {
				alt488=1;
			}
			switch (alt488) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1633:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_routine_name13855);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1633:40: ( ID )+
			int cnt489=0;
			loop489:
			while (true) {
				int alt489=2;
				int LA489_0 = input.LA(1);
				if ( (LA489_0==ID) ) {
					alt489=1;
				}

				switch (alt489) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1633:40: ID
					{
					match(input,ID,FOLLOW_ID_in_routine_name13858); 
					}
					break;

				default :
					if ( cnt489 >= 1 ) break loop489;
					EarlyExitException eee = new EarlyExitException(489, input);
					throw eee;
				}
				cnt489++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1633:44: ( link_name )?
			int alt490=2;
			int LA490_0 = input.LA(1);
			if ( (LA490_0==LINK_NAME) ) {
				alt490=1;
			}
			switch (alt490) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1633:44: link_name
					{
					pushFollow(FOLLOW_link_name_in_routine_name13861);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "routine_name"



	// $ANTLR start "package_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1636:1: package_name : ^( PACKAGE_NAME ( char_set_name )? ( ID )+ ) ;
	public final void package_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1637:5: ( ^( PACKAGE_NAME ( char_set_name )? ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1637:10: ^( PACKAGE_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,PACKAGE_NAME,FOLLOW_PACKAGE_NAME_in_package_name13884); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1637:25: ( char_set_name )?
			int alt491=2;
			int LA491_0 = input.LA(1);
			if ( (LA491_0==CHAR_SET_NAME) ) {
				alt491=1;
			}
			switch (alt491) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1637:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_package_name13886);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1637:40: ( ID )+
			int cnt492=0;
			loop492:
			while (true) {
				int alt492=2;
				int LA492_0 = input.LA(1);
				if ( (LA492_0==ID) ) {
					alt492=1;
				}

				switch (alt492) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1637:40: ID
					{
					match(input,ID,FOLLOW_ID_in_package_name13889); 
					}
					break;

				default :
					if ( cnt492 >= 1 ) break loop492;
					EarlyExitException eee = new EarlyExitException(492, input);
					throw eee;
				}
				cnt492++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "package_name"



	// $ANTLR start "implementation_type_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1640:1: implementation_type_name : ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ ) ;
	public final void implementation_type_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1641:5: ( ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1641:10: ^( IMPLEMENTATION_TYPE_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,IMPLEMENTATION_TYPE_NAME,FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name13912); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1641:37: ( char_set_name )?
			int alt493=2;
			int LA493_0 = input.LA(1);
			if ( (LA493_0==CHAR_SET_NAME) ) {
				alt493=1;
			}
			switch (alt493) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1641:37: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_implementation_type_name13914);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1641:52: ( ID )+
			int cnt494=0;
			loop494:
			while (true) {
				int alt494=2;
				int LA494_0 = input.LA(1);
				if ( (LA494_0==ID) ) {
					alt494=1;
				}

				switch (alt494) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1641:52: ID
					{
					match(input,ID,FOLLOW_ID_in_implementation_type_name13917); 
					}
					break;

				default :
					if ( cnt494 >= 1 ) break loop494;
					EarlyExitException eee = new EarlyExitException(494, input);
					throw eee;
				}
				cnt494++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "implementation_type_name"



	// $ANTLR start "parameter_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1644:1: parameter_name : ^( PARAMETER_NAME ( char_set_name )? ID ) ;
	public final void parameter_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1645:5: ( ^( PARAMETER_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1645:10: ^( PARAMETER_NAME ( char_set_name )? ID )
			{
			match(input,PARAMETER_NAME,FOLLOW_PARAMETER_NAME_in_parameter_name13940); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1645:27: ( char_set_name )?
			int alt495=2;
			int LA495_0 = input.LA(1);
			if ( (LA495_0==CHAR_SET_NAME) ) {
				alt495=1;
			}
			switch (alt495) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1645:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_parameter_name13942);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_parameter_name13945); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "parameter_name"



	// $ANTLR start "reference_model_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1648:1: reference_model_name : ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) ;
	public final void reference_model_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1649:5: ( ^( REFERENCE_MODEL_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1649:10: ^( REFERENCE_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,REFERENCE_MODEL_NAME,FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name13967); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1649:33: ( char_set_name )?
			int alt496=2;
			int LA496_0 = input.LA(1);
			if ( (LA496_0==CHAR_SET_NAME) ) {
				alt496=1;
			}
			switch (alt496) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1649:33: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_reference_model_name13969);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_reference_model_name13972); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "reference_model_name"



	// $ANTLR start "main_model_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1652:1: main_model_name : ^( MAIN_MODEL_NAME ( char_set_name )? ID ) ;
	public final void main_model_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1653:5: ( ^( MAIN_MODEL_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1653:10: ^( MAIN_MODEL_NAME ( char_set_name )? ID )
			{
			match(input,MAIN_MODEL_NAME,FOLLOW_MAIN_MODEL_NAME_in_main_model_name13994); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1653:28: ( char_set_name )?
			int alt497=2;
			int LA497_0 = input.LA(1);
			if ( (LA497_0==CHAR_SET_NAME) ) {
				alt497=1;
			}
			switch (alt497) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1653:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_main_model_name13996);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_main_model_name13999); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "main_model_name"



	// $ANTLR start "query_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1656:1: query_name : ^( QUERY_NAME ( char_set_name )? ID ) ;
	public final void query_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1657:5: ( ^( QUERY_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1657:10: ^( QUERY_NAME ( char_set_name )? ID )
			{
			match(input,QUERY_NAME,FOLLOW_QUERY_NAME_in_query_name14021); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1657:23: ( char_set_name )?
			int alt498=2;
			int LA498_0 = input.LA(1);
			if ( (LA498_0==CHAR_SET_NAME) ) {
				alt498=1;
			}
			switch (alt498) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1657:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_query_name14023);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_query_name14026); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "query_name"



	// $ANTLR start "constraint_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1660:1: constraint_name : ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) ;
	public final void constraint_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1661:5: ( ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1661:10: ^( CONSTRAINT_NAME ( char_set_name )? ( ID )+ ( link_name )? )
			{
			match(input,CONSTRAINT_NAME,FOLLOW_CONSTRAINT_NAME_in_constraint_name14048); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1661:28: ( char_set_name )?
			int alt499=2;
			int LA499_0 = input.LA(1);
			if ( (LA499_0==CHAR_SET_NAME) ) {
				alt499=1;
			}
			switch (alt499) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1661:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_constraint_name14050);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1661:43: ( ID )+
			int cnt500=0;
			loop500:
			while (true) {
				int alt500=2;
				int LA500_0 = input.LA(1);
				if ( (LA500_0==ID) ) {
					alt500=1;
				}

				switch (alt500) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1661:43: ID
					{
					match(input,ID,FOLLOW_ID_in_constraint_name14053); 
					}
					break;

				default :
					if ( cnt500 >= 1 ) break loop500;
					EarlyExitException eee = new EarlyExitException(500, input);
					throw eee;
				}
				cnt500++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1661:47: ( link_name )?
			int alt501=2;
			int LA501_0 = input.LA(1);
			if ( (LA501_0==LINK_NAME) ) {
				alt501=1;
			}
			switch (alt501) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1661:47: link_name
					{
					pushFollow(FOLLOW_link_name_in_constraint_name14056);
					link_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "constraint_name"



	// $ANTLR start "label_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1664:1: label_name : ^( LABEL_NAME ID ) ;
	public final void label_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1665:5: ( ^( LABEL_NAME ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1665:10: ^( LABEL_NAME ID )
			{
			match(input,LABEL_NAME,FOLLOW_LABEL_NAME_in_label_name14079); 
			match(input, Token.DOWN, null); 
			match(input,ID,FOLLOW_ID_in_label_name14081); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "label_name"



	// $ANTLR start "type_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1668:1: type_name : ^( TYPE_NAME ( ID )+ ) ;
	public final void type_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1669:5: ( ^( TYPE_NAME ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1669:10: ^( TYPE_NAME ( ID )+ )
			{
			match(input,TYPE_NAME,FOLLOW_TYPE_NAME_in_type_name14103); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1669:22: ( ID )+
			int cnt502=0;
			loop502:
			while (true) {
				int alt502=2;
				int LA502_0 = input.LA(1);
				if ( (LA502_0==ID) ) {
					alt502=1;
				}

				switch (alt502) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1669:22: ID
					{
					match(input,ID,FOLLOW_ID_in_type_name14105); 
					}
					break;

				default :
					if ( cnt502 >= 1 ) break loop502;
					EarlyExitException eee = new EarlyExitException(502, input);
					throw eee;
				}
				cnt502++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "type_name"



	// $ANTLR start "sequence_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1672:1: sequence_name : ^( SEQUENCE_NAME ( ID )+ ) ;
	public final void sequence_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1673:5: ( ^( SEQUENCE_NAME ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1673:10: ^( SEQUENCE_NAME ( ID )+ )
			{
			match(input,SEQUENCE_NAME,FOLLOW_SEQUENCE_NAME_in_sequence_name14128); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1673:26: ( ID )+
			int cnt503=0;
			loop503:
			while (true) {
				int alt503=2;
				int LA503_0 = input.LA(1);
				if ( (LA503_0==ID) ) {
					alt503=1;
				}

				switch (alt503) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1673:26: ID
					{
					match(input,ID,FOLLOW_ID_in_sequence_name14130); 
					}
					break;

				default :
					if ( cnt503 >= 1 ) break loop503;
					EarlyExitException eee = new EarlyExitException(503, input);
					throw eee;
				}
				cnt503++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "sequence_name"



	// $ANTLR start "exception_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1676:1: exception_name : ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ ) ;
	public final void exception_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1677:5: ( ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1677:10: ^( EXCEPTION_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,EXCEPTION_NAME,FOLLOW_EXCEPTION_NAME_in_exception_name14153); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1677:27: ( char_set_name )?
			int alt504=2;
			int LA504_0 = input.LA(1);
			if ( (LA504_0==CHAR_SET_NAME) ) {
				alt504=1;
			}
			switch (alt504) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1677:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_exception_name14155);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1677:42: ( ID )+
			int cnt505=0;
			loop505:
			while (true) {
				int alt505=2;
				int LA505_0 = input.LA(1);
				if ( (LA505_0==ID) ) {
					alt505=1;
				}

				switch (alt505) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1677:42: ID
					{
					match(input,ID,FOLLOW_ID_in_exception_name14158); 
					}
					break;

				default :
					if ( cnt505 >= 1 ) break loop505;
					EarlyExitException eee = new EarlyExitException(505, input);
					throw eee;
				}
				cnt505++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "exception_name"



	// $ANTLR start "function_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1680:1: function_name : ^( FUNCTION_NAME ( char_set_name )? ( ID )+ ) ;
	public final void function_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1681:5: ( ^( FUNCTION_NAME ( char_set_name )? ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1681:10: ^( FUNCTION_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,FUNCTION_NAME,FOLLOW_FUNCTION_NAME_in_function_name14181); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1681:26: ( char_set_name )?
			int alt506=2;
			int LA506_0 = input.LA(1);
			if ( (LA506_0==CHAR_SET_NAME) ) {
				alt506=1;
			}
			switch (alt506) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1681:26: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_function_name14183);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1681:41: ( ID )+
			int cnt507=0;
			loop507:
			while (true) {
				int alt507=2;
				int LA507_0 = input.LA(1);
				if ( (LA507_0==ID) ) {
					alt507=1;
				}

				switch (alt507) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1681:41: ID
					{
					match(input,ID,FOLLOW_ID_in_function_name14186); 
					}
					break;

				default :
					if ( cnt507 >= 1 ) break loop507;
					EarlyExitException eee = new EarlyExitException(507, input);
					throw eee;
				}
				cnt507++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "function_name"



	// $ANTLR start "procedure_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1684:1: procedure_name : ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ ) ;
	public final void procedure_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1685:5: ( ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1685:10: ^( PROCEDURE_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,PROCEDURE_NAME,FOLLOW_PROCEDURE_NAME_in_procedure_name14209); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1685:27: ( char_set_name )?
			int alt508=2;
			int LA508_0 = input.LA(1);
			if ( (LA508_0==CHAR_SET_NAME) ) {
				alt508=1;
			}
			switch (alt508) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1685:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_procedure_name14211);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1685:42: ( ID )+
			int cnt509=0;
			loop509:
			while (true) {
				int alt509=2;
				int LA509_0 = input.LA(1);
				if ( (LA509_0==ID) ) {
					alt509=1;
				}

				switch (alt509) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1685:42: ID
					{
					match(input,ID,FOLLOW_ID_in_procedure_name14214); 
					}
					break;

				default :
					if ( cnt509 >= 1 ) break loop509;
					EarlyExitException eee = new EarlyExitException(509, input);
					throw eee;
				}
				cnt509++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "procedure_name"



	// $ANTLR start "trigger_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1688:1: trigger_name : ^( TRIGGER_NAME ( char_set_name )? ( ID )+ ) ;
	public final void trigger_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1689:5: ( ^( TRIGGER_NAME ( char_set_name )? ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1689:10: ^( TRIGGER_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,TRIGGER_NAME,FOLLOW_TRIGGER_NAME_in_trigger_name14237); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1689:25: ( char_set_name )?
			int alt510=2;
			int LA510_0 = input.LA(1);
			if ( (LA510_0==CHAR_SET_NAME) ) {
				alt510=1;
			}
			switch (alt510) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1689:25: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_trigger_name14239);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1689:40: ( ID )+
			int cnt511=0;
			loop511:
			while (true) {
				int alt511=2;
				int LA511_0 = input.LA(1);
				if ( (LA511_0==ID) ) {
					alt511=1;
				}

				switch (alt511) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1689:40: ID
					{
					match(input,ID,FOLLOW_ID_in_trigger_name14242); 
					}
					break;

				default :
					if ( cnt511 >= 1 ) break loop511;
					EarlyExitException eee = new EarlyExitException(511, input);
					throw eee;
				}
				cnt511++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "trigger_name"



	// $ANTLR start "variable_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1692:1: variable_name : ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ ) | ^( VARIABLE_NAME ( char_set_name )? ( ID )+ ) );
	public final void variable_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1693:5: ( ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ ) | ^( VARIABLE_NAME ( char_set_name )? ( ID )+ ) )
			int alt516=2;
			int LA516_0 = input.LA(1);
			if ( (LA516_0==HOSTED_VARIABLE_NAME) ) {
				alt516=1;
			}
			else if ( (LA516_0==VARIABLE_NAME) ) {
				alt516=2;
			}

			else {
				NoViableAltException nvae =
					new NoViableAltException("", 516, 0, input);
				throw nvae;
			}

			switch (alt516) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1693:10: ^( HOSTED_VARIABLE_NAME ( char_set_name )? ( ID )+ )
					{
					match(input,HOSTED_VARIABLE_NAME,FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name14265); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1693:33: ( char_set_name )?
					int alt512=2;
					int LA512_0 = input.LA(1);
					if ( (LA512_0==CHAR_SET_NAME) ) {
						alt512=1;
					}
					switch (alt512) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1693:33: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_variable_name14267);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1693:48: ( ID )+
					int cnt513=0;
					loop513:
					while (true) {
						int alt513=2;
						int LA513_0 = input.LA(1);
						if ( (LA513_0==ID) ) {
							alt513=1;
						}

						switch (alt513) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1693:48: ID
							{
							match(input,ID,FOLLOW_ID_in_variable_name14270); 
							}
							break;

						default :
							if ( cnt513 >= 1 ) break loop513;
							EarlyExitException eee = new EarlyExitException(513, input);
							throw eee;
						}
						cnt513++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1694:10: ^( VARIABLE_NAME ( char_set_name )? ( ID )+ )
					{
					match(input,VARIABLE_NAME,FOLLOW_VARIABLE_NAME_in_variable_name14284); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1694:26: ( char_set_name )?
					int alt514=2;
					int LA514_0 = input.LA(1);
					if ( (LA514_0==CHAR_SET_NAME) ) {
						alt514=1;
					}
					switch (alt514) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1694:26: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_variable_name14286);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1694:41: ( ID )+
					int cnt515=0;
					loop515:
					while (true) {
						int alt515=2;
						int LA515_0 = input.LA(1);
						if ( (LA515_0==ID) ) {
							alt515=1;
						}

						switch (alt515) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1694:41: ID
							{
							match(input,ID,FOLLOW_ID_in_variable_name14289); 
							}
							break;

						default :
							if ( cnt515 >= 1 ) break loop515;
							EarlyExitException eee = new EarlyExitException(515, input);
							throw eee;
						}
						cnt515++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "variable_name"



	// $ANTLR start "index_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1697:1: index_name : ^( INDEX_NAME ( char_set_name )? ID ) ;
	public final void index_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1698:5: ( ^( INDEX_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1698:10: ^( INDEX_NAME ( char_set_name )? ID )
			{
			match(input,INDEX_NAME,FOLLOW_INDEX_NAME_in_index_name14312); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1698:23: ( char_set_name )?
			int alt517=2;
			int LA517_0 = input.LA(1);
			if ( (LA517_0==CHAR_SET_NAME) ) {
				alt517=1;
			}
			switch (alt517) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1698:23: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_index_name14314);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_index_name14317); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "index_name"



	// $ANTLR start "cursor_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1701:1: cursor_name : ^( CURSOR_NAME ( char_set_name )? ID ) ;
	public final void cursor_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1702:5: ( ^( CURSOR_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1702:10: ^( CURSOR_NAME ( char_set_name )? ID )
			{
			match(input,CURSOR_NAME,FOLLOW_CURSOR_NAME_in_cursor_name14339); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1702:24: ( char_set_name )?
			int alt518=2;
			int LA518_0 = input.LA(1);
			if ( (LA518_0==CHAR_SET_NAME) ) {
				alt518=1;
			}
			switch (alt518) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1702:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_cursor_name14341);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_cursor_name14344); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "cursor_name"



	// $ANTLR start "record_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1705:1: record_name : ^( RECORD_NAME ( char_set_name )? ID ) ;
	public final void record_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1706:5: ( ^( RECORD_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1706:10: ^( RECORD_NAME ( char_set_name )? ID )
			{
			match(input,RECORD_NAME,FOLLOW_RECORD_NAME_in_record_name14366); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1706:24: ( char_set_name )?
			int alt519=2;
			int LA519_0 = input.LA(1);
			if ( (LA519_0==CHAR_SET_NAME) ) {
				alt519=1;
			}
			switch (alt519) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1706:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_record_name14368);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_record_name14371); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "record_name"



	// $ANTLR start "collection_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1709:1: collection_name : ^( COLLECTION_NAME ( char_set_name )? ( ID )+ ) ;
	public final void collection_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1710:5: ( ^( COLLECTION_NAME ( char_set_name )? ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1710:10: ^( COLLECTION_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,COLLECTION_NAME,FOLLOW_COLLECTION_NAME_in_collection_name14393); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1710:28: ( char_set_name )?
			int alt520=2;
			int LA520_0 = input.LA(1);
			if ( (LA520_0==CHAR_SET_NAME) ) {
				alt520=1;
			}
			switch (alt520) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1710:28: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_collection_name14395);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1710:43: ( ID )+
			int cnt521=0;
			loop521:
			while (true) {
				int alt521=2;
				int LA521_0 = input.LA(1);
				if ( (LA521_0==ID) ) {
					alt521=1;
				}

				switch (alt521) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1710:43: ID
					{
					match(input,ID,FOLLOW_ID_in_collection_name14398); 
					}
					break;

				default :
					if ( cnt521 >= 1 ) break loop521;
					EarlyExitException eee = new EarlyExitException(521, input);
					throw eee;
				}
				cnt521++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "collection_name"



	// $ANTLR start "link_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1713:1: link_name : ^( LINK_NAME ( char_set_name )? ID ) ;
	public final void link_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1714:5: ( ^( LINK_NAME ( char_set_name )? ID ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1714:10: ^( LINK_NAME ( char_set_name )? ID )
			{
			match(input,LINK_NAME,FOLLOW_LINK_NAME_in_link_name14421); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1714:22: ( char_set_name )?
			int alt522=2;
			int LA522_0 = input.LA(1);
			if ( (LA522_0==CHAR_SET_NAME) ) {
				alt522=1;
			}
			switch (alt522) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1714:22: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_link_name14423);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_link_name14426); 
			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "link_name"



	// $ANTLR start "column_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1717:1: column_name : ^( COLUMN_NAME ( char_set_name )? ( ID )+ ) ;
	public final void column_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1718:5: ( ^( COLUMN_NAME ( char_set_name )? ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1718:10: ^( COLUMN_NAME ( char_set_name )? ( ID )+ )
			{
			match(input,COLUMN_NAME,FOLLOW_COLUMN_NAME_in_column_name14448); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1718:24: ( char_set_name )?
			int alt523=2;
			int LA523_0 = input.LA(1);
			if ( (LA523_0==CHAR_SET_NAME) ) {
				alt523=1;
			}
			switch (alt523) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1718:24: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_column_name14450);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1718:39: ( ID )+
			int cnt524=0;
			loop524:
			while (true) {
				int alt524=2;
				int LA524_0 = input.LA(1);
				if ( (LA524_0==ID) ) {
					alt524=1;
				}

				switch (alt524) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1718:39: ID
					{
					match(input,ID,FOLLOW_ID_in_column_name14453); 
					}
					break;

				default :
					if ( cnt524 >= 1 ) break loop524;
					EarlyExitException eee = new EarlyExitException(524, input);
					throw eee;
				}
				cnt524++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "column_name"



	// $ANTLR start "tableview_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1721:1: tableview_name : ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? ) ;
	public final void tableview_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:5: ( ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:10: ^( TABLEVIEW_NAME ( char_set_name )? ( ID )+ ( link_name )? ( partition_extension_clause )? )
			{
			match(input,TABLEVIEW_NAME,FOLLOW_TABLEVIEW_NAME_in_tableview_name14476); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:27: ( char_set_name )?
			int alt525=2;
			int LA525_0 = input.LA(1);
			if ( (LA525_0==CHAR_SET_NAME) ) {
				alt525=1;
			}
			switch (alt525) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:27: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_tableview_name14478);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:42: ( ID )+
			int cnt526=0;
			loop526:
			while (true) {
				int alt526=2;
				int LA526_0 = input.LA(1);
				if ( (LA526_0==ID) ) {
					alt526=1;
				}

				switch (alt526) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:42: ID
					{
					match(input,ID,FOLLOW_ID_in_tableview_name14481); 
					}
					break;

				default :
					if ( cnt526 >= 1 ) break loop526;
					EarlyExitException eee = new EarlyExitException(526, input);
					throw eee;
				}
				cnt526++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:46: ( link_name )?
			int alt527=2;
			int LA527_0 = input.LA(1);
			if ( (LA527_0==LINK_NAME) ) {
				alt527=1;
			}
			switch (alt527) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:46: link_name
					{
					pushFollow(FOLLOW_link_name_in_tableview_name14484);
					link_name();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:57: ( partition_extension_clause )?
			int alt528=2;
			int LA528_0 = input.LA(1);
			if ( (LA528_0==PARTITION_VK||LA528_0==SUBPARTITION_VK) ) {
				alt528=1;
			}
			switch (alt528) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1722:57: partition_extension_clause
					{
					pushFollow(FOLLOW_partition_extension_clause_in_tableview_name14487);
					partition_extension_clause();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "tableview_name"



	// $ANTLR start "char_set_name"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1725:1: char_set_name : ^( CHAR_SET_NAME ( ID )+ ) ;
	public final void char_set_name() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1726:5: ( ^( CHAR_SET_NAME ( ID )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1726:10: ^( CHAR_SET_NAME ( ID )+ )
			{
			match(input,CHAR_SET_NAME,FOLLOW_CHAR_SET_NAME_in_char_set_name14510); 
			match(input, Token.DOWN, null); 
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1726:26: ( ID )+
			int cnt529=0;
			loop529:
			while (true) {
				int alt529=2;
				int LA529_0 = input.LA(1);
				if ( (LA529_0==ID) ) {
					alt529=1;
				}

				switch (alt529) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1726:26: ID
					{
					match(input,ID,FOLLOW_ID_in_char_set_name14512); 
					}
					break;

				default :
					if ( cnt529 >= 1 ) break loop529;
					EarlyExitException eee = new EarlyExitException(529, input);
					throw eee;
				}
				cnt529++;
			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "char_set_name"



	// $ANTLR start "function_argument"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1733:1: function_argument : ^( ARGUMENTS ( argument )* ) ;
	public final void function_argument() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1734:5: ( ^( ARGUMENTS ( argument )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1734:10: ^( ARGUMENTS ( argument )* )
			{
			match(input,ARGUMENTS,FOLLOW_ARGUMENTS_in_function_argument14539); 
			if ( input.LA(1)==Token.DOWN ) {
				match(input, Token.DOWN, null); 
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1734:22: ( argument )*
				loop530:
				while (true) {
					int alt530=2;
					int LA530_0 = input.LA(1);
					if ( (LA530_0==ARGUMENT) ) {
						alt530=1;
					}

					switch (alt530) {
					case 1 :
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1734:22: argument
						{
						pushFollow(FOLLOW_argument_in_function_argument14541);
						argument();
						state._fsp--;

						}
						break;

					default :
						break loop530;
					}
				}

				match(input, Token.UP, null); 
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "function_argument"



	// $ANTLR start "argument"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1737:1: argument : ^( ARGUMENT expression ( parameter_name )? ) ;
	public final void argument() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1738:5: ( ^( ARGUMENT expression ( parameter_name )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1738:10: ^( ARGUMENT expression ( parameter_name )? )
			{
			match(input,ARGUMENT,FOLLOW_ARGUMENT_in_argument14564); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_expression_in_argument14566);
			expression();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1738:32: ( parameter_name )?
			int alt531=2;
			int LA531_0 = input.LA(1);
			if ( (LA531_0==PARAMETER_NAME) ) {
				alt531=1;
			}
			switch (alt531) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1738:32: parameter_name
					{
					pushFollow(FOLLOW_parameter_name_in_argument14568);
					parameter_name();
					state._fsp--;

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "argument"



	// $ANTLR start "type_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1741:1: type_spec : ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) | ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? ) | ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) );
	public final void type_spec() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1742:5: ( ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? ) | ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? ) | ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* ) )
			int alt538=3;
			switch ( input.LA(1) ) {
			case CUSTOM_TYPE:
				{
				alt538=1;
				}
				break;
			case NATIVE_DATATYPE:
				{
				alt538=2;
				}
				break;
			case INTERVAL_DATATYPE:
				{
				alt538=3;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 538, 0, input);
				throw nvae;
			}
			switch (alt538) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1742:11: ^( CUSTOM_TYPE type_name ( REF_VK )? ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )? )
					{
					match(input,CUSTOM_TYPE,FOLLOW_CUSTOM_TYPE_in_type_spec14592); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_type_name_in_type_spec14594);
					type_name();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1742:35: ( REF_VK )?
					int alt532=2;
					int LA532_0 = input.LA(1);
					if ( (LA532_0==REF_VK) ) {
						alt532=1;
					}
					switch (alt532) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1742:35: REF_VK
							{
							match(input,REF_VK,FOLLOW_REF_VK_in_type_spec14596); 
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1742:43: ( PERCENT_ROWTYPE_VK | PERCENT_TYPE_VK )?
					int alt533=2;
					int LA533_0 = input.LA(1);
					if ( ((LA533_0 >= PERCENT_ROWTYPE_VK && LA533_0 <= PERCENT_TYPE_VK)) ) {
						alt533=1;
					}
					switch (alt533) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
							{
							if ( (input.LA(1) >= PERCENT_ROWTYPE_VK && input.LA(1) <= PERCENT_TYPE_VK) ) {
								input.consume();
								state.errorRecovery=false;
							}
							else {
								MismatchedSetException mse = new MismatchedSetException(null,input);
								throw mse;
							}
							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1743:10: ^( NATIVE_DATATYPE native_datatype_element ( type_precision )? ( TIME_VK ( LOCAL_VK )? )? )
					{
					match(input,NATIVE_DATATYPE,FOLLOW_NATIVE_DATATYPE_in_type_spec14617); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_native_datatype_element_in_type_spec14619);
					native_datatype_element();
					state._fsp--;

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1743:52: ( type_precision )?
					int alt534=2;
					int LA534_0 = input.LA(1);
					if ( (LA534_0==PRECISION) ) {
						alt534=1;
					}
					switch (alt534) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1743:52: type_precision
							{
							pushFollow(FOLLOW_type_precision_in_type_spec14621);
							type_precision();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1743:68: ( TIME_VK ( LOCAL_VK )? )?
					int alt536=2;
					int LA536_0 = input.LA(1);
					if ( (LA536_0==TIME_VK) ) {
						alt536=1;
					}
					switch (alt536) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1743:69: TIME_VK ( LOCAL_VK )?
							{
							match(input,TIME_VK,FOLLOW_TIME_VK_in_type_spec14625); 
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1743:77: ( LOCAL_VK )?
							int alt535=2;
							int LA535_0 = input.LA(1);
							if ( (LA535_0==LOCAL_VK) ) {
								alt535=1;
							}
							switch (alt535) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1743:77: LOCAL_VK
									{
									match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_type_spec14627); 
									}
									break;

							}

							}
							break;

					}

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1744:10: ^( INTERVAL_DATATYPE ( YEAR_VK | DAY_VK ) ( MONTH_VK | SECOND_VK ) ( expression )* )
					{
					match(input,INTERVAL_DATATYPE,FOLLOW_INTERVAL_DATATYPE_in_type_spec14643); 
					match(input, Token.DOWN, null); 
					if ( input.LA(1)==DAY_VK||input.LA(1)==YEAR_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					if ( input.LA(1)==MONTH_VK||input.LA(1)==SECOND_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1744:68: ( expression )*
					loop537:
					while (true) {
						int alt537=2;
						int LA537_0 = input.LA(1);
						if ( (LA537_0==EXPR||LA537_0==LOGIC_EXPR) ) {
							alt537=1;
						}

						switch (alt537) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1744:68: expression
							{
							pushFollow(FOLLOW_expression_in_type_spec14657);
							expression();
							state._fsp--;

							}
							break;

						default :
							break loop537;
						}
					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "type_spec"



	// $ANTLR start "type_precision"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1747:1: type_precision : ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? ) ;
	public final void type_precision() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:5: ( ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:10: ^( PRECISION constant ( constant )? ( CHAR_VK | BYTE_VK )? ( TIME_VK ( LOCAL_VK )? )? )
			{
			match(input,PRECISION,FOLLOW_PRECISION_in_type_precision14680); 
			match(input, Token.DOWN, null); 
			pushFollow(FOLLOW_constant_in_type_precision14682);
			constant();
			state._fsp--;

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:31: ( constant )?
			int alt539=2;
			int LA539_0 = input.LA(1);
			if ( (LA539_0==APPROXIMATE_NUM_LIT||LA539_0==CHAR_STRING||LA539_0==EXACT_NUM_LIT||LA539_0==MINUS_SIGN||LA539_0==SQL92_RESERVED_DEFAULT||LA539_0==SQL92_RESERVED_FALSE||LA539_0==SQL92_RESERVED_NULL||LA539_0==SQL92_RESERVED_TRUE||LA539_0==UNSIGNED_INTEGER||LA539_0==DBTIMEZONE_VK||LA539_0==MAXVALUE_VK||LA539_0==MINVALUE_VK||LA539_0==SESSIONTIMEZONE_VK) ) {
				alt539=1;
			}
			switch (alt539) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:31: constant
					{
					pushFollow(FOLLOW_constant_in_type_precision14684);
					constant();
					state._fsp--;

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:41: ( CHAR_VK | BYTE_VK )?
			int alt540=2;
			int LA540_0 = input.LA(1);
			if ( (LA540_0==BYTE_VK||LA540_0==CHAR_VK) ) {
				alt540=1;
			}
			switch (alt540) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:
					{
					if ( input.LA(1)==BYTE_VK||input.LA(1)==CHAR_VK ) {
						input.consume();
						state.errorRecovery=false;
					}
					else {
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:60: ( TIME_VK ( LOCAL_VK )? )?
			int alt542=2;
			int LA542_0 = input.LA(1);
			if ( (LA542_0==TIME_VK) ) {
				alt542=1;
			}
			switch (alt542) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:61: TIME_VK ( LOCAL_VK )?
					{
					match(input,TIME_VK,FOLLOW_TIME_VK_in_type_precision14695); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:69: ( LOCAL_VK )?
					int alt541=2;
					int LA541_0 = input.LA(1);
					if ( (LA541_0==LOCAL_VK) ) {
						alt541=1;
					}
					switch (alt541) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1748:69: LOCAL_VK
							{
							match(input,LOCAL_VK,FOLLOW_LOCAL_VK_in_type_precision14697); 
							}
							break;

					}

					}
					break;

			}

			match(input, Token.UP, null); 

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "type_precision"



	// $ANTLR start "native_datatype_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1751:1: native_datatype_element : ( BINARY_INTEGER_VK | PLS_INTEGER_VK | NATURAL_VK | BINARY_FLOAT_VK | BINARY_DOUBLE_VK | NATURALN_VK | POSITIVE_VK | POSITIVEN_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | NVARCHAR2_VK | DEC_VK | INTEGER_VK | INT_VK | NUMERIC_VK | SMALLINT_VK | NUMBER_VK | DECIMAL_VK | DOUBLE_VK ( PRECISION_VK )? | FLOAT_VK | REAL_VK | NCHAR_VK | LONG_VK ( RAW_VK )? | CHAR_VK | CHARACTER_VK | VARCHAR2_VK | VARCHAR_VK | STRING_VK | RAW_VK | BOOLEAN_VK | DATE_VK | ROWID_VK | UROWID_VK | YEAR_VK | MONTH_VK | DAY_VK | HOUR_VK | MINUTE_VK | SECOND_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | TIMEZONE_ABBR_VK | TIMESTAMP_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | YMINTERVAL_UNCONSTRAINED_VK | DSINTERVAL_UNCONSTRAINED_VK | BFILE_VK | BLOB_VK | CLOB_VK | NCLOB_VK | MLSLABEL_VK );
	public final void native_datatype_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1752:5: ( BINARY_INTEGER_VK | PLS_INTEGER_VK | NATURAL_VK | BINARY_FLOAT_VK | BINARY_DOUBLE_VK | NATURALN_VK | POSITIVE_VK | POSITIVEN_VK | SIGNTYPE_VK | SIMPLE_INTEGER_VK | NVARCHAR2_VK | DEC_VK | INTEGER_VK | INT_VK | NUMERIC_VK | SMALLINT_VK | NUMBER_VK | DECIMAL_VK | DOUBLE_VK ( PRECISION_VK )? | FLOAT_VK | REAL_VK | NCHAR_VK | LONG_VK ( RAW_VK )? | CHAR_VK | CHARACTER_VK | VARCHAR2_VK | VARCHAR_VK | STRING_VK | RAW_VK | BOOLEAN_VK | DATE_VK | ROWID_VK | UROWID_VK | YEAR_VK | MONTH_VK | DAY_VK | HOUR_VK | MINUTE_VK | SECOND_VK | TIMEZONE_HOUR_VK | TIMEZONE_MINUTE_VK | TIMEZONE_REGION_VK | TIMEZONE_ABBR_VK | TIMESTAMP_VK | TIMESTAMP_UNCONSTRAINED_VK | TIMESTAMP_TZ_UNCONSTRAINED_VK | TIMESTAMP_LTZ_UNCONSTRAINED_VK | YMINTERVAL_UNCONSTRAINED_VK | DSINTERVAL_UNCONSTRAINED_VK | BFILE_VK | BLOB_VK | CLOB_VK | NCLOB_VK | MLSLABEL_VK )
			int alt545=54;
			switch ( input.LA(1) ) {
			case BINARY_INTEGER_VK:
				{
				alt545=1;
				}
				break;
			case PLS_INTEGER_VK:
				{
				alt545=2;
				}
				break;
			case NATURAL_VK:
				{
				alt545=3;
				}
				break;
			case BINARY_FLOAT_VK:
				{
				alt545=4;
				}
				break;
			case BINARY_DOUBLE_VK:
				{
				alt545=5;
				}
				break;
			case NATURALN_VK:
				{
				alt545=6;
				}
				break;
			case POSITIVE_VK:
				{
				alt545=7;
				}
				break;
			case POSITIVEN_VK:
				{
				alt545=8;
				}
				break;
			case SIGNTYPE_VK:
				{
				alt545=9;
				}
				break;
			case SIMPLE_INTEGER_VK:
				{
				alt545=10;
				}
				break;
			case NVARCHAR2_VK:
				{
				alt545=11;
				}
				break;
			case DEC_VK:
				{
				alt545=12;
				}
				break;
			case INTEGER_VK:
				{
				alt545=13;
				}
				break;
			case INT_VK:
				{
				alt545=14;
				}
				break;
			case NUMERIC_VK:
				{
				alt545=15;
				}
				break;
			case SMALLINT_VK:
				{
				alt545=16;
				}
				break;
			case NUMBER_VK:
				{
				alt545=17;
				}
				break;
			case DECIMAL_VK:
				{
				alt545=18;
				}
				break;
			case DOUBLE_VK:
				{
				alt545=19;
				}
				break;
			case FLOAT_VK:
				{
				alt545=20;
				}
				break;
			case REAL_VK:
				{
				alt545=21;
				}
				break;
			case NCHAR_VK:
				{
				alt545=22;
				}
				break;
			case LONG_VK:
				{
				alt545=23;
				}
				break;
			case CHAR_VK:
				{
				alt545=24;
				}
				break;
			case CHARACTER_VK:
				{
				alt545=25;
				}
				break;
			case VARCHAR2_VK:
				{
				alt545=26;
				}
				break;
			case VARCHAR_VK:
				{
				alt545=27;
				}
				break;
			case STRING_VK:
				{
				alt545=28;
				}
				break;
			case RAW_VK:
				{
				alt545=29;
				}
				break;
			case BOOLEAN_VK:
				{
				alt545=30;
				}
				break;
			case DATE_VK:
				{
				alt545=31;
				}
				break;
			case ROWID_VK:
				{
				alt545=32;
				}
				break;
			case UROWID_VK:
				{
				alt545=33;
				}
				break;
			case YEAR_VK:
				{
				alt545=34;
				}
				break;
			case MONTH_VK:
				{
				alt545=35;
				}
				break;
			case DAY_VK:
				{
				alt545=36;
				}
				break;
			case HOUR_VK:
				{
				alt545=37;
				}
				break;
			case MINUTE_VK:
				{
				alt545=38;
				}
				break;
			case SECOND_VK:
				{
				alt545=39;
				}
				break;
			case TIMEZONE_HOUR_VK:
				{
				alt545=40;
				}
				break;
			case TIMEZONE_MINUTE_VK:
				{
				alt545=41;
				}
				break;
			case TIMEZONE_REGION_VK:
				{
				alt545=42;
				}
				break;
			case TIMEZONE_ABBR_VK:
				{
				alt545=43;
				}
				break;
			case TIMESTAMP_VK:
				{
				alt545=44;
				}
				break;
			case TIMESTAMP_UNCONSTRAINED_VK:
				{
				alt545=45;
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED_VK:
				{
				alt545=46;
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED_VK:
				{
				alt545=47;
				}
				break;
			case YMINTERVAL_UNCONSTRAINED_VK:
				{
				alt545=48;
				}
				break;
			case DSINTERVAL_UNCONSTRAINED_VK:
				{
				alt545=49;
				}
				break;
			case BFILE_VK:
				{
				alt545=50;
				}
				break;
			case BLOB_VK:
				{
				alt545=51;
				}
				break;
			case CLOB_VK:
				{
				alt545=52;
				}
				break;
			case NCLOB_VK:
				{
				alt545=53;
				}
				break;
			case MLSLABEL_VK:
				{
				alt545=54;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 545, 0, input);
				throw nvae;
			}
			switch (alt545) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1752:10: BINARY_INTEGER_VK
					{
					match(input,BINARY_INTEGER_VK,FOLLOW_BINARY_INTEGER_VK_in_native_datatype_element14721); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1753:10: PLS_INTEGER_VK
					{
					match(input,PLS_INTEGER_VK,FOLLOW_PLS_INTEGER_VK_in_native_datatype_element14732); 
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1754:10: NATURAL_VK
					{
					match(input,NATURAL_VK,FOLLOW_NATURAL_VK_in_native_datatype_element14743); 
					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1755:10: BINARY_FLOAT_VK
					{
					match(input,BINARY_FLOAT_VK,FOLLOW_BINARY_FLOAT_VK_in_native_datatype_element14754); 
					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1756:10: BINARY_DOUBLE_VK
					{
					match(input,BINARY_DOUBLE_VK,FOLLOW_BINARY_DOUBLE_VK_in_native_datatype_element14765); 
					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1757:10: NATURALN_VK
					{
					match(input,NATURALN_VK,FOLLOW_NATURALN_VK_in_native_datatype_element14776); 
					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1758:10: POSITIVE_VK
					{
					match(input,POSITIVE_VK,FOLLOW_POSITIVE_VK_in_native_datatype_element14787); 
					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1759:10: POSITIVEN_VK
					{
					match(input,POSITIVEN_VK,FOLLOW_POSITIVEN_VK_in_native_datatype_element14798); 
					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1760:10: SIGNTYPE_VK
					{
					match(input,SIGNTYPE_VK,FOLLOW_SIGNTYPE_VK_in_native_datatype_element14809); 
					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1761:10: SIMPLE_INTEGER_VK
					{
					match(input,SIMPLE_INTEGER_VK,FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_element14820); 
					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1762:10: NVARCHAR2_VK
					{
					match(input,NVARCHAR2_VK,FOLLOW_NVARCHAR2_VK_in_native_datatype_element14831); 
					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1763:10: DEC_VK
					{
					match(input,DEC_VK,FOLLOW_DEC_VK_in_native_datatype_element14842); 
					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1764:10: INTEGER_VK
					{
					match(input,INTEGER_VK,FOLLOW_INTEGER_VK_in_native_datatype_element14853); 
					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1765:10: INT_VK
					{
					match(input,INT_VK,FOLLOW_INT_VK_in_native_datatype_element14864); 
					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1766:10: NUMERIC_VK
					{
					match(input,NUMERIC_VK,FOLLOW_NUMERIC_VK_in_native_datatype_element14875); 
					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1767:10: SMALLINT_VK
					{
					match(input,SMALLINT_VK,FOLLOW_SMALLINT_VK_in_native_datatype_element14886); 
					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1768:10: NUMBER_VK
					{
					match(input,NUMBER_VK,FOLLOW_NUMBER_VK_in_native_datatype_element14897); 
					}
					break;
				case 18 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1769:10: DECIMAL_VK
					{
					match(input,DECIMAL_VK,FOLLOW_DECIMAL_VK_in_native_datatype_element14908); 
					}
					break;
				case 19 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1770:10: DOUBLE_VK ( PRECISION_VK )?
					{
					match(input,DOUBLE_VK,FOLLOW_DOUBLE_VK_in_native_datatype_element14920); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1770:20: ( PRECISION_VK )?
					int alt543=2;
					int LA543_0 = input.LA(1);
					if ( (LA543_0==PRECISION_VK) ) {
						alt543=1;
					}
					switch (alt543) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1770:20: PRECISION_VK
							{
							match(input,PRECISION_VK,FOLLOW_PRECISION_VK_in_native_datatype_element14922); 
							}
							break;

					}

					}
					break;
				case 20 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1771:10: FLOAT_VK
					{
					match(input,FLOAT_VK,FOLLOW_FLOAT_VK_in_native_datatype_element14934); 
					}
					break;
				case 21 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1772:10: REAL_VK
					{
					match(input,REAL_VK,FOLLOW_REAL_VK_in_native_datatype_element14945); 
					}
					break;
				case 22 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1773:10: NCHAR_VK
					{
					match(input,NCHAR_VK,FOLLOW_NCHAR_VK_in_native_datatype_element14956); 
					}
					break;
				case 23 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1774:10: LONG_VK ( RAW_VK )?
					{
					match(input,LONG_VK,FOLLOW_LONG_VK_in_native_datatype_element14967); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1774:18: ( RAW_VK )?
					int alt544=2;
					int LA544_0 = input.LA(1);
					if ( (LA544_0==RAW_VK) ) {
						alt544=1;
					}
					switch (alt544) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1774:18: RAW_VK
							{
							match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_element14969); 
							}
							break;

					}

					}
					break;
				case 24 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1775:10: CHAR_VK
					{
					match(input,CHAR_VK,FOLLOW_CHAR_VK_in_native_datatype_element14981); 
					}
					break;
				case 25 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1776:10: CHARACTER_VK
					{
					match(input,CHARACTER_VK,FOLLOW_CHARACTER_VK_in_native_datatype_element14994); 
					}
					break;
				case 26 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1777:10: VARCHAR2_VK
					{
					match(input,VARCHAR2_VK,FOLLOW_VARCHAR2_VK_in_native_datatype_element15006); 
					}
					break;
				case 27 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1778:10: VARCHAR_VK
					{
					match(input,VARCHAR_VK,FOLLOW_VARCHAR_VK_in_native_datatype_element15017); 
					}
					break;
				case 28 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1779:10: STRING_VK
					{
					match(input,STRING_VK,FOLLOW_STRING_VK_in_native_datatype_element15028); 
					}
					break;
				case 29 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1780:10: RAW_VK
					{
					match(input,RAW_VK,FOLLOW_RAW_VK_in_native_datatype_element15039); 
					}
					break;
				case 30 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1781:10: BOOLEAN_VK
					{
					match(input,BOOLEAN_VK,FOLLOW_BOOLEAN_VK_in_native_datatype_element15050); 
					}
					break;
				case 31 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1782:10: DATE_VK
					{
					match(input,DATE_VK,FOLLOW_DATE_VK_in_native_datatype_element15061); 
					}
					break;
				case 32 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1783:10: ROWID_VK
					{
					match(input,ROWID_VK,FOLLOW_ROWID_VK_in_native_datatype_element15072); 
					}
					break;
				case 33 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1784:10: UROWID_VK
					{
					match(input,UROWID_VK,FOLLOW_UROWID_VK_in_native_datatype_element15083); 
					}
					break;
				case 34 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1785:10: YEAR_VK
					{
					match(input,YEAR_VK,FOLLOW_YEAR_VK_in_native_datatype_element15094); 
					}
					break;
				case 35 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1786:10: MONTH_VK
					{
					match(input,MONTH_VK,FOLLOW_MONTH_VK_in_native_datatype_element15105); 
					}
					break;
				case 36 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1787:10: DAY_VK
					{
					match(input,DAY_VK,FOLLOW_DAY_VK_in_native_datatype_element15116); 
					}
					break;
				case 37 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1788:10: HOUR_VK
					{
					match(input,HOUR_VK,FOLLOW_HOUR_VK_in_native_datatype_element15127); 
					}
					break;
				case 38 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1789:10: MINUTE_VK
					{
					match(input,MINUTE_VK,FOLLOW_MINUTE_VK_in_native_datatype_element15138); 
					}
					break;
				case 39 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1790:10: SECOND_VK
					{
					match(input,SECOND_VK,FOLLOW_SECOND_VK_in_native_datatype_element15149); 
					}
					break;
				case 40 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1791:10: TIMEZONE_HOUR_VK
					{
					match(input,TIMEZONE_HOUR_VK,FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_element15160); 
					}
					break;
				case 41 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1792:10: TIMEZONE_MINUTE_VK
					{
					match(input,TIMEZONE_MINUTE_VK,FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_element15171); 
					}
					break;
				case 42 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1793:10: TIMEZONE_REGION_VK
					{
					match(input,TIMEZONE_REGION_VK,FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_element15182); 
					}
					break;
				case 43 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1794:10: TIMEZONE_ABBR_VK
					{
					match(input,TIMEZONE_ABBR_VK,FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_element15193); 
					}
					break;
				case 44 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1795:10: TIMESTAMP_VK
					{
					match(input,TIMESTAMP_VK,FOLLOW_TIMESTAMP_VK_in_native_datatype_element15204); 
					}
					break;
				case 45 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1796:10: TIMESTAMP_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_element15215); 
					}
					break;
				case 46 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1797:10: TIMESTAMP_TZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_TZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_element15226); 
					}
					break;
				case 47 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1798:10: TIMESTAMP_LTZ_UNCONSTRAINED_VK
					{
					match(input,TIMESTAMP_LTZ_UNCONSTRAINED_VK,FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_element15237); 
					}
					break;
				case 48 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1799:10: YMINTERVAL_UNCONSTRAINED_VK
					{
					match(input,YMINTERVAL_UNCONSTRAINED_VK,FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15248); 
					}
					break;
				case 49 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1800:10: DSINTERVAL_UNCONSTRAINED_VK
					{
					match(input,DSINTERVAL_UNCONSTRAINED_VK,FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15259); 
					}
					break;
				case 50 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1801:10: BFILE_VK
					{
					match(input,BFILE_VK,FOLLOW_BFILE_VK_in_native_datatype_element15270); 
					}
					break;
				case 51 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1802:10: BLOB_VK
					{
					match(input,BLOB_VK,FOLLOW_BLOB_VK_in_native_datatype_element15281); 
					}
					break;
				case 52 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1803:10: CLOB_VK
					{
					match(input,CLOB_VK,FOLLOW_CLOB_VK_in_native_datatype_element15292); 
					}
					break;
				case 53 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1804:10: NCLOB_VK
					{
					match(input,NCLOB_VK,FOLLOW_NCLOB_VK_in_native_datatype_element15303); 
					}
					break;
				case 54 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1805:10: MLSLABEL_VK
					{
					match(input,MLSLABEL_VK,FOLLOW_MLSLABEL_VK_in_native_datatype_element15314); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "native_datatype_element"



	// $ANTLR start "general_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1808:1: general_element : ( ^( CASCATED_ELEMENT ( general_element )+ ) | ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument ) | ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ ) | ^( ROUTINE_CALL routine_name function_argument ) | ^( ANY_ELEMENT ( char_set_name )? ( ID )+ ) );
	public final void general_element() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1809:5: ( ^( CASCATED_ELEMENT ( general_element )+ ) | ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument ) | ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ ) | ^( ROUTINE_CALL routine_name function_argument ) | ^( ANY_ELEMENT ( char_set_name )? ( ID )+ ) )
			int alt551=5;
			switch ( input.LA(1) ) {
			case CASCATED_ELEMENT:
				{
				alt551=1;
				}
				break;
			case HOSTED_VARIABLE_ROUTINE_CALL:
				{
				alt551=2;
				}
				break;
			case HOSTED_VARIABLE:
				{
				alt551=3;
				}
				break;
			case ROUTINE_CALL:
				{
				alt551=4;
				}
				break;
			case ANY_ELEMENT:
				{
				alt551=5;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 551, 0, input);
				throw nvae;
			}
			switch (alt551) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1809:10: ^( CASCATED_ELEMENT ( general_element )+ )
					{
					match(input,CASCATED_ELEMENT,FOLLOW_CASCATED_ELEMENT_in_general_element15335); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1809:29: ( general_element )+
					int cnt546=0;
					loop546:
					while (true) {
						int alt546=2;
						int LA546_0 = input.LA(1);
						if ( (LA546_0==ANY_ELEMENT||LA546_0==CASCATED_ELEMENT||LA546_0==HOSTED_VARIABLE||LA546_0==HOSTED_VARIABLE_ROUTINE_CALL||LA546_0==ROUTINE_CALL) ) {
							alt546=1;
						}

						switch (alt546) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1809:29: general_element
							{
							pushFollow(FOLLOW_general_element_in_general_element15337);
							general_element();
							state._fsp--;

							}
							break;

						default :
							if ( cnt546 >= 1 ) break loop546;
							EarlyExitException eee = new EarlyExitException(546, input);
							throw eee;
						}
						cnt546++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1810:10: ^( HOSTED_VARIABLE_ROUTINE_CALL routine_name function_argument )
					{
					match(input,HOSTED_VARIABLE_ROUTINE_CALL,FOLLOW_HOSTED_VARIABLE_ROUTINE_CALL_in_general_element15351); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_general_element15353);
					routine_name();
					state._fsp--;

					pushFollow(FOLLOW_function_argument_in_general_element15355);
					function_argument();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1811:10: ^( HOSTED_VARIABLE ( char_set_name )? ( ID )+ )
					{
					match(input,HOSTED_VARIABLE,FOLLOW_HOSTED_VARIABLE_in_general_element15368); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1811:28: ( char_set_name )?
					int alt547=2;
					int LA547_0 = input.LA(1);
					if ( (LA547_0==CHAR_SET_NAME) ) {
						alt547=1;
					}
					switch (alt547) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1811:28: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_general_element15370);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1811:43: ( ID )+
					int cnt548=0;
					loop548:
					while (true) {
						int alt548=2;
						int LA548_0 = input.LA(1);
						if ( (LA548_0==ID) ) {
							alt548=1;
						}

						switch (alt548) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1811:43: ID
							{
							match(input,ID,FOLLOW_ID_in_general_element15373); 
							}
							break;

						default :
							if ( cnt548 >= 1 ) break loop548;
							EarlyExitException eee = new EarlyExitException(548, input);
							throw eee;
						}
						cnt548++;
					}

					match(input, Token.UP, null); 

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1812:10: ^( ROUTINE_CALL routine_name function_argument )
					{
					match(input,ROUTINE_CALL,FOLLOW_ROUTINE_CALL_in_general_element15387); 
					match(input, Token.DOWN, null); 
					pushFollow(FOLLOW_routine_name_in_general_element15389);
					routine_name();
					state._fsp--;

					pushFollow(FOLLOW_function_argument_in_general_element15391);
					function_argument();
					state._fsp--;

					match(input, Token.UP, null); 

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1813:10: ^( ANY_ELEMENT ( char_set_name )? ( ID )+ )
					{
					match(input,ANY_ELEMENT,FOLLOW_ANY_ELEMENT_in_general_element15404); 
					match(input, Token.DOWN, null); 
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1813:24: ( char_set_name )?
					int alt549=2;
					int LA549_0 = input.LA(1);
					if ( (LA549_0==CHAR_SET_NAME) ) {
						alt549=1;
					}
					switch (alt549) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1813:24: char_set_name
							{
							pushFollow(FOLLOW_char_set_name_in_general_element15406);
							char_set_name();
							state._fsp--;

							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1813:39: ( ID )+
					int cnt550=0;
					loop550:
					while (true) {
						int alt550=2;
						int LA550_0 = input.LA(1);
						if ( (LA550_0==ID) ) {
							alt550=1;
						}

						switch (alt550) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1813:39: ID
							{
							match(input,ID,FOLLOW_ID_in_general_element15409); 
							}
							break;

						default :
							if ( cnt550 >= 1 ) break loop550;
							EarlyExitException eee = new EarlyExitException(550, input);
							throw eee;
						}
						cnt550++;
					}

					match(input, Token.UP, null); 

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "general_element"



	// $ANTLR start "constant"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1820:1: constant : ( UNSIGNED_INTEGER | ^( MINUS_SIGN UNSIGNED_INTEGER ) | EXACT_NUM_LIT | APPROXIMATE_NUM_LIT | CHAR_STRING | SQL92_RESERVED_NULL | SQL92_RESERVED_TRUE | SQL92_RESERVED_FALSE | DBTIMEZONE_VK | SESSIONTIMEZONE_VK | MINVALUE_VK | MAXVALUE_VK | SQL92_RESERVED_DEFAULT );
	public final void constant() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1821:5: ( UNSIGNED_INTEGER | ^( MINUS_SIGN UNSIGNED_INTEGER ) | EXACT_NUM_LIT | APPROXIMATE_NUM_LIT | CHAR_STRING | SQL92_RESERVED_NULL | SQL92_RESERVED_TRUE | SQL92_RESERVED_FALSE | DBTIMEZONE_VK | SESSIONTIMEZONE_VK | MINVALUE_VK | MAXVALUE_VK | SQL92_RESERVED_DEFAULT )
			int alt552=13;
			switch ( input.LA(1) ) {
			case UNSIGNED_INTEGER:
				{
				alt552=1;
				}
				break;
			case MINUS_SIGN:
				{
				alt552=2;
				}
				break;
			case EXACT_NUM_LIT:
				{
				alt552=3;
				}
				break;
			case APPROXIMATE_NUM_LIT:
				{
				alt552=4;
				}
				break;
			case CHAR_STRING:
				{
				alt552=5;
				}
				break;
			case SQL92_RESERVED_NULL:
				{
				alt552=6;
				}
				break;
			case SQL92_RESERVED_TRUE:
				{
				alt552=7;
				}
				break;
			case SQL92_RESERVED_FALSE:
				{
				alt552=8;
				}
				break;
			case DBTIMEZONE_VK:
				{
				alt552=9;
				}
				break;
			case SESSIONTIMEZONE_VK:
				{
				alt552=10;
				}
				break;
			case MINVALUE_VK:
				{
				alt552=11;
				}
				break;
			case MAXVALUE_VK:
				{
				alt552=12;
				}
				break;
			case SQL92_RESERVED_DEFAULT:
				{
				alt552=13;
				}
				break;
			default:
				NoViableAltException nvae =
					new NoViableAltException("", 552, 0, input);
				throw nvae;
			}
			switch (alt552) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1821:10: UNSIGNED_INTEGER
					{
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant15435); 
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1822:10: ^( MINUS_SIGN UNSIGNED_INTEGER )
					{
					match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_constant15447); 
					match(input, Token.DOWN, null); 
					match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_constant15449); 
					match(input, Token.UP, null); 

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1823:10: EXACT_NUM_LIT
					{
					match(input,EXACT_NUM_LIT,FOLLOW_EXACT_NUM_LIT_in_constant15461); 
					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1824:10: APPROXIMATE_NUM_LIT
					{
					match(input,APPROXIMATE_NUM_LIT,FOLLOW_APPROXIMATE_NUM_LIT_in_constant15472); 
					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1825:10: CHAR_STRING
					{
					match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_constant15483); 
					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1826:10: SQL92_RESERVED_NULL
					{
					match(input,SQL92_RESERVED_NULL,FOLLOW_SQL92_RESERVED_NULL_in_constant15494); 
					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1827:10: SQL92_RESERVED_TRUE
					{
					match(input,SQL92_RESERVED_TRUE,FOLLOW_SQL92_RESERVED_TRUE_in_constant15505); 
					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1828:10: SQL92_RESERVED_FALSE
					{
					match(input,SQL92_RESERVED_FALSE,FOLLOW_SQL92_RESERVED_FALSE_in_constant15516); 
					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1829:10: DBTIMEZONE_VK
					{
					match(input,DBTIMEZONE_VK,FOLLOW_DBTIMEZONE_VK_in_constant15527); 
					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1830:10: SESSIONTIMEZONE_VK
					{
					match(input,SESSIONTIMEZONE_VK,FOLLOW_SESSIONTIMEZONE_VK_in_constant15539); 
					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1831:10: MINVALUE_VK
					{
					match(input,MINVALUE_VK,FOLLOW_MINVALUE_VK_in_constant15550); 
					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1832:10: MAXVALUE_VK
					{
					match(input,MAXVALUE_VK,FOLLOW_MAXVALUE_VK_in_constant15561); 
					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1833:10: SQL92_RESERVED_DEFAULT
					{
					match(input,SQL92_RESERVED_DEFAULT,FOLLOW_SQL92_RESERVED_DEFAULT_in_constant15572); 
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "constant"



	// $ANTLR start "id"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1838:1: id : ( char_set_name )? ID ;
	public final void id() throws RecognitionException {
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1839:5: ( ( char_set_name )? ID )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1839:10: ( char_set_name )? ID
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1839:10: ( char_set_name )?
			int alt553=2;
			int LA553_0 = input.LA(1);
			if ( (LA553_0==CHAR_SET_NAME) ) {
				alt553=1;
			}
			switch (alt553) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLWalker.g:1839:10: char_set_name
					{
					pushFollow(FOLLOW_char_set_name_in_id15594);
					char_set_name();
					state._fsp--;

					}
					break;

			}

			match(input,ID,FOLLOW_ID_in_id15597); 
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
	}
	// $ANTLR end "id"

	// Delegated rules


	protected DFA299 dfa299 = new DFA299(this);
	static final String DFA299_eotS =
		"\16\uffff";
	static final String DFA299_eofS =
		"\16\uffff";
	static final String DFA299_minS =
		"\1\u00ca\1\2\1\uffff\1\u0104\1\2\1\u00f6\1\2\1\3\1\u0197\1\u0104\1\3\2"+
		"\uffff\1\u0197";
	static final String DFA299_maxS =
		"\1\u033a\1\2\1\uffff\1\u0104\1\2\1\u0197\1\2\2\u0197\1\u030a\1\u0197\2"+
		"\uffff\1\u0197";
	static final String DFA299_acceptS =
		"\2\uffff\1\3\10\uffff\1\1\1\2\1\uffff";
	static final String DFA299_specialS =
		"\16\uffff}>";
	static final String[] DFA299_transitionS = {
			"\1\1\u026f\uffff\1\2",
			"\1\3",
			"",
			"\1\4",
			"\1\5",
			"\1\6\u00a0\uffff\1\7",
			"\1\10",
			"\1\11\u0193\uffff\1\7",
			"\1\12",
			"\1\14\151\uffff\1\13\147\uffff\1\13\u0133\uffff\1\14",
			"\1\15\u0193\uffff\1\12",
			"",
			"",
			"\1\7"
	};

	static final short[] DFA299_eot = DFA.unpackEncodedString(DFA299_eotS);
	static final short[] DFA299_eof = DFA.unpackEncodedString(DFA299_eofS);
	static final char[] DFA299_min = DFA.unpackEncodedStringToUnsignedChars(DFA299_minS);
	static final char[] DFA299_max = DFA.unpackEncodedStringToUnsignedChars(DFA299_maxS);
	static final short[] DFA299_accept = DFA.unpackEncodedString(DFA299_acceptS);
	static final short[] DFA299_special = DFA.unpackEncodedString(DFA299_specialS);
	static final short[][] DFA299_transition;

	static {
		int numStates = DFA299_transitionS.length;
		DFA299_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA299_transition[i] = DFA.unpackEncodedString(DFA299_transitionS[i]);
		}
	}

	protected class DFA299 extends DFA {

		public DFA299(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 299;
			this.eot = DFA299_eot;
			this.eof = DFA299_eof;
			this.min = DFA299_min;
			this.max = DFA299_max;
			this.accept = DFA299_accept;
			this.special = DFA299_special;
			this.transition = DFA299_transition;
		}
		@Override
		public String getDescription() {
			return "1074:1: update_set_elements : ( ^( ASSIGN column_name expression ) | ^( ASSIGN ( column_name )+ subquery ) | ^( VALUE_VK ( char_set_name )? ID expression ) );";
		}
	}

	public static final BitSet FOLLOW_COMPILATION_UNIT_in_compilation_unit51 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unit_statement_in_compilation_unit53 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x9000000000000000L,0x000000000000000FL,0x000001FE00000000L,0x0000000003F00000L});
	public static final BitSet FOLLOW_SQL_SCRIPT_in_sql_script76 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_serveroutput_declaration_in_sql_script78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_sql_script81 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_SERVEROUTPUT_in_serveroutput_declaration103 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_serveroutput_declaration105 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_alter_function_in_unit_statement130 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_unit_statement141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_unit_statement152 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_unit_statement163 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_unit_statement174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_unit_statement185 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_unit_statement196 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_unit_statement207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_package_in_unit_statement218 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_unit_statement229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_unit_statement240 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_unit_statement251 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_unit_statement262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_unit_statement273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_unit_statement284 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_unit_statement295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_unit_statement306 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_type_in_unit_statement317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_FUNCTION_in_drop_function342 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_drop_function344 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_FUNCTION_in_alter_function366 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_alter_function368 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_function370 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_function373 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function376 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_CREATE_FUNCTION_in_create_function_body399 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_function_body401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_function_name_in_create_function_body404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_create_function_body406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_function_body409 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_function_body411 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000080000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_result_cache_clause_in_create_function_body433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_create_function_body436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_USING_MODE_in_create_function_body457 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_AGGREGATE_VK_in_create_function_body462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_implementation_type_name_in_create_function_body465 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_function_body486 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_call_spec_in_create_function_body491 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_function_body512 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PIPELINED_VK_in_create_function_body514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000801200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200001000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_declare_spec_in_create_function_body517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000801200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200001000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_body_in_create_function_body520 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARALLEL_ENABLE_VK_in_parallel_enable_clause568 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause570 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_partition_by_clause593 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_partition_by_clause595 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_partition_by_clause615 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_HASH_VK_in_partition_by_clause635 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause638 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause640 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_RANGE_VK_in_partition_by_clause663 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_partition_by_clause666 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause668 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause700 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESULT_CACHE_VK_in_result_cache_clause732 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause734 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RELIES_ON_VK_in_relies_on_part757 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_relies_on_part759 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_STREAMING_CLAUSE_in_streaming_clause782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_streaming_clause784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_streaming_clause790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_streaming_clause793 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_streaming_clause795 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_DROP_PACKAGE_in_drop_package824 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_drop_package826 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_package828 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PACKAGE_in_alter_package851 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_package_name_in_alter_package853 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0800000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x8000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_package855 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x8000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_package858 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package887 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_SPEC_in_create_package910 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_package_name_in_create_package915 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000800000000000L,0x0000004000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000200201000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_package917 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000004000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000200201000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_package_obj_spec_in_create_package920 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000004000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000200201000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_CREATE_PACKAGE_BODY_in_create_package935 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_package937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_package_name_in_create_package940 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000819200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300804L,0x0000010000000000L});
	public static final BitSet FOLLOW_package_obj_body_in_create_package942 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000819200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300804L,0x0000010000000000L});
	public static final BitSet FOLLOW_seq_of_statements_in_create_package945 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_spec1029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_spec1053 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec1065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PROCEDURE_SPEC_in_procedure_spec1087 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_procedure_spec1089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_procedure_spec1092 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_procedure_spec1094 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_procedure_spec1112 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_procedure_spec1114 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_SPEC_in_function_spec1145 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_name_in_function_spec1147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_type_spec_in_function_spec1150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_SELF_VK_in_function_spec1152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_function_spec1156 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_function_spec1158 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_function_spec1174 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000200000080000L,0x0000000000000000L,0x0002000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_function_spec1177 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0002000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_result_cache_clause_in_function_spec1180 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0002000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_DETERMINISTIC_VK_in_function_spec1183 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0002000000000200L});
	public static final BitSet FOLLOW_CALL_MODE_in_function_spec1204 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_function_spec1206 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_function_spec1227 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_function_spec1229 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_body1276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body1289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body1302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_body1315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_body1328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_body1340 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body1352 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_package_obj_body1364 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_package_obj_body1376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DROP_PROCEDURE_in_drop_procedure1403 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_drop_procedure1405 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_PROCEDURE_in_alter_procedure1427 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_name_in_alter_procedure1429 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_procedure1431 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_procedure1434 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure1437 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_CREATE_PROCEDURE_in_create_procedure_body1460 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_procedure_body1462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_procedure_name_in_create_procedure_body1465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_create_procedure_body1468 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_in_create_procedure_body1470 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body1474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000202000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_create_procedure_body1494 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_create_procedure_body1514 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_create_procedure_body1516 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_create_procedure_body1537 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_create_procedure_body1539 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000801200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200001000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_body_in_create_procedure_body1542 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TRIGGER_in_drop_trigger1592 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_drop_trigger1594 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TRIGGER_in_alter_trigger1616 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger1618 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000800L,0x0000000080001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8200000000000000L});
	public static final BitSet FOLLOW_set_in_alter_trigger1638 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RENAME_VK_in_alter_trigger1662 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger1664 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_trigger1684 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_trigger1687 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger1690 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_CREATE_TRIGGER_in_create_trigger1736 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_trigger1738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_trigger_name_in_create_trigger1741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000402000000000L,0x0000000000006000L,0x1000000080001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger1757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000402000000000L,0x0000000000006000L,0x1000000080001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger1760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000402000000000L,0x0000000000004000L,0x1000000080001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger1763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000402000000000L,0x0000000000004000L,0x1000000080001000L});
	public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger1778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000402000000000L,0x0000000000004000L,0x0000000080001000L});
	public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger1788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000402000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_trigger_body_in_create_trigger1791 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_trigger_follows_clause1813 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause1815 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_trigger_when_clause1838 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_trigger_when_clause1840 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_DML_in_simple_dml_trigger1863 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_simple_dml_trigger1865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_FOR_EACH_ROW_in_simple_dml_trigger1873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger1876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger1879 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_DML_in_compound_dml_trigger1901 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger1903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger1906 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NON_DML_in_non_dml_trigger1928 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_non_dml_trigger1930 = new BitSet(new long[]{0x0000000000000000L,0x0402004000000000L,0x0000000001000010L,0x0000000000040810L,0x0620000000000040L,0x1000000000002000L,0x0000000000000000L,0x0000000001800000L,0x0000000000000001L,0x0200000000000000L,0x0000202000040000L,0x0000000000000000L,0x0000004000002002L});
	public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger1936 = new BitSet(new long[]{0x0000000000000000L,0x0402004000000000L,0x0000000001000010L,0x0000000000040810L,0x0620000000000040L,0x1000000000002000L,0x0000000000000000L,0x0000000001800000L,0x0000000000000001L,0x0200000000000000L,0x0000202000060000L,0x0000000000000000L,0x0000004000002002L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_trigger1940 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_schema_name_in_non_dml_trigger1942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_trigger1945 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPOUND_VK_in_trigger_body1968 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_body1970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000003000000L,0x0000801200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200001000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_declare_spec_in_trigger_body1972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0060000000000000L,0x0000000003000000L,0x0000801200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200001000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_timing_point_section_in_trigger_body1975 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0060000000000000L,0x0000000003000000L});
	public static final BitSet FOLLOW_CALL_VK_in_trigger_body1989 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_trigger_body1991 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_function_argument_in_trigger_body1993 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_trigger_body2008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_trigger_body2010 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_STATEMENT_in_timing_point_section2032 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2034 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BEFORE_EACH_ROW_in_timing_point_section2047 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2049 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_STATEMENT_in_timing_point_section2062 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2064 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AFTER_EACH_ROW_in_timing_point_section2077 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_block_in_timing_point_section2079 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALTER_in_non_dml_event2100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANALYZE_VK_in_non_dml_event2111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSOCIATE_VK_in_non_dml_event2122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event2124 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUDIT_VK_in_non_dml_event2135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COMMENT_VK_in_non_dml_event2146 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CREATE_in_non_dml_event2157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DISASSOCIATE_VK_in_non_dml_event2168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_STATISTICS_VK_in_non_dml_event2170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DROP_in_non_dml_event2181 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GRANT_in_non_dml_event2192 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOAUDIT_VK_in_non_dml_event2203 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RENAME_VK_in_non_dml_event2214 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_REVOKE_in_non_dml_event2225 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TRUNCATE_VK_in_non_dml_event2236 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DDL_VK_in_non_dml_event2247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STARTUP_VK_in_non_dml_event2258 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SHUTDOWN_VK_in_non_dml_event2269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DB_ROLE_CHANGE_VK_in_non_dml_event2280 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGON_VK_in_non_dml_event2291 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOGOFF_VK_in_non_dml_event2302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SERVERERROR_VK_in_non_dml_event2313 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUSPEND_VK_in_non_dml_event2324 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATABASE_VK_in_non_dml_event2335 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SCHEMA_VK_in_non_dml_event2346 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOLLOWS_VK_in_non_dml_event2357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DML_EVENT_in_dml_event_clause2378 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause2380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_dml_event_clause2384 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_clause2386 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause2388 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DML_EVENT_ELEMENT_in_dml_event_element2414 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_dml_event_element2416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_dml_event_element2425 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_dml_event_element2427 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_NESTED_VK_in_dml_event_nested_clause2451 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause2453 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCING_VK_in_referencing_clause2475 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_referencing_element_in_referencing_clause2477 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0010000040000000L});
	public static final BitSet FOLLOW_set_in_referencing_element2500 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_referencing_element2508 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_TYPE_in_drop_type2535 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_drop_type2537 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_BODY_VK_in_drop_type2539 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_FORCE_VK_in_drop_type2542 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_VALIDATE_VK_in_drop_type2545 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_TYPE_in_alter_type2568 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_alter_type2570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2C00000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_REPLACE_VK_in_alter_type2591 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_alter_type2594 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_alter_type2596 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_alter_type2600 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_ATTRIBUTE_in_alter_type2622 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_alter_type2624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_ATTRIBUTES_in_alter_type2633 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_type2635 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_ALTER_METHOD_in_alter_type2658 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alter_method_element_in_alter_type2660 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type2681 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_modifier_clause_in_alter_type2700 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_COMPILE_VK_in_alter_type2720 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DEBUG_VK_in_alter_type2729 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_REUSE_VK_in_alter_type2732 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_type2735 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type2766 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_METHOD_ELEMENT_in_alter_method_element2800 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_alter_method_element2802 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000480000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element2808 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element2811 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_in_attribute_definition2834 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_attribute_name_in_attribute_definition2836 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_attribute_definition2838 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_COLLECTION_in_alter_collection_clauses2861 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_TYPE_VK_in_alter_collection_clauses2882 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses2884 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LIMIT_VK_in_alter_collection_clauses2905 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_alter_collection_clauses2907 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEPENDENT_HANDLING_in_dependent_handling_clause2954 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_INVALIDATE_VK_in_dependent_handling_clause2974 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CASCADE_VK_in_dependent_handling_clause2994 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CONVERT_VK_in_dependent_handling_clause3022 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_dependent_handling_clause3049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_INCLUDING_VK_in_dependent_handling_clause3052 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_dependent_exceptions_part3138 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_FORCE_VK_in_dependent_exceptions_part3140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part3143 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CREATE_TYPE_BODY_in_create_type3167 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type3169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_type_name_in_create_type3172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_TYPE_BODY_ELEMENTS_in_create_type3175 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_body_elements_in_create_type3177 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000480000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_CREATE_TYPE_SPEC_in_create_type3192 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REPLACE_VK_in_create_type3194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_type_name_in_create_type3197 = new BitSet(new long[]{0x0000000000008008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_CHAR_STRING_in_create_type3199 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_object_type_def_in_create_type3202 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OBJECT_TYPE_DEF_in_object_type_def3225 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_object_as_part_in_object_type_def3228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000800000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_object_under_part_in_object_type_def3230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000800000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def3233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000800000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def3249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_modifier_clause_in_object_type_def3252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_OBJECT_MEMBERS_in_object_type_def3256 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_in_object_type_def3258 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_OBJECT_AS_in_object_as_part3284 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_OBJECT_VK_in_object_as_part3287 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_varray_type_def_in_object_as_part3289 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part3291 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNDER_VK_in_object_under_part3314 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_object_under_part3316 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NESTED_TABLE_TYPE_DEF_in_nested_table_type_def3338 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_nested_table_type_def3340 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_nested_table_type_def3342 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_nested_table_type_def3345 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_sqlj_object_type3368 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type3370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_set_in_sqlj_object_type3372 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements3399 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements3410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_map_order_func_declaration3431 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_function_body_in_map_order_func_declaration3437 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_subprog_decl_in_type3459 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_create_procedure_body_in_subprog_decl_in_type3482 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_create_function_body_in_subprog_decl_in_type3501 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type3520 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_VK_in_constructor_declaration3565 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_declaration3567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000010000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_declaration3569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_declaration3572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_declaration3576 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration3578 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_declaration3601 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_declaration3603 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_MODE_in_constructor_declaration3624 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_constructor_declaration3626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000801200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200001000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_body_in_constructor_declaration3629 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODIFIER_in_modifier_clause3679 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_modifier_clause3681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_set_in_modifier_clause3684 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXTERNAL_VK_in_sqlj_object_type_attr3712 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr3714 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ELEMENT_SPEC_in_element_spec3736 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_element_spec_options_in_element_spec3738 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L,0x0000000000000000L,0x0000000000400000L,0x0040000000000000L,0x0000000000000000L,0x0000800480000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_modifier_clause_in_element_spec3741 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_pragma_clause_in_element_spec3744 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options3766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_spec_in_element_spec_options3777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options3788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_element_spec_options3800 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_element_spec_options3802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_element_spec_options3804 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_sqlj_object_type_attr_in_element_spec_options3806 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_subprogram_spec3829 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_procedure_spec_in_subprogram_spec3852 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_function_spec_in_subprogram_spec3871 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRUCTOR_SPEC_in_constructor_spec3916 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_constructor_spec3918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0000010000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_FINAL_VK_in_constructor_spec3920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_INSTANTIABLE_VK_in_constructor_spec3923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_constructor_spec3927 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec3929 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_constructor_call_mode_in_constructor_spec3933 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CALL_MODE_in_constructor_call_mode3956 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_call_spec_in_constructor_call_mode3958 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_map_order_function_spec3980 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_spec_in_map_order_function_spec3986 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_VK_in_pragma_clause4008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pragma_elements_in_pragma_clause4010 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_id_in_pragma_elements4032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_elements4043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PARAMETER_in_type_elements_parameter4064 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter4066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_type_elements_parameter4068 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DROP_SEQUENCE_in_drop_sequence4095 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_drop_sequence4097 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALTER_SEQUENCE_in_alter_sequence4119 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_alter_sequence4121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000010100000000L,0x00000000000004CAL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000028000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_alter_sequence4123 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000010100000000L,0x00000000000004CAL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000028000000000L});
	public static final BitSet FOLLOW_CREATE_SEQUENCE_in_create_sequence4146 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_sequence_name_in_create_sequence4148 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000010100000000L,0x00000000000004CAL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000028000000000L});
	public static final BitSet FOLLOW_sequence_spec_in_create_sequence4150 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000010100000000L,0x00000000000004CAL,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000028000000000L});
	public static final BitSet FOLLOW_START_VK_in_sequence_spec4175 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4177 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INCREMENT_VK_in_sequence_spec4190 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4192 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_sequence_spec4205 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4207 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_sequence_spec4220 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4222 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CACHE_VK_in_sequence_spec4235 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec4237 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOMAXVALUE_VK_in_sequence_spec4249 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOMINVALUE_VK_in_sequence_spec4260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CYCLE_VK_in_sequence_spec4271 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_sequence_spec4282 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOCACHE_VK_in_sequence_spec4293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ORDER_VK_in_sequence_spec4304 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOORDER_VK_in_sequence_spec4315 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AUTHID_VK_in_invoker_rights_clause4342 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_invoker_rights_clause4344 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMPILER_PARAMETER_in_compiler_parameters_clause4370 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_compiler_parameters_clause4373 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_compiler_parameters_clause4375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_compiler_parameters_clause4377 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LANGUAGE_VK_in_call_spec4400 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_java_spec_in_call_spec4404 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_spec_in_call_spec4408 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_JAVA_VK_in_java_spec4434 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_java_spec4436 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_C_VK_in_c_spec4458 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_c_spec4460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_CONTEXT_VK_in_c_spec4463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_LIBRARY_VK_in_c_spec4467 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_c_spec4469 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec4472 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_c_parameters_clause_in_c_spec4475 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AGENT_VK_in_c_agent_in_clause4498 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_c_agent_in_clause4500 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_PARAMETERS_VK_in_c_parameters_clause4523 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_THREE_DOTS_in_c_parameters_clause4526 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_c_parameters_clause4528 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter4554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter4556 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0004000000000000L,0x0000000000000002L,0x0000088000000000L,0x0040000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter4567 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_default_value_part_in_parameter4570 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DEFAULT_VALUE_in_default_value_part4593 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_default_value_part4595 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_variable_declaration_in_declare_spec4622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_declare_spec4634 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_declare_spec4646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_declare_spec4658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_declare_spec4670 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_declare_spec4682 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_declare_spec4694 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_declare_spec4706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_declare_spec4718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_DECLARE_in_variable_declaration4740 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_variable_declaration4742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_variable_declaration4744 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000040000L,0x0000000000000002L});
	public static final BitSet FOLLOW_CONSTANT_VK_in_variable_declaration4746 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_variable_declaration4749 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_default_value_part_in_variable_declaration4752 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBTYPE_DECLARE_in_subtype_declaration4781 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_subtype_declaration4783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_subtype_declaration4785 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_subtype_declaration4787 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_subtype_range_in_subtype_declaration4790 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RANGE_VK_in_subtype_range4815 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_subtype_range4817 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_CURSOR_DECLARE_in_cursor_declaration4841 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_declaration4843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_type_spec_in_cursor_declaration4845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_declaration4848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_PARAMETERS_in_cursor_declaration4852 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration4854 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_PARAMETER_in_parameter_spec4879 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_parameter_name_in_parameter_spec4881 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000002L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter_spec4883 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_default_value_part_in_parameter_spec4886 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_DECLARE_in_exception_declaration4910 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_declaration4912 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PRAGMA_DECLARE_in_pragma_declaration4947 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SERIALLY_REUSABLE_VK_in_pragma_declaration4967 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_AUTONOMOUS_TRANSACTION_VK_in_pragma_declaration4987 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXCEPTION_INIT_VK_in_pragma_declaration5007 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_pragma_declaration5009 = new BitSet(new long[]{0x0000400010008040L,0x8040000000000000L,0x0000100080004000L,0x0000000000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010100000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_constant_in_pragma_declaration5011 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INLINE_VK_in_pragma_declaration5032 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_id_in_pragma_declaration5034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_pragma_declaration5036 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RESTRICT_REFERENCES_VK_in_pragma_declaration5057 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_pragma_declaration5059 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration5062 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_record_type_dec_in_record_declaration5108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_var_dec_in_record_declaration5119 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RECORD_TYPE_DECLARE_in_record_type_dec5143 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec5145 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0020000000000000L,0x0000080000000000L,0x0040000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_REF_VK_in_record_type_dec5147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0020000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_record_type_dec5150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_FIELDS_in_record_type_dec5154 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec5156 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_FIELD_SPEC_in_field_spec5180 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_field_spec5182 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000002L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_field_spec5184 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_field_spec5187 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_default_value_part_in_field_spec5190 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_VAR_DECLARE_in_record_var_dec5213 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_record_var_dec5215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_type_name_in_record_var_dec5217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_set_in_record_var_dec5219 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_type_dec_in_table_declaration5246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_var_dec_in_table_declaration5257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_TYPE_DECLARE_in_table_type_dec5278 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_table_type_dec5280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_varray_type_def_in_table_type_dec5300 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_table_type_dec5319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TABLE_in_table_type_dec5323 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_type_dec5325 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec5327 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_BY_in_table_indexed_by_part5374 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part5376 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_varray_type_def5397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_VARR_ARRAY_DEF_in_varray_type_def5401 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_varray_type_def5403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_varray_type_def5405 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_DECLARE_in_table_var_dec5427 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_var_name_in_table_var_dec5429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_table_var_dec5431 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATEMENTS_in_seq_of_statements5458 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_statement_in_seq_of_statements5460 = new BitSet(new long[]{0x0000000000000008L,0x0080000000000048L,0x0000000400004109L,0x1000001400000400L,0x0000000004000100L,0x2000180000000000L,0x0000000000000004L,0x0000002010000008L,0x0000000400000000L,0x4000002000000001L,0x00020480201080A0L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_label_declaration_in_statement5482 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assignment_statement_in_statement5493 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_statement5504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_statement5515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_statement5526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_statement5537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_statement5548 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_statement5559 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_statement_in_statement5570 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_statement5581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_statement5592 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_statement5603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_statement_in_statement5614 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_statement5625 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_call_in_statement5636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_in_statement5647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_statement5658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LABEL_DECLARE_in_label_declaration5679 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_label_declaration5681 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_assignment_statement5704 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_assignment_statement5706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_assignment_statement5708 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONTINUE_VK_in_continue_statement5730 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_continue_statement5732 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_general_when_in_continue_statement5735 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_general_when5758 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_general_when5760 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXIT_VK_in_exit_statement5782 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_exit_statement5784 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_general_when_in_exit_statement5787 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GOTO_in_goto_statement5810 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_goto_statement5812 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_IF_in_if_statement5834 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_if_statement5836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_if_statement5838 = new BitSet(new long[]{0x0100000000000008L,0x0800000000000000L});
	public static final BitSet FOLLOW_elsif_part_in_if_statement5840 = new BitSet(new long[]{0x0100000000000008L,0x0800000000000000L});
	public static final BitSet FOLLOW_else_part_in_if_statement5843 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_ELSIF_in_elsif_part5866 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_elsif_part5868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_elsif_part5870 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_else_part5892 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_else_part5894 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WHILE_LOOP_in_loop_statement5916 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_loop_statement5918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400010L});
	public static final BitSet FOLLOW_expression_in_loop_statement5921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement5923 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_LOOP_in_loop_statement5936 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_loop_statement5938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement5941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement5943 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOOP_VK_in_loop_statement5956 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_loop_statement5958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement5961 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDEXED_FOR_in_cursor_loop_param5985 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_cursor_loop_param5987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000001L});
	public static final BitSet FOLLOW_REVERSE_VK_in_cursor_loop_param5989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_cursor_loop_param5993 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param5995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_cursor_loop_param5997 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_BASED_FOR_in_cursor_loop_param6011 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param6013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param6015 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_expression_list_in_cursor_loop_param6017 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_BASED_FOR_in_cursor_loop_param6031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param6033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_loop_param6035 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORALL_VK_in_forall_statement6059 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_forall_statement6061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_bounds_clause_in_forall_statement6063 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000040L,0x0000000400000101L,0x1000000000000000L,0x0000000000000100L,0x0000080000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000400000000L,0x0000000000000000L,0x0000048020008020L});
	public static final BitSet FOLLOW_sql_statement_in_forall_statement6065 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_EXCEPTIONS_VK_in_forall_statement6067 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_BOUND_in_bounds_clause6090 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_bounds_clause6092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_bounds_clause6094 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INDICES_BOUND_in_bounds_clause6107 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_collection_name_in_bounds_clause6109 = new BitSet(new long[]{0x0000000000000008L,0x0000100000000000L});
	public static final BitSet FOLLOW_between_bound_in_bounds_clause6111 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUES_BOUND_in_bounds_clause6125 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_index_name_in_bounds_clause6127 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_between_bound6150 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_between_bound6152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_between_bound6154 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_null_statement6175 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAISE_VK_in_raise_statement6196 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_raise_statement6198 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_statement6221 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_return_statement6223 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_CALL_in_function_call6246 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_function_call6248 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BODY_in_body6270 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_body6272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_body6275 = new BitSet(new long[]{0x0000000000000008L,0x2000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_body6277 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_EXCEPTION_in_exception_clause6303 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_handler_in_exception_clause6305 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_exception_handler6328 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler6330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_exception_handler6333 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BLOCK_in_block6357 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_declare_spec_in_block6359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000801200000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200001000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000300800L,0x0000010000000000L});
	public static final BitSet FOLLOW_body_in_block6362 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_execute_immediate_in_sql_statement6387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement6398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement6409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement6420 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXECUTE_VK_in_execute_immediate6441 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_execute_immediate6443 = new BitSet(new long[]{0x1000000000000008L,0x0000000000000000L,0x0000000000000400L,0x0000040000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_into_clause_in_execute_immediate6446 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate6448 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate6450 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DYNAMIC_RETURN_in_dynamic_returning_clause6476 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause6478 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements6503 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements6514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements6525 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements6537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements6549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements6560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SELECT_STATEMENT_in_select_statement6581 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_factoring_clause_in_select_statement6583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_select_statement6586 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080002L});
	public static final BitSet FOLLOW_for_update_clause_in_select_statement6588 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080002L});
	public static final BitSet FOLLOW_order_by_clause_in_select_statement6591 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_factoring_clause6617 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_factoring_element_in_subquery_factoring_clause6619 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_FACTORING_in_factoring_element6642 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_name_in_factoring_element6644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_factoring_element6646 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SUBQUERY_in_subquery6668 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery6670 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000080L,0x0000000100000200L});
	public static final BitSet FOLLOW_subquery_operation_part_in_subquery6672 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000080L,0x0000000100000200L});
	public static final BitSet FOLLOW_set_in_subquery_operation_part6695 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_subquery_operation_part6703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_basic_elements_in_subquery_operation_part6706 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_query_block_in_subquery_basic_elements6727 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_subquery_basic_elements6738 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_SELECT_in_query_block6759 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_from_clause_in_query_block6774 = new BitSet(new long[]{0x0000000000000100L,0x0200002000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_query_block6796 = new BitSet(new long[]{0x0000000000000100L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_ASTERISK_in_query_block6817 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000004000000460L,0x0000040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_SELECT_LIST_in_query_block6837 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_element_in_query_block6839 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_into_clause_in_query_block6869 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000004000000060L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_where_clause_in_query_block6872 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000000000000060L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_hierarchical_query_clause_in_query_block6875 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000000000000060L});
	public static final BitSet FOLLOW_group_by_clause_in_query_block6891 = new BitSet(new long[]{0x0200000000000008L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_having_clause_in_query_block6894 = new BitSet(new long[]{0x0200000000000008L});
	public static final BitSet FOLLOW_model_clause_in_query_block6897 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_ITEM_in_selected_element6929 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_selected_element6931 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alias_in_selected_element6933 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_from_clause6956 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_in_from_clause6958 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_TABLE_REF_in_table_ref6981 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_table_ref6983 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_join_clause_in_table_ref6985 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_TABLE_REF_ELEMENT_in_table_ref_aux7008 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_table_ref_aux7010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_table_ref_aux7013 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_ONLY_VK_in_table_ref_aux7015 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_pivot_clause_in_table_ref_aux7018 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_unpivot_clause_in_table_ref_aux7021 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_flashback_query_clause_in_table_ref_aux7024 = new BitSet(new long[]{0x0000000000000008L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_JOIN_DEF_in_join_clause7047 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_table_ref_aux_in_join_clause7067 = new BitSet(new long[]{0x1000000000000008L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_query_partition_clause_in_join_clause7069 = new BitSet(new long[]{0x1000000000000008L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_join_on_part_in_join_clause7073 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_join_using_part_in_join_clause7075 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ON_in_join_on_part7100 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_join_on_part7102 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_join_using_part7125 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_join_using_part7127 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_PARTITION_VK_in_query_partition_clause7150 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_query_partition_clause7153 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_query_partition_clause7155 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_query_partition_clause7157 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_set_in_flashback_query_clause7181 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_flashback_query_clause7194 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_VK_in_pivot_clause7217 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_XML_VK_in_pivot_clause7219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_element_in_pivot_clause7222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_pivot_for_clause_in_pivot_clause7225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_pivot_in_clause_in_pivot_clause7227 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIVOT_ELEMENT_in_pivot_element7249 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_element7251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_pivot_element7254 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_pivot_for_clause7276 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_pivot_for_clause7278 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_pivot_in_clause7301 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_pivot_in_clause7317 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_MODE_in_pivot_in_clause7333 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_pivot_in_clause7335 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L});
	public static final BitSet FOLLOW_ELEMENTS_MODE_in_pivot_in_clause7353 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_pivot_in_clause_element_in_pivot_in_clause7355 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_PIVOT_IN_ELEMENT_in_pivot_in_clause_element7398 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_pivot_in_clause_element7400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_pivot_in_clause_element7404 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_pivot_in_clause_element7406 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNPIVOT_VK_in_unpivot_clause7429 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_unpivot_clause7432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_NULLS_VK_in_unpivot_clause7438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_column_name_in_unpivot_clause7443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_pivot_for_clause_in_unpivot_clause7446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_unpivot_in_clause_in_unpivot_clause7448 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_unpivot_in_clause7470 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_unpivot_in_element_in_unpivot_in_clause7472 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_UNPIVOT_IN_ELEMENT_in_unpivot_in_element7495 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_unpivot_in_element7497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_PIVOT_ALIAS_in_unpivot_in_element7501 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_unpivot_in_element7504 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_unpivot_in_element7506 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HIERARCHICAL_in_hierarchical_query_clause7530 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_start_part_in_hierarchical_query_clause7532 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CONNECT_in_hierarchical_query_clause7536 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NOCYCLE_VK_in_hierarchical_query_clause7538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_hierarchical_query_clause7541 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_START_in_start_part7564 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_start_part7566 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_GROUP_in_group_by_clause7588 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_element_in_group_by_clause7590 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_GROUP_BY_ELEMENT_in_group_by_element7613 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_group_by_elements_in_group_by_element7615 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_GROUPING_VK_in_group_by_elements7637 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_groupin_set_in_group_by_elements7639 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_grouping_element_in_group_by_elements7652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GROUPIN_SET_in_groupin_set7674 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_groupin_set7676 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_grouping_element7698 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_grouping_element_in_grouping_element7704 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000C00000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_expression_list_in_grouping_element7717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_grouping_element7728 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_HAVING_in_having_clause7750 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_having_clause7752 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_model_clause7774 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_in_model_clause7776 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L,0x0000000000000000L,0x4004000000000000L});
	public static final BitSet FOLLOW_cell_reference_options_in_model_clause7778 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L,0x0000000000000000L,0x4004000000000000L});
	public static final BitSet FOLLOW_return_rows_clause_in_model_clause7781 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_reference_model_in_model_clause7784 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_set_in_cell_reference_options7807 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAV_VK_in_cell_reference_options7813 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UNIQUE_in_cell_reference_options7826 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_cell_reference_options7828 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RETURN_VK_in_return_rows_clause7854 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_return_rows_clause7856 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_VK_in_reference_model7882 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_reference_model_name_in_reference_model7884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_reference_model7886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_reference_model7888 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_cell_reference_options_in_reference_model7890 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_MAIN_MODEL_in_main_model7913 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_main_model_name_in_main_model7915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_model_column_clauses_in_main_model7918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_model_rules_clause_in_main_model7920 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_cell_reference_options_in_main_model7922 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column_clauses7945 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_DIMENSION_VK_in_model_column_clauses7948 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses7950 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MEASURES_VK_in_model_column_clauses7954 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_clauses7956 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_column_partition_part_in_model_column_clauses7959 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PARTITION_VK_in_model_column_partition_part7982 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_list_in_model_column_partition_part7984 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_COLUMNS_in_model_column_list8006 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_column_in_model_column_list8008 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_MODEL_COLUMN_in_model_column8031 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_model_column8033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_model_column8036 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULES_in_model_rules_clause8059 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_rules_element_in_model_rules_clause8061 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_model_rules_part_in_model_rules_clause8064 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RULES_VK_in_model_rules_part8087 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_part8103 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_part8105 = new BitSet(new long[]{0x0000000000000008L,0x0000002000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_part8107 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_model_iterate_clause_in_model_rules_part8145 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_RULE_in_model_rules_element8177 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASSIGN_in_model_rules_element8193 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_model_expression_in_model_rules_element8195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_model_rules_element8197 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_model_rules_element8214 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_UPSERT_VK_in_model_rules_element8216 = new BitSet(new long[]{0x0000000000000008L,0x0000002000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_model_rules_element8218 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_model_rules_element8236 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ITERATE_VK_in_model_iterate_clause8268 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_model_iterate_clause8270 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_until_part_in_model_iterate_clause8272 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNTIL_VK_in_until_part8295 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_until_part8297 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_order_by_clause8319 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SIBLINGS_VK_in_order_by_clause8321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENTS_in_order_by_clause8325 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_elements_in_order_by_clause8327 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_ORDER_BY_ELEMENT_in_order_by_elements8351 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_order_by_elements8353 = new BitSet(new long[]{0x0000000000000008L,0x0100040000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_NULLS_VK_in_order_by_elements8363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_order_by_elements8365 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FOR_in_for_update_clause8393 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_for_update_of_part_in_for_update_clause8395 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_for_update_options_in_for_update_clause8398 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OF_in_for_update_of_part8421 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_for_update_of_part8423 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SKIP_VK_in_for_update_options8445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_for_update_options8456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WAIT_VK_in_for_update_options8468 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_update_options8470 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_update_statement8494 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_update_statement8496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
	public static final BitSet FOLLOW_update_set_clause_in_update_statement8510 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_where_clause_in_update_statement8524 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_static_returning_clause_in_update_statement8527 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_update_statement8530 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_VK_in_update_set_clause8563 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_update_set_elements_in_update_set_clause8565 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements8588 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements8590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_update_set_elements8592 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_update_set_elements8605 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_update_set_elements8607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_subquery_in_update_set_elements8610 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VALUE_VK_in_update_set_elements8623 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_update_set_elements8625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_update_set_elements8628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_update_set_elements8630 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_delete_statement8654 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_delete_statement8656 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_where_clause_in_delete_statement8670 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_static_returning_clause_in_delete_statement8673 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_delete_statement8676 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INSERT_in_insert_statement8699 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_single_table_insert_in_insert_statement8714 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_insert_in_insert_statement8729 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SINGLE_TABLE_MODE_in_single_table_insert8772 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_single_table_insert8774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_values_clause_in_single_table_insert8777 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_static_returning_clause_in_single_table_insert8779 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_select_statement_in_single_table_insert8783 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_single_table_insert8786 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MULTI_TABLE_MODE_in_multi_table_insert8809 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_multi_table_insert8811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_conditional_insert_clause_in_multi_table_insert8814 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_multi_table_element_in_multi_table_insert8816 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_TABLE_ELEMENT_in_multi_table_element8840 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_insert_into_clause_in_multi_table_element8842 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_values_clause_in_multi_table_element8844 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_multi_table_element8847 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONDITIONAL_INSERT_in_conditional_insert_clause8870 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_conditional_insert_when_part_in_conditional_insert_clause8879 = new BitSet(new long[]{0x0000000000000008L,0x0800000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_conditional_insert_else_part_in_conditional_insert_clause8882 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_conditional_insert_when_part8906 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_conditional_insert_when_part8908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_when_part8910 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_conditional_insert_else_part8933 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_multi_table_element_in_conditional_insert_else_part8935 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_insert_into_clause8958 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_table_ref_in_insert_into_clause8960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_insert_into_clause8963 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_insert_into_clause8965 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SQL92_RESERVED_VALUES_in_values_clause8989 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_values_clause8992 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_values_clause8994 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_VK_in_merge_statement9018 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_merge_statement9020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_tableview_name_in_merge_statement9023 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_merge_statement9039 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_selected_tableview_in_merge_statement9041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_merge_statement9043 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_merge_update_clause_in_merge_statement9059 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000802000000L});
	public static final BitSet FOLLOW_merge_insert_clause_in_merge_statement9062 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_error_logging_clause_in_merge_statement9065 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_UPDATE_in_merge_update_clause9090 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_merge_element_in_merge_update_clause9092 = new BitSet(new long[]{0x0000000000000008L,0x0080000000000000L,0x0000004000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_clause9095 = new BitSet(new long[]{0x0000000000000008L,0x0080000000000000L});
	public static final BitSet FOLLOW_merge_update_delete_part_in_merge_update_clause9098 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASSIGN_in_merge_element9121 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_element9123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_merge_element9125 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DELETE_in_merge_update_delete_part9147 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_where_clause_in_merge_update_delete_part9149 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MERGE_INSERT_in_merge_insert_clause9171 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLUMNS_in_merge_insert_clause9174 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_merge_insert_clause9176 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_expression_list_in_merge_insert_clause9180 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_where_clause_in_merge_insert_clause9182 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECTED_TABLEVIEW_in_selected_tableview9206 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_selected_tableview9208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004400L});
	public static final BitSet FOLLOW_tableview_name_in_selected_tableview9212 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_subquery_in_selected_tableview9214 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_LOCK_in_lock_table_statement9239 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_lock_table_element_in_lock_table_statement9241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_lock_mode_in_lock_table_statement9244 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000400L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_wait_nowait_part_in_lock_table_statement9246 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WAIT_VK_in_wait_nowait_part9269 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_wait_nowait_part9271 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_NOWAIT_in_wait_nowait_part9283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LOCK_TABLE_ELEMENT_in_lock_table_element9306 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_lock_table_element9308 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_partition_extension_clause_in_lock_table_element9310 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_UPDATE_in_lock_mode9360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_SHARE_in_lock_mode9372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_ROW_VK_in_lock_mode9374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9376 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLSQL_RESERVED_EXCLUSIVE_in_lock_mode9387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TABLE_REF_in_general_table_ref9411 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_alias_in_general_table_ref9413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000060000L});
	public static final BitSet FOLLOW_dml_table_expression_clause_in_general_table_ref9416 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_ONLY_VK_in_general_table_ref9418 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STATIC_RETURNING_in_static_returning_clause9441 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_static_returning_clause9443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000040000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_into_clause_in_static_returning_clause9446 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LOG_VK_in_error_logging_clause9468 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_error_logging_into_part_in_error_logging_clause9470 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_expression_in_error_logging_clause9473 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_error_logging_reject_part_in_error_logging_clause9476 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_error_logging_into_part9499 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_error_logging_into_part9501 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REJECT_VK_in_error_logging_reject_part9523 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNLIMITED_VK_in_error_logging_reject_part9526 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_error_logging_reject_part9528 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_EXPRESSION_in_dml_table_expression_clause9551 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_COLLECTION_MODE_in_dml_table_expression_clause9568 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_dml_table_expression_clause9570 = new BitSet(new long[]{0x0000000000000008L,0x0000000000010000L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_dml_table_expression_clause9572 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SELECT_MODE_in_dml_table_expression_clause9590 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_select_statement_in_dml_table_expression_clause9592 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_subquery_restriction_clause_in_dml_table_expression_clause9594 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIRECT_MODE_in_dml_table_expression_clause9612 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_dml_table_expression_clause9614 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_sample_clause_in_dml_table_expression_clause9616 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_general_element_in_dml_table_expression_clause9633 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_table_ref_in_dml_table_expression_clause9668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WITH_in_subquery_restriction_clause9689 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_READ_VK_in_subquery_restriction_clause9692 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_CHECK_in_subquery_restriction_clause9694 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_constraint_name_in_subquery_restriction_clause9696 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAMPLE_VK_in_sample_clause9720 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_BLOCK_VK_in_sample_clause9722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_sample_clause9725 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_seed_part_in_sample_clause9727 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEED_VK_in_seed_part9751 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_seed_part9753 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements9780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements9791 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements9802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements9813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOSE_VK_in_close_statement9835 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_close_statement9837 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_statement9860 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_open_statement9862 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_expression_list_in_open_statement9864 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FETCH_in_fetch_statement9887 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_fetch_statement9889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000040000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_fetch_statement9910 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_fetch_statement9912 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_BULK_VK_in_fetch_statement9934 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_fetch_statement9936 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_OPEN_VK_in_open_for_statement9983 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_variable_name_in_open_for_statement9985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_expression_in_open_for_statement9988 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_select_statement_in_open_for_statement9990 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_open_for_statement9993 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements10019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements10030 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements10041 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements10052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements10063 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SET_TRANSACTION_in_set_transaction_command10084 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_set_transaction_command10086 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_READ_VK_in_set_transaction_command10107 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_set_transaction_command10109 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ISOLATION_VK_in_set_transaction_command10134 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_set_transaction_command10136 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_set_transaction_command10161 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command10163 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SET_CONSTRAINT_in_set_constraint_command10210 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ALL_in_set_constraint_command10213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L,0x0000000002000000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command10215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0000000000000008L,0x0000000002000000L});
	public static final BitSet FOLLOW_set_in_set_constraint_command10219 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COMMIT_VK_in_commit_statement10246 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_commit_statement10248 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_COMMENT_VK_in_commit_statement10270 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_commit_statement10272 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_commit_statement10293 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CORRUPT_XID_VK_in_commit_statement10296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_commit_statement10298 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CORRUPT_XID_ALL_VK_in_commit_statement10300 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_commit_statement10302 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_commit_statement10304 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_write_clause_in_commit_statement10336 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WRITE_VK_in_write_clause10368 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROLLBACK_VK_in_rollback_statement10405 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_WORK_VK_in_rollback_statement10407 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_rollback_statement10429 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_rollback_statement10431 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FORCE_VK_in_rollback_statement10452 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_CHAR_STRING_in_rollback_statement10454 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_VK_in_savepoint_statement10501 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement10503 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_ROW_in_pipe_row_statement10530 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_pipe_row_statement10532 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_LIST_in_expression_list10558 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_list10560 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_LOGIC_EXPR_in_expression10583 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression10585 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXPR_in_expression10598 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression10600 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_OR_in_expression_element10622 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10624 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10626 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_AND_in_expression_element10639 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10641 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10643 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NOT_in_expression_element10656 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10658 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_expression_element10671 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10685 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10687 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NULL_in_expression_element10701 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10703 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NULL_in_expression_element10716 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10718 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_NAN_in_expression_element10731 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10733 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NAN_in_expression_element10746 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10748 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_PRESENT_in_expression_element10761 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10763 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_PRESENT_in_expression_element10776 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10778 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_INFINITE_in_expression_element10791 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10793 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_INFINITE_in_expression_element10806 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10808 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_A_SET_in_expression_element10821 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10823 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_A_SET_in_expression_element10836 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10838 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_EMPTY_in_expression_element10851 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10853 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_EMPTY_in_expression_element10866 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10868 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_IS_NOT_OF_TYPE_in_expression_element10881 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element10885 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_IS_OF_TYPE_in_expression_element10899 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_expression_element10903 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_set_in_expression_element10918 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10924 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10926 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_IN_in_expression_element10940 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_in_elements_in_expression_element10944 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_expression_element10957 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_in_elements_in_expression_element10961 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_BETWEEN_in_expression_element10974 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10976 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10978 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10980 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_expression_element10993 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10995 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10997 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element10999 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NOT_LIKE_in_expression_element11012 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11014 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11016 = new BitSet(new long[]{0x0004580318208148L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11018 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_expression_element11032 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11042 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11044 = new BitSet(new long[]{0x0004580318208148L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11046 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONCATENATION_OP_in_expression_element11061 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11063 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11065 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLUS_SIGN_in_expression_element11078 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11080 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11082 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_expression_element11095 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11097 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11099 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_expression_element11112 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11114 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11116 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SOLIDUS_in_expression_element11129 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11131 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11133 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MOD_VK_in_expression_element11146 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11148 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11150 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DIV_VK_in_expression_element11163 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11165 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11167 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PIPE_VK_in_expression_element11180 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11182 = new BitSet(new long[]{0x0004580318208140L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11184 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_UNARY_OPERATOR_in_expression_element11198 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11200 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_PRIOR_in_expression_element11213 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11215 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NEW_VK_in_expression_element11228 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_expression_element11230 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DISTINCT_in_expression_element11243 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11245 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDARD_FUNCTION_in_expression_element11258 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_standard_function_in_expression_element11260 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_expression_element11273 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11283 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VECTOR_EXPR_in_expression_element11296 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11298 = new BitSet(new long[]{0x0004580318208148L,0xC24011A800010000L,0x0000100080247080L,0x0004000000000020L,0x0140000000000000L,0x0000000000044000L,0x3FFF000000280000L,0x8002110500038002L,0x0F00010000032000L,0x0000000000000002L,0x0202004000100080L,0x0000000000000000L,0x0000000000000501L,0x0000040000000001L});
	public static final BitSet FOLLOW_DATETIME_OP_in_expression_element11313 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_datetime_element_in_expression_element11317 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_model_expression_in_expression_element11329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KEEP_VK_in_expression_element11341 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_DENSE_RANK_VK_in_expression_element11345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_set_in_expression_element11347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_expression_element11353 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_over_clause_in_expression_element11355 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DOT_ASTERISK_in_expression_element11370 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_tableview_name_in_expression_element11372 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_expression_element11385 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_cursor_name_in_expression_element11395 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OUTER_JOIN_SIGN_in_expression_element11408 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_expression_element11410 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_case_statement_in_expression_element11423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constant_in_expression_element11434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_expression_element11445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_expression_element11456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subquery_in_in_elements11476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_list_in_in_elements11487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_VK_in_datetime_element11508 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_datetime_element11510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_datetime_element11513 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TIME_VK_in_datetime_element11515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_datetime_element11517 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_DAY_VK_in_datetime_element11531 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SECOND_VK_in_datetime_element11533 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_datetime_element11535 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_YEAR_VK_in_datetime_element11549 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_MONTH_VK_in_datetime_element11551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_datetime_element11553 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MODEL_EXPRESSION_in_model_expression11575 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_element_in_model_expression11577 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000018L,0x0000000000400000L});
	public static final BitSet FOLLOW_model_expression_element_in_model_expression11579 = new BitSet(new long[]{0x0000000000000008L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000018L,0x0000000000400000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ANY_in_model_expression_element11601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_model_expression_element11612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FOR_SINGLE_COLUMN_in_model_expression_element11624 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element11626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000084L,0x0000000000000000L,0x4000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_for_single_column_element_in_model_expression_element11628 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_for_like_part_in_model_expression_element11630 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FOR_MULTI_COLUMN_in_model_expression_element11644 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_model_expression_element11646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_model_expression_element11650 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_model_expression_element11653 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_list_in_model_expression_element11655 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_for_single_column_element11680 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_for_single_column_element11682 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FROM_in_for_single_column_element11695 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element11697 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TO_in_for_single_column_element11711 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element11713 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_for_single_column_element11727 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_single_column_element11733 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_LIKE_in_for_like_part11756 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_for_like_part11758 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SIMPLE_CASE_in_case_statement11780 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_case_statement11782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400010L});
	public static final BitSet FOLLOW_expression_in_case_statement11785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement11787 = new BitSet(new long[]{0x0000000000000008L,0x0800000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement11790 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SEARCHED_CASE_in_case_statement11806 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_label_name_in_case_statement11808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_case_when_part_in_case_statement11811 = new BitSet(new long[]{0x0000000000000008L,0x0800000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_case_else_part_in_case_statement11814 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHEN_in_case_when_part11840 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_case_when_part11842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_when_part11845 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_when_part11847 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ELSE_in_case_else_part11870 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_seq_of_statements_in_case_else_part11873 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_case_else_part11875 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_OVER_in_standard_function11899 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function11901 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function11903 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_USING_in_standard_function11917 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function11919 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function11921 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COUNT_VK_in_standard_function11935 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ASTERISK_in_standard_function11939 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function11943 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function11947 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_standard_function11961 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_subquery_in_standard_function11968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_expression_in_standard_function11970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function11973 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHR_VK_in_standard_function11986 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function11988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_NCHAR_CS_VK_in_standard_function11990 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECT_VK_in_standard_function12003 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_column_name_in_standard_function12012 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_collect_order_by_part_in_standard_function12014 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_FUNCTION_ENABLING_WITHIN_OR_OVER_in_standard_function12028 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_function_argument_in_standard_function12030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_within_clause_in_standard_function12033 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function12035 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_DECOMPOSE_VK_in_standard_function12051 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12053 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_EXTRACT_VK_in_standard_function12074 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_REGULAR_ID_in_standard_function12076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12078 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_standard_function12091 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000200000L});
	public static final BitSet FOLLOW_NULLS_VK_in_standard_function12099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_over_clause_in_standard_function12102 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PREDICTION_FUNCTION_in_standard_function12116 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12118 = new BitSet(new long[]{0x1000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_cost_matrix_clause_in_standard_function12121 = new BitSet(new long[]{0x1000000000000008L});
	public static final BitSet FOLLOW_using_clause_in_standard_function12124 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRANSLATE_VK_in_standard_function12138 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12140 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0400000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12149 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_TREAT_VK_in_standard_function12163 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_REF_VK_in_standard_function12167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_type_spec_in_standard_function12170 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TRIM_VK_in_standard_function12183 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12194 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12196 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLAGG_VK_in_standard_function12212 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12214 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_standard_function12216 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_standard_function12230 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_standard_function12236 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_XMLEXISTS_VK_in_standard_function12250 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12252 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12254 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLPARSE_VK_in_standard_function12268 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_standard_function12270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12276 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_WELLFORMED_VK_in_standard_function12278 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLQUERY_VK_in_standard_function12292 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12294 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12296 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_standard_function12299 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLROOT_VK_in_standard_function12313 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function12317 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_xmlroot_param_standalone_part_in_standard_function12319 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLTABLE_VK_in_standard_function12333 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_namespaces_clause_in_standard_function12335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12338 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_xml_passing_clause_in_standard_function12340 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_xml_table_column_in_standard_function12343 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_XMLELEMENT_VK_in_standard_function12357 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_standard_function12397 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_xml_attributes_clause_in_standard_function12411 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12415 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alias_in_standard_function12417 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_XMLPI_VK_in_standard_function12442 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NAME_VK_in_standard_function12465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_char_set_name_in_standard_function12467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_standard_function12470 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_standard_function12493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12495 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12531 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLSERIALIZE_VK_in_standard_function12554 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_standard_function12572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_standard_function12594 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000100000000L,0x0000080040020000L,0x0040000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_type_spec_in_standard_function12596 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000040020000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_xmlserialize_param_enconding_part_in_standard_function12615 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040020000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_xml_param_version_part_in_standard_function12634 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040020000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_xmlserialize_param_ident_part_in_standard_function12653 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_set_in_standard_function12673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_DEFAULTS_VK_in_standard_function12679 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_OVER_VK_in_over_clause12712 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_query_partition_clause_in_over_clause12714 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_order_by_clause_in_over_clause12718 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_windowing_clause_in_over_clause12720 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_windowing_clause12745 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_BETWEEN_in_windowing_clause12769 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12773 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_windowing_elements_in_windowing_clause12793 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_UNBOUNDED_VK_in_windowing_elements12839 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PRECEDING_VK_in_windowing_elements12841 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURRENT_VK_in_windowing_elements12854 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ROW_VK_in_windowing_elements12856 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_windowing_elements12869 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_windowing_elements12875 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_USING_in_using_clause12897 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_using_element_in_using_clause12899 = new BitSet(new long[]{0x0000000000000108L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_ELEMENT_in_using_element12922 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_SQL92_RESERVED_IN_in_using_element12924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000040000000000L});
	public static final BitSet FOLLOW_OUT_VK_in_using_element12927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_using_element12930 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alias_in_using_element12932 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ASTERISK_in_using_element12945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_ORDER_in_collect_order_by_part12966 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_collect_order_by_part12968 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_WITHIN_VK_in_within_clause12990 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_order_by_clause_in_within_clause12992 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_VK_in_cost_matrix_clause13014 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_PLSQL_NON_RESERVED_MODEL_in_cost_matrix_clause13033 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_AUTO_VK_in_cost_matrix_clause13035 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_cost_class_name_in_cost_matrix_clause13055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000800000000000L});
	public static final BitSet FOLLOW_expression_list_in_cost_matrix_clause13058 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PASSING_VK_in_xml_passing_clause13103 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_passing_clause13105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause13108 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause13110 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_xml_passing_clause13114 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alias_in_xml_passing_clause13116 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XMLATTRIBUTES_VK_in_xml_attributes_clause13141 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_multiuse_expression_element_in_xml_attributes_clause13193 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_XMLNAMESPACES_VK_in_xml_namespaces_clause13225 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_namespaces_clause13240 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_alias_in_xml_namespaces_clause13242 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_namespaces_clause13247 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_COLUMN_in_xml_table_column13279 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_xml_column_name_in_xml_table_column13281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000080000000000L,0x0040000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_ORDINALITY_VK_in_xml_table_column13284 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_type_spec_in_xml_table_column13286 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_xml_table_column13288 = new BitSet(new long[]{0x0000000000000008L,0x0040000000000000L});
	public static final BitSet FOLLOW_xml_general_default_part_in_xml_table_column13291 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_xml_general_default_part13316 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_general_default_part13318 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ELEMENT_in_xml_multiuse_expression_element13340 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_multiuse_expression_element13342 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_xml_alias_in_xml_multiuse_expression_element13344 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias13367 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_xml_alias13369 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_XML_ALIAS_in_xml_alias13382 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_EVALNAME_VK_in_xml_alias13385 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xml_alias13387 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_VERSION_VK_in_xml_param_version_part13410 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_NO_VK_in_xml_param_version_part13413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xml_param_version_part13415 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_expression_in_xml_param_version_part13417 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_STANDALONE_VK_in_xmlroot_param_standalone_part13440 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_YES_VK_in_xmlroot_param_standalone_part13443 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlroot_param_standalone_part13445 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_VALUE_VK_in_xmlroot_param_standalone_part13447 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ENCODING_VK_in_xmlserialize_param_enconding_part13471 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_enconding_part13473 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_NO_VK_in_xmlserialize_param_ident_part13494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13496 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INDENT_VK_in_xmlserialize_param_ident_part13508 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_xmlserialize_param_ident_part13510 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_set_in_partition_extension_clause13537 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_list_in_partition_extension_clause13543 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ALIAS_in_alias13565 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_alias13567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_alias13570 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_WHERE_in_where_clause13592 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_where_clause13594 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SQL92_RESERVED_INTO_in_into_clause13616 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause13618 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000280000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_BULK_VK_in_into_clause13633 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_into_clause13635 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000280000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_XML_COLUMN_NAME_in_xml_column_name13663 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_xml_column_name13665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_xml_column_name13668 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COST_CLASS_NAME_in_cost_class_name13690 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cost_class_name13692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_cost_class_name13695 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ATTRIBUTE_NAME_in_attribute_name13717 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_attribute_name13719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_attribute_name13722 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SAVEPOINT_NAME_in_savepoint_name13744 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_savepoint_name13746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_savepoint_name13749 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROLLBACK_SEGMENT_NAME_in_rollback_segment_name13771 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_rollback_segment_name13773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_rollback_segment_name13776 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TABLE_VAR_NAME_in_table_var_name13799 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_table_var_name13801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_table_var_name13804 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_SCHEMA_NAME_in_schema_name13826 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_schema_name13828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_schema_name13831 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ROUTINE_NAME_in_routine_name13853 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_routine_name13855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_routine_name13858 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000080000L});
	public static final BitSet FOLLOW_link_name_in_routine_name13861 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_PACKAGE_NAME_in_package_name13884 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_package_name13886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_package_name13889 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_IMPLEMENTATION_TYPE_NAME_in_implementation_type_name13912 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_implementation_type_name13914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_implementation_type_name13917 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_PARAMETER_NAME_in_parameter_name13940 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_parameter_name13942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_parameter_name13945 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_REFERENCE_MODEL_NAME_in_reference_model_name13967 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_reference_model_name13969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_reference_model_name13972 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_MAIN_MODEL_NAME_in_main_model_name13994 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_main_model_name13996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_main_model_name13999 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_QUERY_NAME_in_query_name14021 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_query_name14023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_query_name14026 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CONSTRAINT_NAME_in_constraint_name14048 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_constraint_name14050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_constraint_name14053 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000080000L});
	public static final BitSet FOLLOW_link_name_in_constraint_name14056 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_LABEL_NAME_in_label_name14079 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_label_name14081 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_TYPE_NAME_in_type_name14103 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_type_name14105 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_SEQUENCE_NAME_in_sequence_name14128 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_sequence_name14130 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_EXCEPTION_NAME_in_exception_name14153 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_exception_name14155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_exception_name14158 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_FUNCTION_NAME_in_function_name14181 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_function_name14183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_function_name14186 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_PROCEDURE_NAME_in_procedure_name14209 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_procedure_name14211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_procedure_name14214 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_TRIGGER_NAME_in_trigger_name14237 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_trigger_name14239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_trigger_name14242 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_NAME_in_variable_name14265 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name14267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_variable_name14270 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_VARIABLE_NAME_in_variable_name14284 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_variable_name14286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_variable_name14289 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_INDEX_NAME_in_index_name14312 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_index_name14314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_index_name14317 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CURSOR_NAME_in_cursor_name14339 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_cursor_name14341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_cursor_name14344 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_RECORD_NAME_in_record_name14366 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_record_name14368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_record_name14371 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLLECTION_NAME_in_collection_name14393 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_collection_name14395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_collection_name14398 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_LINK_NAME_in_link_name14421 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_link_name14423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_link_name14426 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_COLUMN_NAME_in_column_name14448 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_column_name14450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_column_name14453 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_TABLEVIEW_NAME_in_tableview_name14476 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_tableview_name14478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_tableview_name14481 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000080000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_link_name_in_tableview_name14484 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_partition_extension_clause_in_tableview_name14487 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CHAR_SET_NAME_in_char_set_name14510 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_ID_in_char_set_name14512 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ARGUMENTS_in_function_argument14539 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_argument_in_function_argument14541 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_ARGUMENT_in_argument14564 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_expression_in_argument14566 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_parameter_name_in_argument14568 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_CUSTOM_TYPE_in_type_spec14592 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_type_name_in_type_spec14594 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_REF_VK_in_type_spec14596 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_NATIVE_DATATYPE_in_type_spec14617 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_native_datatype_element_in_type_spec14619 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_type_precision_in_type_spec14621 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIME_VK_in_type_spec14625 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_type_spec14627 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_INTERVAL_DATATYPE_in_type_spec14643 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_type_spec14645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_set_in_type_spec14651 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_expression_in_type_spec14657 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_PRECISION_in_type_precision14680 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_constant_in_type_precision14682 = new BitSet(new long[]{0x0000400010008048L,0x8040000000000000L,0x0000100080004000L,0x0200080000000000L,0x0100000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010100000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_constant_in_type_precision14684 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0200080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_TIME_VK_in_type_precision14695 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_LOCAL_VK_in_type_precision14697 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_BINARY_INTEGER_VK_in_native_datatype_element14721 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PLS_INTEGER_VK_in_native_datatype_element14732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NATURAL_VK_in_native_datatype_element14743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_FLOAT_VK_in_native_datatype_element14754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BINARY_DOUBLE_VK_in_native_datatype_element14765 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NATURALN_VK_in_native_datatype_element14776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POSITIVE_VK_in_native_datatype_element14787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_POSITIVEN_VK_in_native_datatype_element14798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SIGNTYPE_VK_in_native_datatype_element14809 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SIMPLE_INTEGER_VK_in_native_datatype_element14820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NVARCHAR2_VK_in_native_datatype_element14831 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DEC_VK_in_native_datatype_element14842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INTEGER_VK_in_native_datatype_element14853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_INT_VK_in_native_datatype_element14864 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMERIC_VK_in_native_datatype_element14875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SMALLINT_VK_in_native_datatype_element14886 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMBER_VK_in_native_datatype_element14897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DECIMAL_VK_in_native_datatype_element14908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOUBLE_VK_in_native_datatype_element14920 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_PRECISION_VK_in_native_datatype_element14922 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FLOAT_VK_in_native_datatype_element14934 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REAL_VK_in_native_datatype_element14945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NCHAR_VK_in_native_datatype_element14956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LONG_VK_in_native_datatype_element14967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_element14969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_VK_in_native_datatype_element14981 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHARACTER_VK_in_native_datatype_element14994 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARCHAR2_VK_in_native_datatype_element15006 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARCHAR_VK_in_native_datatype_element15017 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_VK_in_native_datatype_element15028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RAW_VK_in_native_datatype_element15039 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BOOLEAN_VK_in_native_datatype_element15050 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DATE_VK_in_native_datatype_element15061 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ROWID_VK_in_native_datatype_element15072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_UROWID_VK_in_native_datatype_element15083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_YEAR_VK_in_native_datatype_element15094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MONTH_VK_in_native_datatype_element15105 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DAY_VK_in_native_datatype_element15116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HOUR_VK_in_native_datatype_element15127 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUTE_VK_in_native_datatype_element15138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SECOND_VK_in_native_datatype_element15149 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_HOUR_VK_in_native_datatype_element15160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_MINUTE_VK_in_native_datatype_element15171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_REGION_VK_in_native_datatype_element15182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMEZONE_ABBR_VK_in_native_datatype_element15193 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_VK_in_native_datatype_element15204 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_UNCONSTRAINED_VK_in_native_datatype_element15215 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_TZ_UNCONSTRAINED_VK_in_native_datatype_element15226 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIMESTAMP_LTZ_UNCONSTRAINED_VK_in_native_datatype_element15237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_YMINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DSINTERVAL_UNCONSTRAINED_VK_in_native_datatype_element15259 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BFILE_VK_in_native_datatype_element15270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_BLOB_VK_in_native_datatype_element15281 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CLOB_VK_in_native_datatype_element15292 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NCLOB_VK_in_native_datatype_element15303 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MLSLABEL_VK_in_native_datatype_element15314 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CASCATED_ELEMENT_in_general_element15335 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_general_element_in_general_element15337 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0004000000000020L,0x0000000000000000L,0x0000000000000000L,0x0000000000280000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_ROUTINE_CALL_in_general_element15351 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_general_element15353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_function_argument_in_general_element15355 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_HOSTED_VARIABLE_in_general_element15368 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_general_element15370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_general_element15373 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ROUTINE_CALL_in_general_element15387 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_routine_name_in_general_element15389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_function_argument_in_general_element15391 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_ANY_ELEMENT_in_general_element15404 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_char_set_name_in_general_element15406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_general_element15409 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant15435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINUS_SIGN_in_constant15447 = new BitSet(new long[]{0x0000000000000004L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_constant15449 = new BitSet(new long[]{0x0000000000000008L});
	public static final BitSet FOLLOW_EXACT_NUM_LIT_in_constant15461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_APPROXIMATE_NUM_LIT_in_constant15472 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHAR_STRING_in_constant15483 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_NULL_in_constant15494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_TRUE_in_constant15505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_FALSE_in_constant15516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DBTIMEZONE_VK_in_constant15527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SESSIONTIMEZONE_VK_in_constant15539 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MINVALUE_VK_in_constant15550 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MAXVALUE_VK_in_constant15561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SQL92_RESERVED_DEFAULT_in_constant15572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_char_set_name_in_id15594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
	public static final BitSet FOLLOW_ID_in_id15597 = new BitSet(new long[]{0x0000000000000002L});
}
