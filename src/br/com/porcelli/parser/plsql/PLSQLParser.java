// $ANTLR 3.5.2 F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g 2018-10-06 11:19:15

/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package br.com.porcelli.parser.plsql;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/**
 * Oracle(c) PL/SQL 11g Parser  
 *
 * Copyright (c) 2009-2011 Alexandre Porcelli <alexandre.porcelli@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@SuppressWarnings("all")
public class PLSQLParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "AMPERSAND", "APPROXIMATE_NUM_LIT", 
		"ASSIGN_OP", "ASTERISK", "AT_SIGN", "B", "BINDVAR", "BIT_STRING_LIT", 
		"C", "CARRET_OPERATOR_PART", "CHAR_STRING", "CHAR_STRING_PERL", "COLON", 
		"COMMA", "COMMENT", "COMMENT_FRAGMENT", "CONCATENATION_OP", "D", "DELIMITED_ID", 
		"DOUBLE_ASTERISK", "DOUBLE_PERIOD", "E", "EQUALS_OP", "EXACT_NUM_LIT", 
		"EXCLAMATION_OPERATOR_PART", "F", "G", "GREATER_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", 
		"H", "HEX_STRING_LIT", "I", "INTRODUCER", "J", "K", "L", "LEFT_BRACKET", 
		"LEFT_PAREN", "LESS_THAN_OP", "LESS_THAN_OR_EQUALS_OP", "M", "MINUS_SIGN", 
		"N", "NATIONAL_CHAR_STRING_LIT", "NEWLINE", "NOT_EQUAL_OP", "O", "P", 
		"PERCENT", "PERIOD", "PLSQL_NON_RESERVED_CONNECT_BY_ROOT", "PLSQL_NON_RESERVED_ELSIF", 
		"PLSQL_NON_RESERVED_MODEL", "PLSQL_NON_RESERVED_PIVOT", "PLSQL_NON_RESERVED_UNPIVOT", 
		"PLSQL_NON_RESERVED_USING", "PLSQL_RESERVED_CLUSTERS", "PLSQL_RESERVED_COLAUTH", 
		"PLSQL_RESERVED_COMPRESS", "PLSQL_RESERVED_CRASH", "PLSQL_RESERVED_EXCLUSIVE", 
		"PLSQL_RESERVED_IDENTIFIED", "PLSQL_RESERVED_IF", "PLSQL_RESERVED_INDEX", 
		"PLSQL_RESERVED_INDEXES", "PLSQL_RESERVED_LOCK", "PLSQL_RESERVED_MINUS", 
		"PLSQL_RESERVED_MODE", "PLSQL_RESERVED_NOCOMPRESS", "PLSQL_RESERVED_NOWAIT", 
		"PLSQL_RESERVED_RESOURCE", "PLSQL_RESERVED_SHARE", "PLSQL_RESERVED_START", 
		"PLSQL_RESERVED_TABAUTH", "PLSQL_RESERVED_VIEWS", "PLUS_SIGN", "PROMPT", 
		"Q", "QS_ANGLE", "QS_BRACE", "QS_BRACK", "QS_OTHER", "QS_OTHER_CH", "QS_PAREN", 
		"QUESTION_MARK", "QUOTE", "R", "REGULAR_ID", "RIGHT_BRACKET", "RIGHT_PAREN", 
		"S", "SEMICOLON", "SEPARATOR", "SIMPLE_LETTER", "SOLIDUS", "SPACE", "SQL92_RESERVED_ALL", 
		"SQL92_RESERVED_ALTER", "SQL92_RESERVED_AND", "SQL92_RESERVED_ANY", "SQL92_RESERVED_AS", 
		"SQL92_RESERVED_ASC", "SQL92_RESERVED_BEGIN", "SQL92_RESERVED_BETWEEN", 
		"SQL92_RESERVED_BY", "SQL92_RESERVED_CASE", "SQL92_RESERVED_CHECK", "SQL92_RESERVED_CONNECT", 
		"SQL92_RESERVED_CREATE", "SQL92_RESERVED_CURRENT", "SQL92_RESERVED_CURSOR", 
		"SQL92_RESERVED_DATE", "SQL92_RESERVED_DECLARE", "SQL92_RESERVED_DEFAULT", 
		"SQL92_RESERVED_DELETE", "SQL92_RESERVED_DESC", "SQL92_RESERVED_DISTINCT", 
		"SQL92_RESERVED_DROP", "SQL92_RESERVED_ELSE", "SQL92_RESERVED_END", "SQL92_RESERVED_EXCEPTION", 
		"SQL92_RESERVED_EXISTS", "SQL92_RESERVED_FALSE", "SQL92_RESERVED_FETCH", 
		"SQL92_RESERVED_FOR", "SQL92_RESERVED_FROM", "SQL92_RESERVED_GOTO", "SQL92_RESERVED_GRANT", 
		"SQL92_RESERVED_GROUP", "SQL92_RESERVED_HAVING", "SQL92_RESERVED_IN", 
		"SQL92_RESERVED_INSERT", "SQL92_RESERVED_INTERSECT", "SQL92_RESERVED_INTO", 
		"SQL92_RESERVED_IS", "SQL92_RESERVED_LIKE", "SQL92_RESERVED_NOT", "SQL92_RESERVED_NULL", 
		"SQL92_RESERVED_OF", "SQL92_RESERVED_ON", "SQL92_RESERVED_OPTION", "SQL92_RESERVED_OR", 
		"SQL92_RESERVED_ORDER", "SQL92_RESERVED_OVERLAPS", "SQL92_RESERVED_PRIOR", 
		"SQL92_RESERVED_PROCEDURE", "SQL92_RESERVED_PUBLIC", "SQL92_RESERVED_REVOKE", 
		"SQL92_RESERVED_SELECT", "SQL92_RESERVED_SIZE", "SQL92_RESERVED_TABLE", 
		"SQL92_RESERVED_THE", "SQL92_RESERVED_THEN", "SQL92_RESERVED_TO", "SQL92_RESERVED_TRUE", 
		"SQL92_RESERVED_UNION", "SQL92_RESERVED_UNIQUE", "SQL92_RESERVED_UPDATE", 
		"SQL92_RESERVED_VALUES", "SQL92_RESERVED_VIEW", "SQL92_RESERVED_WHEN", 
		"SQL92_RESERVED_WHERE", "SQL92_RESERVED_WITH", "T", "TILDE_OPERATOR_PART", 
		"U", "UNDERSCORE", "UNSIGNED_INTEGER", "V", "VERTICAL_BAR", "W", "X", 
		"Y", "Z", "ZV", "ADD_VK", "AFTER_EACH_ROW", "AFTER_STATEMENT", "AFTER_VK", 
		"AGENT_VK", "AGGREGATE_VK", "ALTER_ATTRIBUTE", "ALTER_COLLECTION", "ALTER_FUNCTION", 
		"ALTER_METHOD", "ALTER_METHOD_ELEMENT", "ALTER_PACKAGE", "ALTER_PROCEDURE", 
		"ALTER_SEQUENCE", "ALTER_TRIGGER", "ALTER_TYPE", "ANALYZE_VK", "ANY_ELEMENT", 
		"ANY_MODE", "ARGUMENT", "ARGUMENTS", "ASSIGN", "ASSOCIATE_VK", "ATTRIBUTE", 
		"ATTRIBUTES", "ATTRIBUTE_NAME", "AT_VK", "AUDIT_VK", "AUTHID_VK", "AUTOMATIC_VK", 
		"AUTONOMOUS_TRANSACTION_VK", "AUTO_VK", "BATCH_VK", "BEFORE_EACH_ROW", 
		"BEFORE_STATEMENT", "BEFORE_VK", "BFILE_VK", "BINARY_DOUBLE_VK", "BINARY_FLOAT_VK", 
		"BINARY_INTEGER_VK", "BIT_VK", "BLOB_VK", "BLOCK", "BLOCK_VK", "BODY", 
		"BODY_MODE", "BODY_VK", "BOOLEAN_VK", "BOTH_VK", "BREADTH_VK", "BULK_VK", 
		"BYTE_VK", "CACHE_VK", "CALL_MODE", "CALL_VK", "CANONICAL_VK", "CASCADE_VK", 
		"CASCATED_ELEMENT", "CAST_VK", "CHARACTER_VK", "CHAR_CS_VK", "CHAR_SET_NAME", 
		"CHAR_VK", "CHR_VK", "CLOB_VK", "CLOSE_VK", "CLUSTER_VK", "COLLECTION_MODE", 
		"COLLECTION_NAME", "COLLECT_VK", "COLUMNS", "COLUMN_ALIAS", "COLUMN_NAME", 
		"COMMENT_VK", "COMMITTED_VK", "COMMIT_VK", "COMPATIBILITY_VK", "COMPILATION_UNIT", 
		"COMPILER_PARAMETER", "COMPILE_VK", "COMPOUND_DML", "COMPOUND_VK", "CONDITIONAL_INSERT", 
		"CONSTANT_NEGATED", "CONSTANT_VK", "CONSTRAINT_NAME", "CONSTRAINT_STATE", 
		"CONSTRAINT_VK", "CONSTRUCTOR_SPEC", "CONSTRUCTOR_VK", "CONTENT_VK", "CONTEXT_VK", 
		"CONTINUE_VK", "CONVERT_VK", "CORRUPT_XID_ALL_VK", "CORRUPT_XID_VK", "COST_CLASS_NAME", 
		"COST_VK", "COUNT_VK", "CREATE_FUNCTION", "CREATE_PACKAGE_BODY", "CREATE_PACKAGE_SPEC", 
		"CREATE_PROCEDURE", "CREATE_SEQUENCE", "CREATE_TRIGGER", "CREATE_TYPE_BODY", 
		"CREATE_TYPE_SPEC", "CREATE_VIEW", "CROSS_VK", "CUBE_VK", "CURRENT_USER_VK", 
		"CURRENT_VK", "CURSOR_BASED_FOR", "CURSOR_DECLARE", "CURSOR_NAME", "CUSTOMDATUM_VK", 
		"CUSTOM_TYPE", "CYCLE_VK", "C_VK", "DATABASE_VK", "DATETIME_OP", "DAY_VK", 
		"DBTIMEZONE_VK", "DB_ROLE_CHANGE_VK", "DDL_VK", "DEBUG_VK", "DECIMAL_VK", 
		"DECOMPOSE_VK", "DECREMENT_VK", "DEC_VK", "DEFAULTS_VK", "DEFAULT_VALUE", 
		"DEFERRABLE_VK", "DEFERRED_VK", "DEFINER_VK", "DENSE_RANK_VK", "DEPENDENT_HANDLING", 
		"DEPTH_VK", "DETERMINISTIC_VK", "DIMENSION_VK", "DIRECT_MODE", "DISABLE_VK", 
		"DISASSOCIATE_VK", "DIV_VK", "DML_EVENT", "DML_EVENT_ELEMENT", "DOCUMENT_VK", 
		"DOT_ASTERISK", "DOUBLE_VK", "DROP_FUNCTION", "DROP_PACKAGE", "DROP_PROCEDURE", 
		"DROP_SEQUENCE", "DROP_TRIGGER", "DROP_TYPE", "DSINTERVAL_UNCONSTRAINED_VK", 
		"DYNAMIC_RETURN", "ELEMENT", "ELEMENTS_MODE", "ELEMENT_SPEC", "ENABLE_VK", 
		"ENCODING_VK", "ENTITYESCAPING_VK", "EVALNAME_VK", "EXCEPTIONS_VK", "EXCEPTION_DECLARE", 
		"EXCEPTION_INIT_VK", "EXCEPTION_NAME", "EXCLUDE_VK", "EXECUTE_VK", "EXIT_VK", 
		"EXPLAIN_STATEMENT", "EXPR", "EXPR_LIST", "EXTERNAL_MODE", "EXTERNAL_VK", 
		"EXTRACT_VK", "FACTORING", "FAILURE_VK", "FIELDS", "FIELD_SPEC", "FINAL_VK", 
		"FIRST_VALUE_VK", "FIRST_VK", "FLOAT_VK", "FOLLOWING_VK", "FOLLOWS_VK", 
		"FORALL_VK", "FORCE_VK", "FOREIGN_KEY", "FOREIGN_VK", "FOR_EACH_ROW", 
		"FOR_LOOP", "FOR_MULTI_COLUMN", "FOR_SINGLE_COLUMN", "FULL_VK", "FUNCTION_ENABLING_OVER", 
		"FUNCTION_ENABLING_USING", "FUNCTION_ENABLING_WITHIN_OR_OVER", "FUNCTION_NAME", 
		"FUNCTION_SPEC", "GROUPING_VK", "GROUPIN_SET", "GROUP_BY_ELEMENT", "HASH_VK", 
		"HIDE_VK", "HIERARCHICAL", "HOSTED_VARIABLE", "HOSTED_VARIABLE_NAME", 
		"HOSTED_VARIABLE_ROUTINE_CALL", "HOUR_VK", "ID", "IGNORE_VK", "IMMEDIATE_VK", 
		"IMPLEMENTATION_TYPE_NAME", "INCLUDE_VK", "INCLUDING_VK", "INCREMENT_VK", 
		"INDENT_VK", "INDEXED_BY", "INDEXED_FOR", "INDEX_NAME", "INDICES_BOUND", 
		"INITIALLY_VK", "INLINE_CONSTRAINT_CLAUSE", "INLINE_VK", "INNER_VK", "INOUT_VK", 
		"INSTANTIABLE_VK", "INSTEAD_VK", "INTEGER_VK", "INTERVAL_DATATYPE", "INT_VK", 
		"INVALIDATE_VK", "ISOLATION_VK", "IS_A_SET", "IS_EMPTY", "IS_INFINITE", 
		"IS_NAN", "IS_NOT_A_SET", "IS_NOT_EMPTY", "IS_NOT_INFINITE", "IS_NOT_NAN", 
		"IS_NOT_NULL", "IS_NOT_OF_TYPE", "IS_NOT_PRESENT", "IS_NULL", "IS_OF_TYPE", 
		"IS_PRESENT", "ITERATE_VK", "JAVA_VK", "JOIN_DEF", "KEEP_VK", "KEY_VK", 
		"LABEL_DECLARE", "LABEL_NAME", "LANGUAGE_VK", "LAST_VALUE_VK", "LAST_VK", 
		"LEADING_VK", "LEFT_VK", "LIBRARY_VK", "LIKE2_VK", "LIKE4_VK", "LIKEC_VK", 
		"LIMIT_VK", "LINK_NAME", "LOCAL_VK", "LOCK_TABLE_ELEMENT", "LOGIC_EXPR", 
		"LOGOFF_VK", "LOGON_VK", "LOG_VK", "LONG_RAW", "LONG_VK", "LOOP_VK", "MAIN_MODEL", 
		"MAIN_MODEL_NAME", "MAP_VK", "MAXVALUE_VK", "MEASURES_VK", "MEMBER_VK", 
		"MERGE_INSERT", "MERGE_UPDATE", "MERGE_VK", "MINUTE_VK", "MINVALUE_VK", 
		"MLSLABEL_VK", "MODEL_COLUMN", "MODEL_COLUMNS", "MODEL_EXPRESSION", "MODEL_RULE", 
		"MODEL_RULES", "MODIFIER", "MODIFY_VK", "MOD_VK", "MONTH_VK", "MULTI_TABLE_MODE", 
		"NAME_VK", "NATIVE_DATATYPE", "NATURALN_VK", "NATURAL_VK", "NAV_VK", "NCHAR_CS_VK", 
		"NCHAR_VK", "NCLOB_VK", "NESTED_TABLE_TYPE_DEF", "NESTED_VK", "NEW_VK", 
		"NOAUDIT_VK", "NOCACHE_VK", "NOCOPY_VK", "NOCYCLE_VK", "NOENTITYESCAPING_VK", 
		"NOFORCE", "NOMAXVALUE_VK", "NOMINVALUE_VK", "NONE_VK", "NON_DML", "NOORDER_VK", 
		"NORELY_VK", "NOSCHEMACHECK_VK", "NOT_BETWEEN", "NOT_DEFERRABLE", "NOT_IN", 
		"NOT_LIKE", "NOT_NULL", "NOVALIDATE_VK", "NO_VK", "NULLS_VK", "NUMBER_VK", 
		"NUMERIC_VK", "NVARCHAR2_VK", "OBJECT_AS", "OBJECT_MEMBERS", "OBJECT_TYPE_DEF", 
		"OBJECT_VK", "OFF_VK", "OLD_VK", "ONLY_VK", "ON_DELETE", "OPEN_FOR", "OPEN_VK", 
		"ORADATA_VK", "ORDER_BY_ELEMENT", "ORDER_BY_ELEMENTS", "ORDINALITY_VK", 
		"OSERROR_VK", "OUTER_JOIN_SIGN", "OUT_OF_LINE_CONSTRAINT", "OUT_VK", "OVERRIDING_VK", 
		"OVER_VK", "PACKAGE_NAME", "PACKAGE_VK", "PARALLEL_ENABLE_VK", "PARAMETER", 
		"PARAMETERS", "PARAMETERS_VK", "PARAMETER_NAME", "PARENT_VK", "PARTITION_VK", 
		"PASSING_VK", "PERCENT_FOUND_VK", "PERCENT_ISOPEN_VK", "PERCENT_NOTFOUND_VK", 
		"PERCENT_ROWCOUNT_VK", "PERCENT_ROWTYPE_VK", "PERCENT_TYPE_VK", "PIPELINED_VK", 
		"PIPE_ROW", "PIPE_VK", "PIVOT_ALIAS", "PIVOT_ELEMENT", "PIVOT_IN_ELEMENT", 
		"PIVOT_VK", "PLS_INTEGER_VK", "POSITIVEN_VK", "POSITIVE_VK", "PRAGMA_DECLARE", 
		"PRAGMA_VK", "PRECEDING_VK", "PRECISION", "PRECISION_VK", "PREDICTION_FUNCTION", 
		"PRIMARY_KEY", "PRIMARY_VK", "PROCEDURE_NAME", "PROCEDURE_SPEC", "QUERY_NAME", 
		"QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS", "RAISE_VK", "RANGE_VK", "RAW_VK", 
		"READ_VK", "REAL_VK", "RECORD_NAME", "RECORD_TYPE_DECLARE_FIELDS", "RECORD_TYPE_DECLARE_REFCURSOR", 
		"RECORD_VAR_DECLARE", "RECURSIVE_VK", "REFERENCES_CLAUSE", "REFERENCES_VK", 
		"REFERENCE_MODEL_NAME", "REFERENCE_VK", "REFERENCING_VK", "REF_VK", "REJECT_VK", 
		"RELIES_ON_VK", "RELY_VK", "RENAME_VK", "REPLACE_VK", "RESPECT_VK", "RESTRICT_REFERENCES_VK", 
		"RESULT_CACHE_VK", "RETURN_VK", "REUSE_VK", "REVERSE_VK", "RIGHT_VK", 
		"ROLLBACK_SEGMENT_NAME", "ROLLBACK_VK", "ROLLUP_VK", "ROUTINE_CALL", "ROUTINE_NAME", 
		"ROWID_VK", "ROWS_VK", "ROW_VK", "RULES_VK", "SAMPLE_VK", "SAVEPOINT_NAME", 
		"SAVEPOINT_VK", "SCHEMACHECK_VK", "SCHEMA_NAME", "SCHEMA_VK", "SCN_VK", 
		"SEARCHED_CASE", "SEARCH_VK", "SECOND_VK", "SEED_VK", "SELECTED_TABLEVIEW", 
		"SELECT_BASED_FOR", "SELECT_ITEM", "SELECT_LIST", "SELECT_MODE", "SELECT_STATEMENT", 
		"SELF_VK", "SEQUENCE_NAME", "SEQUENCE_VK", "SEQUENTIAL_VK", "SERIALIZABLE_VK", 
		"SERIALLY_REUSABLE_VK", "SERVERERROR_VK", "SESSIONTIMEZONE_VK", "SET_CONSTRAINT", 
		"SET_NULL", "SET_SERVEROUTPUT", "SET_TRANSACTION", "SET_VK", "SHOW_VK", 
		"SHUTDOWN_VK", "SIBLINGS_VK", "SIGNTYPE_VK", "SIMPLE_BOUND", "SIMPLE_CASE", 
		"SIMPLE_DML", "SIMPLE_INTEGER_VK", "SINGLE_TABLE_MODE", "SINGLE_VK", "SKIP_VK", 
		"SMALLINT_VK", "SOME_VK", "SPECIFICATION_VK", "SQLDATA_VK", "SQLERROR_VK", 
		"SQL_SCRIPT", "STANDALONE_VK", "STANDARD_FUNCTION", "STARTUP_VK", "STATEMENTS", 
		"STATIC_RETURNING", "STATIC_VK", "STATISTICS_VK", "STREAMING_CLAUSE", 
		"STRING_VK", "SUBMULTISET_VK", "SUBPARTITION_VK", "SUBQUERY", "SUBTYPE_DECLARE", 
		"SUCCESS_VK", "SUSPEND_VK", "TABLEVIEW_NAME", "TABLE_ALIAS", "TABLE_ELEMENT", 
		"TABLE_EXPRESSION", "TABLE_REF", "TABLE_REF_ELEMENT", "TABLE_TYPE_DECLARE", 
		"TABLE_VAR_DECLARE", "TABLE_VAR_NAME", "THREE_DOTS", "TIMESTAMP_LTZ_UNCONSTRAINED_VK", 
		"TIMESTAMP_TZ_UNCONSTRAINED_VK", "TIMESTAMP_UNCONSTRAINED_VK", "TIMESTAMP_VK", 
		"TIMEZONE_ABBR_VK", "TIMEZONE_HOUR_VK", "TIMEZONE_MINUTE_VK", "TIMEZONE_REGION_VK", 
		"TIME_VK", "TRAILING_VK", "TRANSLATE_VK", "TREAT_VK", "TRIGGER_NAME", 
		"TRIM_VK", "TRUNCATE_VK", "TYPE_BODY_ELEMENTS", "TYPE_NAME", "TYPE_VK", 
		"UNARY_MINUS", "UNARY_PLUS", "UNBOUNDED_VK", "UNDER_VK", "UNLIMITED_VK", 
		"UNPIVOT_IN_ELEMENT", "UNPIVOT_VK", "UNTIL_VK", "UPDATED_VK", "UPSERT_VK", 
		"UROWID_VK", "USING_INDEX", "USING_MODE", "VALIDATE_VK", "VALUES_BOUND", 
		"VALUE_VK", "VARCHAR2_VK", "VARCHAR_VK", "VARIABLE_DECLARE", "VARIABLE_NAME", 
		"VARR_ARRAY_DEF", "VECTOR_EXPR", "VERSIONS_VK", "VERSION_VK", "VIEW_NAME", 
		"VIEW_TYPE_CONSTRAINTS", "VIEW_TYPE_CONSTRAINT_ITEM_INLINE", "WAIT_VK", 
		"WARNING_VK", "WELLFORMED_VK", "WHENEVER_VK", "WHILE_LOOP", "WITHIN_VK", 
		"WORK_VK", "WRITE_VK", "XMLAGG_VK", "XMLATTRIBUTES_VK", "XMLCAST_VK", 
		"XMLCOLATTVAL_VK", "XMLELEMENT_VK", "XMLEXISTS_VK", "XMLFOREST_VK", "XMLNAMESPACES_VK", 
		"XMLPARSE_VK", "XMLPI_VK", "XMLQUERY_VK", "XMLROOT_VK", "XMLSERIALIZE_VK", 
		"XMLTABLE_VK", "XML_ALIAS", "XML_COLUMN", "XML_COLUMN_NAME", "XML_ELEMENT", 
		"XML_VK", "YEAR_VK", "YES_VK", "YMINTERVAL_UNCONSTRAINED_VK"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int AMPERSAND=5;
	public static final int APPROXIMATE_NUM_LIT=6;
	public static final int ASSIGN_OP=7;
	public static final int ASTERISK=8;
	public static final int AT_SIGN=9;
	public static final int B=10;
	public static final int BINDVAR=11;
	public static final int BIT_STRING_LIT=12;
	public static final int C=13;
	public static final int CARRET_OPERATOR_PART=14;
	public static final int CHAR_STRING=15;
	public static final int CHAR_STRING_PERL=16;
	public static final int COLON=17;
	public static final int COMMA=18;
	public static final int COMMENT=19;
	public static final int COMMENT_FRAGMENT=20;
	public static final int CONCATENATION_OP=21;
	public static final int D=22;
	public static final int DELIMITED_ID=23;
	public static final int DOUBLE_ASTERISK=24;
	public static final int DOUBLE_PERIOD=25;
	public static final int E=26;
	public static final int EQUALS_OP=27;
	public static final int EXACT_NUM_LIT=28;
	public static final int EXCLAMATION_OPERATOR_PART=29;
	public static final int F=30;
	public static final int G=31;
	public static final int GREATER_THAN_OP=32;
	public static final int GREATER_THAN_OR_EQUALS_OP=33;
	public static final int H=34;
	public static final int HEX_STRING_LIT=35;
	public static final int I=36;
	public static final int INTRODUCER=37;
	public static final int J=38;
	public static final int K=39;
	public static final int L=40;
	public static final int LEFT_BRACKET=41;
	public static final int LEFT_PAREN=42;
	public static final int LESS_THAN_OP=43;
	public static final int LESS_THAN_OR_EQUALS_OP=44;
	public static final int M=45;
	public static final int MINUS_SIGN=46;
	public static final int N=47;
	public static final int NATIONAL_CHAR_STRING_LIT=48;
	public static final int NEWLINE=49;
	public static final int NOT_EQUAL_OP=50;
	public static final int O=51;
	public static final int P=52;
	public static final int PERCENT=53;
	public static final int PERIOD=54;
	public static final int PLSQL_NON_RESERVED_CONNECT_BY_ROOT=55;
	public static final int PLSQL_NON_RESERVED_ELSIF=56;
	public static final int PLSQL_NON_RESERVED_MODEL=57;
	public static final int PLSQL_NON_RESERVED_PIVOT=58;
	public static final int PLSQL_NON_RESERVED_UNPIVOT=59;
	public static final int PLSQL_NON_RESERVED_USING=60;
	public static final int PLSQL_RESERVED_CLUSTERS=61;
	public static final int PLSQL_RESERVED_COLAUTH=62;
	public static final int PLSQL_RESERVED_COMPRESS=63;
	public static final int PLSQL_RESERVED_CRASH=64;
	public static final int PLSQL_RESERVED_EXCLUSIVE=65;
	public static final int PLSQL_RESERVED_IDENTIFIED=66;
	public static final int PLSQL_RESERVED_IF=67;
	public static final int PLSQL_RESERVED_INDEX=68;
	public static final int PLSQL_RESERVED_INDEXES=69;
	public static final int PLSQL_RESERVED_LOCK=70;
	public static final int PLSQL_RESERVED_MINUS=71;
	public static final int PLSQL_RESERVED_MODE=72;
	public static final int PLSQL_RESERVED_NOCOMPRESS=73;
	public static final int PLSQL_RESERVED_NOWAIT=74;
	public static final int PLSQL_RESERVED_RESOURCE=75;
	public static final int PLSQL_RESERVED_SHARE=76;
	public static final int PLSQL_RESERVED_START=77;
	public static final int PLSQL_RESERVED_TABAUTH=78;
	public static final int PLSQL_RESERVED_VIEWS=79;
	public static final int PLUS_SIGN=80;
	public static final int PROMPT=81;
	public static final int Q=82;
	public static final int QS_ANGLE=83;
	public static final int QS_BRACE=84;
	public static final int QS_BRACK=85;
	public static final int QS_OTHER=86;
	public static final int QS_OTHER_CH=87;
	public static final int QS_PAREN=88;
	public static final int QUESTION_MARK=89;
	public static final int QUOTE=90;
	public static final int R=91;
	public static final int REGULAR_ID=92;
	public static final int RIGHT_BRACKET=93;
	public static final int RIGHT_PAREN=94;
	public static final int S=95;
	public static final int SEMICOLON=96;
	public static final int SEPARATOR=97;
	public static final int SIMPLE_LETTER=98;
	public static final int SOLIDUS=99;
	public static final int SPACE=100;
	public static final int SQL92_RESERVED_ALL=101;
	public static final int SQL92_RESERVED_ALTER=102;
	public static final int SQL92_RESERVED_AND=103;
	public static final int SQL92_RESERVED_ANY=104;
	public static final int SQL92_RESERVED_AS=105;
	public static final int SQL92_RESERVED_ASC=106;
	public static final int SQL92_RESERVED_BEGIN=107;
	public static final int SQL92_RESERVED_BETWEEN=108;
	public static final int SQL92_RESERVED_BY=109;
	public static final int SQL92_RESERVED_CASE=110;
	public static final int SQL92_RESERVED_CHECK=111;
	public static final int SQL92_RESERVED_CONNECT=112;
	public static final int SQL92_RESERVED_CREATE=113;
	public static final int SQL92_RESERVED_CURRENT=114;
	public static final int SQL92_RESERVED_CURSOR=115;
	public static final int SQL92_RESERVED_DATE=116;
	public static final int SQL92_RESERVED_DECLARE=117;
	public static final int SQL92_RESERVED_DEFAULT=118;
	public static final int SQL92_RESERVED_DELETE=119;
	public static final int SQL92_RESERVED_DESC=120;
	public static final int SQL92_RESERVED_DISTINCT=121;
	public static final int SQL92_RESERVED_DROP=122;
	public static final int SQL92_RESERVED_ELSE=123;
	public static final int SQL92_RESERVED_END=124;
	public static final int SQL92_RESERVED_EXCEPTION=125;
	public static final int SQL92_RESERVED_EXISTS=126;
	public static final int SQL92_RESERVED_FALSE=127;
	public static final int SQL92_RESERVED_FETCH=128;
	public static final int SQL92_RESERVED_FOR=129;
	public static final int SQL92_RESERVED_FROM=130;
	public static final int SQL92_RESERVED_GOTO=131;
	public static final int SQL92_RESERVED_GRANT=132;
	public static final int SQL92_RESERVED_GROUP=133;
	public static final int SQL92_RESERVED_HAVING=134;
	public static final int SQL92_RESERVED_IN=135;
	public static final int SQL92_RESERVED_INSERT=136;
	public static final int SQL92_RESERVED_INTERSECT=137;
	public static final int SQL92_RESERVED_INTO=138;
	public static final int SQL92_RESERVED_IS=139;
	public static final int SQL92_RESERVED_LIKE=140;
	public static final int SQL92_RESERVED_NOT=141;
	public static final int SQL92_RESERVED_NULL=142;
	public static final int SQL92_RESERVED_OF=143;
	public static final int SQL92_RESERVED_ON=144;
	public static final int SQL92_RESERVED_OPTION=145;
	public static final int SQL92_RESERVED_OR=146;
	public static final int SQL92_RESERVED_ORDER=147;
	public static final int SQL92_RESERVED_OVERLAPS=148;
	public static final int SQL92_RESERVED_PRIOR=149;
	public static final int SQL92_RESERVED_PROCEDURE=150;
	public static final int SQL92_RESERVED_PUBLIC=151;
	public static final int SQL92_RESERVED_REVOKE=152;
	public static final int SQL92_RESERVED_SELECT=153;
	public static final int SQL92_RESERVED_SIZE=154;
	public static final int SQL92_RESERVED_TABLE=155;
	public static final int SQL92_RESERVED_THE=156;
	public static final int SQL92_RESERVED_THEN=157;
	public static final int SQL92_RESERVED_TO=158;
	public static final int SQL92_RESERVED_TRUE=159;
	public static final int SQL92_RESERVED_UNION=160;
	public static final int SQL92_RESERVED_UNIQUE=161;
	public static final int SQL92_RESERVED_UPDATE=162;
	public static final int SQL92_RESERVED_VALUES=163;
	public static final int SQL92_RESERVED_VIEW=164;
	public static final int SQL92_RESERVED_WHEN=165;
	public static final int SQL92_RESERVED_WHERE=166;
	public static final int SQL92_RESERVED_WITH=167;
	public static final int T=168;
	public static final int TILDE_OPERATOR_PART=169;
	public static final int U=170;
	public static final int UNDERSCORE=171;
	public static final int UNSIGNED_INTEGER=172;
	public static final int V=173;
	public static final int VERTICAL_BAR=174;
	public static final int W=175;
	public static final int X=176;
	public static final int Y=177;
	public static final int Z=178;
	public static final int ZV=179;
	public static final int ADD_VK=180;
	public static final int AFTER_EACH_ROW=181;
	public static final int AFTER_STATEMENT=182;
	public static final int AFTER_VK=183;
	public static final int AGENT_VK=184;
	public static final int AGGREGATE_VK=185;
	public static final int ALTER_ATTRIBUTE=186;
	public static final int ALTER_COLLECTION=187;
	public static final int ALTER_FUNCTION=188;
	public static final int ALTER_METHOD=189;
	public static final int ALTER_METHOD_ELEMENT=190;
	public static final int ALTER_PACKAGE=191;
	public static final int ALTER_PROCEDURE=192;
	public static final int ALTER_SEQUENCE=193;
	public static final int ALTER_TRIGGER=194;
	public static final int ALTER_TYPE=195;
	public static final int ANALYZE_VK=196;
	public static final int ANY_ELEMENT=197;
	public static final int ANY_MODE=198;
	public static final int ARGUMENT=200;
	public static final int ARGUMENTS=201;
	public static final int ASSIGN=202;
	public static final int ASSOCIATE_VK=203;
	public static final int ATTRIBUTE=205;
	public static final int ATTRIBUTES=206;
	public static final int ATTRIBUTE_NAME=207;
	public static final int AT_VK=209;
	public static final int AUDIT_VK=210;
	public static final int AUTHID_VK=211;
	public static final int AUTOMATIC_VK=212;
	public static final int AUTONOMOUS_TRANSACTION_VK=213;
	public static final int AUTO_VK=214;
	public static final int BATCH_VK=215;
	public static final int BEFORE_EACH_ROW=216;
	public static final int BEFORE_STATEMENT=217;
	public static final int BEFORE_VK=218;
	public static final int BFILE_VK=219;
	public static final int BINARY_DOUBLE_VK=220;
	public static final int BINARY_FLOAT_VK=221;
	public static final int BINARY_INTEGER_VK=222;
	public static final int BIT_VK=224;
	public static final int BLOB_VK=225;
	public static final int BLOCK=226;
	public static final int BLOCK_VK=227;
	public static final int BODY=228;
	public static final int BODY_MODE=229;
	public static final int BODY_VK=230;
	public static final int BOOLEAN_VK=231;
	public static final int BOTH_VK=232;
	public static final int BREADTH_VK=233;
	public static final int BULK_VK=234;
	public static final int BYTE_VK=235;
	public static final int CACHE_VK=236;
	public static final int CALL_MODE=237;
	public static final int CALL_VK=238;
	public static final int CANONICAL_VK=239;
	public static final int CASCADE_VK=241;
	public static final int CASCATED_ELEMENT=242;
	public static final int CAST_VK=243;
	public static final int CHARACTER_VK=244;
	public static final int CHAR_CS_VK=245;
	public static final int CHAR_SET_NAME=246;
	public static final int CHAR_VK=249;
	public static final int CHR_VK=250;
	public static final int CLOB_VK=251;
	public static final int CLOSE_VK=252;
	public static final int CLUSTER_VK=253;
	public static final int COLLECTION_MODE=254;
	public static final int COLLECTION_NAME=255;
	public static final int COLLECT_VK=256;
	public static final int COLUMNS=258;
	public static final int COLUMN_ALIAS=259;
	public static final int COLUMN_NAME=260;
	public static final int COMMENT_VK=262;
	public static final int COMMITTED_VK=263;
	public static final int COMMIT_VK=264;
	public static final int COMPATIBILITY_VK=265;
	public static final int COMPILATION_UNIT=266;
	public static final int COMPILER_PARAMETER=267;
	public static final int COMPILE_VK=268;
	public static final int COMPOUND_DML=269;
	public static final int COMPOUND_VK=270;
	public static final int CONDITIONAL_INSERT=272;
	public static final int CONSTANT_NEGATED=273;
	public static final int CONSTANT_VK=274;
	public static final int CONSTRAINT_NAME=275;
	public static final int CONSTRAINT_STATE=276;
	public static final int CONSTRAINT_VK=277;
	public static final int CONSTRUCTOR_SPEC=278;
	public static final int CONSTRUCTOR_VK=279;
	public static final int CONTENT_VK=280;
	public static final int CONTEXT_VK=281;
	public static final int CONTINUE_VK=282;
	public static final int CONVERT_VK=283;
	public static final int CORRUPT_XID_ALL_VK=284;
	public static final int CORRUPT_XID_VK=285;
	public static final int COST_CLASS_NAME=286;
	public static final int COST_VK=287;
	public static final int COUNT_VK=288;
	public static final int CREATE_FUNCTION=289;
	public static final int CREATE_PACKAGE_BODY=290;
	public static final int CREATE_PACKAGE_SPEC=291;
	public static final int CREATE_PROCEDURE=292;
	public static final int CREATE_SEQUENCE=293;
	public static final int CREATE_TRIGGER=294;
	public static final int CREATE_TYPE_BODY=295;
	public static final int CREATE_TYPE_SPEC=296;
	public static final int CREATE_VIEW=297;
	public static final int CROSS_VK=298;
	public static final int CUBE_VK=299;
	public static final int CURRENT_USER_VK=300;
	public static final int CURRENT_VK=301;
	public static final int CURSOR_BASED_FOR=302;
	public static final int CURSOR_DECLARE=303;
	public static final int CURSOR_NAME=304;
	public static final int CUSTOMDATUM_VK=305;
	public static final int CUSTOM_TYPE=306;
	public static final int CYCLE_VK=307;
	public static final int C_VK=308;
	public static final int DATABASE_VK=309;
	public static final int DATETIME_OP=310;
	public static final int DAY_VK=311;
	public static final int DBTIMEZONE_VK=312;
	public static final int DB_ROLE_CHANGE_VK=313;
	public static final int DDL_VK=314;
	public static final int DEBUG_VK=315;
	public static final int DECIMAL_VK=316;
	public static final int DECOMPOSE_VK=317;
	public static final int DECREMENT_VK=318;
	public static final int DEC_VK=319;
	public static final int DEFAULTS_VK=320;
	public static final int DEFAULT_VALUE=321;
	public static final int DEFERRABLE_VK=322;
	public static final int DEFERRED_VK=323;
	public static final int DEFINER_VK=324;
	public static final int DENSE_RANK_VK=326;
	public static final int DEPENDENT_HANDLING=327;
	public static final int DEPTH_VK=328;
	public static final int DETERMINISTIC_VK=329;
	public static final int DIMENSION_VK=330;
	public static final int DIRECT_MODE=331;
	public static final int DISABLE_VK=332;
	public static final int DISASSOCIATE_VK=333;
	public static final int DIV_VK=334;
	public static final int DML_EVENT=335;
	public static final int DML_EVENT_ELEMENT=336;
	public static final int DOCUMENT_VK=337;
	public static final int DOT_ASTERISK=338;
	public static final int DOUBLE_VK=339;
	public static final int DROP_FUNCTION=340;
	public static final int DROP_PACKAGE=341;
	public static final int DROP_PROCEDURE=342;
	public static final int DROP_SEQUENCE=343;
	public static final int DROP_TRIGGER=344;
	public static final int DROP_TYPE=345;
	public static final int DSINTERVAL_UNCONSTRAINED_VK=346;
	public static final int DYNAMIC_RETURN=347;
	public static final int ELEMENT=348;
	public static final int ELEMENTS_MODE=349;
	public static final int ELEMENT_SPEC=350;
	public static final int ENABLE_VK=351;
	public static final int ENCODING_VK=352;
	public static final int ENTITYESCAPING_VK=353;
	public static final int EVALNAME_VK=355;
	public static final int EXCEPTIONS_VK=357;
	public static final int EXCEPTION_DECLARE=358;
	public static final int EXCEPTION_INIT_VK=359;
	public static final int EXCEPTION_NAME=360;
	public static final int EXCLUDE_VK=362;
	public static final int EXECUTE_VK=363;
	public static final int EXIT_VK=364;
	public static final int EXPLAIN_STATEMENT=365;
	public static final int EXPR=366;
	public static final int EXPR_LIST=367;
	public static final int EXTERNAL_MODE=368;
	public static final int EXTERNAL_VK=369;
	public static final int EXTRACT_VK=370;
	public static final int FACTORING=371;
	public static final int FAILURE_VK=372;
	public static final int FIELDS=373;
	public static final int FIELD_SPEC=374;
	public static final int FINAL_VK=375;
	public static final int FIRST_VALUE_VK=376;
	public static final int FIRST_VK=377;
	public static final int FLOAT_VK=378;
	public static final int FOLLOWING_VK=379;
	public static final int FOLLOWS_VK=380;
	public static final int FORALL_VK=381;
	public static final int FORCE_VK=382;
	public static final int FOREIGN_KEY=383;
	public static final int FOREIGN_VK=384;
	public static final int FOR_EACH_ROW=385;
	public static final int FOR_LOOP=386;
	public static final int FOR_MULTI_COLUMN=387;
	public static final int FOR_SINGLE_COLUMN=388;
	public static final int FULL_VK=389;
	public static final int FUNCTION_ENABLING_OVER=390;
	public static final int FUNCTION_ENABLING_USING=391;
	public static final int FUNCTION_ENABLING_WITHIN_OR_OVER=392;
	public static final int FUNCTION_NAME=393;
	public static final int FUNCTION_SPEC=394;
	public static final int GROUPING_VK=397;
	public static final int GROUPIN_SET=398;
	public static final int GROUP_BY_ELEMENT=399;
	public static final int HASH_VK=400;
	public static final int HIDE_VK=401;
	public static final int HIERARCHICAL=402;
	public static final int HOSTED_VARIABLE=403;
	public static final int HOSTED_VARIABLE_NAME=404;
	public static final int HOSTED_VARIABLE_ROUTINE_CALL=405;
	public static final int HOUR_VK=406;
	public static final int ID=407;
	public static final int IGNORE_VK=408;
	public static final int IMMEDIATE_VK=409;
	public static final int IMPLEMENTATION_TYPE_NAME=410;
	public static final int INCLUDE_VK=411;
	public static final int INCLUDING_VK=412;
	public static final int INCREMENT_VK=413;
	public static final int INDENT_VK=414;
	public static final int INDEXED_BY=415;
	public static final int INDEXED_FOR=416;
	public static final int INDEX_NAME=417;
	public static final int INDICES_BOUND=418;
	public static final int INITIALLY_VK=419;
	public static final int INLINE_CONSTRAINT_CLAUSE=420;
	public static final int INLINE_VK=421;
	public static final int INNER_VK=422;
	public static final int INOUT_VK=423;
	public static final int INSTANTIABLE_VK=424;
	public static final int INSTEAD_VK=425;
	public static final int INTEGER_VK=426;
	public static final int INTERVAL_DATATYPE=427;
	public static final int INT_VK=429;
	public static final int INVALIDATE_VK=430;
	public static final int ISOLATION_VK=431;
	public static final int IS_A_SET=432;
	public static final int IS_EMPTY=433;
	public static final int IS_INFINITE=434;
	public static final int IS_NAN=435;
	public static final int IS_NOT_A_SET=436;
	public static final int IS_NOT_EMPTY=437;
	public static final int IS_NOT_INFINITE=438;
	public static final int IS_NOT_NAN=439;
	public static final int IS_NOT_NULL=440;
	public static final int IS_NOT_OF_TYPE=441;
	public static final int IS_NOT_PRESENT=442;
	public static final int IS_NULL=443;
	public static final int IS_OF_TYPE=444;
	public static final int IS_PRESENT=445;
	public static final int ITERATE_VK=446;
	public static final int JAVA_VK=447;
	public static final int JOIN_DEF=448;
	public static final int KEEP_VK=449;
	public static final int KEY_VK=450;
	public static final int LABEL_DECLARE=451;
	public static final int LABEL_NAME=452;
	public static final int LANGUAGE_VK=453;
	public static final int LAST_VALUE_VK=454;
	public static final int LAST_VK=455;
	public static final int LEADING_VK=456;
	public static final int LEFT_VK=459;
	public static final int LIBRARY_VK=462;
	public static final int LIKE2_VK=463;
	public static final int LIKE4_VK=464;
	public static final int LIKEC_VK=465;
	public static final int LIMIT_VK=466;
	public static final int LINK_NAME=467;
	public static final int LOCAL_VK=468;
	public static final int LOCK_TABLE_ELEMENT=469;
	public static final int LOGIC_EXPR=470;
	public static final int LOGOFF_VK=471;
	public static final int LOGON_VK=472;
	public static final int LOG_VK=473;
	public static final int LONG_RAW=474;
	public static final int LONG_VK=475;
	public static final int LOOP_VK=476;
	public static final int MAIN_MODEL=477;
	public static final int MAIN_MODEL_NAME=478;
	public static final int MAP_VK=479;
	public static final int MAXVALUE_VK=480;
	public static final int MEASURES_VK=481;
	public static final int MEMBER_VK=482;
	public static final int MERGE_INSERT=483;
	public static final int MERGE_UPDATE=484;
	public static final int MERGE_VK=485;
	public static final int MINUTE_VK=487;
	public static final int MINVALUE_VK=488;
	public static final int MLSLABEL_VK=489;
	public static final int MODEL_COLUMN=490;
	public static final int MODEL_COLUMNS=491;
	public static final int MODEL_EXPRESSION=492;
	public static final int MODEL_RULE=493;
	public static final int MODEL_RULES=494;
	public static final int MODIFIER=495;
	public static final int MODIFY_VK=496;
	public static final int MOD_VK=497;
	public static final int MONTH_VK=498;
	public static final int MULTI_TABLE_MODE=499;
	public static final int NAME_VK=500;
	public static final int NATIVE_DATATYPE=502;
	public static final int NATURALN_VK=503;
	public static final int NATURAL_VK=504;
	public static final int NAV_VK=505;
	public static final int NCHAR_CS_VK=506;
	public static final int NCHAR_VK=507;
	public static final int NCLOB_VK=508;
	public static final int NESTED_TABLE_TYPE_DEF=509;
	public static final int NESTED_VK=510;
	public static final int NEW_VK=511;
	public static final int NOAUDIT_VK=512;
	public static final int NOCACHE_VK=513;
	public static final int NOCOPY_VK=514;
	public static final int NOCYCLE_VK=515;
	public static final int NOENTITYESCAPING_VK=516;
	public static final int NOFORCE=517;
	public static final int NOMAXVALUE_VK=518;
	public static final int NOMINVALUE_VK=519;
	public static final int NONE_VK=520;
	public static final int NON_DML=521;
	public static final int NOORDER_VK=522;
	public static final int NORELY_VK=523;
	public static final int NOSCHEMACHECK_VK=524;
	public static final int NOT_BETWEEN=525;
	public static final int NOT_DEFERRABLE=526;
	public static final int NOT_IN=528;
	public static final int NOT_LIKE=529;
	public static final int NOT_NULL=530;
	public static final int NOVALIDATE_VK=531;
	public static final int NO_VK=532;
	public static final int NULLS_VK=533;
	public static final int NUMBER_VK=534;
	public static final int NUMERIC_VK=535;
	public static final int NVARCHAR2_VK=536;
	public static final int OBJECT_AS=537;
	public static final int OBJECT_MEMBERS=538;
	public static final int OBJECT_TYPE_DEF=539;
	public static final int OBJECT_VK=540;
	public static final int OFF_VK=541;
	public static final int OLD_VK=542;
	public static final int ONLY_VK=543;
	public static final int ON_DELETE=544;
	public static final int OPEN_FOR=545;
	public static final int OPEN_VK=546;
	public static final int ORADATA_VK=547;
	public static final int ORDER_BY_ELEMENT=548;
	public static final int ORDER_BY_ELEMENTS=549;
	public static final int ORDINALITY_VK=550;
	public static final int OSERROR_VK=551;
	public static final int OUTER_JOIN_SIGN=552;
	public static final int OUT_OF_LINE_CONSTRAINT=553;
	public static final int OUT_VK=554;
	public static final int OVERRIDING_VK=555;
	public static final int OVER_VK=556;
	public static final int PACKAGE_NAME=557;
	public static final int PACKAGE_VK=558;
	public static final int PARALLEL_ENABLE_VK=559;
	public static final int PARAMETER=560;
	public static final int PARAMETERS=561;
	public static final int PARAMETERS_VK=562;
	public static final int PARAMETER_NAME=563;
	public static final int PARENT_VK=564;
	public static final int PARTITION_VK=565;
	public static final int PASSING_VK=566;
	public static final int PERCENT_FOUND_VK=568;
	public static final int PERCENT_ISOPEN_VK=569;
	public static final int PERCENT_NOTFOUND_VK=570;
	public static final int PERCENT_ROWCOUNT_VK=571;
	public static final int PERCENT_ROWTYPE_VK=572;
	public static final int PERCENT_TYPE_VK=573;
	public static final int PIPELINED_VK=575;
	public static final int PIPE_ROW=576;
	public static final int PIPE_VK=577;
	public static final int PIVOT_ALIAS=578;
	public static final int PIVOT_ELEMENT=579;
	public static final int PIVOT_IN_ELEMENT=580;
	public static final int PIVOT_VK=581;
	public static final int PLS_INTEGER_VK=596;
	public static final int POSITIVEN_VK=598;
	public static final int POSITIVE_VK=599;
	public static final int PRAGMA_DECLARE=600;
	public static final int PRAGMA_VK=601;
	public static final int PRECEDING_VK=602;
	public static final int PRECISION=603;
	public static final int PRECISION_VK=604;
	public static final int PREDICTION_FUNCTION=605;
	public static final int PRIMARY_KEY=606;
	public static final int PRIMARY_VK=607;
	public static final int PROCEDURE_NAME=608;
	public static final int PROCEDURE_SPEC=609;
	public static final int QUERY_NAME=611;
	public static final int QUERY_PARTITION_CLAUSE_SPEC_EXPRESSIONS=612;
	public static final int RAISE_VK=613;
	public static final int RANGE_VK=614;
	public static final int RAW_VK=615;
	public static final int READ_VK=616;
	public static final int REAL_VK=617;
	public static final int RECORD_NAME=618;
	public static final int RECORD_TYPE_DECLARE_FIELDS=619;
	public static final int RECORD_TYPE_DECLARE_REFCURSOR=620;
	public static final int RECORD_VAR_DECLARE=621;
	public static final int RECURSIVE_VK=622;
	public static final int REFERENCES_CLAUSE=623;
	public static final int REFERENCES_VK=624;
	public static final int REFERENCE_MODEL_NAME=625;
	public static final int REFERENCE_VK=626;
	public static final int REFERENCING_VK=627;
	public static final int REF_VK=628;
	public static final int REJECT_VK=630;
	public static final int RELIES_ON_VK=631;
	public static final int RELY_VK=632;
	public static final int RENAME_VK=633;
	public static final int REPLACE_VK=634;
	public static final int RESPECT_VK=635;
	public static final int RESTRICT_REFERENCES_VK=636;
	public static final int RESULT_CACHE_VK=637;
	public static final int RETURN_VK=638;
	public static final int REUSE_VK=639;
	public static final int REVERSE_VK=640;
	public static final int RIGHT_VK=643;
	public static final int ROLLBACK_SEGMENT_NAME=644;
	public static final int ROLLBACK_VK=645;
	public static final int ROLLUP_VK=646;
	public static final int ROUTINE_CALL=647;
	public static final int ROUTINE_NAME=648;
	public static final int ROWID_VK=649;
	public static final int ROWS_VK=650;
	public static final int ROW_VK=651;
	public static final int RULES_VK=652;
	public static final int SAMPLE_VK=653;
	public static final int SAVEPOINT_NAME=654;
	public static final int SAVEPOINT_VK=655;
	public static final int SCHEMACHECK_VK=656;
	public static final int SCHEMA_NAME=657;
	public static final int SCHEMA_VK=658;
	public static final int SCN_VK=659;
	public static final int SEARCHED_CASE=660;
	public static final int SEARCH_VK=661;
	public static final int SECOND_VK=662;
	public static final int SEED_VK=663;
	public static final int SELECTED_TABLEVIEW=664;
	public static final int SELECT_BASED_FOR=665;
	public static final int SELECT_ITEM=666;
	public static final int SELECT_LIST=667;
	public static final int SELECT_MODE=668;
	public static final int SELECT_STATEMENT=669;
	public static final int SELF_VK=670;
	public static final int SEQUENCE_NAME=672;
	public static final int SEQUENCE_VK=673;
	public static final int SEQUENTIAL_VK=674;
	public static final int SERIALIZABLE_VK=675;
	public static final int SERIALLY_REUSABLE_VK=676;
	public static final int SERVERERROR_VK=677;
	public static final int SESSIONTIMEZONE_VK=678;
	public static final int SET_CONSTRAINT=679;
	public static final int SET_NULL=680;
	public static final int SET_SERVEROUTPUT=681;
	public static final int SET_TRANSACTION=682;
	public static final int SET_VK=683;
	public static final int SHOW_VK=684;
	public static final int SHUTDOWN_VK=685;
	public static final int SIBLINGS_VK=686;
	public static final int SIGNTYPE_VK=687;
	public static final int SIMPLE_BOUND=688;
	public static final int SIMPLE_CASE=689;
	public static final int SIMPLE_DML=690;
	public static final int SIMPLE_INTEGER_VK=691;
	public static final int SINGLE_TABLE_MODE=692;
	public static final int SINGLE_VK=693;
	public static final int SKIP_VK=694;
	public static final int SMALLINT_VK=695;
	public static final int SOME_VK=697;
	public static final int SPECIFICATION_VK=698;
	public static final int SQLDATA_VK=764;
	public static final int SQLERROR_VK=765;
	public static final int SQL_SCRIPT=766;
	public static final int STANDALONE_VK=767;
	public static final int STANDARD_FUNCTION=768;
	public static final int STARTUP_VK=769;
	public static final int STATEMENTS=770;
	public static final int STATIC_RETURNING=771;
	public static final int STATIC_VK=772;
	public static final int STATISTICS_VK=773;
	public static final int STREAMING_CLAUSE=774;
	public static final int STRING_VK=775;
	public static final int SUBMULTISET_VK=776;
	public static final int SUBPARTITION_VK=777;
	public static final int SUBQUERY=778;
	public static final int SUBTYPE_DECLARE=779;
	public static final int SUCCESS_VK=780;
	public static final int SUSPEND_VK=781;
	public static final int TABLEVIEW_NAME=782;
	public static final int TABLE_ALIAS=783;
	public static final int TABLE_ELEMENT=784;
	public static final int TABLE_EXPRESSION=785;
	public static final int TABLE_REF=786;
	public static final int TABLE_REF_ELEMENT=787;
	public static final int TABLE_TYPE_DECLARE=788;
	public static final int TABLE_VAR_DECLARE=789;
	public static final int TABLE_VAR_NAME=790;
	public static final int THREE_DOTS=791;
	public static final int TIMESTAMP_LTZ_UNCONSTRAINED_VK=792;
	public static final int TIMESTAMP_TZ_UNCONSTRAINED_VK=793;
	public static final int TIMESTAMP_UNCONSTRAINED_VK=794;
	public static final int TIMESTAMP_VK=795;
	public static final int TIMEZONE_ABBR_VK=796;
	public static final int TIMEZONE_HOUR_VK=797;
	public static final int TIMEZONE_MINUTE_VK=798;
	public static final int TIMEZONE_REGION_VK=799;
	public static final int TIME_VK=800;
	public static final int TRAILING_VK=801;
	public static final int TRANSLATE_VK=802;
	public static final int TREAT_VK=803;
	public static final int TRIGGER_NAME=804;
	public static final int TRIM_VK=805;
	public static final int TRUNCATE_VK=806;
	public static final int TYPE_BODY_ELEMENTS=807;
	public static final int TYPE_NAME=808;
	public static final int TYPE_VK=809;
	public static final int UNARY_MINUS=810;
	public static final int UNARY_PLUS=811;
	public static final int UNBOUNDED_VK=812;
	public static final int UNDER_VK=813;
	public static final int UNLIMITED_VK=814;
	public static final int UNPIVOT_IN_ELEMENT=815;
	public static final int UNPIVOT_VK=816;
	public static final int UNTIL_VK=818;
	public static final int UPDATED_VK=819;
	public static final int UPSERT_VK=820;
	public static final int UROWID_VK=821;
	public static final int USING_INDEX=822;
	public static final int USING_MODE=823;
	public static final int VALIDATE_VK=824;
	public static final int VALUES_BOUND=825;
	public static final int VALUE_VK=826;
	public static final int VARCHAR2_VK=827;
	public static final int VARCHAR_VK=828;
	public static final int VARIABLE_DECLARE=829;
	public static final int VARIABLE_NAME=830;
	public static final int VARR_ARRAY_DEF=831;
	public static final int VECTOR_EXPR=832;
	public static final int VERSIONS_VK=833;
	public static final int VERSION_VK=834;
	public static final int VIEW_NAME=836;
	public static final int VIEW_TYPE_CONSTRAINTS=837;
	public static final int VIEW_TYPE_CONSTRAINT_ITEM_INLINE=838;
	public static final int WAIT_VK=839;
	public static final int WARNING_VK=840;
	public static final int WELLFORMED_VK=841;
	public static final int WHENEVER_VK=842;
	public static final int WHILE_LOOP=843;
	public static final int WITHIN_VK=844;
	public static final int WORK_VK=845;
	public static final int WRITE_VK=846;
	public static final int XMLAGG_VK=847;
	public static final int XMLATTRIBUTES_VK=848;
	public static final int XMLCAST_VK=849;
	public static final int XMLCOLATTVAL_VK=850;
	public static final int XMLELEMENT_VK=851;
	public static final int XMLEXISTS_VK=852;
	public static final int XMLFOREST_VK=853;
	public static final int XMLNAMESPACES_VK=854;
	public static final int XMLPARSE_VK=855;
	public static final int XMLPI_VK=856;
	public static final int XMLQUERY_VK=857;
	public static final int XMLROOT_VK=858;
	public static final int XMLSERIALIZE_VK=859;
	public static final int XMLTABLE_VK=860;
	public static final int XML_ALIAS=861;
	public static final int XML_COLUMN=862;
	public static final int XML_COLUMN_NAME=863;
	public static final int XML_ELEMENT=864;
	public static final int XML_VK=865;
	public static final int YEAR_VK=866;
	public static final int YES_VK=867;
	public static final int YMINTERVAL_UNCONSTRAINED_VK=868;

	// delegates
	public PLSQLParser_PLSQLKeys gPLSQLKeys;
	public PLSQLParser_PLSQLCommons gPLSQLCommons;
	public PLSQLParser_PLSQL_DMLParser gPLSQL_DMLParser;
	public PLSQLParser_SQLPLUSParser gSQLPLUSParser;
	public Parser[] getDelegates() {
		return new Parser[] {gPLSQLKeys, gPLSQLCommons, gPLSQL_DMLParser, gSQLPLUSParser};
	}

	// delegators


	public PLSQLParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public PLSQLParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		gPLSQLKeys = new PLSQLParser_PLSQLKeys(input, state, this);
		gPLSQLCommons = new PLSQLParser_PLSQLCommons(input, state, this);
		gPLSQL_DMLParser = new PLSQLParser_PLSQL_DMLParser(input, state, this);
		gSQLPLUSParser = new PLSQLParser_SQLPLUSParser(input, state, this);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
		gPLSQLKeys.setTreeAdaptor(this.adaptor);gPLSQLCommons.setTreeAdaptor(this.adaptor);gPLSQL_DMLParser.setTreeAdaptor(this.adaptor);gSQLPLUSParser.setTreeAdaptor(this.adaptor);
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return PLSQLParser.tokenNames; }
	@Override public String getGrammarFileName() { return "F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g"; }


	public static class swallow_to_semi_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "swallow_to_semi"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:166:1: swallow_to_semi : (~ ( SEMICOLON ) )+ ;
	public final PLSQLParser.swallow_to_semi_return swallow_to_semi() throws RecognitionException {
		PLSQLParser.swallow_to_semi_return retval = new PLSQLParser.swallow_to_semi_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set1=null;

		Object set1_tree=null;

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:167:5: ( (~ ( SEMICOLON ) )+ )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:167:10: (~ ( SEMICOLON ) )+
			{
			root_0 = (Object)adaptor.nil();


			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:167:10: (~ ( SEMICOLON ) )+
			int cnt1=0;
			loop1:
			while (true) {
				int alt1=2;
				int LA1_0 = input.LA(1);
				if ( ((LA1_0 >= A && LA1_0 <= S)||(LA1_0 >= SEPARATOR && LA1_0 <= YMINTERVAL_UNCONSTRAINED_VK)) ) {
					alt1=1;
				}

				switch (alt1) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:
					{
					set1=input.LT(1);
					if ( (input.LA(1) >= A && input.LA(1) <= S)||(input.LA(1) >= SEPARATOR && input.LA(1) <= YMINTERVAL_UNCONSTRAINED_VK) ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt1 >= 1 ) break loop1;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(1, input);
					throw eee;
				}
				cnt1++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "swallow_to_semi"


	public static class compilation_unit_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compilation_unit"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:170:1: compilation_unit : ( unit_statement )* EOF -> ^( COMPILATION_UNIT ( unit_statement )* ) ;
	public final PLSQLParser.compilation_unit_return compilation_unit() throws RecognitionException {
		PLSQLParser.compilation_unit_return retval = new PLSQLParser.compilation_unit_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token EOF3=null;
		ParserRuleReturnScope unit_statement2 =null;

		Object EOF3_tree=null;
		RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_unit_statement=new RewriteRuleSubtreeStream(adaptor,"rule unit_statement");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:171:5: ( ( unit_statement )* EOF -> ^( COMPILATION_UNIT ( unit_statement )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:171:10: ( unit_statement )* EOF
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:171:10: ( unit_statement )*
			loop2:
			while (true) {
				int alt2=2;
				int LA2_0 = input.LA(1);
				if ( (LA2_0==SQL92_RESERVED_ALTER||LA2_0==SQL92_RESERVED_CREATE) ) {
					alt2=1;
				}
				else if ( (LA2_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
					alt2=1;
				}
				else if ( (LA2_0==SQL92_RESERVED_DROP||LA2_0==SQL92_RESERVED_PROCEDURE) ) {
					alt2=1;
				}

				switch (alt2) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:171:10: unit_statement
					{
					pushFollow(FOLLOW_unit_statement_in_compilation_unit892);
					unit_statement2=unit_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_unit_statement.add(unit_statement2.getTree());
					}
					break;

				default :
					break loop2;
				}
			}

			EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_compilation_unit895); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EOF.add(EOF3);

			// AST REWRITE
			// elements: unit_statement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 172:9: -> ^( COMPILATION_UNIT ( unit_statement )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:172:12: ^( COMPILATION_UNIT ( unit_statement )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMPILATION_UNIT, "COMPILATION_UNIT"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:172:31: ( unit_statement )*
				while ( stream_unit_statement.hasNext() ) {
					adaptor.addChild(root_1, stream_unit_statement.nextTree());
				}
				stream_unit_statement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compilation_unit"


	public static class sql_script_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "sql_script"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:175:1: sql_script : (r+= unit_statement |r+= sql_plus_command )* EOF -> ^( SQL_SCRIPT ( $r)* ) ;
	public final PLSQLParser.sql_script_return sql_script() throws RecognitionException {
		PLSQLParser.sql_script_return retval = new PLSQLParser.sql_script_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token EOF4=null;
		List<Object> list_r=null;
		RuleReturnScope r = null;
		Object EOF4_tree=null;
		RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_unit_statement=new RewriteRuleSubtreeStream(adaptor,"rule unit_statement");
		RewriteRuleSubtreeStream stream_sql_plus_command=new RewriteRuleSubtreeStream(adaptor,"rule sql_plus_command");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:176:5: ( (r+= unit_statement |r+= sql_plus_command )* EOF -> ^( SQL_SCRIPT ( $r)* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:176:9: (r+= unit_statement |r+= sql_plus_command )* EOF
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:176:9: (r+= unit_statement |r+= sql_plus_command )*
			loop3:
			while (true) {
				int alt3=3;
				switch ( input.LA(1) ) {
				case SQL92_RESERVED_ALTER:
				case SQL92_RESERVED_CREATE:
				case SQL92_RESERVED_DROP:
				case SQL92_RESERVED_PROCEDURE:
					{
					alt3=1;
					}
					break;
				case REGULAR_ID:
					{
					int LA3_3 = input.LA(2);
					if ( (LA3_3==EOF||LA3_3==PROMPT||LA3_3==SEMICOLON||LA3_3==SOLIDUS||LA3_3==SQL92_RESERVED_ALTER||LA3_3==SQL92_RESERVED_CREATE||LA3_3==SQL92_RESERVED_DROP||LA3_3==SQL92_RESERVED_PROCEDURE) ) {
						alt3=2;
					}
					else if ( (LA3_3==DELIMITED_ID||LA3_3==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
						alt3=1;
					}
					else if ( (LA3_3==REGULAR_ID) ) {
						int LA3_6 = input.LA(3);
						if ( (LA3_6==LEFT_PAREN||LA3_6==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
							alt3=1;
						}
						else if ( (LA3_6==EOF||LA3_6==DELIMITED_ID||LA3_6==INTRODUCER||LA3_6==PROMPT||LA3_6==SEMICOLON||LA3_6==SOLIDUS||LA3_6==SQL92_RESERVED_ALTER||LA3_6==SQL92_RESERVED_CREATE||LA3_6==SQL92_RESERVED_DROP||LA3_6==SQL92_RESERVED_PROCEDURE) ) {
							alt3=2;
						}
						else if ( (LA3_6==REGULAR_ID) ) {
							int LA3_7 = input.LA(4);
							if ( (LA3_7==EOF||LA3_7==CHAR_STRING||LA3_7==EXACT_NUM_LIT||LA3_7==INTRODUCER||LA3_7==LEFT_PAREN||LA3_7==PERIOD||LA3_7==PROMPT||LA3_7==SEMICOLON||LA3_7==SOLIDUS||LA3_7==SQL92_RESERVED_ALTER||LA3_7==SQL92_RESERVED_CREATE||LA3_7==SQL92_RESERVED_DROP||LA3_7==SQL92_RESERVED_ON||LA3_7==SQL92_RESERVED_PROCEDURE) ) {
								alt3=2;
							}
							else if ( (LA3_7==REGULAR_ID) ) {
								int LA3_10 = input.LA(5);
								if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
									alt3=1;
								}
								else if ( (((input.LT(1).getText().equalsIgnoreCase("whenever"))||(input.LT(1).getText().equalsIgnoreCase("exit"))||(input.LT(1).getText().equalsIgnoreCase("set")))) ) {
									alt3=2;
								}

							}
							else if ( (LA3_7==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
								alt3=1;
							}
							else if ( (LA3_7==DELIMITED_ID) ) {
								int LA3_11 = input.LA(5);
								if ( (LA3_11==PERIOD) ) {
									int LA3_12 = input.LA(6);
									if ( (LA3_12==REGULAR_ID) ) {
										int LA3_14 = input.LA(7);
										if ( ((LA3_14 >= PERCENT && LA3_14 <= PERIOD)||LA3_14==SQL92_RESERVED_AS||LA3_14==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
											alt3=1;
										}
										else if ( (LA3_14==REGULAR_ID) ) {
											int LA3_13 = input.LA(8);
											if ( (LA3_13==REGULAR_ID) ) {
												int LA3_16 = input.LA(9);
												if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
													alt3=1;
												}
												else if ( ((input.LT(1).getText().equalsIgnoreCase("exit"))) ) {
													alt3=2;
												}

											}
											else if ( (LA3_13==LEFT_PAREN||LA3_13==PLSQL_NON_RESERVED_USING||LA3_13==SQL92_RESERVED_AS||LA3_13==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
												alt3=1;
											}
											else if ( (LA3_13==DELIMITED_ID||LA3_13==SQL92_RESERVED_DATE) ) {
												alt3=2;
											}

										}
										else if ( (LA3_14==LEFT_PAREN) ) {
											alt3=2;
										}

									}
									else if ( (LA3_12==DELIMITED_ID) ) {
										int LA3_15 = input.LA(7);
										if ( ((LA3_15 >= PERCENT && LA3_15 <= PERIOD)||LA3_15==SQL92_RESERVED_AS||LA3_15==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
											alt3=1;
										}
										else if ( (LA3_15==REGULAR_ID) ) {
											int LA3_13 = input.LA(8);
											if ( (LA3_13==REGULAR_ID) ) {
												int LA3_16 = input.LA(9);
												if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
													alt3=1;
												}
												else if ( ((input.LT(1).getText().equalsIgnoreCase("exit"))) ) {
													alt3=2;
												}

											}
											else if ( (LA3_13==LEFT_PAREN||LA3_13==PLSQL_NON_RESERVED_USING||LA3_13==SQL92_RESERVED_AS||LA3_13==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
												alt3=1;
											}
											else if ( (LA3_13==DELIMITED_ID||LA3_13==SQL92_RESERVED_DATE) ) {
												alt3=2;
											}

										}
										else if ( (LA3_15==LEFT_PAREN) ) {
											alt3=2;
										}

									}

								}
								else if ( (LA3_11==PERCENT||LA3_11==SQL92_RESERVED_AS||LA3_11==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
									alt3=1;
								}
								else if ( (LA3_11==REGULAR_ID) ) {
									int LA3_13 = input.LA(6);
									if ( (LA3_13==REGULAR_ID) ) {
										int LA3_16 = input.LA(7);
										if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
											alt3=1;
										}
										else if ( ((input.LT(1).getText().equalsIgnoreCase("exit"))) ) {
											alt3=2;
										}

									}
									else if ( (LA3_13==LEFT_PAREN||LA3_13==PLSQL_NON_RESERVED_USING||LA3_13==SQL92_RESERVED_AS||LA3_13==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
										alt3=1;
									}
									else if ( (LA3_13==DELIMITED_ID||LA3_13==SQL92_RESERVED_DATE) ) {
										alt3=2;
									}

								}
								else if ( (LA3_11==LEFT_PAREN) ) {
									alt3=2;
								}

							}

						}
						else if ( (LA3_6==CHAR_STRING||LA3_6==EXACT_NUM_LIT||LA3_6==SQL92_RESERVED_ON) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {
							alt3=2;
						}

					}

					}
					break;
				case PROMPT:
				case SOLIDUS:
					{
					alt3=2;
					}
					break;
				}
				switch (alt3) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:176:10: r+= unit_statement
					{
					pushFollow(FOLLOW_unit_statement_in_sql_script934);
					r=unit_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_unit_statement.add(r.getTree());
					if (list_r==null) list_r=new ArrayList<Object>();
					list_r.add(r.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:176:28: r+= sql_plus_command
					{
					pushFollow(FOLLOW_sql_plus_command_in_sql_script938);
					r=sql_plus_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sql_plus_command.add(r.getTree());
					if (list_r==null) list_r=new ArrayList<Object>();
					list_r.add(r.getTree());
					}
					break;

				default :
					break loop3;
				}
			}

			EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_sql_script942); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EOF.add(EOF4);

			// AST REWRITE
			// elements: r
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: r
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"token r",list_r);
			root_0 = (Object)adaptor.nil();
			// 177:9: -> ^( SQL_SCRIPT ( $r)* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:177:12: ^( SQL_SCRIPT ( $r)* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SQL_SCRIPT, "SQL_SCRIPT"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:177:26: ( $r)*
				while ( stream_r.hasNext() ) {
					adaptor.addChild(root_1, stream_r.nextTree());
				}
				stream_r.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_script"


	public static class unit_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "unit_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:180:1: unit_statement options {backtrack=true; } : ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | ( create_key ( or_key replace_key )? package_key )=> create_package | create_sequence | create_view | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type );
	public final PLSQLParser.unit_statement_return unit_statement() throws RecognitionException {
		PLSQLParser.unit_statement_return retval = new PLSQLParser.unit_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope alter_function5 =null;
		ParserRuleReturnScope alter_package6 =null;
		ParserRuleReturnScope alter_procedure7 =null;
		ParserRuleReturnScope alter_sequence8 =null;
		ParserRuleReturnScope alter_trigger9 =null;
		ParserRuleReturnScope alter_type10 =null;
		ParserRuleReturnScope create_function_body11 =null;
		ParserRuleReturnScope create_procedure_body12 =null;
		ParserRuleReturnScope create_package13 =null;
		ParserRuleReturnScope create_sequence14 =null;
		ParserRuleReturnScope create_view15 =null;
		ParserRuleReturnScope create_trigger16 =null;
		ParserRuleReturnScope create_type17 =null;
		ParserRuleReturnScope drop_function18 =null;
		ParserRuleReturnScope drop_package19 =null;
		ParserRuleReturnScope drop_procedure20 =null;
		ParserRuleReturnScope drop_sequence21 =null;
		ParserRuleReturnScope drop_trigger22 =null;
		ParserRuleReturnScope drop_type23 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:183:6: ( alter_function | alter_package | alter_procedure | alter_sequence | alter_trigger | alter_type | create_function_body | create_procedure_body | ( create_key ( or_key replace_key )? package_key )=> create_package | create_sequence | create_view | create_trigger | create_type | drop_function | drop_package | drop_procedure | drop_sequence | drop_trigger | drop_type )
			int alt4=19;
			int LA4_0 = input.LA(1);
			if ( (LA4_0==SQL92_RESERVED_ALTER) ) {
				int LA4_1 = input.LA(2);
				if ( (synpred1_PLSQLParser()) ) {
					alt4=1;
				}
				else if ( (synpred2_PLSQLParser()) ) {
					alt4=2;
				}
				else if ( (synpred3_PLSQLParser()) ) {
					alt4=3;
				}
				else if ( (synpred4_PLSQLParser()) ) {
					alt4=4;
				}
				else if ( (synpred5_PLSQLParser()) ) {
					alt4=5;
				}
				else if ( (synpred6_PLSQLParser()) ) {
					alt4=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 4, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA4_0==SQL92_RESERVED_CREATE) ) {
				int LA4_2 = input.LA(2);
				if ( (synpred7_PLSQLParser()) ) {
					alt4=7;
				}
				else if ( (synpred8_PLSQLParser()) ) {
					alt4=8;
				}
				else if ( (synpred9_PLSQLParser()) ) {
					alt4=9;
				}
				else if ( (synpred10_PLSQLParser()) ) {
					alt4=10;
				}
				else if ( (synpred11_PLSQLParser()) ) {
					alt4=11;
				}
				else if ( (synpred12_PLSQLParser()) ) {
					alt4=12;
				}
				else if ( (synpred13_PLSQLParser()) ) {
					alt4=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 4, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA4_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
				alt4=7;
			}
			else if ( (LA4_0==SQL92_RESERVED_PROCEDURE) ) {
				alt4=8;
			}
			else if ( (LA4_0==SQL92_RESERVED_DROP) ) {
				int LA4_5 = input.LA(2);
				if ( (synpred14_PLSQLParser()) ) {
					alt4=14;
				}
				else if ( (synpred15_PLSQLParser()) ) {
					alt4=15;
				}
				else if ( (synpred16_PLSQLParser()) ) {
					alt4=16;
				}
				else if ( (synpred17_PLSQLParser()) ) {
					alt4=17;
				}
				else if ( (synpred18_PLSQLParser()) ) {
					alt4=18;
				}
				else if ( (true) ) {
					alt4=19;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 4, 0, input);
				throw nvae;
			}

			switch (alt4) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:183:11: alter_function
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_function_in_unit_statement988);
					alter_function5=alter_function();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_function5.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:184:10: alter_package
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_package_in_unit_statement999);
					alter_package6=alter_package();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_package6.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:185:10: alter_procedure
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_procedure_in_unit_statement1010);
					alter_procedure7=alter_procedure();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_procedure7.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:186:10: alter_sequence
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_sequence_in_unit_statement1021);
					alter_sequence8=alter_sequence();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_sequence8.getTree());

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:187:10: alter_trigger
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_trigger_in_unit_statement1032);
					alter_trigger9=alter_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_trigger9.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:188:10: alter_type
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_type_in_unit_statement1043);
					alter_type10=alter_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_type10.getTree());

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:189:10: create_function_body
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_function_body_in_unit_statement1054);
					create_function_body11=create_function_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_function_body11.getTree());

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:190:10: create_procedure_body
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_procedure_body_in_unit_statement1065);
					create_procedure_body12=create_procedure_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_procedure_body12.getTree());

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:191:10: ( create_key ( or_key replace_key )? package_key )=> create_package
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_package_in_unit_statement1091);
					create_package13=create_package();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_package13.getTree());

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:192:10: create_sequence
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_sequence_in_unit_statement1102);
					create_sequence14=create_sequence();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_sequence14.getTree());

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:196:10: create_view
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_view_in_unit_statement1116);
					create_view15=create_view();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_view15.getTree());

					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:200:10: create_trigger
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_trigger_in_unit_statement1131);
					create_trigger16=create_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_trigger16.getTree());

					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:201:10: create_type
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_type_in_unit_statement1142);
					create_type17=create_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_type17.getTree());

					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:202:10: drop_function
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_function_in_unit_statement1153);
					drop_function18=drop_function();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_function18.getTree());

					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:203:10: drop_package
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_package_in_unit_statement1164);
					drop_package19=drop_package();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_package19.getTree());

					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:204:10: drop_procedure
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_procedure_in_unit_statement1175);
					drop_procedure20=drop_procedure();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_procedure20.getTree());

					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:205:10: drop_sequence
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_sequence_in_unit_statement1186);
					drop_sequence21=drop_sequence();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_sequence21.getTree());

					}
					break;
				case 18 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:206:10: drop_trigger
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_trigger_in_unit_statement1197);
					drop_trigger22=drop_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_trigger22.getTree());

					}
					break;
				case 19 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:207:10: drop_type
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_type_in_unit_statement1208);
					drop_type23=drop_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_type23.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unit_statement"


	public static class drop_function_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_function"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:214:1: drop_function : drop_key function_key function_name SEMICOLON -> ^( DROP_FUNCTION[$drop_key.start] function_name ) ;
	public final PLSQLParser.drop_function_return drop_function() throws RecognitionException {
		PLSQLParser.drop_function_return retval = new PLSQLParser.drop_function_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON27=null;
		ParserRuleReturnScope drop_key24 =null;
		ParserRuleReturnScope function_key25 =null;
		ParserRuleReturnScope function_name26 =null;

		Object SEMICOLON27_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
		RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
		RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:215:5: ( drop_key function_key function_name SEMICOLON -> ^( DROP_FUNCTION[$drop_key.start] function_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:215:10: drop_key function_key function_name SEMICOLON
			{
			pushFollow(FOLLOW_drop_key_in_drop_function1232);
			drop_key24=drop_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_drop_key.add(drop_key24.getTree());
			pushFollow(FOLLOW_function_key_in_drop_function1234);
			function_key25=function_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_key.add(function_key25.getTree());
			pushFollow(FOLLOW_function_name_in_drop_function1236);
			function_name26=function_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_name.add(function_name26.getTree());
			SEMICOLON27=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_function1246); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON27);

			// AST REWRITE
			// elements: function_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 217:9: -> ^( DROP_FUNCTION[$drop_key.start] function_name )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:217:12: ^( DROP_FUNCTION[$drop_key.start] function_name )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DROP_FUNCTION, (drop_key24!=null?(drop_key24.start):null)), root_1);
				adaptor.addChild(root_1, stream_function_name.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_function"


	public static class alter_function_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_function"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:220:1: alter_function : alter_key function_key function_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_FUNCTION[$alter_key.start] function_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) ;
	public final PLSQLParser.alter_function_return alter_function() throws RecognitionException {
		PLSQLParser.alter_function_return retval = new PLSQLParser.alter_function_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON36=null;
		ParserRuleReturnScope alter_key28 =null;
		ParserRuleReturnScope function_key29 =null;
		ParserRuleReturnScope function_name30 =null;
		ParserRuleReturnScope compile_key31 =null;
		ParserRuleReturnScope debug_key32 =null;
		ParserRuleReturnScope compiler_parameters_clause33 =null;
		ParserRuleReturnScope reuse_key34 =null;
		ParserRuleReturnScope settings_key35 =null;

		Object SEMICOLON36_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
		RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
		RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
		RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
		RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
		RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
		RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
		RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:221:5: ( alter_key function_key function_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_FUNCTION[$alter_key.start] function_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:221:10: alter_key function_key function_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON
			{
			pushFollow(FOLLOW_alter_key_in_alter_function1283);
			alter_key28=alter_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_alter_key.add(alter_key28.getTree());
			pushFollow(FOLLOW_function_key_in_alter_function1285);
			function_key29=function_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_key.add(function_key29.getTree());
			pushFollow(FOLLOW_function_name_in_alter_function1287);
			function_name30=function_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_name.add(function_name30.getTree());
			pushFollow(FOLLOW_compile_key_in_alter_function1297);
			compile_key31=compile_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_compile_key.add(compile_key31.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:222:21: ( debug_key )?
			int alt5=2;
			int LA5_0 = input.LA(1);
			if ( (LA5_0==REGULAR_ID) ) {
				int LA5_1 = input.LA(2);
				if ( (LA5_1==DELIMITED_ID||LA5_1==INTRODUCER||LA5_1==SEMICOLON) ) {
					alt5=1;
				}
				else if ( (LA5_1==REGULAR_ID) ) {
					int LA5_4 = input.LA(3);
					if ( (LA5_4==EQUALS_OP||LA5_4==REGULAR_ID) ) {
						alt5=1;
					}
				}
			}
			switch (alt5) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:222:21: debug_key
					{
					pushFollow(FOLLOW_debug_key_in_alter_function1299);
					debug_key32=debug_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_debug_key.add(debug_key32.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:222:32: ( compiler_parameters_clause )*
			loop6:
			while (true) {
				int alt6=2;
				int LA6_0 = input.LA(1);
				if ( (LA6_0==REGULAR_ID) ) {
					int LA6_1 = input.LA(2);
					if ( (LA6_1==EQUALS_OP) ) {
						alt6=1;
					}

				}
				else if ( (LA6_0==DELIMITED_ID||LA6_0==INTRODUCER) ) {
					alt6=1;
				}

				switch (alt6) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:222:32: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_function1302);
					compiler_parameters_clause33=compiler_parameters_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause33.getTree());
					}
					break;

				default :
					break loop6;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:223:9: ( reuse_key settings_key )?
			int alt7=2;
			int LA7_0 = input.LA(1);
			if ( (LA7_0==REGULAR_ID) ) {
				alt7=1;
			}
			switch (alt7) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:223:10: reuse_key settings_key
					{
					pushFollow(FOLLOW_reuse_key_in_alter_function1314);
					reuse_key34=reuse_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key34.getTree());
					pushFollow(FOLLOW_settings_key_in_alter_function1316);
					settings_key35=settings_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_settings_key.add(settings_key35.getTree());
					}
					break;

			}

			SEMICOLON36=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_function1328); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON36);

			// AST REWRITE
			// elements: function_name, debug_key, reuse_key, compiler_parameters_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 225:9: -> ^( ALTER_FUNCTION[$alter_key.start] function_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:225:12: ^( ALTER_FUNCTION[$alter_key.start] function_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_FUNCTION, (alter_key28!=null?(alter_key28.start):null)), root_1);
				adaptor.addChild(root_1, stream_function_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:225:61: ( debug_key )?
				if ( stream_debug_key.hasNext() ) {
					adaptor.addChild(root_1, stream_debug_key.nextTree());
				}
				stream_debug_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:225:72: ( reuse_key )?
				if ( stream_reuse_key.hasNext() ) {
					adaptor.addChild(root_1, stream_reuse_key.nextTree());
				}
				stream_reuse_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:225:83: ( compiler_parameters_clause )*
				while ( stream_compiler_parameters_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());
				}
				stream_compiler_parameters_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_function"


	public static class create_function_body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_function_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:228:1: create_function_body : ( create_key ( or_key replace_key )? )? function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec ( invoker_rights_clause | parallel_enable_clause | result_cache_clause | deterministic_key )* ( ( ( pipelined_key )? ( is_key | as_key ) ( block | call_spec ) ) | ( pipelined_key | aggregate_key ) using_key implementation_type_name ) SEMICOLON -> {mode == 1}? ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( USING_MODE ( aggregate_key )? implementation_type_name ) ) -> {mode == 2}? ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( CALL_MODE call_spec ) ) -> ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( BODY_MODE block ) ) ;
	public final PLSQLParser.create_function_body_return create_function_body() throws RecognitionException {
		PLSQLParser.create_function_body_return retval = new PLSQLParser.create_function_body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN42=null;
		Token COMMA44=null;
		Token RIGHT_PAREN46=null;
		Token SEMICOLON62=null;
		ParserRuleReturnScope create_key37 =null;
		ParserRuleReturnScope or_key38 =null;
		ParserRuleReturnScope replace_key39 =null;
		ParserRuleReturnScope function_key40 =null;
		ParserRuleReturnScope function_name41 =null;
		ParserRuleReturnScope parameter43 =null;
		ParserRuleReturnScope parameter45 =null;
		ParserRuleReturnScope return_key47 =null;
		ParserRuleReturnScope type_spec48 =null;
		ParserRuleReturnScope invoker_rights_clause49 =null;
		ParserRuleReturnScope parallel_enable_clause50 =null;
		ParserRuleReturnScope result_cache_clause51 =null;
		ParserRuleReturnScope deterministic_key52 =null;
		ParserRuleReturnScope pipelined_key53 =null;
		ParserRuleReturnScope is_key54 =null;
		ParserRuleReturnScope as_key55 =null;
		ParserRuleReturnScope block56 =null;
		ParserRuleReturnScope call_spec57 =null;
		ParserRuleReturnScope pipelined_key58 =null;
		ParserRuleReturnScope aggregate_key59 =null;
		ParserRuleReturnScope using_key60 =null;
		ParserRuleReturnScope implementation_type_name61 =null;

		Object LEFT_PAREN42_tree=null;
		Object COMMA44_tree=null;
		Object RIGHT_PAREN46_tree=null;
		Object SEMICOLON62_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_pipelined_key=new RewriteRuleSubtreeStream(adaptor,"rule pipelined_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_aggregate_key=new RewriteRuleSubtreeStream(adaptor,"rule aggregate_key");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
		RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
		RewriteRuleSubtreeStream stream_parallel_enable_clause=new RewriteRuleSubtreeStream(adaptor,"rule parallel_enable_clause");
		RewriteRuleSubtreeStream stream_using_key=new RewriteRuleSubtreeStream(adaptor,"rule using_key");
		RewriteRuleSubtreeStream stream_implementation_type_name=new RewriteRuleSubtreeStream(adaptor,"rule implementation_type_name");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_result_cache_clause=new RewriteRuleSubtreeStream(adaptor,"rule result_cache_clause");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
		RewriteRuleSubtreeStream stream_deterministic_key=new RewriteRuleSubtreeStream(adaptor,"rule deterministic_key");
		RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
		RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
		RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
		RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:230:5: ( ( create_key ( or_key replace_key )? )? function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec ( invoker_rights_clause | parallel_enable_clause | result_cache_clause | deterministic_key )* ( ( ( pipelined_key )? ( is_key | as_key ) ( block | call_spec ) ) | ( pipelined_key | aggregate_key ) using_key implementation_type_name ) SEMICOLON -> {mode == 1}? ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( USING_MODE ( aggregate_key )? implementation_type_name ) ) -> {mode == 2}? ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( CALL_MODE call_spec ) ) -> ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( BODY_MODE block ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:230:10: ( create_key ( or_key replace_key )? )? function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec ( invoker_rights_clause | parallel_enable_clause | result_cache_clause | deterministic_key )* ( ( ( pipelined_key )? ( is_key | as_key ) ( block | call_spec ) ) | ( pipelined_key | aggregate_key ) using_key implementation_type_name ) SEMICOLON
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:230:10: ( create_key ( or_key replace_key )? )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==SQL92_RESERVED_CREATE) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:230:11: create_key ( or_key replace_key )?
					{
					pushFollow(FOLLOW_create_key_in_create_function_body1383);
					create_key37=create_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_create_key.add(create_key37.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:230:22: ( or_key replace_key )?
					int alt8=2;
					int LA8_0 = input.LA(1);
					if ( (LA8_0==SQL92_RESERVED_OR) ) {
						alt8=1;
					}
					switch (alt8) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:230:24: or_key replace_key
							{
							pushFollow(FOLLOW_or_key_in_create_function_body1387);
							or_key38=or_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_or_key.add(or_key38.getTree());
							pushFollow(FOLLOW_replace_key_in_create_function_body1389);
							replace_key39=replace_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_replace_key.add(replace_key39.getTree());
							}
							break;

					}

					}
					break;

			}

			pushFollow(FOLLOW_function_key_in_create_function_body1396);
			function_key40=function_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_key.add(function_key40.getTree());
			pushFollow(FOLLOW_function_name_in_create_function_body1398);
			function_name41=function_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_name.add(function_name41.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:231:15: ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==LEFT_PAREN) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:231:17: LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN
					{
					LEFT_PAREN42=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_create_function_body1417); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN42);

					pushFollow(FOLLOW_parameter_in_create_function_body1419);
					parameter43=parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameter.add(parameter43.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:231:38: ( COMMA parameter )*
					loop10:
					while (true) {
						int alt10=2;
						int LA10_0 = input.LA(1);
						if ( (LA10_0==COMMA) ) {
							alt10=1;
						}

						switch (alt10) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:231:39: COMMA parameter
							{
							COMMA44=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_function_body1422); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA44);

							pushFollow(FOLLOW_parameter_in_create_function_body1424);
							parameter45=parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parameter.add(parameter45.getTree());
							}
							break;

						default :
							break loop10;
						}
					}

					RIGHT_PAREN46=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_create_function_body1428); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN46);

					}
					break;

			}

			pushFollow(FOLLOW_return_key_in_create_function_body1440);
			return_key47=return_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_return_key.add(return_key47.getTree());
			pushFollow(FOLLOW_type_spec_in_create_function_body1442);
			type_spec48=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec48.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:233:17: ( invoker_rights_clause | parallel_enable_clause | result_cache_clause | deterministic_key )*
			loop12:
			while (true) {
				int alt12=5;
				int LA12_0 = input.LA(1);
				if ( (LA12_0==REGULAR_ID) ) {
					int LA12_1 = input.LA(2);
					if ( (LA12_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
						alt12=1;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("parallel_enable"))) ) {
						alt12=2;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("result_cache"))) ) {
						alt12=3;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("deterministic"))) ) {
						alt12=4;
					}

				}

				switch (alt12) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:233:18: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_function_body1461);
					invoker_rights_clause49=invoker_rights_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause49.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:233:40: parallel_enable_clause
					{
					pushFollow(FOLLOW_parallel_enable_clause_in_create_function_body1463);
					parallel_enable_clause50=parallel_enable_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parallel_enable_clause.add(parallel_enable_clause50.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:233:63: result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_create_function_body1465);
					result_cache_clause51=result_cache_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_result_cache_clause.add(result_cache_clause51.getTree());
					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:233:83: deterministic_key
					{
					pushFollow(FOLLOW_deterministic_key_in_create_function_body1467);
					deterministic_key52=deterministic_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_deterministic_key.add(deterministic_key52.getTree());
					}
					break;

				default :
					break loop12;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:234:9: ( ( ( pipelined_key )? ( is_key | as_key ) ( block | call_spec ) ) | ( pipelined_key | aggregate_key ) using_key implementation_type_name )
			int alt17=2;
			int LA17_0 = input.LA(1);
			if ( (LA17_0==REGULAR_ID) ) {
				int LA17_1 = input.LA(2);
				if ( (LA17_1==SQL92_RESERVED_AS||LA17_1==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("pipelined")))) {
					alt17=1;
				}
				else if ( (LA17_1==PLSQL_NON_RESERVED_USING) ) {
					alt17=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 17, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA17_0==SQL92_RESERVED_AS||LA17_0==SQL92_RESERVED_IS) ) {
				alt17=1;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 17, 0, input);
				throw nvae;
			}

			switch (alt17) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:235:13: ( ( pipelined_key )? ( is_key | as_key ) ( block | call_spec ) )
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:235:13: ( ( pipelined_key )? ( is_key | as_key ) ( block | call_spec ) )
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:235:18: ( pipelined_key )? ( is_key | as_key ) ( block | call_spec )
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:235:18: ( pipelined_key )?
					int alt13=2;
					int LA13_0 = input.LA(1);
					if ( (LA13_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("pipelined")))) {
						alt13=1;
					}
					switch (alt13) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:235:18: pipelined_key
							{
							pushFollow(FOLLOW_pipelined_key_in_create_function_body1498);
							pipelined_key53=pipelined_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pipelined_key.add(pipelined_key53.getTree());
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:235:33: ( is_key | as_key )
					int alt14=2;
					int LA14_0 = input.LA(1);
					if ( (LA14_0==SQL92_RESERVED_IS) ) {
						alt14=1;
					}
					else if ( (LA14_0==SQL92_RESERVED_AS) ) {
						alt14=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 14, 0, input);
						throw nvae;
					}

					switch (alt14) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:235:35: is_key
							{
							pushFollow(FOLLOW_is_key_in_create_function_body1503);
							is_key54=is_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_is_key.add(is_key54.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:235:44: as_key
							{
							pushFollow(FOLLOW_as_key_in_create_function_body1507);
							as_key55=as_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_as_key.add(as_key55.getTree());
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:236:23: ( block | call_spec )
					int alt15=2;
					int LA15_0 = input.LA(1);
					if ( (LA15_0==BINDVAR||LA15_0==COLON||LA15_0==DELIMITED_ID||LA15_0==INTRODUCER||LA15_0==SQL92_RESERVED_BEGIN||LA15_0==SQL92_RESERVED_CREATE||LA15_0==SQL92_RESERVED_CURSOR||LA15_0==SQL92_RESERVED_DECLARE||LA15_0==SQL92_RESERVED_PROCEDURE) ) {
						alt15=1;
					}
					else if ( (LA15_0==REGULAR_ID) ) {
						int LA15_3 = input.LA(2);
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("language"))))) ) {
							alt15=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
							alt15=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 15, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 15, 0, input);
						throw nvae;
					}

					switch (alt15) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:236:28: block
							{
							pushFollow(FOLLOW_block_in_create_function_body1538);
							block56=block();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_block.add(block56.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:237:28: call_spec
							{
							pushFollow(FOLLOW_call_spec_in_create_function_body1568);
							call_spec57=call_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_call_spec.add(call_spec57.getTree());
							if ( state.backtracking==0 ) {mode = 2;}
							}
							break;

					}

					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:239:14: ( pipelined_key | aggregate_key ) using_key implementation_type_name
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:239:14: ( pipelined_key | aggregate_key )
					int alt16=2;
					int LA16_0 = input.LA(1);
					if ( (LA16_0==REGULAR_ID) ) {
						int LA16_1 = input.LA(2);
						if ( ((input.LT(1).getText().equalsIgnoreCase("pipelined"))) ) {
							alt16=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("aggregate"))) ) {
							alt16=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 16, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 16, 0, input);
						throw nvae;
					}

					switch (alt16) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:239:15: pipelined_key
							{
							pushFollow(FOLLOW_pipelined_key_in_create_function_body1601);
							pipelined_key58=pipelined_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_pipelined_key.add(pipelined_key58.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:239:29: aggregate_key
							{
							pushFollow(FOLLOW_aggregate_key_in_create_function_body1603);
							aggregate_key59=aggregate_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_aggregate_key.add(aggregate_key59.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_using_key_in_create_function_body1606);
					using_key60=using_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_using_key.add(using_key60.getTree());
					pushFollow(FOLLOW_implementation_type_name_in_create_function_body1608);
					implementation_type_name61=implementation_type_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_implementation_type_name.add(implementation_type_name61.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			SEMICOLON62=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_function_body1636); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON62);

			// AST REWRITE
			// elements: create_key, aggregate_key, parameter, pipelined_key, pipelined_key, function_name, parallel_enable_clause, function_name, call_spec, pipelined_key, parameter, result_cache_clause, replace_key, parallel_enable_clause, result_cache_clause, create_key, parameter, type_spec, deterministic_key, create_key, function_name, parallel_enable_clause, invoker_rights_clause, replace_key, result_cache_clause, invoker_rights_clause, replace_key, type_spec, type_spec, deterministic_key, deterministic_key, invoker_rights_clause, implementation_type_name, block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 242:9: -> {mode == 1}? ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( USING_MODE ( aggregate_key )? implementation_type_name ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:243:13: ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( USING_MODE ( aggregate_key )? implementation_type_name ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_FUNCTION, (function_key40!=null?(function_key40.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:243:52: ( create_key )?
				if ( stream_create_key.hasNext() ) {
					adaptor.addChild(root_1, stream_create_key.nextTree());
				}
				stream_create_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:243:64: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_function_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:243:101: ^( PARAMETERS ( parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:243:114: ( parameter )*
				while ( stream_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter.nextTree());
				}
				stream_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:244:17: ( invoker_rights_clause )*
				while ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:244:40: ( parallel_enable_clause )*
				while ( stream_parallel_enable_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_parallel_enable_clause.nextTree());
				}
				stream_parallel_enable_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:244:64: ( result_cache_clause )*
				while ( stream_result_cache_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_result_cache_clause.nextTree());
				}
				stream_result_cache_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:244:85: ( deterministic_key )*
				while ( stream_deterministic_key.hasNext() ) {
					adaptor.addChild(root_1, stream_deterministic_key.nextTree());
				}
				stream_deterministic_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:244:104: ( pipelined_key )?
				if ( stream_pipelined_key.hasNext() ) {
					adaptor.addChild(root_1, stream_pipelined_key.nextTree());
				}
				stream_pipelined_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:245:17: ^( USING_MODE ( aggregate_key )? implementation_type_name )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(USING_MODE, "USING_MODE"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:245:30: ( aggregate_key )?
				if ( stream_aggregate_key.hasNext() ) {
					adaptor.addChild(root_2, stream_aggregate_key.nextTree());
				}
				stream_aggregate_key.reset();

				adaptor.addChild(root_2, stream_implementation_type_name.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 246:9: -> {mode == 2}? ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( CALL_MODE call_spec ) )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:247:13: ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( CALL_MODE call_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_FUNCTION, (function_key40!=null?(function_key40.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:247:52: ( create_key )?
				if ( stream_create_key.hasNext() ) {
					adaptor.addChild(root_1, stream_create_key.nextTree());
				}
				stream_create_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:247:64: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_function_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:247:101: ^( PARAMETERS ( parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:247:114: ( parameter )*
				while ( stream_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter.nextTree());
				}
				stream_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:248:17: ( invoker_rights_clause )*
				while ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:248:40: ( parallel_enable_clause )*
				while ( stream_parallel_enable_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_parallel_enable_clause.nextTree());
				}
				stream_parallel_enable_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:248:64: ( result_cache_clause )*
				while ( stream_result_cache_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_result_cache_clause.nextTree());
				}
				stream_result_cache_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:248:85: ( deterministic_key )*
				while ( stream_deterministic_key.hasNext() ) {
					adaptor.addChild(root_1, stream_deterministic_key.nextTree());
				}
				stream_deterministic_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:248:104: ( pipelined_key )?
				if ( stream_pipelined_key.hasNext() ) {
					adaptor.addChild(root_1, stream_pipelined_key.nextTree());
				}
				stream_pipelined_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:249:17: ^( CALL_MODE call_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(CALL_MODE, "CALL_MODE"), root_2);
				adaptor.addChild(root_2, stream_call_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 250:9: -> ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( BODY_MODE block ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:250:15: ^( CREATE_FUNCTION[$function_key.start] ( create_key )? ( replace_key )? function_name type_spec ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )* ( parallel_enable_clause )* ( result_cache_clause )* ( deterministic_key )* ( pipelined_key )? ^( BODY_MODE block ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_FUNCTION, (function_key40!=null?(function_key40.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:250:54: ( create_key )?
				if ( stream_create_key.hasNext() ) {
					adaptor.addChild(root_1, stream_create_key.nextTree());
				}
				stream_create_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:250:66: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_function_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:250:103: ^( PARAMETERS ( parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:250:116: ( parameter )*
				while ( stream_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter.nextTree());
				}
				stream_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:251:17: ( invoker_rights_clause )*
				while ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:251:40: ( parallel_enable_clause )*
				while ( stream_parallel_enable_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_parallel_enable_clause.nextTree());
				}
				stream_parallel_enable_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:251:64: ( result_cache_clause )*
				while ( stream_result_cache_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_result_cache_clause.nextTree());
				}
				stream_result_cache_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:251:85: ( deterministic_key )*
				while ( stream_deterministic_key.hasNext() ) {
					adaptor.addChild(root_1, stream_deterministic_key.nextTree());
				}
				stream_deterministic_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:251:104: ( pipelined_key )?
				if ( stream_pipelined_key.hasNext() ) {
					adaptor.addChild(root_1, stream_pipelined_key.nextTree());
				}
				stream_pipelined_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:252:17: ^( BODY_MODE block )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BODY_MODE, "BODY_MODE"), root_2);
				adaptor.addChild(root_2, stream_block.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_function_body"


	public static class parallel_enable_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parallel_enable_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:257:1: parallel_enable_clause : parallel_enable_key ^ ( partition_by_clause )? ;
	public final PLSQLParser.parallel_enable_clause_return parallel_enable_clause() throws RecognitionException {
		PLSQLParser.parallel_enable_clause_return retval = new PLSQLParser.parallel_enable_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope parallel_enable_key63 =null;
		ParserRuleReturnScope partition_by_clause64 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:258:5: ( parallel_enable_key ^ ( partition_by_clause )? )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:258:10: parallel_enable_key ^ ( partition_by_clause )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_parallel_enable_key_in_parallel_enable_clause1951);
			parallel_enable_key63=parallel_enable_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(parallel_enable_key63.getTree(), root_0);
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:258:31: ( partition_by_clause )?
			int alt18=2;
			int LA18_0 = input.LA(1);
			if ( (LA18_0==LEFT_PAREN) ) {
				alt18=1;
			}
			switch (alt18) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:258:31: partition_by_clause
					{
					pushFollow(FOLLOW_partition_by_clause_in_parallel_enable_clause1954);
					partition_by_clause64=partition_by_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partition_by_clause64.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parallel_enable_clause"


	public static class partition_by_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "partition_by_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:261:1: partition_by_clause : LEFT_PAREN partition_key expression by_key ( any_key | ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( streaming_clause )? RIGHT_PAREN -> {mode == 1}? ^( partition_key ^( EXPR expression ) any_key ( streaming_clause )? ) -> {mode == 2}? ^( partition_key ^( EXPR expression ) ^( hash_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? ) -> ^( partition_key ^( EXPR expression ) ^( range_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? ) ;
	public final PLSQLParser.partition_by_clause_return partition_by_clause() throws RecognitionException {
		PLSQLParser.partition_by_clause_return retval = new PLSQLParser.partition_by_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN65=null;
		Token LEFT_PAREN72=null;
		Token COMMA74=null;
		Token RIGHT_PAREN76=null;
		Token RIGHT_PAREN78=null;
		ParserRuleReturnScope partition_key66 =null;
		ParserRuleReturnScope expression67 =null;
		ParserRuleReturnScope by_key68 =null;
		ParserRuleReturnScope any_key69 =null;
		ParserRuleReturnScope hash_key70 =null;
		ParserRuleReturnScope range_key71 =null;
		ParserRuleReturnScope column_name73 =null;
		ParserRuleReturnScope column_name75 =null;
		ParserRuleReturnScope streaming_clause77 =null;

		Object LEFT_PAREN65_tree=null;
		Object LEFT_PAREN72_tree=null;
		Object COMMA74_tree=null;
		Object RIGHT_PAREN76_tree=null;
		Object RIGHT_PAREN78_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_partition_key=new RewriteRuleSubtreeStream(adaptor,"rule partition_key");
		RewriteRuleSubtreeStream stream_hash_key=new RewriteRuleSubtreeStream(adaptor,"rule hash_key");
		RewriteRuleSubtreeStream stream_range_key=new RewriteRuleSubtreeStream(adaptor,"rule range_key");
		RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
		RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		RewriteRuleSubtreeStream stream_any_key=new RewriteRuleSubtreeStream(adaptor,"rule any_key");
		RewriteRuleSubtreeStream stream_streaming_clause=new RewriteRuleSubtreeStream(adaptor,"rule streaming_clause");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:263:5: ( LEFT_PAREN partition_key expression by_key ( any_key | ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( streaming_clause )? RIGHT_PAREN -> {mode == 1}? ^( partition_key ^( EXPR expression ) any_key ( streaming_clause )? ) -> {mode == 2}? ^( partition_key ^( EXPR expression ) ^( hash_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? ) -> ^( partition_key ^( EXPR expression ) ^( range_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:263:10: LEFT_PAREN partition_key expression by_key ( any_key | ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN ) ( streaming_clause )? RIGHT_PAREN
			{
			LEFT_PAREN65=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_partition_by_clause1983); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN65);

			pushFollow(FOLLOW_partition_key_in_partition_by_clause1997);
			partition_key66=partition_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_partition_key.add(partition_key66.getTree());
			pushFollow(FOLLOW_expression_in_partition_by_clause1999);
			expression67=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression67.getTree());
			pushFollow(FOLLOW_by_key_in_partition_by_clause2001);
			by_key68=by_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_by_key.add(by_key68.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:265:13: ( any_key | ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN )
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==SQL92_RESERVED_ANY) ) {
				alt21=1;
			}
			else if ( (LA21_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hash"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
				alt21=2;
			}

			switch (alt21) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:265:18: any_key
					{
					pushFollow(FOLLOW_any_key_in_partition_by_clause2021);
					any_key69=any_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_any_key.add(any_key69.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:266:18: ( hash_key | range_key ) LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:266:18: ( hash_key | range_key )
					int alt19=2;
					int LA19_0 = input.LA(1);
					if ( (LA19_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("hash"))||(input.LT(1).getText().equalsIgnoreCase("range"))))) {
						int LA19_1 = input.LA(2);
						if ( ((input.LT(1).getText().equalsIgnoreCase("hash"))) ) {
							alt19=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("range"))) ) {
							alt19=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 19, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					switch (alt19) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:266:19: hash_key
							{
							pushFollow(FOLLOW_hash_key_in_partition_by_clause2043);
							hash_key70=hash_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_hash_key.add(hash_key70.getTree());
							if ( state.backtracking==0 ) {mode = 2;}
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:266:40: range_key
							{
							pushFollow(FOLLOW_range_key_in_partition_by_clause2047);
							range_key71=range_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_range_key.add(range_key71.getTree());
							}
							break;

					}

					LEFT_PAREN72=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_partition_by_clause2050); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN72);

					pushFollow(FOLLOW_column_name_in_partition_by_clause2052);
					column_name73=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_column_name.add(column_name73.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:266:74: ( COMMA column_name )*
					loop20:
					while (true) {
						int alt20=2;
						int LA20_0 = input.LA(1);
						if ( (LA20_0==COMMA) ) {
							alt20=1;
						}

						switch (alt20) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:266:75: COMMA column_name
							{
							COMMA74=(Token)match(input,COMMA,FOLLOW_COMMA_in_partition_by_clause2055); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA74);

							pushFollow(FOLLOW_column_name_in_partition_by_clause2057);
							column_name75=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_column_name.add(column_name75.getTree());
							}
							break;

						default :
							break loop20;
						}
					}

					RIGHT_PAREN76=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_partition_by_clause2061); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN76);

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:268:13: ( streaming_clause )?
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==SQL92_RESERVED_ORDER) ) {
				alt22=1;
			}
			else if ( (LA22_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cluster")))) {
				alt22=1;
			}
			switch (alt22) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:268:13: streaming_clause
					{
					pushFollow(FOLLOW_streaming_clause_in_partition_by_clause2089);
					streaming_clause77=streaming_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_streaming_clause.add(streaming_clause77.getTree());
					}
					break;

			}

			RIGHT_PAREN78=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_partition_by_clause2100); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN78);

			// AST REWRITE
			// elements: partition_key, expression, streaming_clause, hash_key, range_key, partition_key, streaming_clause, any_key, column_name, partition_key, column_name, expression, expression, streaming_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 270:9: -> {mode == 1}? ^( partition_key ^( EXPR expression ) any_key ( streaming_clause )? )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:271:13: ^( partition_key ^( EXPR expression ) any_key ( streaming_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_partition_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:271:29: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_any_key.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:271:56: ( streaming_clause )?
				if ( stream_streaming_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_streaming_clause.nextTree());
				}
				stream_streaming_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 272:9: -> {mode == 2}? ^( partition_key ^( EXPR expression ) ^( hash_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:273:13: ^( partition_key ^( EXPR expression ) ^( hash_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_partition_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:273:29: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:273:48: ^( hash_key ^( COLUMNS ( column_name )+ ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_hash_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:273:59: ^( COLUMNS ( column_name )+ )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(COLUMNS, "COLUMNS"), root_3);
				if ( !(stream_column_name.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_column_name.hasNext() ) {
					adaptor.addChild(root_3, stream_column_name.nextTree());
				}
				stream_column_name.reset();

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:273:84: ( streaming_clause )?
				if ( stream_streaming_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_streaming_clause.nextTree());
				}
				stream_streaming_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 274:9: -> ^( partition_key ^( EXPR expression ) ^( range_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:275:13: ^( partition_key ^( EXPR expression ) ^( range_key ^( COLUMNS ( column_name )+ ) ) ( streaming_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_partition_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:275:29: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:275:48: ^( range_key ^( COLUMNS ( column_name )+ ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_range_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:275:60: ^( COLUMNS ( column_name )+ )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(COLUMNS, "COLUMNS"), root_3);
				if ( !(stream_column_name.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_column_name.hasNext() ) {
					adaptor.addChild(root_3, stream_column_name.nextTree());
				}
				stream_column_name.reset();

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:275:85: ( streaming_clause )?
				if ( stream_streaming_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_streaming_clause.nextTree());
				}
				stream_streaming_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partition_by_clause"


	public static class result_cache_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "result_cache_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:278:1: result_cache_clause : result_cache_key ( relies_on_part )? -> ^( result_cache_key ( relies_on_part )? ) ;
	public final PLSQLParser.result_cache_clause_return result_cache_clause() throws RecognitionException {
		PLSQLParser.result_cache_clause_return retval = new PLSQLParser.result_cache_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope result_cache_key79 =null;
		ParserRuleReturnScope relies_on_part80 =null;

		RewriteRuleSubtreeStream stream_relies_on_part=new RewriteRuleSubtreeStream(adaptor,"rule relies_on_part");
		RewriteRuleSubtreeStream stream_result_cache_key=new RewriteRuleSubtreeStream(adaptor,"rule result_cache_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:279:5: ( result_cache_key ( relies_on_part )? -> ^( result_cache_key ( relies_on_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:279:10: result_cache_key ( relies_on_part )?
			{
			pushFollow(FOLLOW_result_cache_key_in_result_cache_clause2252);
			result_cache_key79=result_cache_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_result_cache_key.add(result_cache_key79.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:279:27: ( relies_on_part )?
			int alt23=2;
			int LA23_0 = input.LA(1);
			if ( (LA23_0==REGULAR_ID) ) {
				int LA23_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("relies_on"))) ) {
					alt23=1;
				}
			}
			switch (alt23) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:279:27: relies_on_part
					{
					pushFollow(FOLLOW_relies_on_part_in_result_cache_clause2254);
					relies_on_part80=relies_on_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_relies_on_part.add(relies_on_part80.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: relies_on_part, result_cache_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 280:9: -> ^( result_cache_key ( relies_on_part )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:280:12: ^( result_cache_key ( relies_on_part )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_result_cache_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:280:31: ( relies_on_part )?
				if ( stream_relies_on_part.hasNext() ) {
					adaptor.addChild(root_1, stream_relies_on_part.nextTree());
				}
				stream_relies_on_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "result_cache_clause"


	public static class relies_on_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "relies_on_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:283:1: relies_on_part : relies_on_key ^ LEFT_PAREN ! tableview_name ( COMMA ! tableview_name )* RIGHT_PAREN !;
	public final PLSQLParser.relies_on_part_return relies_on_part() throws RecognitionException {
		PLSQLParser.relies_on_part_return retval = new PLSQLParser.relies_on_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN82=null;
		Token COMMA84=null;
		Token RIGHT_PAREN86=null;
		ParserRuleReturnScope relies_on_key81 =null;
		ParserRuleReturnScope tableview_name83 =null;
		ParserRuleReturnScope tableview_name85 =null;

		Object LEFT_PAREN82_tree=null;
		Object COMMA84_tree=null;
		Object RIGHT_PAREN86_tree=null;

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:284:5: ( relies_on_key ^ LEFT_PAREN ! tableview_name ( COMMA ! tableview_name )* RIGHT_PAREN !)
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:284:10: relies_on_key ^ LEFT_PAREN ! tableview_name ( COMMA ! tableview_name )* RIGHT_PAREN !
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_relies_on_key_in_relies_on_part2292);
			relies_on_key81=relies_on_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(relies_on_key81.getTree(), root_0);
			LEFT_PAREN82=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_relies_on_part2295); if (state.failed) return retval;
			pushFollow(FOLLOW_tableview_name_in_relies_on_part2298);
			tableview_name83=tableview_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tableview_name83.getTree());

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:284:52: ( COMMA ! tableview_name )*
			loop24:
			while (true) {
				int alt24=2;
				int LA24_0 = input.LA(1);
				if ( (LA24_0==COMMA) ) {
					alt24=1;
				}

				switch (alt24) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:284:53: COMMA ! tableview_name
					{
					COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_relies_on_part2301); if (state.failed) return retval;
					pushFollow(FOLLOW_tableview_name_in_relies_on_part2304);
					tableview_name85=tableview_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableview_name85.getTree());

					}
					break;

				default :
					break loop24;
				}
			}

			RIGHT_PAREN86=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_relies_on_part2308); if (state.failed) return retval;
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relies_on_part"


	public static class streaming_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "streaming_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:287:1: streaming_clause : ( order_key | cluster_key ) expression by_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN -> ^( STREAMING_CLAUSE ( order_key )? ( cluster_key )? ^( EXPR expression ) ^( COLUMNS ( column_name )+ ) ) ;
	public final PLSQLParser.streaming_clause_return streaming_clause() throws RecognitionException {
		PLSQLParser.streaming_clause_return retval = new PLSQLParser.streaming_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN91=null;
		Token COMMA93=null;
		Token RIGHT_PAREN95=null;
		ParserRuleReturnScope order_key87 =null;
		ParserRuleReturnScope cluster_key88 =null;
		ParserRuleReturnScope expression89 =null;
		ParserRuleReturnScope by_key90 =null;
		ParserRuleReturnScope column_name92 =null;
		ParserRuleReturnScope column_name94 =null;

		Object LEFT_PAREN91_tree=null;
		Object COMMA93_tree=null;
		Object RIGHT_PAREN95_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_cluster_key=new RewriteRuleSubtreeStream(adaptor,"rule cluster_key");
		RewriteRuleSubtreeStream stream_order_key=new RewriteRuleSubtreeStream(adaptor,"rule order_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");
		RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:288:5: ( ( order_key | cluster_key ) expression by_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN -> ^( STREAMING_CLAUSE ( order_key )? ( cluster_key )? ^( EXPR expression ) ^( COLUMNS ( column_name )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:288:10: ( order_key | cluster_key ) expression by_key LEFT_PAREN column_name ( COMMA column_name )* RIGHT_PAREN
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:288:10: ( order_key | cluster_key )
			int alt25=2;
			int LA25_0 = input.LA(1);
			if ( (LA25_0==SQL92_RESERVED_ORDER) ) {
				alt25=1;
			}
			else if ( (LA25_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("cluster")))) {
				alt25=2;
			}

			switch (alt25) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:288:11: order_key
					{
					pushFollow(FOLLOW_order_key_in_streaming_clause2330);
					order_key87=order_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_order_key.add(order_key87.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:288:21: cluster_key
					{
					pushFollow(FOLLOW_cluster_key_in_streaming_clause2332);
					cluster_key88=cluster_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_cluster_key.add(cluster_key88.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_streaming_clause2335);
			expression89=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression89.getTree());
			pushFollow(FOLLOW_by_key_in_streaming_clause2337);
			by_key90=by_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_by_key.add(by_key90.getTree());
			LEFT_PAREN91=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_streaming_clause2348); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN91);

			pushFollow(FOLLOW_column_name_in_streaming_clause2350);
			column_name92=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_column_name.add(column_name92.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:289:32: ( COMMA column_name )*
			loop26:
			while (true) {
				int alt26=2;
				int LA26_0 = input.LA(1);
				if ( (LA26_0==COMMA) ) {
					alt26=1;
				}

				switch (alt26) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:289:33: COMMA column_name
					{
					COMMA93=(Token)match(input,COMMA,FOLLOW_COMMA_in_streaming_clause2353); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA93);

					pushFollow(FOLLOW_column_name_in_streaming_clause2355);
					column_name94=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_column_name.add(column_name94.getTree());
					}
					break;

				default :
					break loop26;
				}
			}

			RIGHT_PAREN95=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_streaming_clause2359); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN95);

			// AST REWRITE
			// elements: column_name, expression, cluster_key, order_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 290:9: -> ^( STREAMING_CLAUSE ( order_key )? ( cluster_key )? ^( EXPR expression ) ^( COLUMNS ( column_name )+ ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:290:12: ^( STREAMING_CLAUSE ( order_key )? ( cluster_key )? ^( EXPR expression ) ^( COLUMNS ( column_name )+ ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STREAMING_CLAUSE, "STREAMING_CLAUSE"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:290:31: ( order_key )?
				if ( stream_order_key.hasNext() ) {
					adaptor.addChild(root_1, stream_order_key.nextTree());
				}
				stream_order_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:290:42: ( cluster_key )?
				if ( stream_cluster_key.hasNext() ) {
					adaptor.addChild(root_1, stream_cluster_key.nextTree());
				}
				stream_cluster_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:290:55: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:290:74: ^( COLUMNS ( column_name )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(COLUMNS, "COLUMNS"), root_2);
				if ( !(stream_column_name.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_column_name.hasNext() ) {
					adaptor.addChild(root_2, stream_column_name.nextTree());
				}
				stream_column_name.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "streaming_clause"


	public static class drop_package_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_package"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:297:1: drop_package : drop_key package_key ( body_key )? package_name SEMICOLON -> ^( DROP_PACKAGE[$drop_key.start] package_name ( body_key )? ) ;
	public final PLSQLParser.drop_package_return drop_package() throws RecognitionException {
		PLSQLParser.drop_package_return retval = new PLSQLParser.drop_package_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON100=null;
		ParserRuleReturnScope drop_key96 =null;
		ParserRuleReturnScope package_key97 =null;
		ParserRuleReturnScope body_key98 =null;
		ParserRuleReturnScope package_name99 =null;

		Object SEMICOLON100_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
		RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
		RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
		RewriteRuleSubtreeStream stream_package_name=new RewriteRuleSubtreeStream(adaptor,"rule package_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:298:5: ( drop_key package_key ( body_key )? package_name SEMICOLON -> ^( DROP_PACKAGE[$drop_key.start] package_name ( body_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:298:10: drop_key package_key ( body_key )? package_name SEMICOLON
			{
			pushFollow(FOLLOW_drop_key_in_drop_package2417);
			drop_key96=drop_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_drop_key.add(drop_key96.getTree());
			pushFollow(FOLLOW_package_key_in_drop_package2419);
			package_key97=package_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_package_key.add(package_key97.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:298:31: ( body_key )?
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==REGULAR_ID) ) {
				int LA27_1 = input.LA(2);
				if ( (LA27_1==DELIMITED_ID||LA27_1==INTRODUCER||LA27_1==REGULAR_ID) ) {
					alt27=1;
				}
			}
			switch (alt27) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:298:31: body_key
					{
					pushFollow(FOLLOW_body_key_in_drop_package2421);
					body_key98=body_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_body_key.add(body_key98.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_package_name_in_drop_package2424);
			package_name99=package_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_package_name.add(package_name99.getTree());
			SEMICOLON100=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_package2434); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON100);

			// AST REWRITE
			// elements: package_name, body_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 300:9: -> ^( DROP_PACKAGE[$drop_key.start] package_name ( body_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:300:12: ^( DROP_PACKAGE[$drop_key.start] package_name ( body_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DROP_PACKAGE, (drop_key96!=null?(drop_key96.start):null)), root_1);
				adaptor.addChild(root_1, stream_package_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:300:57: ( body_key )?
				if ( stream_body_key.hasNext() ) {
					adaptor.addChild(root_1, stream_body_key.nextTree());
				}
				stream_body_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_package"


	public static class alter_package_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_package"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:303:1: alter_package : alter_key package_key package_name compile_key ( debug_key )? ( package_key | body_key | specification_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_PACKAGE[$alter_key.start] package_name ( debug_key )? ( reuse_key )? ( package_key )? ( body_key )? ( specification_key )? ( compiler_parameters_clause )* ) ;
	public final PLSQLParser.alter_package_return alter_package() throws RecognitionException {
		PLSQLParser.alter_package_return retval = new PLSQLParser.alter_package_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON112=null;
		ParserRuleReturnScope alter_key101 =null;
		ParserRuleReturnScope package_key102 =null;
		ParserRuleReturnScope package_name103 =null;
		ParserRuleReturnScope compile_key104 =null;
		ParserRuleReturnScope debug_key105 =null;
		ParserRuleReturnScope package_key106 =null;
		ParserRuleReturnScope body_key107 =null;
		ParserRuleReturnScope specification_key108 =null;
		ParserRuleReturnScope compiler_parameters_clause109 =null;
		ParserRuleReturnScope reuse_key110 =null;
		ParserRuleReturnScope settings_key111 =null;

		Object SEMICOLON112_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
		RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
		RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
		RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
		RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
		RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
		RewriteRuleSubtreeStream stream_package_name=new RewriteRuleSubtreeStream(adaptor,"rule package_name");
		RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
		RewriteRuleSubtreeStream stream_specification_key=new RewriteRuleSubtreeStream(adaptor,"rule specification_key");
		RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:304:5: ( alter_key package_key package_name compile_key ( debug_key )? ( package_key | body_key | specification_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_PACKAGE[$alter_key.start] package_name ( debug_key )? ( reuse_key )? ( package_key )? ( body_key )? ( specification_key )? ( compiler_parameters_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:304:10: alter_key package_key package_name compile_key ( debug_key )? ( package_key | body_key | specification_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON
			{
			pushFollow(FOLLOW_alter_key_in_alter_package2474);
			alter_key101=alter_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_alter_key.add(alter_key101.getTree());
			pushFollow(FOLLOW_package_key_in_alter_package2476);
			package_key102=package_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_package_key.add(package_key102.getTree());
			pushFollow(FOLLOW_package_name_in_alter_package2478);
			package_name103=package_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_package_name.add(package_name103.getTree());
			pushFollow(FOLLOW_compile_key_in_alter_package2488);
			compile_key104=compile_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_compile_key.add(compile_key104.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:305:21: ( debug_key )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==REGULAR_ID) ) {
				int LA28_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("debug"))) ) {
					alt28=1;
				}
			}
			switch (alt28) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:305:21: debug_key
					{
					pushFollow(FOLLOW_debug_key_in_alter_package2490);
					debug_key105=debug_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_debug_key.add(debug_key105.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:305:32: ( package_key | body_key | specification_key )?
			int alt29=4;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==REGULAR_ID) ) {
				int LA29_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("package"))) ) {
					alt29=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("body"))) ) {
					alt29=2;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("specification"))) ) {
					alt29=3;
				}
			}
			switch (alt29) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:305:33: package_key
					{
					pushFollow(FOLLOW_package_key_in_alter_package2494);
					package_key106=package_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_package_key.add(package_key106.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:305:45: body_key
					{
					pushFollow(FOLLOW_body_key_in_alter_package2496);
					body_key107=body_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_body_key.add(body_key107.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:305:54: specification_key
					{
					pushFollow(FOLLOW_specification_key_in_alter_package2498);
					specification_key108=specification_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_specification_key.add(specification_key108.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:306:9: ( compiler_parameters_clause )*
			loop30:
			while (true) {
				int alt30=2;
				int LA30_0 = input.LA(1);
				if ( (LA30_0==REGULAR_ID) ) {
					int LA30_1 = input.LA(2);
					if ( (LA30_1==EQUALS_OP) ) {
						alt30=1;
					}

				}
				else if ( (LA30_0==DELIMITED_ID||LA30_0==INTRODUCER) ) {
					alt30=1;
				}

				switch (alt30) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:306:9: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_package2510);
					compiler_parameters_clause109=compiler_parameters_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause109.getTree());
					}
					break;

				default :
					break loop30;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:307:9: ( reuse_key settings_key )?
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==REGULAR_ID) ) {
				alt31=1;
			}
			switch (alt31) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:307:10: reuse_key settings_key
					{
					pushFollow(FOLLOW_reuse_key_in_alter_package2522);
					reuse_key110=reuse_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key110.getTree());
					pushFollow(FOLLOW_settings_key_in_alter_package2524);
					settings_key111=settings_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_settings_key.add(settings_key111.getTree());
					}
					break;

			}

			SEMICOLON112=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_package2536); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON112);

			// AST REWRITE
			// elements: body_key, reuse_key, package_key, debug_key, specification_key, compiler_parameters_clause, package_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 309:9: -> ^( ALTER_PACKAGE[$alter_key.start] package_name ( debug_key )? ( reuse_key )? ( package_key )? ( body_key )? ( specification_key )? ( compiler_parameters_clause )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:309:12: ^( ALTER_PACKAGE[$alter_key.start] package_name ( debug_key )? ( reuse_key )? ( package_key )? ( body_key )? ( specification_key )? ( compiler_parameters_clause )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_PACKAGE, (alter_key101!=null?(alter_key101.start):null)), root_1);
				adaptor.addChild(root_1, stream_package_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:309:59: ( debug_key )?
				if ( stream_debug_key.hasNext() ) {
					adaptor.addChild(root_1, stream_debug_key.nextTree());
				}
				stream_debug_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:309:70: ( reuse_key )?
				if ( stream_reuse_key.hasNext() ) {
					adaptor.addChild(root_1, stream_reuse_key.nextTree());
				}
				stream_reuse_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:310:17: ( package_key )?
				if ( stream_package_key.hasNext() ) {
					adaptor.addChild(root_1, stream_package_key.nextTree());
				}
				stream_package_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:310:30: ( body_key )?
				if ( stream_body_key.hasNext() ) {
					adaptor.addChild(root_1, stream_body_key.nextTree());
				}
				stream_body_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:310:40: ( specification_key )?
				if ( stream_specification_key.hasNext() ) {
					adaptor.addChild(root_1, stream_specification_key.nextTree());
				}
				stream_specification_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:310:59: ( compiler_parameters_clause )*
				while ( stream_compiler_parameters_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());
				}
				stream_compiler_parameters_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_package"


	public static class create_package_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_package"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:313:1: create_package : create_key ( or_key replace_key )? package_key ( package_spec | package_body )? SEMICOLON -> {mode == 1}? ^( CREATE_PACKAGE_SPEC[$create_key.start] ( replace_key )? package_spec ) -> ^( CREATE_PACKAGE_BODY[$create_key.start] ( replace_key )? package_body ) ;
	public final PLSQLParser.create_package_return create_package() throws RecognitionException {
		PLSQLParser.create_package_return retval = new PLSQLParser.create_package_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON119=null;
		ParserRuleReturnScope create_key113 =null;
		ParserRuleReturnScope or_key114 =null;
		ParserRuleReturnScope replace_key115 =null;
		ParserRuleReturnScope package_key116 =null;
		ParserRuleReturnScope package_spec117 =null;
		ParserRuleReturnScope package_body118 =null;

		Object SEMICOLON119_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_package_key=new RewriteRuleSubtreeStream(adaptor,"rule package_key");
		RewriteRuleSubtreeStream stream_package_spec=new RewriteRuleSubtreeStream(adaptor,"rule package_spec");
		RewriteRuleSubtreeStream stream_package_body=new RewriteRuleSubtreeStream(adaptor,"rule package_body");
		RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
		RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:315:5: ( create_key ( or_key replace_key )? package_key ( package_spec | package_body )? SEMICOLON -> {mode == 1}? ^( CREATE_PACKAGE_SPEC[$create_key.start] ( replace_key )? package_spec ) -> ^( CREATE_PACKAGE_BODY[$create_key.start] ( replace_key )? package_body ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:315:10: create_key ( or_key replace_key )? package_key ( package_spec | package_body )? SEMICOLON
			{
			pushFollow(FOLLOW_create_key_in_create_package2616);
			create_key113=create_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_create_key.add(create_key113.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:315:21: ( or_key replace_key )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( (LA32_0==SQL92_RESERVED_OR) ) {
				alt32=1;
			}
			switch (alt32) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:315:23: or_key replace_key
					{
					pushFollow(FOLLOW_or_key_in_create_package2620);
					or_key114=or_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_or_key.add(or_key114.getTree());
					pushFollow(FOLLOW_replace_key_in_create_package2622);
					replace_key115=replace_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replace_key.add(replace_key115.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_package_key_in_create_package2627);
			package_key116=package_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_package_key.add(package_key116.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:316:9: ( package_spec | package_body )?
			int alt33=3;
			int LA33_0 = input.LA(1);
			if ( (LA33_0==DELIMITED_ID||LA33_0==INTRODUCER) ) {
				alt33=1;
			}
			else if ( (LA33_0==REGULAR_ID) ) {
				switch ( input.LA(2) ) {
					case PERIOD:
					case SQL92_RESERVED_AS:
					case SQL92_RESERVED_IS:
						{
						alt33=1;
						}
						break;
					case REGULAR_ID:
						{
						int LA33_4 = input.LA(3);
						if ( (LA33_4==REGULAR_ID) ) {
							alt33=1;
						}
						else if ( (LA33_4==PERIOD||LA33_4==SQL92_RESERVED_AS||LA33_4==SQL92_RESERVED_IS) ) {
							alt33=2;
						}
						}
						break;
					case DELIMITED_ID:
					case INTRODUCER:
						{
						alt33=2;
						}
						break;
				}
			}
			switch (alt33) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:316:11: package_spec
					{
					pushFollow(FOLLOW_package_spec_in_create_package2639);
					package_spec117=package_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_package_spec.add(package_spec117.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:316:38: package_body
					{
					pushFollow(FOLLOW_package_body_in_create_package2645);
					package_body118=package_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_package_body.add(package_body118.getTree());
					}
					break;

			}

			SEMICOLON119=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_package2658); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON119);

			// AST REWRITE
			// elements: package_body, replace_key, package_spec, replace_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 318:5: -> {mode == 1}? ^( CREATE_PACKAGE_SPEC[$create_key.start] ( replace_key )? package_spec )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:318:24: ^( CREATE_PACKAGE_SPEC[$create_key.start] ( replace_key )? package_spec )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_PACKAGE_SPEC, (create_key113!=null?(create_key113.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:318:65: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_package_spec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 319:5: -> ^( CREATE_PACKAGE_BODY[$create_key.start] ( replace_key )? package_body )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:319:8: ^( CREATE_PACKAGE_BODY[$create_key.start] ( replace_key )? package_body )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_PACKAGE_BODY, (create_key113!=null?(create_key113.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:319:49: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_package_body.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_package"


	public static class package_body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "package_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:324:1: package_body : body_key n= package_name ( is_key | as_key ) ( package_obj_body )* ( begin_key seq_of_statements ( exception_clause )? )? end_key ( package_name )? -> $n ( package_obj_body )* ( seq_of_statements )? ( exception_clause )? ;
	public final PLSQLParser.package_body_return package_body() throws RecognitionException {
		PLSQLParser.package_body_return retval = new PLSQLParser.package_body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope n =null;
		ParserRuleReturnScope body_key120 =null;
		ParserRuleReturnScope is_key121 =null;
		ParserRuleReturnScope as_key122 =null;
		ParserRuleReturnScope package_obj_body123 =null;
		ParserRuleReturnScope begin_key124 =null;
		ParserRuleReturnScope seq_of_statements125 =null;
		ParserRuleReturnScope exception_clause126 =null;
		ParserRuleReturnScope end_key127 =null;
		ParserRuleReturnScope package_name128 =null;

		RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
		RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_package_name=new RewriteRuleSubtreeStream(adaptor,"rule package_name");
		RewriteRuleSubtreeStream stream_begin_key=new RewriteRuleSubtreeStream(adaptor,"rule begin_key");
		RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
		RewriteRuleSubtreeStream stream_package_obj_body=new RewriteRuleSubtreeStream(adaptor,"rule package_obj_body");
		RewriteRuleSubtreeStream stream_exception_clause=new RewriteRuleSubtreeStream(adaptor,"rule exception_clause");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:325:5: ( body_key n= package_name ( is_key | as_key ) ( package_obj_body )* ( begin_key seq_of_statements ( exception_clause )? )? end_key ( package_name )? -> $n ( package_obj_body )* ( seq_of_statements )? ( exception_clause )? )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:325:10: body_key n= package_name ( is_key | as_key ) ( package_obj_body )* ( begin_key seq_of_statements ( exception_clause )? )? end_key ( package_name )?
			{
			pushFollow(FOLLOW_body_key_in_package_body2718);
			body_key120=body_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_body_key.add(body_key120.getTree());
			pushFollow(FOLLOW_package_name_in_package_body2722);
			n=package_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_package_name.add(n.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:325:34: ( is_key | as_key )
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==SQL92_RESERVED_IS) ) {
				alt34=1;
			}
			else if ( (LA34_0==SQL92_RESERVED_AS) ) {
				alt34=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 34, 0, input);
				throw nvae;
			}

			switch (alt34) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:325:35: is_key
					{
					pushFollow(FOLLOW_is_key_in_package_body2725);
					is_key121=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key121.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:325:44: as_key
					{
					pushFollow(FOLLOW_as_key_in_package_body2729);
					as_key122=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key122.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:326:9: ( package_obj_body )*
			loop35:
			while (true) {
				int alt35=2;
				int LA35_0 = input.LA(1);
				if ( (LA35_0==BINDVAR||LA35_0==COLON||LA35_0==DELIMITED_ID||LA35_0==INTRODUCER||LA35_0==REGULAR_ID||LA35_0==SQL92_RESERVED_CREATE||LA35_0==SQL92_RESERVED_CURSOR||LA35_0==SQL92_RESERVED_PROCEDURE) ) {
					alt35=1;
				}

				switch (alt35) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:326:9: package_obj_body
					{
					pushFollow(FOLLOW_package_obj_body_in_package_body2740);
					package_obj_body123=package_obj_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_package_obj_body.add(package_obj_body123.getTree());
					}
					break;

				default :
					break loop35;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:327:9: ( begin_key seq_of_statements ( exception_clause )? )?
			int alt37=2;
			int LA37_0 = input.LA(1);
			if ( (LA37_0==SQL92_RESERVED_BEGIN) ) {
				alt37=1;
			}
			switch (alt37) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:327:10: begin_key seq_of_statements ( exception_clause )?
					{
					pushFollow(FOLLOW_begin_key_in_package_body2752);
					begin_key124=begin_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_begin_key.add(begin_key124.getTree());
					pushFollow(FOLLOW_seq_of_statements_in_package_body2764);
					seq_of_statements125=seq_of_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements125.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:329:11: ( exception_clause )?
					int alt36=2;
					int LA36_0 = input.LA(1);
					if ( (LA36_0==SQL92_RESERVED_EXCEPTION) ) {
						alt36=1;
					}
					switch (alt36) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:329:11: exception_clause
							{
							pushFollow(FOLLOW_exception_clause_in_package_body2776);
							exception_clause126=exception_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_exception_clause.add(exception_clause126.getTree());
							}
							break;

					}

					}
					break;

			}

			pushFollow(FOLLOW_end_key_in_package_body2798);
			end_key127=end_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_end_key.add(end_key127.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:331:17: ( package_name )?
			int alt38=2;
			int LA38_0 = input.LA(1);
			if ( (LA38_0==DELIMITED_ID||LA38_0==INTRODUCER||LA38_0==REGULAR_ID) ) {
				alt38=1;
			}
			switch (alt38) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:331:17: package_name
					{
					pushFollow(FOLLOW_package_name_in_package_body2800);
					package_name128=package_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_package_name.add(package_name128.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: seq_of_statements, exception_clause, n, package_obj_body
			// token labels: 
			// rule labels: n, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 332:9: -> $n ( package_obj_body )* ( seq_of_statements )? ( exception_clause )?
			{
				adaptor.addChild(root_0, stream_n.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:332:15: ( package_obj_body )*
				while ( stream_package_obj_body.hasNext() ) {
					adaptor.addChild(root_0, stream_package_obj_body.nextTree());
				}
				stream_package_obj_body.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:332:33: ( seq_of_statements )?
				if ( stream_seq_of_statements.hasNext() ) {
					adaptor.addChild(root_0, stream_seq_of_statements.nextTree());
				}
				stream_seq_of_statements.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:332:52: ( exception_clause )?
				if ( stream_exception_clause.hasNext() ) {
					adaptor.addChild(root_0, stream_exception_clause.nextTree());
				}
				stream_exception_clause.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_body"


	public static class package_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "package_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:335:1: package_spec : n= package_name ( invoker_rights_clause )? ( is_key | as_key ) ( package_obj_spec )* end_key ( package_name )? -> $n ( invoker_rights_clause )? ( package_obj_spec )* ;
	public final PLSQLParser.package_spec_return package_spec() throws RecognitionException {
		PLSQLParser.package_spec_return retval = new PLSQLParser.package_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope n =null;
		ParserRuleReturnScope invoker_rights_clause129 =null;
		ParserRuleReturnScope is_key130 =null;
		ParserRuleReturnScope as_key131 =null;
		ParserRuleReturnScope package_obj_spec132 =null;
		ParserRuleReturnScope end_key133 =null;
		ParserRuleReturnScope package_name134 =null;

		RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_package_name=new RewriteRuleSubtreeStream(adaptor,"rule package_name");
		RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
		RewriteRuleSubtreeStream stream_package_obj_spec=new RewriteRuleSubtreeStream(adaptor,"rule package_obj_spec");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:336:5: (n= package_name ( invoker_rights_clause )? ( is_key | as_key ) ( package_obj_spec )* end_key ( package_name )? -> $n ( invoker_rights_clause )? ( package_obj_spec )* )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:336:9: n= package_name ( invoker_rights_clause )? ( is_key | as_key ) ( package_obj_spec )* end_key ( package_name )?
			{
			pushFollow(FOLLOW_package_name_in_package_spec2845);
			n=package_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_package_name.add(n.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:336:25: ( invoker_rights_clause )?
			int alt39=2;
			int LA39_0 = input.LA(1);
			if ( (LA39_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
				alt39=1;
			}
			switch (alt39) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:336:25: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_package_spec2847);
					invoker_rights_clause129=invoker_rights_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause129.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:336:48: ( is_key | as_key )
			int alt40=2;
			int LA40_0 = input.LA(1);
			if ( (LA40_0==SQL92_RESERVED_IS) ) {
				alt40=1;
			}
			else if ( (LA40_0==SQL92_RESERVED_AS) ) {
				alt40=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 40, 0, input);
				throw nvae;
			}

			switch (alt40) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:336:49: is_key
					{
					pushFollow(FOLLOW_is_key_in_package_spec2851);
					is_key130=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key130.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:336:58: as_key
					{
					pushFollow(FOLLOW_as_key_in_package_spec2855);
					as_key131=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key131.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:337:9: ( package_obj_spec )*
			loop41:
			while (true) {
				int alt41=2;
				int LA41_0 = input.LA(1);
				if ( (LA41_0==BINDVAR||LA41_0==COLON||LA41_0==DELIMITED_ID||LA41_0==INTRODUCER||LA41_0==REGULAR_ID||LA41_0==SQL92_RESERVED_CURSOR||LA41_0==SQL92_RESERVED_PROCEDURE) ) {
					alt41=1;
				}

				switch (alt41) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:337:9: package_obj_spec
					{
					pushFollow(FOLLOW_package_obj_spec_in_package_spec2866);
					package_obj_spec132=package_obj_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_package_obj_spec.add(package_obj_spec132.getTree());
					}
					break;

				default :
					break loop41;
				}
			}

			pushFollow(FOLLOW_end_key_in_package_spec2877);
			end_key133=end_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_end_key.add(end_key133.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:338:17: ( package_name )?
			int alt42=2;
			int LA42_0 = input.LA(1);
			if ( (LA42_0==DELIMITED_ID||LA42_0==INTRODUCER||LA42_0==REGULAR_ID) ) {
				alt42=1;
			}
			switch (alt42) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:338:17: package_name
					{
					pushFollow(FOLLOW_package_name_in_package_spec2879);
					package_name134=package_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_package_name.add(package_name134.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: invoker_rights_clause, n, package_obj_spec
			// token labels: 
			// rule labels: n, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_n=new RewriteRuleSubtreeStream(adaptor,"rule n",n!=null?n.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 339:9: -> $n ( invoker_rights_clause )? ( package_obj_spec )*
			{
				adaptor.addChild(root_0, stream_n.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:339:15: ( invoker_rights_clause )?
				if ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_0, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:339:38: ( package_obj_spec )*
				while ( stream_package_obj_spec.hasNext() ) {
					adaptor.addChild(root_0, stream_package_obj_spec.nextTree());
				}
				stream_package_obj_spec.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_spec"


	public static class package_obj_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "package_obj_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:342:1: package_obj_spec options {backtrack=true; } : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec | pragma_declaration );
	public final PLSQLParser.package_obj_spec_return package_obj_spec() throws RecognitionException {
		PLSQLParser.package_obj_spec_return retval = new PLSQLParser.package_obj_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope variable_declaration135 =null;
		ParserRuleReturnScope subtype_declaration136 =null;
		ParserRuleReturnScope cursor_declaration137 =null;
		ParserRuleReturnScope exception_declaration138 =null;
		ParserRuleReturnScope record_declaration139 =null;
		ParserRuleReturnScope table_declaration140 =null;
		ParserRuleReturnScope procedure_spec141 =null;
		ParserRuleReturnScope function_spec142 =null;
		ParserRuleReturnScope pragma_declaration143 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:345:6: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | procedure_spec | function_spec | pragma_declaration )
			int alt43=9;
			switch ( input.LA(1) ) {
			case INTRODUCER:
				{
				int LA43_1 = input.LA(2);
				if ( (synpred19_PLSQLParser()) ) {
					alt43=1;
				}
				else if ( (synpred22_PLSQLParser()) ) {
					alt43=4;
				}
				else if ( (synpred23_PLSQLParser()) ) {
					alt43=5;
				}
				else if ( (synpred24_PLSQLParser()) ) {
					alt43=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 43, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REGULAR_ID:
				{
				int LA43_2 = input.LA(2);
				if ( (synpred19_PLSQLParser()) ) {
					alt43=1;
				}
				else if ( ((synpred20_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("subtype")))) ) {
					alt43=2;
				}
				else if ( (synpred22_PLSQLParser()) ) {
					alt43=4;
				}
				else if ( (synpred23_PLSQLParser()) ) {
					alt43=5;
				}
				else if ( (synpred24_PLSQLParser()) ) {
					alt43=6;
				}
				else if ( ((synpred26_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("function")))) ) {
					alt43=8;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("pragma"))) ) {
					alt43=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 43, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DELIMITED_ID:
				{
				int LA43_3 = input.LA(2);
				if ( (synpred19_PLSQLParser()) ) {
					alt43=1;
				}
				else if ( (synpred22_PLSQLParser()) ) {
					alt43=4;
				}
				else if ( (synpred23_PLSQLParser()) ) {
					alt43=5;
				}
				else if ( (synpred24_PLSQLParser()) ) {
					alt43=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 43, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BINDVAR:
				{
				int LA43_4 = input.LA(2);
				if ( (synpred19_PLSQLParser()) ) {
					alt43=1;
				}
				else if ( (synpred23_PLSQLParser()) ) {
					alt43=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 43, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case COLON:
				{
				int LA43_5 = input.LA(2);
				if ( (synpred19_PLSQLParser()) ) {
					alt43=1;
				}
				else if ( (synpred23_PLSQLParser()) ) {
					alt43=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 43, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_CURSOR:
				{
				alt43=3;
				}
				break;
			case SQL92_RESERVED_PROCEDURE:
				{
				alt43=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 43, 0, input);
				throw nvae;
			}
			switch (alt43) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:345:11: variable_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variable_declaration_in_package_obj_spec2927);
					variable_declaration135=variable_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration135.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:346:11: subtype_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec2939);
					subtype_declaration136=subtype_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration136.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:347:11: cursor_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec2951);
					cursor_declaration137=cursor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration137.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:348:11: exception_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exception_declaration_in_package_obj_spec2963);
					exception_declaration138=exception_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration138.getTree());

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:349:11: record_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_record_declaration_in_package_obj_spec2975);
					record_declaration139=record_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration139.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:350:11: table_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_declaration_in_package_obj_spec2987);
					table_declaration140=table_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_declaration140.getTree());

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:351:11: procedure_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedure_spec_in_package_obj_spec2999);
					procedure_spec141=procedure_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec141.getTree());

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:352:11: function_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_function_spec_in_package_obj_spec3011);
					function_spec142=function_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec142.getTree());

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:353:11: pragma_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec3023);
					pragma_declaration143=pragma_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration143.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_spec"


	public static class procedure_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "procedure_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:356:1: procedure_spec : procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? SEMICOLON -> ^( PROCEDURE_SPEC[$procedure_key.start] procedure_name ^( PARAMETERS ( parameter )* ) ) ;
	public final PLSQLParser.procedure_spec_return procedure_spec() throws RecognitionException {
		PLSQLParser.procedure_spec_return retval = new PLSQLParser.procedure_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN146=null;
		Token COMMA148=null;
		Token RIGHT_PAREN150=null;
		Token SEMICOLON151=null;
		ParserRuleReturnScope procedure_key144 =null;
		ParserRuleReturnScope procedure_name145 =null;
		ParserRuleReturnScope parameter147 =null;
		ParserRuleReturnScope parameter149 =null;

		Object LEFT_PAREN146_tree=null;
		Object COMMA148_tree=null;
		Object RIGHT_PAREN150_tree=null;
		Object SEMICOLON151_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
		RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
		RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:357:5: ( procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? SEMICOLON -> ^( PROCEDURE_SPEC[$procedure_key.start] procedure_name ^( PARAMETERS ( parameter )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:357:11: procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? SEMICOLON
			{
			pushFollow(FOLLOW_procedure_key_in_procedure_spec3044);
			procedure_key144=procedure_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key144.getTree());
			pushFollow(FOLLOW_procedure_name_in_procedure_spec3046);
			procedure_name145=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name145.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:358:9: ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )?
			int alt45=2;
			int LA45_0 = input.LA(1);
			if ( (LA45_0==LEFT_PAREN) ) {
				alt45=1;
			}
			switch (alt45) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:358:11: LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN
					{
					LEFT_PAREN146=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_procedure_spec3059); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN146);

					pushFollow(FOLLOW_parameter_in_procedure_spec3061);
					parameter147=parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameter.add(parameter147.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:358:32: ( COMMA parameter )*
					loop44:
					while (true) {
						int alt44=2;
						int LA44_0 = input.LA(1);
						if ( (LA44_0==COMMA) ) {
							alt44=1;
						}

						switch (alt44) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:358:34: COMMA parameter
							{
							COMMA148=(Token)match(input,COMMA,FOLLOW_COMMA_in_procedure_spec3065); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA148);

							pushFollow(FOLLOW_parameter_in_procedure_spec3067);
							parameter149=parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parameter.add(parameter149.getTree());
							}
							break;

						default :
							break loop44;
						}
					}

					RIGHT_PAREN150=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_procedure_spec3072); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN150);

					}
					break;

			}

			SEMICOLON151=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_spec3077); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON151);

			// AST REWRITE
			// elements: procedure_name, parameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 359:9: -> ^( PROCEDURE_SPEC[$procedure_key.start] procedure_name ^( PARAMETERS ( parameter )* ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:359:12: ^( PROCEDURE_SPEC[$procedure_key.start] procedure_name ^( PARAMETERS ( parameter )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE_SPEC, (procedure_key144!=null?(procedure_key144.start):null)), root_1);
				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:359:66: ^( PARAMETERS ( parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:359:79: ( parameter )*
				while ( stream_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter.nextTree());
				}
				stream_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "procedure_spec"


	public static class function_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "function_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:362:1: function_spec : function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec (c1= pipelined_key |c2= result_cache_clause |c3= deterministic_key )* ( pipelined_key )? SEMICOLON -> ^( FUNCTION_SPEC[$function_key.start] function_name type_spec ^( PARAMETERS ( parameter )* ) ( $c1)? ( $c2)? ( $c3)? ) ;
	public final PLSQLParser.function_spec_return function_spec() throws RecognitionException {
		PLSQLParser.function_spec_return retval = new PLSQLParser.function_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN154=null;
		Token COMMA156=null;
		Token RIGHT_PAREN158=null;
		Token SEMICOLON162=null;
		ParserRuleReturnScope c1 =null;
		ParserRuleReturnScope c2 =null;
		ParserRuleReturnScope c3 =null;
		ParserRuleReturnScope function_key152 =null;
		ParserRuleReturnScope function_name153 =null;
		ParserRuleReturnScope parameter155 =null;
		ParserRuleReturnScope parameter157 =null;
		ParserRuleReturnScope return_key159 =null;
		ParserRuleReturnScope type_spec160 =null;
		ParserRuleReturnScope pipelined_key161 =null;

		Object LEFT_PAREN154_tree=null;
		Object COMMA156_tree=null;
		Object RIGHT_PAREN158_tree=null;
		Object SEMICOLON162_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_pipelined_key=new RewriteRuleSubtreeStream(adaptor,"rule pipelined_key");
		RewriteRuleSubtreeStream stream_result_cache_clause=new RewriteRuleSubtreeStream(adaptor,"rule result_cache_clause");
		RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
		RewriteRuleSubtreeStream stream_deterministic_key=new RewriteRuleSubtreeStream(adaptor,"rule deterministic_key");
		RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
		RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:363:5: ( function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec (c1= pipelined_key |c2= result_cache_clause |c3= deterministic_key )* ( pipelined_key )? SEMICOLON -> ^( FUNCTION_SPEC[$function_key.start] function_name type_spec ^( PARAMETERS ( parameter )* ) ( $c1)? ( $c2)? ( $c3)? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:363:10: function_key function_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? return_key type_spec (c1= pipelined_key |c2= result_cache_clause |c3= deterministic_key )* ( pipelined_key )? SEMICOLON
			{
			pushFollow(FOLLOW_function_key_in_function_spec3123);
			function_key152=function_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_key.add(function_key152.getTree());
			pushFollow(FOLLOW_function_name_in_function_spec3125);
			function_name153=function_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_name.add(function_name153.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:364:9: ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )?
			int alt47=2;
			int LA47_0 = input.LA(1);
			if ( (LA47_0==LEFT_PAREN) ) {
				alt47=1;
			}
			switch (alt47) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:364:10: LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN
					{
					LEFT_PAREN154=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_function_spec3137); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN154);

					pushFollow(FOLLOW_parameter_in_function_spec3139);
					parameter155=parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameter.add(parameter155.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:364:31: ( COMMA parameter )*
					loop46:
					while (true) {
						int alt46=2;
						int LA46_0 = input.LA(1);
						if ( (LA46_0==COMMA) ) {
							alt46=1;
						}

						switch (alt46) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:364:33: COMMA parameter
							{
							COMMA156=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_spec3143); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA156);

							pushFollow(FOLLOW_parameter_in_function_spec3145);
							parameter157=parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parameter.add(parameter157.getTree());
							}
							break;

						default :
							break loop46;
						}
					}

					RIGHT_PAREN158=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_function_spec3149); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN158);

					}
					break;

			}

			pushFollow(FOLLOW_return_key_in_function_spec3162);
			return_key159=return_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_return_key.add(return_key159.getTree());
			pushFollow(FOLLOW_type_spec_in_function_spec3164);
			type_spec160=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec160.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:366:9: (c1= pipelined_key |c2= result_cache_clause |c3= deterministic_key )*
			loop48:
			while (true) {
				int alt48=4;
				int LA48_0 = input.LA(1);
				if ( (LA48_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("result_cache"))||(input.LT(1).getText().equalsIgnoreCase("deterministic"))||(input.LT(1).getText().equalsIgnoreCase("pipelined"))))) {
					int LA48_1 = input.LA(2);
					if ( ((input.LT(1).getText().equalsIgnoreCase("pipelined"))) ) {
						alt48=1;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("result_cache"))) ) {
						alt48=2;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("deterministic"))) ) {
						alt48=3;
					}

				}

				switch (alt48) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:366:10: c1= pipelined_key
					{
					pushFollow(FOLLOW_pipelined_key_in_function_spec3177);
					c1=pipelined_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pipelined_key.add(c1.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:366:27: c2= result_cache_clause
					{
					pushFollow(FOLLOW_result_cache_clause_in_function_spec3181);
					c2=result_cache_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_result_cache_clause.add(c2.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:366:50: c3= deterministic_key
					{
					pushFollow(FOLLOW_deterministic_key_in_function_spec3185);
					c3=deterministic_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_deterministic_key.add(c3.getTree());
					}
					break;

				default :
					break loop48;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:367:9: ( pipelined_key )?
			int alt49=2;
			int LA49_0 = input.LA(1);
			if ( (LA49_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("pipelined")))) {
				alt49=1;
			}
			switch (alt49) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:367:9: pipelined_key
					{
					pushFollow(FOLLOW_pipelined_key_in_function_spec3197);
					pipelined_key161=pipelined_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pipelined_key.add(pipelined_key161.getTree());
					}
					break;

			}

			SEMICOLON162=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_spec3208); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON162);

			// AST REWRITE
			// elements: function_name, c3, c2, parameter, c1, type_spec
			// token labels: 
			// rule labels: c3, c1, retval, c2
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_c3=new RewriteRuleSubtreeStream(adaptor,"rule c3",c3!=null?c3.getTree():null);
			RewriteRuleSubtreeStream stream_c1=new RewriteRuleSubtreeStream(adaptor,"rule c1",c1!=null?c1.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_c2=new RewriteRuleSubtreeStream(adaptor,"rule c2",c2!=null?c2.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 369:9: -> ^( FUNCTION_SPEC[$function_key.start] function_name type_spec ^( PARAMETERS ( parameter )* ) ( $c1)? ( $c2)? ( $c3)? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:369:12: ^( FUNCTION_SPEC[$function_key.start] function_name type_spec ^( PARAMETERS ( parameter )* ) ( $c1)? ( $c2)? ( $c3)? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNCTION_SPEC, (function_key152!=null?(function_key152.start):null)), root_1);
				adaptor.addChild(root_1, stream_function_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:369:73: ^( PARAMETERS ( parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:369:86: ( parameter )*
				while ( stream_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter.nextTree());
				}
				stream_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:370:10: ( $c1)?
				if ( stream_c1.hasNext() ) {
					adaptor.addChild(root_1, stream_c1.nextTree());
				}
				stream_c1.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:370:15: ( $c2)?
				if ( stream_c2.hasNext() ) {
					adaptor.addChild(root_1, stream_c2.nextTree());
				}
				stream_c2.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:370:20: ( $c3)?
				if ( stream_c3.hasNext() ) {
					adaptor.addChild(root_1, stream_c3.nextTree());
				}
				stream_c3.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_spec"


	public static class package_obj_body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "package_obj_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:375:1: package_obj_body options {backtrack=true; } : ( procedure_spec | function_spec | variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body );
	public final PLSQLParser.package_obj_body_return package_obj_body() throws RecognitionException {
		PLSQLParser.package_obj_body_return retval = new PLSQLParser.package_obj_body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope procedure_spec163 =null;
		ParserRuleReturnScope function_spec164 =null;
		ParserRuleReturnScope variable_declaration165 =null;
		ParserRuleReturnScope subtype_declaration166 =null;
		ParserRuleReturnScope cursor_declaration167 =null;
		ParserRuleReturnScope exception_declaration168 =null;
		ParserRuleReturnScope record_declaration169 =null;
		ParserRuleReturnScope table_declaration170 =null;
		ParserRuleReturnScope create_procedure_body171 =null;
		ParserRuleReturnScope create_function_body172 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:378:6: ( procedure_spec | function_spec | variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body )
			int alt50=10;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_PROCEDURE:
				{
				int LA50_1 = input.LA(2);
				if ( (synpred27_PLSQLParser()) ) {
					alt50=1;
				}
				else if ( (synpred35_PLSQLParser()) ) {
					alt50=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REGULAR_ID:
				{
				int LA50_2 = input.LA(2);
				if ( ((synpred28_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("function")))) ) {
					alt50=2;
				}
				else if ( (synpred29_PLSQLParser()) ) {
					alt50=3;
				}
				else if ( ((synpred30_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("subtype")))) ) {
					alt50=4;
				}
				else if ( (synpred32_PLSQLParser()) ) {
					alt50=6;
				}
				else if ( (synpred33_PLSQLParser()) ) {
					alt50=7;
				}
				else if ( (synpred34_PLSQLParser()) ) {
					alt50=8;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
					alt50=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case INTRODUCER:
				{
				int LA50_3 = input.LA(2);
				if ( (synpred29_PLSQLParser()) ) {
					alt50=3;
				}
				else if ( (synpred32_PLSQLParser()) ) {
					alt50=6;
				}
				else if ( (synpred33_PLSQLParser()) ) {
					alt50=7;
				}
				else if ( (synpred34_PLSQLParser()) ) {
					alt50=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DELIMITED_ID:
				{
				int LA50_4 = input.LA(2);
				if ( (synpred29_PLSQLParser()) ) {
					alt50=3;
				}
				else if ( (synpred32_PLSQLParser()) ) {
					alt50=6;
				}
				else if ( (synpred33_PLSQLParser()) ) {
					alt50=7;
				}
				else if ( (synpred34_PLSQLParser()) ) {
					alt50=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BINDVAR:
				{
				int LA50_5 = input.LA(2);
				if ( (synpred29_PLSQLParser()) ) {
					alt50=3;
				}
				else if ( (synpred33_PLSQLParser()) ) {
					alt50=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case COLON:
				{
				int LA50_6 = input.LA(2);
				if ( (synpred29_PLSQLParser()) ) {
					alt50=3;
				}
				else if ( (synpred33_PLSQLParser()) ) {
					alt50=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 50, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_CURSOR:
				{
				alt50=5;
				}
				break;
			case SQL92_RESERVED_CREATE:
				{
				int LA50_8 = input.LA(2);
				if ( (synpred35_PLSQLParser()) ) {
					alt50=9;
				}
				else if ( (true) ) {
					alt50=10;
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 50, 0, input);
				throw nvae;
			}
			switch (alt50) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:378:12: procedure_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_procedure_spec_in_package_obj_body3310);
					procedure_spec163=procedure_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec163.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:379:11: function_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_function_spec_in_package_obj_body3322);
					function_spec164=function_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec164.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:380:11: variable_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variable_declaration_in_package_obj_body3334);
					variable_declaration165=variable_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration165.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:381:11: subtype_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subtype_declaration_in_package_obj_body3347);
					subtype_declaration166=subtype_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration166.getTree());

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:382:11: cursor_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_cursor_declaration_in_package_obj_body3360);
					cursor_declaration167=cursor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration167.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:383:11: exception_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exception_declaration_in_package_obj_body3373);
					exception_declaration168=exception_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration168.getTree());

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:384:11: record_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_record_declaration_in_package_obj_body3386);
					record_declaration169=record_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration169.getTree());

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:385:11: table_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_declaration_in_package_obj_body3398);
					table_declaration170=table_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_declaration170.getTree());

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:386:11: create_procedure_body
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_procedure_body_in_package_obj_body3410);
					create_procedure_body171=create_procedure_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_procedure_body171.getTree());

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:387:11: create_function_body
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_function_body_in_package_obj_body3422);
					create_function_body172=create_function_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_function_body172.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "package_obj_body"


	public static class drop_procedure_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_procedure"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:396:1: drop_procedure : drop_key procedure_key procedure_name SEMICOLON -> ^( DROP_PROCEDURE[$drop_key.start] procedure_name ) ;
	public final PLSQLParser.drop_procedure_return drop_procedure() throws RecognitionException {
		PLSQLParser.drop_procedure_return retval = new PLSQLParser.drop_procedure_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON176=null;
		ParserRuleReturnScope drop_key173 =null;
		ParserRuleReturnScope procedure_key174 =null;
		ParserRuleReturnScope procedure_name175 =null;

		Object SEMICOLON176_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
		RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
		RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:397:5: ( drop_key procedure_key procedure_name SEMICOLON -> ^( DROP_PROCEDURE[$drop_key.start] procedure_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:397:10: drop_key procedure_key procedure_name SEMICOLON
			{
			pushFollow(FOLLOW_drop_key_in_drop_procedure3449);
			drop_key173=drop_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_drop_key.add(drop_key173.getTree());
			pushFollow(FOLLOW_procedure_key_in_drop_procedure3451);
			procedure_key174=procedure_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key174.getTree());
			pushFollow(FOLLOW_procedure_name_in_drop_procedure3453);
			procedure_name175=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name175.getTree());
			SEMICOLON176=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_procedure3463); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON176);

			// AST REWRITE
			// elements: procedure_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 399:9: -> ^( DROP_PROCEDURE[$drop_key.start] procedure_name )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:399:12: ^( DROP_PROCEDURE[$drop_key.start] procedure_name )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DROP_PROCEDURE, (drop_key173!=null?(drop_key173.start):null)), root_1);
				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_procedure"


	public static class alter_procedure_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_procedure"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:402:1: alter_procedure : alter_key procedure_key procedure_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_PROCEDURE[$alter_key.start] procedure_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) ;
	public final PLSQLParser.alter_procedure_return alter_procedure() throws RecognitionException {
		PLSQLParser.alter_procedure_return retval = new PLSQLParser.alter_procedure_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON185=null;
		ParserRuleReturnScope alter_key177 =null;
		ParserRuleReturnScope procedure_key178 =null;
		ParserRuleReturnScope procedure_name179 =null;
		ParserRuleReturnScope compile_key180 =null;
		ParserRuleReturnScope debug_key181 =null;
		ParserRuleReturnScope compiler_parameters_clause182 =null;
		ParserRuleReturnScope reuse_key183 =null;
		ParserRuleReturnScope settings_key184 =null;

		Object SEMICOLON185_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
		RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
		RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
		RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
		RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
		RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
		RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
		RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:403:5: ( alter_key procedure_key procedure_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON -> ^( ALTER_PROCEDURE[$alter_key.start] procedure_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:403:10: alter_key procedure_key procedure_name compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? SEMICOLON
			{
			pushFollow(FOLLOW_alter_key_in_alter_procedure3500);
			alter_key177=alter_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_alter_key.add(alter_key177.getTree());
			pushFollow(FOLLOW_procedure_key_in_alter_procedure3502);
			procedure_key178=procedure_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key178.getTree());
			pushFollow(FOLLOW_procedure_name_in_alter_procedure3504);
			procedure_name179=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name179.getTree());
			pushFollow(FOLLOW_compile_key_in_alter_procedure3514);
			compile_key180=compile_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_compile_key.add(compile_key180.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:404:21: ( debug_key )?
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==REGULAR_ID) ) {
				int LA51_1 = input.LA(2);
				if ( (LA51_1==DELIMITED_ID||LA51_1==INTRODUCER||LA51_1==SEMICOLON) ) {
					alt51=1;
				}
				else if ( (LA51_1==REGULAR_ID) ) {
					int LA51_4 = input.LA(3);
					if ( (LA51_4==EQUALS_OP||LA51_4==REGULAR_ID) ) {
						alt51=1;
					}
				}
			}
			switch (alt51) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:404:21: debug_key
					{
					pushFollow(FOLLOW_debug_key_in_alter_procedure3516);
					debug_key181=debug_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_debug_key.add(debug_key181.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:404:32: ( compiler_parameters_clause )*
			loop52:
			while (true) {
				int alt52=2;
				int LA52_0 = input.LA(1);
				if ( (LA52_0==REGULAR_ID) ) {
					int LA52_1 = input.LA(2);
					if ( (LA52_1==EQUALS_OP) ) {
						alt52=1;
					}

				}
				else if ( (LA52_0==DELIMITED_ID||LA52_0==INTRODUCER) ) {
					alt52=1;
				}

				switch (alt52) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:404:32: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_alter_procedure3519);
					compiler_parameters_clause182=compiler_parameters_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause182.getTree());
					}
					break;

				default :
					break loop52;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:405:9: ( reuse_key settings_key )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==REGULAR_ID) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:405:10: reuse_key settings_key
					{
					pushFollow(FOLLOW_reuse_key_in_alter_procedure3531);
					reuse_key183=reuse_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key183.getTree());
					pushFollow(FOLLOW_settings_key_in_alter_procedure3533);
					settings_key184=settings_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_settings_key.add(settings_key184.getTree());
					}
					break;

			}

			SEMICOLON185=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_procedure3545); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON185);

			// AST REWRITE
			// elements: reuse_key, compiler_parameters_clause, procedure_name, debug_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 407:9: -> ^( ALTER_PROCEDURE[$alter_key.start] procedure_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:407:12: ^( ALTER_PROCEDURE[$alter_key.start] procedure_name ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_PROCEDURE, (alter_key177!=null?(alter_key177.start):null)), root_1);
				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:407:63: ( debug_key )?
				if ( stream_debug_key.hasNext() ) {
					adaptor.addChild(root_1, stream_debug_key.nextTree());
				}
				stream_debug_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:407:74: ( reuse_key )?
				if ( stream_reuse_key.hasNext() ) {
					adaptor.addChild(root_1, stream_reuse_key.nextTree());
				}
				stream_reuse_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:407:85: ( compiler_parameters_clause )*
				while ( stream_compiler_parameters_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());
				}
				stream_compiler_parameters_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_procedure"


	public static class create_procedure_body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_procedure_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:410:1: create_procedure_body : ( create_key ( or_key replace_key )? )? procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? ( invoker_rights_clause )? ( is_key | as_key ) ( block | call_spec | external_key ) SEMICOLON -> {mode == 1}? ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? external_key ) -> {mode == 2}? ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( CALL_MODE call_spec ) ) -> ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( BODY_MODE block ) ) ;
	public final PLSQLParser.create_procedure_body_return create_procedure_body() throws RecognitionException {
		PLSQLParser.create_procedure_body_return retval = new PLSQLParser.create_procedure_body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN191=null;
		Token COMMA193=null;
		Token RIGHT_PAREN195=null;
		Token SEMICOLON202=null;
		ParserRuleReturnScope create_key186 =null;
		ParserRuleReturnScope or_key187 =null;
		ParserRuleReturnScope replace_key188 =null;
		ParserRuleReturnScope procedure_key189 =null;
		ParserRuleReturnScope procedure_name190 =null;
		ParserRuleReturnScope parameter192 =null;
		ParserRuleReturnScope parameter194 =null;
		ParserRuleReturnScope invoker_rights_clause196 =null;
		ParserRuleReturnScope is_key197 =null;
		ParserRuleReturnScope as_key198 =null;
		ParserRuleReturnScope block199 =null;
		ParserRuleReturnScope call_spec200 =null;
		ParserRuleReturnScope external_key201 =null;

		Object LEFT_PAREN191_tree=null;
		Object COMMA193_tree=null;
		Object RIGHT_PAREN195_tree=null;
		Object SEMICOLON202_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
		RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
		RewriteRuleSubtreeStream stream_external_key=new RewriteRuleSubtreeStream(adaptor,"rule external_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_parameter=new RewriteRuleSubtreeStream(adaptor,"rule parameter");
		RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
		RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
		RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:412:5: ( ( create_key ( or_key replace_key )? )? procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? ( invoker_rights_clause )? ( is_key | as_key ) ( block | call_spec | external_key ) SEMICOLON -> {mode == 1}? ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? external_key ) -> {mode == 2}? ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( CALL_MODE call_spec ) ) -> ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( BODY_MODE block ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:412:10: ( create_key ( or_key replace_key )? )? procedure_key procedure_name ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )? ( invoker_rights_clause )? ( is_key | as_key ) ( block | call_spec | external_key ) SEMICOLON
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:412:10: ( create_key ( or_key replace_key )? )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==SQL92_RESERVED_CREATE) ) {
				alt55=1;
			}
			switch (alt55) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:412:11: create_key ( or_key replace_key )?
					{
					pushFollow(FOLLOW_create_key_in_create_procedure_body3600);
					create_key186=create_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_create_key.add(create_key186.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:412:22: ( or_key replace_key )?
					int alt54=2;
					int LA54_0 = input.LA(1);
					if ( (LA54_0==SQL92_RESERVED_OR) ) {
						alt54=1;
					}
					switch (alt54) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:412:24: or_key replace_key
							{
							pushFollow(FOLLOW_or_key_in_create_procedure_body3604);
							or_key187=or_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_or_key.add(or_key187.getTree());
							pushFollow(FOLLOW_replace_key_in_create_procedure_body3606);
							replace_key188=replace_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_replace_key.add(replace_key188.getTree());
							}
							break;

					}

					}
					break;

			}

			pushFollow(FOLLOW_procedure_key_in_create_procedure_body3613);
			procedure_key189=procedure_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key189.getTree());
			pushFollow(FOLLOW_procedure_name_in_create_procedure_body3615);
			procedure_name190=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name190.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:413:15: ( LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN )?
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==LEFT_PAREN) ) {
				alt57=1;
			}
			switch (alt57) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:413:17: LEFT_PAREN parameter ( COMMA parameter )* RIGHT_PAREN
					{
					LEFT_PAREN191=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_create_procedure_body3633); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN191);

					pushFollow(FOLLOW_parameter_in_create_procedure_body3635);
					parameter192=parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameter.add(parameter192.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:413:38: ( COMMA parameter )*
					loop56:
					while (true) {
						int alt56=2;
						int LA56_0 = input.LA(1);
						if ( (LA56_0==COMMA) ) {
							alt56=1;
						}

						switch (alt56) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:413:40: COMMA parameter
							{
							COMMA193=(Token)match(input,COMMA,FOLLOW_COMMA_in_create_procedure_body3639); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA193);

							pushFollow(FOLLOW_parameter_in_create_procedure_body3641);
							parameter194=parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parameter.add(parameter194.getTree());
							}
							break;

						default :
							break loop56;
						}
					}

					RIGHT_PAREN195=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_create_procedure_body3646); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN195);

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:414:15: ( invoker_rights_clause )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:414:15: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_create_procedure_body3666);
					invoker_rights_clause196=invoker_rights_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause196.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:415:9: ( is_key | as_key )
			int alt59=2;
			int LA59_0 = input.LA(1);
			if ( (LA59_0==SQL92_RESERVED_IS) ) {
				alt59=1;
			}
			else if ( (LA59_0==SQL92_RESERVED_AS) ) {
				alt59=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 59, 0, input);
				throw nvae;
			}

			switch (alt59) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:415:11: is_key
					{
					pushFollow(FOLLOW_is_key_in_create_procedure_body3679);
					is_key197=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key197.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:415:20: as_key
					{
					pushFollow(FOLLOW_as_key_in_create_procedure_body3683);
					as_key198=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key198.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:416:15: ( block | call_spec | external_key )
			int alt60=3;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==BINDVAR||LA60_0==COLON||LA60_0==DELIMITED_ID||LA60_0==INTRODUCER||LA60_0==SQL92_RESERVED_BEGIN||LA60_0==SQL92_RESERVED_CREATE||LA60_0==SQL92_RESERVED_CURSOR||LA60_0==SQL92_RESERVED_DECLARE||LA60_0==SQL92_RESERVED_PROCEDURE) ) {
				alt60=1;
			}
			else if ( (LA60_0==REGULAR_ID) ) {
				int LA60_3 = input.LA(2);
				if ( (!((((input.LT(1).getText().equalsIgnoreCase("language"))||(input.LT(1).getText().equalsIgnoreCase("external")))))) ) {
					alt60=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
					alt60=2;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
					alt60=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 60, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 60, 0, input);
				throw nvae;
			}

			switch (alt60) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:416:20: block
					{
					pushFollow(FOLLOW_block_in_create_procedure_body3706);
					block199=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block199.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:417:20: call_spec
					{
					pushFollow(FOLLOW_call_spec_in_create_procedure_body3728);
					call_spec200=call_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_call_spec.add(call_spec200.getTree());
					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:418:20: external_key
					{
					pushFollow(FOLLOW_external_key_in_create_procedure_body3751);
					external_key201=external_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_external_key.add(external_key201.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			SEMICOLON202=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_procedure_body3785); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON202);

			// AST REWRITE
			// elements: parameter, create_key, invoker_rights_clause, invoker_rights_clause, invoker_rights_clause, replace_key, procedure_name, procedure_name, create_key, procedure_name, block, external_key, create_key, replace_key, replace_key, parameter, parameter, call_spec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 421:9: -> {mode == 1}? ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? external_key )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:422:13: ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? external_key )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_PROCEDURE, (procedure_key189!=null?(procedure_key189.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:422:54: ( create_key )?
				if ( stream_create_key.hasNext() ) {
					adaptor.addChild(root_1, stream_create_key.nextTree());
				}
				stream_create_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:422:66: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:422:94: ^( PARAMETERS ( parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:422:107: ( parameter )*
				while ( stream_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter.nextTree());
				}
				stream_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:423:17: ( invoker_rights_clause )?
				if ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				adaptor.addChild(root_1, stream_external_key.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 424:9: -> {mode == 2}? ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( CALL_MODE call_spec ) )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:425:13: ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( CALL_MODE call_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_PROCEDURE, (procedure_key189!=null?(procedure_key189.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:425:54: ( create_key )?
				if ( stream_create_key.hasNext() ) {
					adaptor.addChild(root_1, stream_create_key.nextTree());
				}
				stream_create_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:425:66: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:425:94: ^( PARAMETERS ( parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:425:107: ( parameter )*
				while ( stream_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter.nextTree());
				}
				stream_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:426:17: ( invoker_rights_clause )?
				if ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:427:17: ^( CALL_MODE call_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(CALL_MODE, "CALL_MODE"), root_2);
				adaptor.addChild(root_2, stream_call_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 428:9: -> ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( BODY_MODE block ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:428:15: ^( CREATE_PROCEDURE[$procedure_key.start] ( create_key )? ( replace_key )? procedure_name ^( PARAMETERS ( parameter )* ) ( invoker_rights_clause )? ^( BODY_MODE block ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_PROCEDURE, (procedure_key189!=null?(procedure_key189.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:428:56: ( create_key )?
				if ( stream_create_key.hasNext() ) {
					adaptor.addChild(root_1, stream_create_key.nextTree());
				}
				stream_create_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:428:68: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:428:96: ^( PARAMETERS ( parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:428:109: ( parameter )*
				while ( stream_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter.nextTree());
				}
				stream_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:429:17: ( invoker_rights_clause )?
				if ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:430:17: ^( BODY_MODE block )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BODY_MODE, "BODY_MODE"), root_2);
				adaptor.addChild(root_2, stream_block.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_procedure_body"


	public static class drop_trigger_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:437:1: drop_trigger : drop_key trigger_key trigger_name SEMICOLON -> ^( DROP_TRIGGER[$drop_key.start] trigger_name ) ;
	public final PLSQLParser.drop_trigger_return drop_trigger() throws RecognitionException {
		PLSQLParser.drop_trigger_return retval = new PLSQLParser.drop_trigger_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON206=null;
		ParserRuleReturnScope drop_key203 =null;
		ParserRuleReturnScope trigger_key204 =null;
		ParserRuleReturnScope trigger_name205 =null;

		Object SEMICOLON206_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
		RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
		RewriteRuleSubtreeStream stream_trigger_key=new RewriteRuleSubtreeStream(adaptor,"rule trigger_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:438:5: ( drop_key trigger_key trigger_name SEMICOLON -> ^( DROP_TRIGGER[$drop_key.start] trigger_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:438:10: drop_key trigger_key trigger_name SEMICOLON
			{
			pushFollow(FOLLOW_drop_key_in_drop_trigger4038);
			drop_key203=drop_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_drop_key.add(drop_key203.getTree());
			pushFollow(FOLLOW_trigger_key_in_drop_trigger4040);
			trigger_key204=trigger_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_key.add(trigger_key204.getTree());
			pushFollow(FOLLOW_trigger_name_in_drop_trigger4042);
			trigger_name205=trigger_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name205.getTree());
			SEMICOLON206=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_trigger4052); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON206);

			// AST REWRITE
			// elements: trigger_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 440:9: -> ^( DROP_TRIGGER[$drop_key.start] trigger_name )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:440:12: ^( DROP_TRIGGER[$drop_key.start] trigger_name )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DROP_TRIGGER, (drop_key203!=null?(drop_key203.start):null)), root_1);
				adaptor.addChild(root_1, stream_trigger_name.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_trigger"


	public static class alter_trigger_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:443:1: alter_trigger : alter_key trigger_key tn1= trigger_name ( ( enable_key | disable_key ) | rename_key to_key tn2= trigger_name | compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? ) SEMICOLON -> {mode == 1}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( enable_key )? ( disable_key )? ) -> {mode == 2}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ^( rename_key $tn2) ) -> ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) ;
	public final PLSQLParser.alter_trigger_return alter_trigger() throws RecognitionException {
		PLSQLParser.alter_trigger_return retval = new PLSQLParser.alter_trigger_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON218=null;
		ParserRuleReturnScope tn1 =null;
		ParserRuleReturnScope tn2 =null;
		ParserRuleReturnScope alter_key207 =null;
		ParserRuleReturnScope trigger_key208 =null;
		ParserRuleReturnScope enable_key209 =null;
		ParserRuleReturnScope disable_key210 =null;
		ParserRuleReturnScope rename_key211 =null;
		ParserRuleReturnScope to_key212 =null;
		ParserRuleReturnScope compile_key213 =null;
		ParserRuleReturnScope debug_key214 =null;
		ParserRuleReturnScope compiler_parameters_clause215 =null;
		ParserRuleReturnScope reuse_key216 =null;
		ParserRuleReturnScope settings_key217 =null;

		Object SEMICOLON218_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_rename_key=new RewriteRuleSubtreeStream(adaptor,"rule rename_key");
		RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
		RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
		RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
		RewriteRuleSubtreeStream stream_trigger_key=new RewriteRuleSubtreeStream(adaptor,"rule trigger_key");
		RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
		RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
		RewriteRuleSubtreeStream stream_disable_key=new RewriteRuleSubtreeStream(adaptor,"rule disable_key");
		RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
		RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
		RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");
		RewriteRuleSubtreeStream stream_enable_key=new RewriteRuleSubtreeStream(adaptor,"rule enable_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:445:5: ( alter_key trigger_key tn1= trigger_name ( ( enable_key | disable_key ) | rename_key to_key tn2= trigger_name | compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? ) SEMICOLON -> {mode == 1}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( enable_key )? ( disable_key )? ) -> {mode == 2}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ^( rename_key $tn2) ) -> ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:445:10: alter_key trigger_key tn1= trigger_name ( ( enable_key | disable_key ) | rename_key to_key tn2= trigger_name | compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? ) SEMICOLON
			{
			pushFollow(FOLLOW_alter_key_in_alter_trigger4097);
			alter_key207=alter_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_alter_key.add(alter_key207.getTree());
			pushFollow(FOLLOW_trigger_key_in_alter_trigger4099);
			trigger_key208=trigger_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_key.add(trigger_key208.getTree());
			pushFollow(FOLLOW_trigger_name_in_alter_trigger4103);
			tn1=trigger_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_name.add(tn1.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:446:5: ( ( enable_key | disable_key ) | rename_key to_key tn2= trigger_name | compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? )
			int alt65=3;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==REGULAR_ID) ) {
				int LA65_1 = input.LA(2);
				if ( (LA65_1==SQL92_RESERVED_TO) && ((input.LT(1).getText().equalsIgnoreCase("rename")))) {
					alt65=2;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable")))) ) {
					alt65=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("compile"))) ) {
					alt65=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 65, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 65, 0, input);
				throw nvae;
			}

			switch (alt65) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:446:10: ( enable_key | disable_key )
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:446:10: ( enable_key | disable_key )
					int alt61=2;
					int LA61_0 = input.LA(1);
					if ( (LA61_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {
						int LA61_1 = input.LA(2);
						if ( ((input.LT(1).getText().equalsIgnoreCase("enable"))) ) {
							alt61=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("disable"))) ) {
							alt61=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 61, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					switch (alt61) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:446:11: enable_key
							{
							pushFollow(FOLLOW_enable_key_in_alter_trigger4115);
							enable_key209=enable_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_enable_key.add(enable_key209.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:446:22: disable_key
							{
							pushFollow(FOLLOW_disable_key_in_alter_trigger4117);
							disable_key210=disable_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_disable_key.add(disable_key210.getTree());
							}
							break;

					}

					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:447:10: rename_key to_key tn2= trigger_name
					{
					pushFollow(FOLLOW_rename_key_in_alter_trigger4131);
					rename_key211=rename_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rename_key.add(rename_key211.getTree());
					pushFollow(FOLLOW_to_key_in_alter_trigger4133);
					to_key212=to_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_to_key.add(to_key212.getTree());
					pushFollow(FOLLOW_trigger_name_in_alter_trigger4137);
					tn2=trigger_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_trigger_name.add(tn2.getTree());
					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:448:10: compile_key ( debug_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )?
					{
					pushFollow(FOLLOW_compile_key_in_alter_trigger4150);
					compile_key213=compile_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compile_key.add(compile_key213.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:448:22: ( debug_key )?
					int alt62=2;
					int LA62_0 = input.LA(1);
					if ( (LA62_0==REGULAR_ID) ) {
						int LA62_1 = input.LA(2);
						if ( (LA62_1==DELIMITED_ID||LA62_1==INTRODUCER||LA62_1==SEMICOLON) ) {
							alt62=1;
						}
						else if ( (LA62_1==REGULAR_ID) ) {
							int LA62_4 = input.LA(3);
							if ( (LA62_4==EQUALS_OP||LA62_4==REGULAR_ID) ) {
								alt62=1;
							}
						}
					}
					switch (alt62) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:448:22: debug_key
							{
							pushFollow(FOLLOW_debug_key_in_alter_trigger4152);
							debug_key214=debug_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_debug_key.add(debug_key214.getTree());
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:448:33: ( compiler_parameters_clause )*
					loop63:
					while (true) {
						int alt63=2;
						int LA63_0 = input.LA(1);
						if ( (LA63_0==REGULAR_ID) ) {
							int LA63_1 = input.LA(2);
							if ( (LA63_1==EQUALS_OP) ) {
								alt63=1;
							}

						}
						else if ( (LA63_0==DELIMITED_ID||LA63_0==INTRODUCER) ) {
							alt63=1;
						}

						switch (alt63) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:448:33: compiler_parameters_clause
							{
							pushFollow(FOLLOW_compiler_parameters_clause_in_alter_trigger4155);
							compiler_parameters_clause215=compiler_parameters_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause215.getTree());
							}
							break;

						default :
							break loop63;
						}
					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:448:61: ( reuse_key settings_key )?
					int alt64=2;
					int LA64_0 = input.LA(1);
					if ( (LA64_0==REGULAR_ID) ) {
						alt64=1;
					}
					switch (alt64) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:448:62: reuse_key settings_key
							{
							pushFollow(FOLLOW_reuse_key_in_alter_trigger4159);
							reuse_key216=reuse_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key216.getTree());
							pushFollow(FOLLOW_settings_key_in_alter_trigger4161);
							settings_key217=settings_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_settings_key.add(settings_key217.getTree());
							}
							break;

					}

					}
					break;

			}

			SEMICOLON218=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_trigger4174); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON218);

			// AST REWRITE
			// elements: debug_key, reuse_key, compiler_parameters_clause, tn2, disable_key, tn1, rename_key, tn1, tn1, enable_key
			// token labels: 
			// rule labels: tn1, tn2, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_tn1=new RewriteRuleSubtreeStream(adaptor,"rule tn1",tn1!=null?tn1.getTree():null);
			RewriteRuleSubtreeStream stream_tn2=new RewriteRuleSubtreeStream(adaptor,"rule tn2",tn2!=null?tn2.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 450:5: -> {mode == 1}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( enable_key )? ( disable_key )? )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:450:21: ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( enable_key )? ( disable_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TRIGGER, (alter_key207!=null?(alter_key207.start):null)), root_1);
				adaptor.addChild(root_1, stream_tn1.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:450:60: ( enable_key )?
				if ( stream_enable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_enable_key.nextTree());
				}
				stream_enable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:450:72: ( disable_key )?
				if ( stream_disable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_disable_key.nextTree());
				}
				stream_disable_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 451:5: -> {mode == 2}? ^( ALTER_TRIGGER[$alter_key.start] $tn1 ^( rename_key $tn2) )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:451:21: ^( ALTER_TRIGGER[$alter_key.start] $tn1 ^( rename_key $tn2) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TRIGGER, (alter_key207!=null?(alter_key207.start):null)), root_1);
				adaptor.addChild(root_1, stream_tn1.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:451:60: ^( rename_key $tn2)
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_rename_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_tn2.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 452:5: -> ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:452:8: ^( ALTER_TRIGGER[$alter_key.start] $tn1 ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TRIGGER, (alter_key207!=null?(alter_key207.start):null)), root_1);
				adaptor.addChild(root_1, stream_tn1.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:452:47: ( debug_key )?
				if ( stream_debug_key.hasNext() ) {
					adaptor.addChild(root_1, stream_debug_key.nextTree());
				}
				stream_debug_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:452:58: ( reuse_key )?
				if ( stream_reuse_key.hasNext() ) {
					adaptor.addChild(root_1, stream_reuse_key.nextTree());
				}
				stream_reuse_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:452:69: ( compiler_parameters_clause )*
				while ( stream_compiler_parameters_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());
				}
				stream_compiler_parameters_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_trigger"


	public static class create_trigger_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:455:1: create_trigger : create_key ( or_key replace_key )? trigger_key trigger_name ( simple_dml_trigger | compound_dml_trigger | non_dml_trigger ) ( trigger_follows_clause )? ( enable_key | disable_key )? ( trigger_when_clause )? trigger_body SEMICOLON -> ^( CREATE_TRIGGER[$create_key.start] ( replace_key )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( enable_key )? ( disable_key )? ( trigger_when_clause )? trigger_body ) ;
	public final PLSQLParser.create_trigger_return create_trigger() throws RecognitionException {
		PLSQLParser.create_trigger_return retval = new PLSQLParser.create_trigger_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON232=null;
		ParserRuleReturnScope create_key219 =null;
		ParserRuleReturnScope or_key220 =null;
		ParserRuleReturnScope replace_key221 =null;
		ParserRuleReturnScope trigger_key222 =null;
		ParserRuleReturnScope trigger_name223 =null;
		ParserRuleReturnScope simple_dml_trigger224 =null;
		ParserRuleReturnScope compound_dml_trigger225 =null;
		ParserRuleReturnScope non_dml_trigger226 =null;
		ParserRuleReturnScope trigger_follows_clause227 =null;
		ParserRuleReturnScope enable_key228 =null;
		ParserRuleReturnScope disable_key229 =null;
		ParserRuleReturnScope trigger_when_clause230 =null;
		ParserRuleReturnScope trigger_body231 =null;

		Object SEMICOLON232_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_non_dml_trigger=new RewriteRuleSubtreeStream(adaptor,"rule non_dml_trigger");
		RewriteRuleSubtreeStream stream_compound_dml_trigger=new RewriteRuleSubtreeStream(adaptor,"rule compound_dml_trigger");
		RewriteRuleSubtreeStream stream_disable_key=new RewriteRuleSubtreeStream(adaptor,"rule disable_key");
		RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
		RewriteRuleSubtreeStream stream_simple_dml_trigger=new RewriteRuleSubtreeStream(adaptor,"rule simple_dml_trigger");
		RewriteRuleSubtreeStream stream_trigger_key=new RewriteRuleSubtreeStream(adaptor,"rule trigger_key");
		RewriteRuleSubtreeStream stream_trigger_follows_clause=new RewriteRuleSubtreeStream(adaptor,"rule trigger_follows_clause");
		RewriteRuleSubtreeStream stream_trigger_when_clause=new RewriteRuleSubtreeStream(adaptor,"rule trigger_when_clause");
		RewriteRuleSubtreeStream stream_trigger_body=new RewriteRuleSubtreeStream(adaptor,"rule trigger_body");
		RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
		RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
		RewriteRuleSubtreeStream stream_enable_key=new RewriteRuleSubtreeStream(adaptor,"rule enable_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:456:5: ( create_key ( or_key replace_key )? trigger_key trigger_name ( simple_dml_trigger | compound_dml_trigger | non_dml_trigger ) ( trigger_follows_clause )? ( enable_key | disable_key )? ( trigger_when_clause )? trigger_body SEMICOLON -> ^( CREATE_TRIGGER[$create_key.start] ( replace_key )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( enable_key )? ( disable_key )? ( trigger_when_clause )? trigger_body ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:456:10: create_key ( or_key replace_key )? trigger_key trigger_name ( simple_dml_trigger | compound_dml_trigger | non_dml_trigger ) ( trigger_follows_clause )? ( enable_key | disable_key )? ( trigger_when_clause )? trigger_body SEMICOLON
			{
			pushFollow(FOLLOW_create_key_in_create_trigger4262);
			create_key219=create_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_create_key.add(create_key219.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:456:21: ( or_key replace_key )?
			int alt66=2;
			int LA66_0 = input.LA(1);
			if ( (LA66_0==SQL92_RESERVED_OR) ) {
				alt66=1;
			}
			switch (alt66) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:456:23: or_key replace_key
					{
					pushFollow(FOLLOW_or_key_in_create_trigger4266);
					or_key220=or_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_or_key.add(or_key220.getTree());
					pushFollow(FOLLOW_replace_key_in_create_trigger4268);
					replace_key221=replace_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replace_key.add(replace_key221.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_trigger_key_in_create_trigger4273);
			trigger_key222=trigger_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_key.add(trigger_key222.getTree());
			pushFollow(FOLLOW_trigger_name_in_create_trigger4275);
			trigger_name223=trigger_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name223.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:457:5: ( simple_dml_trigger | compound_dml_trigger | non_dml_trigger )
			int alt67=3;
			int LA67_0 = input.LA(1);
			if ( (LA67_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("instead"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
				int LA67_1 = input.LA(2);
				if ( (LA67_1==SQL92_RESERVED_DELETE||LA67_1==SQL92_RESERVED_INSERT||LA67_1==SQL92_RESERVED_UPDATE) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
					alt67=1;
				}
				else if ( (LA67_1==SQL92_RESERVED_OF) && ((input.LT(1).getText().equalsIgnoreCase("instead")))) {
					alt67=1;
				}
				else if ( (LA67_1==REGULAR_ID||LA67_1==SQL92_RESERVED_ALTER||LA67_1==SQL92_RESERVED_CREATE||LA67_1==SQL92_RESERVED_DROP||LA67_1==SQL92_RESERVED_GRANT||LA67_1==SQL92_RESERVED_REVOKE) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
					alt67=3;
				}

			}
			else if ( (LA67_0==SQL92_RESERVED_FOR) ) {
				alt67=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 67, 0, input);
				throw nvae;
			}

			switch (alt67) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:457:10: simple_dml_trigger
					{
					pushFollow(FOLLOW_simple_dml_trigger_in_create_trigger4286);
					simple_dml_trigger224=simple_dml_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_simple_dml_trigger.add(simple_dml_trigger224.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:458:10: compound_dml_trigger
					{
					pushFollow(FOLLOW_compound_dml_trigger_in_create_trigger4297);
					compound_dml_trigger225=compound_dml_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compound_dml_trigger.add(compound_dml_trigger225.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:459:10: non_dml_trigger
					{
					pushFollow(FOLLOW_non_dml_trigger_in_create_trigger4308);
					non_dml_trigger226=non_dml_trigger();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_non_dml_trigger.add(non_dml_trigger226.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:461:5: ( trigger_follows_clause )?
			int alt68=2;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==REGULAR_ID) ) {
				int LA68_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("follows"))) ) {
					alt68=1;
				}
			}
			switch (alt68) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:461:5: trigger_follows_clause
					{
					pushFollow(FOLLOW_trigger_follows_clause_in_create_trigger4320);
					trigger_follows_clause227=trigger_follows_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_trigger_follows_clause.add(trigger_follows_clause227.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:462:5: ( enable_key | disable_key )?
			int alt69=3;
			int LA69_0 = input.LA(1);
			if ( (LA69_0==REGULAR_ID) ) {
				int LA69_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("enable"))) ) {
					alt69=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("disable"))) ) {
					alt69=2;
				}
			}
			switch (alt69) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:462:6: enable_key
					{
					pushFollow(FOLLOW_enable_key_in_create_trigger4328);
					enable_key228=enable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_enable_key.add(enable_key228.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:462:17: disable_key
					{
					pushFollow(FOLLOW_disable_key_in_create_trigger4330);
					disable_key229=disable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_disable_key.add(disable_key229.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:463:5: ( trigger_when_clause )?
			int alt70=2;
			int LA70_0 = input.LA(1);
			if ( (LA70_0==SQL92_RESERVED_WHEN) ) {
				alt70=1;
			}
			switch (alt70) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:463:5: trigger_when_clause
					{
					pushFollow(FOLLOW_trigger_when_clause_in_create_trigger4338);
					trigger_when_clause230=trigger_when_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_trigger_when_clause.add(trigger_when_clause230.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_trigger_body_in_create_trigger4346);
			trigger_body231=trigger_body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_body.add(trigger_body231.getTree());
			SEMICOLON232=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_trigger4348); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON232);

			// AST REWRITE
			// elements: trigger_when_clause, trigger_body, disable_key, enable_key, non_dml_trigger, compound_dml_trigger, trigger_name, trigger_follows_clause, simple_dml_trigger, replace_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 465:5: -> ^( CREATE_TRIGGER[$create_key.start] ( replace_key )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( enable_key )? ( disable_key )? ( trigger_when_clause )? trigger_body )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:465:8: ^( CREATE_TRIGGER[$create_key.start] ( replace_key )? trigger_name ( simple_dml_trigger )? ( compound_dml_trigger )? ( non_dml_trigger )? ( trigger_follows_clause )? ( enable_key )? ( disable_key )? ( trigger_when_clause )? trigger_body )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_TRIGGER, (create_key219!=null?(create_key219.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:465:44: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_trigger_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:466:9: ( simple_dml_trigger )?
				if ( stream_simple_dml_trigger.hasNext() ) {
					adaptor.addChild(root_1, stream_simple_dml_trigger.nextTree());
				}
				stream_simple_dml_trigger.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:466:29: ( compound_dml_trigger )?
				if ( stream_compound_dml_trigger.hasNext() ) {
					adaptor.addChild(root_1, stream_compound_dml_trigger.nextTree());
				}
				stream_compound_dml_trigger.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:466:51: ( non_dml_trigger )?
				if ( stream_non_dml_trigger.hasNext() ) {
					adaptor.addChild(root_1, stream_non_dml_trigger.nextTree());
				}
				stream_non_dml_trigger.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:467:9: ( trigger_follows_clause )?
				if ( stream_trigger_follows_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_trigger_follows_clause.nextTree());
				}
				stream_trigger_follows_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:467:33: ( enable_key )?
				if ( stream_enable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_enable_key.nextTree());
				}
				stream_enable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:467:45: ( disable_key )?
				if ( stream_disable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_disable_key.nextTree());
				}
				stream_disable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:467:58: ( trigger_when_clause )?
				if ( stream_trigger_when_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_trigger_when_clause.nextTree());
				}
				stream_trigger_when_clause.reset();

				adaptor.addChild(root_1, stream_trigger_body.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_trigger"


	public static class trigger_follows_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "trigger_follows_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:470:1: trigger_follows_clause : follows_key trigger_name ( COMMA trigger_name )* -> ^( follows_key ( trigger_name )+ ) ;
	public final PLSQLParser.trigger_follows_clause_return trigger_follows_clause() throws RecognitionException {
		PLSQLParser.trigger_follows_clause_return retval = new PLSQLParser.trigger_follows_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA235=null;
		ParserRuleReturnScope follows_key233 =null;
		ParserRuleReturnScope trigger_name234 =null;
		ParserRuleReturnScope trigger_name236 =null;

		Object COMMA235_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
		RewriteRuleSubtreeStream stream_follows_key=new RewriteRuleSubtreeStream(adaptor,"rule follows_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:471:5: ( follows_key trigger_name ( COMMA trigger_name )* -> ^( follows_key ( trigger_name )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:471:10: follows_key trigger_name ( COMMA trigger_name )*
			{
			pushFollow(FOLLOW_follows_key_in_trigger_follows_clause4425);
			follows_key233=follows_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_follows_key.add(follows_key233.getTree());
			pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause4427);
			trigger_name234=trigger_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name234.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:471:35: ( COMMA trigger_name )*
			loop71:
			while (true) {
				int alt71=2;
				int LA71_0 = input.LA(1);
				if ( (LA71_0==COMMA) ) {
					alt71=1;
				}

				switch (alt71) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:471:36: COMMA trigger_name
					{
					COMMA235=(Token)match(input,COMMA,FOLLOW_COMMA_in_trigger_follows_clause4430); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA235);

					pushFollow(FOLLOW_trigger_name_in_trigger_follows_clause4432);
					trigger_name236=trigger_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name236.getTree());
					}
					break;

				default :
					break loop71;
				}
			}

			// AST REWRITE
			// elements: follows_key, trigger_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 472:9: -> ^( follows_key ( trigger_name )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:472:12: ^( follows_key ( trigger_name )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_follows_key.nextNode(), root_1);
				if ( !(stream_trigger_name.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_trigger_name.hasNext() ) {
					adaptor.addChild(root_1, stream_trigger_name.nextTree());
				}
				stream_trigger_name.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_follows_clause"


	public static class trigger_when_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "trigger_when_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:475:1: trigger_when_clause : when_key LEFT_PAREN condition RIGHT_PAREN -> ^( when_key ^( LOGIC_EXPR condition ) ) ;
	public final PLSQLParser.trigger_when_clause_return trigger_when_clause() throws RecognitionException {
		PLSQLParser.trigger_when_clause_return retval = new PLSQLParser.trigger_when_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN238=null;
		Token RIGHT_PAREN240=null;
		ParserRuleReturnScope when_key237 =null;
		ParserRuleReturnScope condition239 =null;

		Object LEFT_PAREN238_tree=null;
		Object RIGHT_PAREN240_tree=null;
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
		RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:476:5: ( when_key LEFT_PAREN condition RIGHT_PAREN -> ^( when_key ^( LOGIC_EXPR condition ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:476:10: when_key LEFT_PAREN condition RIGHT_PAREN
			{
			pushFollow(FOLLOW_when_key_in_trigger_when_clause4471);
			when_key237=when_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_when_key.add(when_key237.getTree());
			LEFT_PAREN238=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_trigger_when_clause4473); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN238);

			pushFollow(FOLLOW_condition_in_trigger_when_clause4475);
			condition239=condition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_condition.add(condition239.getTree());
			RIGHT_PAREN240=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_trigger_when_clause4477); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN240);

			// AST REWRITE
			// elements: when_key, condition
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 477:9: -> ^( when_key ^( LOGIC_EXPR condition ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:477:12: ^( when_key ^( LOGIC_EXPR condition ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:477:23: ^( LOGIC_EXPR condition )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
				adaptor.addChild(root_2, stream_condition.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_when_clause"


	public static class simple_dml_trigger_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "simple_dml_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:481:1: simple_dml_trigger : ( before_key | after_key | instead_key of_key ) dml_event_clause ( referencing_clause )? ( for_each_row )? -> ^( SIMPLE_DML ( before_key )? ( after_key )? ( instead_key )? ( for_each_row )? ( referencing_clause )? dml_event_clause ) ;
	public final PLSQLParser.simple_dml_trigger_return simple_dml_trigger() throws RecognitionException {
		PLSQLParser.simple_dml_trigger_return retval = new PLSQLParser.simple_dml_trigger_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope before_key241 =null;
		ParserRuleReturnScope after_key242 =null;
		ParserRuleReturnScope instead_key243 =null;
		ParserRuleReturnScope of_key244 =null;
		ParserRuleReturnScope dml_event_clause245 =null;
		ParserRuleReturnScope referencing_clause246 =null;
		ParserRuleReturnScope for_each_row247 =null;

		RewriteRuleSubtreeStream stream_dml_event_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_event_clause");
		RewriteRuleSubtreeStream stream_before_key=new RewriteRuleSubtreeStream(adaptor,"rule before_key");
		RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
		RewriteRuleSubtreeStream stream_referencing_clause=new RewriteRuleSubtreeStream(adaptor,"rule referencing_clause");
		RewriteRuleSubtreeStream stream_for_each_row=new RewriteRuleSubtreeStream(adaptor,"rule for_each_row");
		RewriteRuleSubtreeStream stream_after_key=new RewriteRuleSubtreeStream(adaptor,"rule after_key");
		RewriteRuleSubtreeStream stream_instead_key=new RewriteRuleSubtreeStream(adaptor,"rule instead_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:5: ( ( before_key | after_key | instead_key of_key ) dml_event_clause ( referencing_clause )? ( for_each_row )? -> ^( SIMPLE_DML ( before_key )? ( after_key )? ( instead_key )? ( for_each_row )? ( referencing_clause )? dml_event_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:10: ( before_key | after_key | instead_key of_key ) dml_event_clause ( referencing_clause )? ( for_each_row )?
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:10: ( before_key | after_key | instead_key of_key )
			int alt72=3;
			int LA72_0 = input.LA(1);
			if ( (LA72_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("instead"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
				int LA72_1 = input.LA(2);
				if ( (LA72_1==SQL92_RESERVED_OF) && ((input.LT(1).getText().equalsIgnoreCase("instead")))) {
					alt72=3;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
					alt72=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
					alt72=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 72, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt72) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:11: before_key
					{
					pushFollow(FOLLOW_before_key_in_simple_dml_trigger4519);
					before_key241=before_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_before_key.add(before_key241.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:22: after_key
					{
					pushFollow(FOLLOW_after_key_in_simple_dml_trigger4521);
					after_key242=after_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_after_key.add(after_key242.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:32: instead_key of_key
					{
					pushFollow(FOLLOW_instead_key_in_simple_dml_trigger4523);
					instead_key243=instead_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_instead_key.add(instead_key243.getTree());
					pushFollow(FOLLOW_of_key_in_simple_dml_trigger4525);
					of_key244=of_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_of_key.add(of_key244.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_dml_event_clause_in_simple_dml_trigger4528);
			dml_event_clause245=dml_event_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dml_event_clause.add(dml_event_clause245.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:69: ( referencing_clause )?
			int alt73=2;
			alt73 = dfa73.predict(input);
			switch (alt73) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:69: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_simple_dml_trigger4530);
					referencing_clause246=referencing_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_referencing_clause.add(referencing_clause246.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:89: ( for_each_row )?
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==SQL92_RESERVED_FOR) ) {
				alt74=1;
			}
			switch (alt74) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:482:89: for_each_row
					{
					pushFollow(FOLLOW_for_each_row_in_simple_dml_trigger4533);
					for_each_row247=for_each_row();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_for_each_row.add(for_each_row247.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: after_key, instead_key, referencing_clause, dml_event_clause, before_key, for_each_row
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 483:9: -> ^( SIMPLE_DML ( before_key )? ( after_key )? ( instead_key )? ( for_each_row )? ( referencing_clause )? dml_event_clause )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:483:12: ^( SIMPLE_DML ( before_key )? ( after_key )? ( instead_key )? ( for_each_row )? ( referencing_clause )? dml_event_clause )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SIMPLE_DML, "SIMPLE_DML"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:483:25: ( before_key )?
				if ( stream_before_key.hasNext() ) {
					adaptor.addChild(root_1, stream_before_key.nextTree());
				}
				stream_before_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:483:37: ( after_key )?
				if ( stream_after_key.hasNext() ) {
					adaptor.addChild(root_1, stream_after_key.nextTree());
				}
				stream_after_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:483:48: ( instead_key )?
				if ( stream_instead_key.hasNext() ) {
					adaptor.addChild(root_1, stream_instead_key.nextTree());
				}
				stream_instead_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:483:61: ( for_each_row )?
				if ( stream_for_each_row.hasNext() ) {
					adaptor.addChild(root_1, stream_for_each_row.nextTree());
				}
				stream_for_each_row.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:483:75: ( referencing_clause )?
				if ( stream_referencing_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_referencing_clause.nextTree());
				}
				stream_referencing_clause.reset();

				adaptor.addChild(root_1, stream_dml_event_clause.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "simple_dml_trigger"


	public static class for_each_row_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "for_each_row"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:486:1: for_each_row : for_key each_key row_key -> FOR_EACH_ROW[$for_key.start] ;
	public final PLSQLParser.for_each_row_return for_each_row() throws RecognitionException {
		PLSQLParser.for_each_row_return retval = new PLSQLParser.for_each_row_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope for_key248 =null;
		ParserRuleReturnScope each_key249 =null;
		ParserRuleReturnScope row_key250 =null;

		RewriteRuleSubtreeStream stream_row_key=new RewriteRuleSubtreeStream(adaptor,"rule row_key");
		RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
		RewriteRuleSubtreeStream stream_each_key=new RewriteRuleSubtreeStream(adaptor,"rule each_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:487:5: ( for_key each_key row_key -> FOR_EACH_ROW[$for_key.start] )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:487:10: for_key each_key row_key
			{
			pushFollow(FOLLOW_for_key_in_for_each_row4585);
			for_key248=for_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_for_key.add(for_key248.getTree());
			pushFollow(FOLLOW_each_key_in_for_each_row4587);
			each_key249=each_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_each_key.add(each_key249.getTree());
			pushFollow(FOLLOW_row_key_in_for_each_row4589);
			row_key250=row_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_row_key.add(row_key250.getTree());
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 487:35: -> FOR_EACH_ROW[$for_key.start]
			{
				adaptor.addChild(root_0, (Object)adaptor.create(FOR_EACH_ROW, (for_key248!=null?(for_key248.start):null)));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "for_each_row"


	public static class compound_dml_trigger_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compound_dml_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:490:1: compound_dml_trigger : for_key dml_event_clause ( referencing_clause )? -> ^( COMPOUND_DML[$for_key.start] ( referencing_clause )? dml_event_clause ) ;
	public final PLSQLParser.compound_dml_trigger_return compound_dml_trigger() throws RecognitionException {
		PLSQLParser.compound_dml_trigger_return retval = new PLSQLParser.compound_dml_trigger_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope for_key251 =null;
		ParserRuleReturnScope dml_event_clause252 =null;
		ParserRuleReturnScope referencing_clause253 =null;

		RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
		RewriteRuleSubtreeStream stream_dml_event_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_event_clause");
		RewriteRuleSubtreeStream stream_referencing_clause=new RewriteRuleSubtreeStream(adaptor,"rule referencing_clause");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:491:5: ( for_key dml_event_clause ( referencing_clause )? -> ^( COMPOUND_DML[$for_key.start] ( referencing_clause )? dml_event_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:491:10: for_key dml_event_clause ( referencing_clause )?
			{
			pushFollow(FOLLOW_for_key_in_compound_dml_trigger4614);
			for_key251=for_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_for_key.add(for_key251.getTree());
			pushFollow(FOLLOW_dml_event_clause_in_compound_dml_trigger4616);
			dml_event_clause252=dml_event_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dml_event_clause.add(dml_event_clause252.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:491:35: ( referencing_clause )?
			int alt75=2;
			alt75 = dfa75.predict(input);
			switch (alt75) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:491:35: referencing_clause
					{
					pushFollow(FOLLOW_referencing_clause_in_compound_dml_trigger4618);
					referencing_clause253=referencing_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_referencing_clause.add(referencing_clause253.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: dml_event_clause, referencing_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 492:9: -> ^( COMPOUND_DML[$for_key.start] ( referencing_clause )? dml_event_clause )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:492:12: ^( COMPOUND_DML[$for_key.start] ( referencing_clause )? dml_event_clause )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMPOUND_DML, (for_key251!=null?(for_key251.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:492:43: ( referencing_clause )?
				if ( stream_referencing_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_referencing_clause.nextTree());
				}
				stream_referencing_clause.reset();

				adaptor.addChild(root_1, stream_dml_event_clause.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compound_dml_trigger"


	public static class non_dml_trigger_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "non_dml_trigger"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:495:1: non_dml_trigger : ( before_key | after_key ) non_dml_event ( or_key non_dml_event )* on_key ( database_key | ( schema_name PERIOD )? schema_key ) -> ^( NON_DML ( before_key )? ( after_key )? ( non_dml_event )+ ( database_key )? ( schema_name )? ( schema_key )? ) ;
	public final PLSQLParser.non_dml_trigger_return non_dml_trigger() throws RecognitionException {
		PLSQLParser.non_dml_trigger_return retval = new PLSQLParser.non_dml_trigger_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token PERIOD262=null;
		ParserRuleReturnScope before_key254 =null;
		ParserRuleReturnScope after_key255 =null;
		ParserRuleReturnScope non_dml_event256 =null;
		ParserRuleReturnScope or_key257 =null;
		ParserRuleReturnScope non_dml_event258 =null;
		ParserRuleReturnScope on_key259 =null;
		ParserRuleReturnScope database_key260 =null;
		ParserRuleReturnScope schema_name261 =null;
		ParserRuleReturnScope schema_key263 =null;

		Object PERIOD262_tree=null;
		RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
		RewriteRuleSubtreeStream stream_database_key=new RewriteRuleSubtreeStream(adaptor,"rule database_key");
		RewriteRuleSubtreeStream stream_before_key=new RewriteRuleSubtreeStream(adaptor,"rule before_key");
		RewriteRuleSubtreeStream stream_non_dml_event=new RewriteRuleSubtreeStream(adaptor,"rule non_dml_event");
		RewriteRuleSubtreeStream stream_after_key=new RewriteRuleSubtreeStream(adaptor,"rule after_key");
		RewriteRuleSubtreeStream stream_schema_key=new RewriteRuleSubtreeStream(adaptor,"rule schema_key");
		RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
		RewriteRuleSubtreeStream stream_schema_name=new RewriteRuleSubtreeStream(adaptor,"rule schema_name");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:496:5: ( ( before_key | after_key ) non_dml_event ( or_key non_dml_event )* on_key ( database_key | ( schema_name PERIOD )? schema_key ) -> ^( NON_DML ( before_key )? ( after_key )? ( non_dml_event )+ ( database_key )? ( schema_name )? ( schema_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:496:10: ( before_key | after_key ) non_dml_event ( or_key non_dml_event )* on_key ( database_key | ( schema_name PERIOD )? schema_key )
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:496:10: ( before_key | after_key )
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
				int LA76_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
					alt76=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
					alt76=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt76) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:496:11: before_key
					{
					pushFollow(FOLLOW_before_key_in_non_dml_trigger4660);
					before_key254=before_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_before_key.add(before_key254.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:496:22: after_key
					{
					pushFollow(FOLLOW_after_key_in_non_dml_trigger4662);
					after_key255=after_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_after_key.add(after_key255.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger4665);
			non_dml_event256=non_dml_event();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_non_dml_event.add(non_dml_event256.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:496:47: ( or_key non_dml_event )*
			loop77:
			while (true) {
				int alt77=2;
				int LA77_0 = input.LA(1);
				if ( (LA77_0==SQL92_RESERVED_OR) ) {
					alt77=1;
				}

				switch (alt77) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:496:48: or_key non_dml_event
					{
					pushFollow(FOLLOW_or_key_in_non_dml_trigger4668);
					or_key257=or_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_or_key.add(or_key257.getTree());
					pushFollow(FOLLOW_non_dml_event_in_non_dml_trigger4670);
					non_dml_event258=non_dml_event();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_non_dml_event.add(non_dml_event258.getTree());
					}
					break;

				default :
					break loop77;
				}
			}

			pushFollow(FOLLOW_on_key_in_non_dml_trigger4682);
			on_key259=on_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_on_key.add(on_key259.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:497:16: ( database_key | ( schema_name PERIOD )? schema_key )
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==REGULAR_ID) ) {
				int LA79_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("database"))) ) {
					alt79=1;
				}
				else if ( (true) ) {
					alt79=2;
				}

			}
			else if ( (LA79_0==DELIMITED_ID||LA79_0==INTRODUCER) ) {
				alt79=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 79, 0, input);
				throw nvae;
			}

			switch (alt79) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:497:17: database_key
					{
					pushFollow(FOLLOW_database_key_in_non_dml_trigger4685);
					database_key260=database_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_database_key.add(database_key260.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:497:32: ( schema_name PERIOD )? schema_key
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:497:32: ( schema_name PERIOD )?
					int alt78=2;
					int LA78_0 = input.LA(1);
					if ( (LA78_0==DELIMITED_ID||LA78_0==INTRODUCER) ) {
						alt78=1;
					}
					else if ( (LA78_0==REGULAR_ID) ) {
						int LA78_2 = input.LA(2);
						if ( (LA78_2==PERIOD) ) {
							alt78=1;
						}
					}
					switch (alt78) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:497:33: schema_name PERIOD
							{
							pushFollow(FOLLOW_schema_name_in_non_dml_trigger4690);
							schema_name261=schema_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_schema_name.add(schema_name261.getTree());
							PERIOD262=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_non_dml_trigger4692); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD262);

							}
							break;

					}

					pushFollow(FOLLOW_schema_key_in_non_dml_trigger4696);
					schema_key263=schema_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_schema_key.add(schema_key263.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: database_key, non_dml_event, schema_name, after_key, schema_key, before_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 498:9: -> ^( NON_DML ( before_key )? ( after_key )? ( non_dml_event )+ ( database_key )? ( schema_name )? ( schema_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:498:12: ^( NON_DML ( before_key )? ( after_key )? ( non_dml_event )+ ( database_key )? ( schema_name )? ( schema_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NON_DML, "NON_DML"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:498:22: ( before_key )?
				if ( stream_before_key.hasNext() ) {
					adaptor.addChild(root_1, stream_before_key.nextTree());
				}
				stream_before_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:498:34: ( after_key )?
				if ( stream_after_key.hasNext() ) {
					adaptor.addChild(root_1, stream_after_key.nextTree());
				}
				stream_after_key.reset();

				if ( !(stream_non_dml_event.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_non_dml_event.hasNext() ) {
					adaptor.addChild(root_1, stream_non_dml_event.nextTree());
				}
				stream_non_dml_event.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:498:60: ( database_key )?
				if ( stream_database_key.hasNext() ) {
					adaptor.addChild(root_1, stream_database_key.nextTree());
				}
				stream_database_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:498:74: ( schema_name )?
				if ( stream_schema_name.hasNext() ) {
					adaptor.addChild(root_1, stream_schema_name.nextTree());
				}
				stream_schema_name.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:498:87: ( schema_key )?
				if ( stream_schema_key.hasNext() ) {
					adaptor.addChild(root_1, stream_schema_key.nextTree());
				}
				stream_schema_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_trigger"


	public static class trigger_body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "trigger_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:501:1: trigger_body : ( ( compound_key trigger_key )=> compound_trigger_block | ( call_key id )=> call_key ^ routine_clause | block -> ^( BODY_MODE block ) );
	public final PLSQLParser.trigger_body_return trigger_body() throws RecognitionException {
		PLSQLParser.trigger_body_return retval = new PLSQLParser.trigger_body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope compound_trigger_block264 =null;
		ParserRuleReturnScope call_key265 =null;
		ParserRuleReturnScope routine_clause266 =null;
		ParserRuleReturnScope block267 =null;

		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:502:5: ( ( compound_key trigger_key )=> compound_trigger_block | ( call_key id )=> call_key ^ routine_clause | block -> ^( BODY_MODE block ) )
			int alt80=3;
			int LA80_0 = input.LA(1);
			if ( (LA80_0==REGULAR_ID) ) {
				int LA80_1 = input.LA(2);
				if ( (((input.LT(1).getText().equalsIgnoreCase("compound"))&&synpred36_PLSQLParser())) ) {
					alt80=1;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("call"))&&synpred37_PLSQLParser())) ) {
					alt80=2;
				}
				else if ( (true) ) {
					alt80=3;
				}

			}
			else if ( (LA80_0==BINDVAR||LA80_0==COLON||LA80_0==DELIMITED_ID||LA80_0==INTRODUCER||LA80_0==SQL92_RESERVED_BEGIN||LA80_0==SQL92_RESERVED_CREATE||LA80_0==SQL92_RESERVED_CURSOR||LA80_0==SQL92_RESERVED_DECLARE||LA80_0==SQL92_RESERVED_PROCEDURE) ) {
				alt80=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 80, 0, input);
				throw nvae;
			}

			switch (alt80) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:502:10: ( compound_key trigger_key )=> compound_trigger_block
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_compound_trigger_block_in_trigger_body4757);
					compound_trigger_block264=compound_trigger_block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_trigger_block264.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:503:10: ( call_key id )=> call_key ^ routine_clause
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_call_key_in_trigger_body4775);
					call_key265=call_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(call_key265.getTree(), root_0);
					pushFollow(FOLLOW_routine_clause_in_trigger_body4778);
					routine_clause266=routine_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, routine_clause266.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:504:10: block
					{
					pushFollow(FOLLOW_block_in_trigger_body4790);
					block267=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block267.getTree());
					// AST REWRITE
					// elements: block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 504:16: -> ^( BODY_MODE block )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:504:19: ^( BODY_MODE block )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BODY_MODE, "BODY_MODE"), root_1);
						adaptor.addChild(root_1, stream_block.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "trigger_body"


	public static class routine_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "routine_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:507:1: routine_clause : routine_name ( function_argument )? ;
	public final PLSQLParser.routine_clause_return routine_clause() throws RecognitionException {
		PLSQLParser.routine_clause_return retval = new PLSQLParser.routine_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope routine_name268 =null;
		ParserRuleReturnScope function_argument269 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:508:5: ( routine_name ( function_argument )? )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:508:10: routine_name ( function_argument )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_routine_name_in_routine_clause4818);
			routine_name268=routine_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, routine_name268.getTree());

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:508:23: ( function_argument )?
			int alt81=2;
			int LA81_0 = input.LA(1);
			if ( (LA81_0==LEFT_PAREN) ) {
				alt81=1;
			}
			switch (alt81) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:508:23: function_argument
					{
					pushFollow(FOLLOW_function_argument_in_routine_clause4820);
					function_argument269=function_argument();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function_argument269.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "routine_clause"


	public static class compound_trigger_block_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compound_trigger_block"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:511:1: compound_trigger_block : compound_key trigger_key ( declare_spec )* ( timing_point_section )+ end_key trigger_name -> ^( compound_key trigger_name ( declare_spec )* ( timing_point_section )+ ) ;
	public final PLSQLParser.compound_trigger_block_return compound_trigger_block() throws RecognitionException {
		PLSQLParser.compound_trigger_block_return retval = new PLSQLParser.compound_trigger_block_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope compound_key270 =null;
		ParserRuleReturnScope trigger_key271 =null;
		ParserRuleReturnScope declare_spec272 =null;
		ParserRuleReturnScope timing_point_section273 =null;
		ParserRuleReturnScope end_key274 =null;
		ParserRuleReturnScope trigger_name275 =null;

		RewriteRuleSubtreeStream stream_trigger_name=new RewriteRuleSubtreeStream(adaptor,"rule trigger_name");
		RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
		RewriteRuleSubtreeStream stream_trigger_key=new RewriteRuleSubtreeStream(adaptor,"rule trigger_key");
		RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
		RewriteRuleSubtreeStream stream_compound_key=new RewriteRuleSubtreeStream(adaptor,"rule compound_key");
		RewriteRuleSubtreeStream stream_timing_point_section=new RewriteRuleSubtreeStream(adaptor,"rule timing_point_section");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:512:5: ( compound_key trigger_key ( declare_spec )* ( timing_point_section )+ end_key trigger_name -> ^( compound_key trigger_name ( declare_spec )* ( timing_point_section )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:512:10: compound_key trigger_key ( declare_spec )* ( timing_point_section )+ end_key trigger_name
			{
			pushFollow(FOLLOW_compound_key_in_compound_trigger_block4841);
			compound_key270=compound_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_compound_key.add(compound_key270.getTree());
			pushFollow(FOLLOW_trigger_key_in_compound_trigger_block4843);
			trigger_key271=trigger_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_key.add(trigger_key271.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:512:35: ( declare_spec )*
			loop82:
			while (true) {
				int alt82=2;
				int LA82_0 = input.LA(1);
				if ( (LA82_0==REGULAR_ID) ) {
					int LA82_1 = input.LA(2);
					if ( (!((((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before")))))) ) {
						alt82=1;
					}

				}
				else if ( (LA82_0==BINDVAR||LA82_0==COLON||LA82_0==DELIMITED_ID||LA82_0==INTRODUCER||LA82_0==SQL92_RESERVED_CREATE||LA82_0==SQL92_RESERVED_CURSOR||LA82_0==SQL92_RESERVED_PROCEDURE) ) {
					alt82=1;
				}

				switch (alt82) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:512:35: declare_spec
					{
					pushFollow(FOLLOW_declare_spec_in_compound_trigger_block4845);
					declare_spec272=declare_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec272.getTree());
					}
					break;

				default :
					break loop82;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:512:49: ( timing_point_section )+
			int cnt83=0;
			loop83:
			while (true) {
				int alt83=2;
				int LA83_0 = input.LA(1);
				if ( (LA83_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
					alt83=1;
				}

				switch (alt83) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:512:49: timing_point_section
					{
					pushFollow(FOLLOW_timing_point_section_in_compound_trigger_block4848);
					timing_point_section273=timing_point_section();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_timing_point_section.add(timing_point_section273.getTree());
					}
					break;

				default :
					if ( cnt83 >= 1 ) break loop83;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(83, input);
					throw eee;
				}
				cnt83++;
			}

			pushFollow(FOLLOW_end_key_in_compound_trigger_block4851);
			end_key274=end_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_end_key.add(end_key274.getTree());
			pushFollow(FOLLOW_trigger_name_in_compound_trigger_block4853);
			trigger_name275=trigger_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_trigger_name.add(trigger_name275.getTree());
			// AST REWRITE
			// elements: timing_point_section, declare_spec, trigger_name, compound_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 513:9: -> ^( compound_key trigger_name ( declare_spec )* ( timing_point_section )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:513:12: ^( compound_key trigger_name ( declare_spec )* ( timing_point_section )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_compound_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_trigger_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:513:40: ( declare_spec )*
				while ( stream_declare_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_declare_spec.nextTree());
				}
				stream_declare_spec.reset();

				if ( !(stream_timing_point_section.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_timing_point_section.hasNext() ) {
					adaptor.addChild(root_1, stream_timing_point_section.nextTree());
				}
				stream_timing_point_section.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compound_trigger_block"


	public static class timing_point_section_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "timing_point_section"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:516:1: timing_point_section options {k=3; } : (bk= before_key statement_key is_key block before_key statement_key SEMICOLON -> ^( BEFORE_STATEMENT[$bk.start] block ) |bk= before_key each_key row_key is_key block before_key each_key row_key SEMICOLON -> ^( BEFORE_EACH_ROW[$bk.start] block ) |ak= after_key statement_key is_key block after_key statement_key SEMICOLON -> ^( AFTER_STATEMENT[$ak.start] block ) |ak= after_key each_key row_key is_key block after_key each_key row_key SEMICOLON -> ^( AFTER_EACH_ROW[$ak.start] block ) );
	public final PLSQLParser.timing_point_section_return timing_point_section() throws RecognitionException {
		PLSQLParser.timing_point_section_return retval = new PLSQLParser.timing_point_section_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON281=null;
		Token SEMICOLON289=null;
		Token SEMICOLON295=null;
		Token SEMICOLON303=null;
		ParserRuleReturnScope bk =null;
		ParserRuleReturnScope ak =null;
		ParserRuleReturnScope statement_key276 =null;
		ParserRuleReturnScope is_key277 =null;
		ParserRuleReturnScope block278 =null;
		ParserRuleReturnScope before_key279 =null;
		ParserRuleReturnScope statement_key280 =null;
		ParserRuleReturnScope each_key282 =null;
		ParserRuleReturnScope row_key283 =null;
		ParserRuleReturnScope is_key284 =null;
		ParserRuleReturnScope block285 =null;
		ParserRuleReturnScope before_key286 =null;
		ParserRuleReturnScope each_key287 =null;
		ParserRuleReturnScope row_key288 =null;
		ParserRuleReturnScope statement_key290 =null;
		ParserRuleReturnScope is_key291 =null;
		ParserRuleReturnScope block292 =null;
		ParserRuleReturnScope after_key293 =null;
		ParserRuleReturnScope statement_key294 =null;
		ParserRuleReturnScope each_key296 =null;
		ParserRuleReturnScope row_key297 =null;
		ParserRuleReturnScope is_key298 =null;
		ParserRuleReturnScope block299 =null;
		ParserRuleReturnScope after_key300 =null;
		ParserRuleReturnScope each_key301 =null;
		ParserRuleReturnScope row_key302 =null;

		Object SEMICOLON281_tree=null;
		Object SEMICOLON289_tree=null;
		Object SEMICOLON295_tree=null;
		Object SEMICOLON303_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_row_key=new RewriteRuleSubtreeStream(adaptor,"rule row_key");
		RewriteRuleSubtreeStream stream_before_key=new RewriteRuleSubtreeStream(adaptor,"rule before_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_each_key=new RewriteRuleSubtreeStream(adaptor,"rule each_key");
		RewriteRuleSubtreeStream stream_after_key=new RewriteRuleSubtreeStream(adaptor,"rule after_key");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_statement_key=new RewriteRuleSubtreeStream(adaptor,"rule statement_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:519:6: (bk= before_key statement_key is_key block before_key statement_key SEMICOLON -> ^( BEFORE_STATEMENT[$bk.start] block ) |bk= before_key each_key row_key is_key block before_key each_key row_key SEMICOLON -> ^( BEFORE_EACH_ROW[$bk.start] block ) |ak= after_key statement_key is_key block after_key statement_key SEMICOLON -> ^( AFTER_STATEMENT[$ak.start] block ) |ak= after_key each_key row_key is_key block after_key each_key row_key SEMICOLON -> ^( AFTER_EACH_ROW[$ak.start] block ) )
			int alt84=4;
			int LA84_0 = input.LA(1);
			if ( (LA84_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
				int LA84_1 = input.LA(2);
				if ( (LA84_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
					int LA84_3 = input.LA(3);
					if ( (LA84_3==SQL92_RESERVED_IS) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
						int LA84_5 = input.LA(4);
						if ( ((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
							alt84=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
							alt84=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 84, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA84_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before"))))) {
						int LA84_6 = input.LA(4);
						if ( ((input.LT(1).getText().equalsIgnoreCase("before"))) ) {
							alt84=2;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("after"))) ) {
							alt84=4;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 84, 6, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

				}

			}

			switch (alt84) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:519:11: bk= before_key statement_key is_key block before_key statement_key SEMICOLON
					{
					pushFollow(FOLLOW_before_key_in_timing_point_section4905);
					bk=before_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_before_key.add(bk.getTree());
					pushFollow(FOLLOW_statement_key_in_timing_point_section4907);
					statement_key276=statement_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statement_key.add(statement_key276.getTree());
					pushFollow(FOLLOW_is_key_in_timing_point_section4909);
					is_key277=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key277.getTree());
					pushFollow(FOLLOW_block_in_timing_point_section4911);
					block278=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block278.getTree());
					pushFollow(FOLLOW_before_key_in_timing_point_section4913);
					before_key279=before_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_before_key.add(before_key279.getTree());
					pushFollow(FOLLOW_statement_key_in_timing_point_section4915);
					statement_key280=statement_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statement_key.add(statement_key280.getTree());
					SEMICOLON281=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_timing_point_section4917); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON281);

					// AST REWRITE
					// elements: block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 520:9: -> ^( BEFORE_STATEMENT[$bk.start] block )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:520:12: ^( BEFORE_STATEMENT[$bk.start] block )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BEFORE_STATEMENT, (bk!=null?(bk.start):null)), root_1);
						adaptor.addChild(root_1, stream_block.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:521:10: bk= before_key each_key row_key is_key block before_key each_key row_key SEMICOLON
					{
					pushFollow(FOLLOW_before_key_in_timing_point_section4947);
					bk=before_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_before_key.add(bk.getTree());
					pushFollow(FOLLOW_each_key_in_timing_point_section4949);
					each_key282=each_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_each_key.add(each_key282.getTree());
					pushFollow(FOLLOW_row_key_in_timing_point_section4951);
					row_key283=row_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_row_key.add(row_key283.getTree());
					pushFollow(FOLLOW_is_key_in_timing_point_section4953);
					is_key284=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key284.getTree());
					pushFollow(FOLLOW_block_in_timing_point_section4955);
					block285=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block285.getTree());
					pushFollow(FOLLOW_before_key_in_timing_point_section4957);
					before_key286=before_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_before_key.add(before_key286.getTree());
					pushFollow(FOLLOW_each_key_in_timing_point_section4959);
					each_key287=each_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_each_key.add(each_key287.getTree());
					pushFollow(FOLLOW_row_key_in_timing_point_section4961);
					row_key288=row_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_row_key.add(row_key288.getTree());
					SEMICOLON289=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_timing_point_section4963); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON289);

					// AST REWRITE
					// elements: block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 522:9: -> ^( BEFORE_EACH_ROW[$bk.start] block )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:522:12: ^( BEFORE_EACH_ROW[$bk.start] block )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BEFORE_EACH_ROW, (bk!=null?(bk.start):null)), root_1);
						adaptor.addChild(root_1, stream_block.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:523:10: ak= after_key statement_key is_key block after_key statement_key SEMICOLON
					{
					pushFollow(FOLLOW_after_key_in_timing_point_section4993);
					ak=after_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_after_key.add(ak.getTree());
					pushFollow(FOLLOW_statement_key_in_timing_point_section4995);
					statement_key290=statement_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statement_key.add(statement_key290.getTree());
					pushFollow(FOLLOW_is_key_in_timing_point_section4997);
					is_key291=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key291.getTree());
					pushFollow(FOLLOW_block_in_timing_point_section4999);
					block292=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block292.getTree());
					pushFollow(FOLLOW_after_key_in_timing_point_section5001);
					after_key293=after_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_after_key.add(after_key293.getTree());
					pushFollow(FOLLOW_statement_key_in_timing_point_section5003);
					statement_key294=statement_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statement_key.add(statement_key294.getTree());
					SEMICOLON295=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_timing_point_section5005); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON295);

					// AST REWRITE
					// elements: block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 524:9: -> ^( AFTER_STATEMENT[$ak.start] block )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:524:12: ^( AFTER_STATEMENT[$ak.start] block )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AFTER_STATEMENT, (ak!=null?(ak.start):null)), root_1);
						adaptor.addChild(root_1, stream_block.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:525:10: ak= after_key each_key row_key is_key block after_key each_key row_key SEMICOLON
					{
					pushFollow(FOLLOW_after_key_in_timing_point_section5035);
					ak=after_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_after_key.add(ak.getTree());
					pushFollow(FOLLOW_each_key_in_timing_point_section5037);
					each_key296=each_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_each_key.add(each_key296.getTree());
					pushFollow(FOLLOW_row_key_in_timing_point_section5039);
					row_key297=row_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_row_key.add(row_key297.getTree());
					pushFollow(FOLLOW_is_key_in_timing_point_section5041);
					is_key298=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key298.getTree());
					pushFollow(FOLLOW_block_in_timing_point_section5043);
					block299=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block299.getTree());
					pushFollow(FOLLOW_after_key_in_timing_point_section5045);
					after_key300=after_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_after_key.add(after_key300.getTree());
					pushFollow(FOLLOW_each_key_in_timing_point_section5047);
					each_key301=each_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_each_key.add(each_key301.getTree());
					pushFollow(FOLLOW_row_key_in_timing_point_section5049);
					row_key302=row_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_row_key.add(row_key302.getTree());
					SEMICOLON303=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_timing_point_section5051); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON303);

					// AST REWRITE
					// elements: block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 526:9: -> ^( AFTER_EACH_ROW[$ak.start] block )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:526:12: ^( AFTER_EACH_ROW[$ak.start] block )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AFTER_EACH_ROW, (ak!=null?(ak.start):null)), root_1);
						adaptor.addChild(root_1, stream_block.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "timing_point_section"


	public static class non_dml_event_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "non_dml_event"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:529:1: non_dml_event : ( alter_key | analyze_key | associate_key statistics_key | audit_key | comment_key | create_key | disassociate_key statistics_key | drop_key | grant_key | noaudit_key | rename_key | revoke_key | truncate_key | ddl_key | startup_key | shutdown_key | db_role_change_key | logon_key | logoff_key | servererror_key | suspend_key | database_key | schema_key | follows_key );
	public final PLSQLParser.non_dml_event_return non_dml_event() throws RecognitionException {
		PLSQLParser.non_dml_event_return retval = new PLSQLParser.non_dml_event_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope alter_key304 =null;
		ParserRuleReturnScope analyze_key305 =null;
		ParserRuleReturnScope associate_key306 =null;
		ParserRuleReturnScope statistics_key307 =null;
		ParserRuleReturnScope audit_key308 =null;
		ParserRuleReturnScope comment_key309 =null;
		ParserRuleReturnScope create_key310 =null;
		ParserRuleReturnScope disassociate_key311 =null;
		ParserRuleReturnScope statistics_key312 =null;
		ParserRuleReturnScope drop_key313 =null;
		ParserRuleReturnScope grant_key314 =null;
		ParserRuleReturnScope noaudit_key315 =null;
		ParserRuleReturnScope rename_key316 =null;
		ParserRuleReturnScope revoke_key317 =null;
		ParserRuleReturnScope truncate_key318 =null;
		ParserRuleReturnScope ddl_key319 =null;
		ParserRuleReturnScope startup_key320 =null;
		ParserRuleReturnScope shutdown_key321 =null;
		ParserRuleReturnScope db_role_change_key322 =null;
		ParserRuleReturnScope logon_key323 =null;
		ParserRuleReturnScope logoff_key324 =null;
		ParserRuleReturnScope servererror_key325 =null;
		ParserRuleReturnScope suspend_key326 =null;
		ParserRuleReturnScope database_key327 =null;
		ParserRuleReturnScope schema_key328 =null;
		ParserRuleReturnScope follows_key329 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:530:5: ( alter_key | analyze_key | associate_key statistics_key | audit_key | comment_key | create_key | disassociate_key statistics_key | drop_key | grant_key | noaudit_key | rename_key | revoke_key | truncate_key | ddl_key | startup_key | shutdown_key | db_role_change_key | logon_key | logoff_key | servererror_key | suspend_key | database_key | schema_key | follows_key )
			int alt85=24;
			int LA85_0 = input.LA(1);
			if ( (LA85_0==SQL92_RESERVED_ALTER) ) {
				alt85=1;
			}
			else if ( (LA85_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("suspend"))||(input.LT(1).getText().equalsIgnoreCase("db_role_change"))||(input.LT(1).getText().equalsIgnoreCase("shutdown"))||(input.LT(1).getText().equalsIgnoreCase("disassociate"))||(input.LT(1).getText().equalsIgnoreCase("logoff"))||(input.LT(1).getText().equalsIgnoreCase("database"))||(input.LT(1).getText().equalsIgnoreCase("ddl"))||(input.LT(1).getText().equalsIgnoreCase("rename"))||(input.LT(1).getText().equalsIgnoreCase("logon"))||(input.LT(1).getText().equalsIgnoreCase("noaudit"))||(input.LT(1).getText().equalsIgnoreCase("audit"))||(input.LT(1).getText().equalsIgnoreCase("startup"))||(input.LT(1).getText().equalsIgnoreCase("comment"))||(input.LT(1).getText().equalsIgnoreCase("servererror"))||(input.LT(1).getText().equalsIgnoreCase("schema"))||(input.LT(1).getText().equalsIgnoreCase("analyze"))||(input.LT(1).getText().equalsIgnoreCase("associate"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("truncate"))))) {
				int LA85_2 = input.LA(2);
				if ( (LA85_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disassociate"))||(input.LT(1).getText().equalsIgnoreCase("associate"))))) {
					int LA85_7 = input.LA(3);
					if ( ((input.LT(1).getText().equalsIgnoreCase("associate"))) ) {
						alt85=3;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("disassociate"))) ) {
						alt85=7;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 85, 7, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("analyze"))) ) {
					alt85=2;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("audit"))) ) {
					alt85=4;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("comment"))) ) {
					alt85=5;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("noaudit"))) ) {
					alt85=10;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("rename"))) ) {
					alt85=11;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("truncate"))) ) {
					alt85=13;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("ddl"))) ) {
					alt85=14;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("startup"))) ) {
					alt85=15;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("shutdown"))) ) {
					alt85=16;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("db_role_change"))) ) {
					alt85=17;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("logon"))) ) {
					alt85=18;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("logoff"))) ) {
					alt85=19;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("servererror"))) ) {
					alt85=20;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("suspend"))) ) {
					alt85=21;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("database"))) ) {
					alt85=22;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("schema"))) ) {
					alt85=23;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("follows"))) ) {
					alt85=24;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 85, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA85_0==SQL92_RESERVED_CREATE) ) {
				alt85=6;
			}
			else if ( (LA85_0==SQL92_RESERVED_DROP) ) {
				alt85=8;
			}
			else if ( (LA85_0==SQL92_RESERVED_GRANT) ) {
				alt85=9;
			}
			else if ( (LA85_0==SQL92_RESERVED_REVOKE) ) {
				alt85=12;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 85, 0, input);
				throw nvae;
			}

			switch (alt85) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:530:10: alter_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_key_in_non_dml_event5088);
					alter_key304=alter_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_key304.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:531:10: analyze_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_analyze_key_in_non_dml_event5099);
					analyze_key305=analyze_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, analyze_key305.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:532:10: associate_key statistics_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_associate_key_in_non_dml_event5110);
					associate_key306=associate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, associate_key306.getTree());

					pushFollow(FOLLOW_statistics_key_in_non_dml_event5112);
					statistics_key307=statistics_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statistics_key307.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:533:10: audit_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_audit_key_in_non_dml_event5123);
					audit_key308=audit_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, audit_key308.getTree());

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:534:10: comment_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_comment_key_in_non_dml_event5134);
					comment_key309=comment_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, comment_key309.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:535:10: create_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_key_in_non_dml_event5145);
					create_key310=create_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_key310.getTree());

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:536:10: disassociate_key statistics_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_disassociate_key_in_non_dml_event5156);
					disassociate_key311=disassociate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, disassociate_key311.getTree());

					pushFollow(FOLLOW_statistics_key_in_non_dml_event5158);
					statistics_key312=statistics_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, statistics_key312.getTree());

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:537:10: drop_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_drop_key_in_non_dml_event5169);
					drop_key313=drop_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, drop_key313.getTree());

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:538:10: grant_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_grant_key_in_non_dml_event5180);
					grant_key314=grant_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grant_key314.getTree());

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:539:10: noaudit_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_noaudit_key_in_non_dml_event5191);
					noaudit_key315=noaudit_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, noaudit_key315.getTree());

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:540:10: rename_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_rename_key_in_non_dml_event5202);
					rename_key316=rename_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rename_key316.getTree());

					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:541:10: revoke_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_revoke_key_in_non_dml_event5213);
					revoke_key317=revoke_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, revoke_key317.getTree());

					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:542:10: truncate_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_truncate_key_in_non_dml_event5224);
					truncate_key318=truncate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, truncate_key318.getTree());

					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:543:10: ddl_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_ddl_key_in_non_dml_event5235);
					ddl_key319=ddl_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ddl_key319.getTree());

					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:544:10: startup_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_startup_key_in_non_dml_event5246);
					startup_key320=startup_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, startup_key320.getTree());

					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:545:10: shutdown_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_shutdown_key_in_non_dml_event5257);
					shutdown_key321=shutdown_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, shutdown_key321.getTree());

					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:546:10: db_role_change_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_db_role_change_key_in_non_dml_event5268);
					db_role_change_key322=db_role_change_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, db_role_change_key322.getTree());

					}
					break;
				case 18 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:547:10: logon_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_logon_key_in_non_dml_event5279);
					logon_key323=logon_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, logon_key323.getTree());

					}
					break;
				case 19 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:548:10: logoff_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_logoff_key_in_non_dml_event5290);
					logoff_key324=logoff_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, logoff_key324.getTree());

					}
					break;
				case 20 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:549:10: servererror_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_servererror_key_in_non_dml_event5301);
					servererror_key325=servererror_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, servererror_key325.getTree());

					}
					break;
				case 21 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:550:10: suspend_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_suspend_key_in_non_dml_event5312);
					suspend_key326=suspend_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, suspend_key326.getTree());

					}
					break;
				case 22 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:551:10: database_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_database_key_in_non_dml_event5323);
					database_key327=database_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, database_key327.getTree());

					}
					break;
				case 23 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:552:10: schema_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_schema_key_in_non_dml_event5334);
					schema_key328=schema_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_key328.getTree());

					}
					break;
				case 24 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:553:10: follows_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_follows_key_in_non_dml_event5345);
					follows_key329=follows_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, follows_key329.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "non_dml_event"


	public static class dml_event_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dml_event_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:556:1: dml_event_clause : dml_event_element ( or_key dml_event_element )* on_key ( dml_event_nested_clause )? tableview_name -> ^( DML_EVENT ( dml_event_element )+ ^( on_key tableview_name ( dml_event_nested_clause )? ) ) ;
	public final PLSQLParser.dml_event_clause_return dml_event_clause() throws RecognitionException {
		PLSQLParser.dml_event_clause_return retval = new PLSQLParser.dml_event_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope dml_event_element330 =null;
		ParserRuleReturnScope or_key331 =null;
		ParserRuleReturnScope dml_event_element332 =null;
		ParserRuleReturnScope on_key333 =null;
		ParserRuleReturnScope dml_event_nested_clause334 =null;
		ParserRuleReturnScope tableview_name335 =null;

		RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
		RewriteRuleSubtreeStream stream_dml_event_nested_clause=new RewriteRuleSubtreeStream(adaptor,"rule dml_event_nested_clause");
		RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
		RewriteRuleSubtreeStream stream_dml_event_element=new RewriteRuleSubtreeStream(adaptor,"rule dml_event_element");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:557:5: ( dml_event_element ( or_key dml_event_element )* on_key ( dml_event_nested_clause )? tableview_name -> ^( DML_EVENT ( dml_event_element )+ ^( on_key tableview_name ( dml_event_nested_clause )? ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:557:10: dml_event_element ( or_key dml_event_element )* on_key ( dml_event_nested_clause )? tableview_name
			{
			pushFollow(FOLLOW_dml_event_element_in_dml_event_clause5365);
			dml_event_element330=dml_event_element();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dml_event_element.add(dml_event_element330.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:557:28: ( or_key dml_event_element )*
			loop86:
			while (true) {
				int alt86=2;
				int LA86_0 = input.LA(1);
				if ( (LA86_0==SQL92_RESERVED_OR) ) {
					alt86=1;
				}

				switch (alt86) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:557:29: or_key dml_event_element
					{
					pushFollow(FOLLOW_or_key_in_dml_event_clause5368);
					or_key331=or_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_or_key.add(or_key331.getTree());
					pushFollow(FOLLOW_dml_event_element_in_dml_event_clause5370);
					dml_event_element332=dml_event_element();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dml_event_element.add(dml_event_element332.getTree());
					}
					break;

				default :
					break loop86;
				}
			}

			pushFollow(FOLLOW_on_key_in_dml_event_clause5382);
			on_key333=on_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_on_key.add(on_key333.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:559:9: ( dml_event_nested_clause )?
			int alt87=2;
			int LA87_0 = input.LA(1);
			if ( (LA87_0==REGULAR_ID) ) {
				int LA87_1 = input.LA(2);
				if ( (LA87_1==SQL92_RESERVED_TABLE) && ((input.LT(1).getText().equalsIgnoreCase("nested")))) {
					alt87=1;
				}
			}
			switch (alt87) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:559:9: dml_event_nested_clause
					{
					pushFollow(FOLLOW_dml_event_nested_clause_in_dml_event_clause5393);
					dml_event_nested_clause334=dml_event_nested_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dml_event_nested_clause.add(dml_event_nested_clause334.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableview_name_in_dml_event_clause5396);
			tableview_name335=tableview_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name335.getTree());
			// AST REWRITE
			// elements: tableview_name, dml_event_element, dml_event_nested_clause, on_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 560:9: -> ^( DML_EVENT ( dml_event_element )+ ^( on_key tableview_name ( dml_event_nested_clause )? ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:560:12: ^( DML_EVENT ( dml_event_element )+ ^( on_key tableview_name ( dml_event_nested_clause )? ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DML_EVENT, "DML_EVENT"), root_1);
				if ( !(stream_dml_event_element.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_dml_event_element.hasNext() ) {
					adaptor.addChild(root_1, stream_dml_event_element.nextTree());
				}
				stream_dml_event_element.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:560:43: ^( on_key tableview_name ( dml_event_nested_clause )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_on_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_tableview_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:560:67: ( dml_event_nested_clause )?
				if ( stream_dml_event_nested_clause.hasNext() ) {
					adaptor.addChild(root_2, stream_dml_event_nested_clause.nextTree());
				}
				stream_dml_event_nested_clause.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_clause"


	public static class dml_event_element_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dml_event_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:563:1: dml_event_element : ( delete_key | insert_key | update_key ) ( of_key column_name ( COMMA column_name )* )? -> ^( DML_EVENT_ELEMENT ( delete_key )? ( insert_key )? ( update_key )? ^( COLUMNS ( column_name )* ) ) ;
	public final PLSQLParser.dml_event_element_return dml_event_element() throws RecognitionException {
		PLSQLParser.dml_event_element_return retval = new PLSQLParser.dml_event_element_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA341=null;
		ParserRuleReturnScope delete_key336 =null;
		ParserRuleReturnScope insert_key337 =null;
		ParserRuleReturnScope update_key338 =null;
		ParserRuleReturnScope of_key339 =null;
		ParserRuleReturnScope column_name340 =null;
		ParserRuleReturnScope column_name342 =null;

		Object COMMA341_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_insert_key=new RewriteRuleSubtreeStream(adaptor,"rule insert_key");
		RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
		RewriteRuleSubtreeStream stream_update_key=new RewriteRuleSubtreeStream(adaptor,"rule update_key");
		RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");
		RewriteRuleSubtreeStream stream_delete_key=new RewriteRuleSubtreeStream(adaptor,"rule delete_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:5: ( ( delete_key | insert_key | update_key ) ( of_key column_name ( COMMA column_name )* )? -> ^( DML_EVENT_ELEMENT ( delete_key )? ( insert_key )? ( update_key )? ^( COLUMNS ( column_name )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:10: ( delete_key | insert_key | update_key ) ( of_key column_name ( COMMA column_name )* )?
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:10: ( delete_key | insert_key | update_key )
			int alt88=3;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_DELETE:
				{
				alt88=1;
				}
				break;
			case SQL92_RESERVED_INSERT:
				{
				alt88=2;
				}
				break;
			case SQL92_RESERVED_UPDATE:
				{
				alt88=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 88, 0, input);
				throw nvae;
			}
			switch (alt88) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:11: delete_key
					{
					pushFollow(FOLLOW_delete_key_in_dml_event_element5445);
					delete_key336=delete_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_delete_key.add(delete_key336.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:22: insert_key
					{
					pushFollow(FOLLOW_insert_key_in_dml_event_element5447);
					insert_key337=insert_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_insert_key.add(insert_key337.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:33: update_key
					{
					pushFollow(FOLLOW_update_key_in_dml_event_element5449);
					update_key338=update_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_update_key.add(update_key338.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:45: ( of_key column_name ( COMMA column_name )* )?
			int alt90=2;
			int LA90_0 = input.LA(1);
			if ( (LA90_0==SQL92_RESERVED_OF) ) {
				alt90=1;
			}
			switch (alt90) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:46: of_key column_name ( COMMA column_name )*
					{
					pushFollow(FOLLOW_of_key_in_dml_event_element5453);
					of_key339=of_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_of_key.add(of_key339.getTree());
					pushFollow(FOLLOW_column_name_in_dml_event_element5455);
					column_name340=column_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_column_name.add(column_name340.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:65: ( COMMA column_name )*
					loop89:
					while (true) {
						int alt89=2;
						int LA89_0 = input.LA(1);
						if ( (LA89_0==COMMA) ) {
							alt89=1;
						}

						switch (alt89) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:564:66: COMMA column_name
							{
							COMMA341=(Token)match(input,COMMA,FOLLOW_COMMA_in_dml_event_element5458); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA341);

							pushFollow(FOLLOW_column_name_in_dml_event_element5460);
							column_name342=column_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_column_name.add(column_name342.getTree());
							}
							break;

						default :
							break loop89;
						}
					}

					}
					break;

			}

			// AST REWRITE
			// elements: column_name, insert_key, update_key, delete_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 565:9: -> ^( DML_EVENT_ELEMENT ( delete_key )? ( insert_key )? ( update_key )? ^( COLUMNS ( column_name )* ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:565:12: ^( DML_EVENT_ELEMENT ( delete_key )? ( insert_key )? ( update_key )? ^( COLUMNS ( column_name )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DML_EVENT_ELEMENT, "DML_EVENT_ELEMENT"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:565:32: ( delete_key )?
				if ( stream_delete_key.hasNext() ) {
					adaptor.addChild(root_1, stream_delete_key.nextTree());
				}
				stream_delete_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:565:44: ( insert_key )?
				if ( stream_insert_key.hasNext() ) {
					adaptor.addChild(root_1, stream_insert_key.nextTree());
				}
				stream_insert_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:565:56: ( update_key )?
				if ( stream_update_key.hasNext() ) {
					adaptor.addChild(root_1, stream_update_key.nextTree());
				}
				stream_update_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:565:68: ^( COLUMNS ( column_name )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(COLUMNS, "COLUMNS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:565:78: ( column_name )*
				while ( stream_column_name.hasNext() ) {
					adaptor.addChild(root_2, stream_column_name.nextTree());
				}
				stream_column_name.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_element"


	public static class dml_event_nested_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dml_event_nested_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:568:1: dml_event_nested_clause : nested_key table_key tableview_name of_key -> ^( nested_key tableview_name ) ;
	public final PLSQLParser.dml_event_nested_clause_return dml_event_nested_clause() throws RecognitionException {
		PLSQLParser.dml_event_nested_clause_return retval = new PLSQLParser.dml_event_nested_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope nested_key343 =null;
		ParserRuleReturnScope table_key344 =null;
		ParserRuleReturnScope tableview_name345 =null;
		ParserRuleReturnScope of_key346 =null;

		RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
		RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
		RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
		RewriteRuleSubtreeStream stream_nested_key=new RewriteRuleSubtreeStream(adaptor,"rule nested_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:569:5: ( nested_key table_key tableview_name of_key -> ^( nested_key tableview_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:569:10: nested_key table_key tableview_name of_key
			{
			pushFollow(FOLLOW_nested_key_in_dml_event_nested_clause5514);
			nested_key343=nested_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_nested_key.add(nested_key343.getTree());
			pushFollow(FOLLOW_table_key_in_dml_event_nested_clause5516);
			table_key344=table_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table_key.add(table_key344.getTree());
			pushFollow(FOLLOW_tableview_name_in_dml_event_nested_clause5518);
			tableview_name345=tableview_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name345.getTree());
			pushFollow(FOLLOW_of_key_in_dml_event_nested_clause5520);
			of_key346=of_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_of_key.add(of_key346.getTree());
			// AST REWRITE
			// elements: nested_key, tableview_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 570:9: -> ^( nested_key tableview_name )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:570:12: ^( nested_key tableview_name )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_nested_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_tableview_name.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dml_event_nested_clause"


	public static class referencing_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "referencing_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:573:1: referencing_clause : referencing_key ^ ( referencing_element )+ ;
	public final PLSQLParser.referencing_clause_return referencing_clause() throws RecognitionException {
		PLSQLParser.referencing_clause_return retval = new PLSQLParser.referencing_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope referencing_key347 =null;
		ParserRuleReturnScope referencing_element348 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:574:5: ( referencing_key ^ ( referencing_element )+ )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:574:10: referencing_key ^ ( referencing_element )+
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_referencing_key_in_referencing_clause5556);
			referencing_key347=referencing_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(referencing_key347.getTree(), root_0);
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:574:27: ( referencing_element )+
			int cnt91=0;
			loop91:
			while (true) {
				int alt91=2;
				alt91 = dfa91.predict(input);
				switch (alt91) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:574:27: referencing_element
					{
					pushFollow(FOLLOW_referencing_element_in_referencing_clause5559);
					referencing_element348=referencing_element();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, referencing_element348.getTree());

					}
					break;

				default :
					if ( cnt91 >= 1 ) break loop91;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(91, input);
					throw eee;
				}
				cnt91++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_clause"


	public static class referencing_element_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "referencing_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:577:1: referencing_element : ( new_key ^| old_key ^| parent_key ^) column_alias ;
	public final PLSQLParser.referencing_element_return referencing_element() throws RecognitionException {
		PLSQLParser.referencing_element_return retval = new PLSQLParser.referencing_element_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope new_key349 =null;
		ParserRuleReturnScope old_key350 =null;
		ParserRuleReturnScope parent_key351 =null;
		ParserRuleReturnScope column_alias352 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:578:5: ( ( new_key ^| old_key ^| parent_key ^) column_alias )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:578:10: ( new_key ^| old_key ^| parent_key ^) column_alias
			{
			root_0 = (Object)adaptor.nil();


			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:578:10: ( new_key ^| old_key ^| parent_key ^)
			int alt92=3;
			int LA92_0 = input.LA(1);
			if ( (LA92_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {
				int LA92_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("new"))) ) {
					alt92=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("old"))) ) {
					alt92=2;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("parent"))) ) {
					alt92=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 92, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt92) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:578:12: new_key ^
					{
					pushFollow(FOLLOW_new_key_in_referencing_element5582);
					new_key349=new_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(new_key349.getTree(), root_0);
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:578:23: old_key ^
					{
					pushFollow(FOLLOW_old_key_in_referencing_element5587);
					old_key350=old_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(old_key350.getTree(), root_0);
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:578:34: parent_key ^
					{
					pushFollow(FOLLOW_parent_key_in_referencing_element5592);
					parent_key351=parent_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(parent_key351.getTree(), root_0);
					}
					break;

			}

			pushFollow(FOLLOW_column_alias_in_referencing_element5597);
			column_alias352=column_alias();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, column_alias352.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "referencing_element"


	public static class drop_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:586:1: drop_type : drop_key type_key ( body_key )? type_name ( force_key | validate_key )? SEMICOLON -> ^( DROP_TYPE[$drop_key.start] type_name ( body_key )? ( force_key )? ( validate_key )? ) ;
	public final PLSQLParser.drop_type_return drop_type() throws RecognitionException {
		PLSQLParser.drop_type_return retval = new PLSQLParser.drop_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON359=null;
		ParserRuleReturnScope drop_key353 =null;
		ParserRuleReturnScope type_key354 =null;
		ParserRuleReturnScope body_key355 =null;
		ParserRuleReturnScope type_name356 =null;
		ParserRuleReturnScope force_key357 =null;
		ParserRuleReturnScope validate_key358 =null;

		Object SEMICOLON359_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_validate_key=new RewriteRuleSubtreeStream(adaptor,"rule validate_key");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
		RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
		RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
		RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:587:5: ( drop_key type_key ( body_key )? type_name ( force_key | validate_key )? SEMICOLON -> ^( DROP_TYPE[$drop_key.start] type_name ( body_key )? ( force_key )? ( validate_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:587:10: drop_key type_key ( body_key )? type_name ( force_key | validate_key )? SEMICOLON
			{
			pushFollow(FOLLOW_drop_key_in_drop_type5622);
			drop_key353=drop_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_drop_key.add(drop_key353.getTree());
			pushFollow(FOLLOW_type_key_in_drop_type5624);
			type_key354=type_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_key.add(type_key354.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:587:28: ( body_key )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( (LA93_0==REGULAR_ID) ) {
				int LA93_1 = input.LA(2);
				if ( (LA93_1==REGULAR_ID) ) {
					int LA93_3 = input.LA(3);
					if ( ((input.LT(1).getText().equalsIgnoreCase("body"))) ) {
						alt93=1;
					}
				}
				else if ( (LA93_1==DELIMITED_ID) ) {
					alt93=1;
				}
			}
			switch (alt93) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:587:28: body_key
					{
					pushFollow(FOLLOW_body_key_in_drop_type5626);
					body_key355=body_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_body_key.add(body_key355.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_type_name_in_drop_type5629);
			type_name356=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_name.add(type_name356.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:587:48: ( force_key | validate_key )?
			int alt94=3;
			int LA94_0 = input.LA(1);
			if ( (LA94_0==REGULAR_ID) ) {
				int LA94_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("force"))) ) {
					alt94=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("validate"))) ) {
					alt94=2;
				}
			}
			switch (alt94) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:587:49: force_key
					{
					pushFollow(FOLLOW_force_key_in_drop_type5632);
					force_key357=force_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_force_key.add(force_key357.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:587:59: validate_key
					{
					pushFollow(FOLLOW_validate_key_in_drop_type5634);
					validate_key358=validate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_validate_key.add(validate_key358.getTree());
					}
					break;

			}

			SEMICOLON359=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_type5646); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON359);

			// AST REWRITE
			// elements: force_key, validate_key, body_key, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 589:9: -> ^( DROP_TYPE[$drop_key.start] type_name ( body_key )? ( force_key )? ( validate_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:589:12: ^( DROP_TYPE[$drop_key.start] type_name ( body_key )? ( force_key )? ( validate_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DROP_TYPE, (drop_key353!=null?(drop_key353.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:589:51: ( body_key )?
				if ( stream_body_key.hasNext() ) {
					adaptor.addChild(root_1, stream_body_key.nextTree());
				}
				stream_body_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:589:61: ( force_key )?
				if ( stream_force_key.hasNext() ) {
					adaptor.addChild(root_1, stream_force_key.nextTree());
				}
				stream_force_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:589:72: ( validate_key )?
				if ( stream_validate_key.hasNext() ) {
					adaptor.addChild(root_1, stream_validate_key.nextTree());
				}
				stream_validate_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_type"


	public static class alter_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:592:1: alter_type : alter_key type_key type_name ( compile_type_clause | replace_type_clause |{...}? alter_attribute_definition | alter_method_spec | alter_collection_clauses | modifier_clause ) ( dependent_handling_clause )? SEMICOLON -> {mode == 1}? ^( ALTER_TYPE[$alter_key.start] type_name replace_type_clause ( dependent_handling_clause )? ) -> {mode == 2}? ^( ALTER_TYPE[$alter_key.start] type_name alter_attribute_definition ( dependent_handling_clause )? ) -> {mode == 3}? ^( ALTER_TYPE[$alter_key.start] type_name alter_method_spec ( dependent_handling_clause )? ) -> {mode == 4}? ^( ALTER_TYPE[$alter_key.start] type_name alter_collection_clauses ( dependent_handling_clause )? ) -> {mode == 5}? ^( ALTER_TYPE[$alter_key.start] type_name modifier_clause ( dependent_handling_clause )? ) -> ^( ALTER_TYPE[$alter_key.start] type_name compile_type_clause ( dependent_handling_clause )? ) ;
	public final PLSQLParser.alter_type_return alter_type() throws RecognitionException {
		PLSQLParser.alter_type_return retval = new PLSQLParser.alter_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON370=null;
		ParserRuleReturnScope alter_key360 =null;
		ParserRuleReturnScope type_key361 =null;
		ParserRuleReturnScope type_name362 =null;
		ParserRuleReturnScope compile_type_clause363 =null;
		ParserRuleReturnScope replace_type_clause364 =null;
		ParserRuleReturnScope alter_attribute_definition365 =null;
		ParserRuleReturnScope alter_method_spec366 =null;
		ParserRuleReturnScope alter_collection_clauses367 =null;
		ParserRuleReturnScope modifier_clause368 =null;
		ParserRuleReturnScope dependent_handling_clause369 =null;

		Object SEMICOLON370_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_modifier_clause=new RewriteRuleSubtreeStream(adaptor,"rule modifier_clause");
		RewriteRuleSubtreeStream stream_dependent_handling_clause=new RewriteRuleSubtreeStream(adaptor,"rule dependent_handling_clause");
		RewriteRuleSubtreeStream stream_replace_type_clause=new RewriteRuleSubtreeStream(adaptor,"rule replace_type_clause");
		RewriteRuleSubtreeStream stream_alter_method_spec=new RewriteRuleSubtreeStream(adaptor,"rule alter_method_spec");
		RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
		RewriteRuleSubtreeStream stream_alter_collection_clauses=new RewriteRuleSubtreeStream(adaptor,"rule alter_collection_clauses");
		RewriteRuleSubtreeStream stream_compile_type_clause=new RewriteRuleSubtreeStream(adaptor,"rule compile_type_clause");
		RewriteRuleSubtreeStream stream_alter_attribute_definition=new RewriteRuleSubtreeStream(adaptor,"rule alter_attribute_definition");
		RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:594:5: ( alter_key type_key type_name ( compile_type_clause | replace_type_clause |{...}? alter_attribute_definition | alter_method_spec | alter_collection_clauses | modifier_clause ) ( dependent_handling_clause )? SEMICOLON -> {mode == 1}? ^( ALTER_TYPE[$alter_key.start] type_name replace_type_clause ( dependent_handling_clause )? ) -> {mode == 2}? ^( ALTER_TYPE[$alter_key.start] type_name alter_attribute_definition ( dependent_handling_clause )? ) -> {mode == 3}? ^( ALTER_TYPE[$alter_key.start] type_name alter_method_spec ( dependent_handling_clause )? ) -> {mode == 4}? ^( ALTER_TYPE[$alter_key.start] type_name alter_collection_clauses ( dependent_handling_clause )? ) -> {mode == 5}? ^( ALTER_TYPE[$alter_key.start] type_name modifier_clause ( dependent_handling_clause )? ) -> ^( ALTER_TYPE[$alter_key.start] type_name compile_type_clause ( dependent_handling_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:594:10: alter_key type_key type_name ( compile_type_clause | replace_type_clause |{...}? alter_attribute_definition | alter_method_spec | alter_collection_clauses | modifier_clause ) ( dependent_handling_clause )? SEMICOLON
			{
			pushFollow(FOLLOW_alter_key_in_alter_type5700);
			alter_key360=alter_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_alter_key.add(alter_key360.getTree());
			pushFollow(FOLLOW_type_key_in_alter_type5702);
			type_key361=type_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_key.add(type_key361.getTree());
			pushFollow(FOLLOW_type_name_in_alter_type5704);
			type_name362=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_name.add(type_name362.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:595:5: ( compile_type_clause | replace_type_clause |{...}? alter_attribute_definition | alter_method_spec | alter_collection_clauses | modifier_clause )
			int alt95=6;
			switch ( input.LA(1) ) {
			case REGULAR_ID:
				{
				int LA95_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("compile"))) ) {
					alt95=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("replace"))) ) {
					alt95=2;
				}
				else if ( (((input.LT(2).getText().equalsIgnoreCase("attribute"))&&((input.LT(1).getText().equalsIgnoreCase("modify"))||(input.LT(1).getText().equalsIgnoreCase("add"))))) ) {
					alt95=3;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("add"))) ) {
					alt95=4;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("modify"))) ) {
					alt95=5;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("instantiable")))) ) {
					alt95=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 95, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_DROP:
				{
				int LA95_2 = input.LA(2);
				if ( ((input.LT(2).getText().equalsIgnoreCase("attribute"))) ) {
					alt95=3;
				}
				else if ( (true) ) {
					alt95=4;
				}

				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt95=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 95, 0, input);
				throw nvae;
			}
			switch (alt95) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:595:10: compile_type_clause
					{
					pushFollow(FOLLOW_compile_type_clause_in_alter_type5715);
					compile_type_clause363=compile_type_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compile_type_clause.add(compile_type_clause363.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:596:10: replace_type_clause
					{
					pushFollow(FOLLOW_replace_type_clause_in_alter_type5726);
					replace_type_clause364=replace_type_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replace_type_clause.add(replace_type_clause364.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:597:10: {...}? alter_attribute_definition
					{
					if ( !((input.LT(2).getText().equalsIgnoreCase("attribute"))) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "alter_type", "input.LT(2).getText().equalsIgnoreCase(\"attribute\")");
					}
					pushFollow(FOLLOW_alter_attribute_definition_in_alter_type5741);
					alter_attribute_definition365=alter_attribute_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alter_attribute_definition.add(alter_attribute_definition365.getTree());
					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:598:10: alter_method_spec
					{
					pushFollow(FOLLOW_alter_method_spec_in_alter_type5754);
					alter_method_spec366=alter_method_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alter_method_spec.add(alter_method_spec366.getTree());
					if ( state.backtracking==0 ) {mode = 3;}
					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:599:10: alter_collection_clauses
					{
					pushFollow(FOLLOW_alter_collection_clauses_in_alter_type5767);
					alter_collection_clauses367=alter_collection_clauses();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alter_collection_clauses.add(alter_collection_clauses367.getTree());
					if ( state.backtracking==0 ) {mode = 4;}
					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:600:10: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_alter_type5780);
					modifier_clause368=modifier_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_modifier_clause.add(modifier_clause368.getTree());
					if ( state.backtracking==0 ) {mode = 5;}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:602:9: ( dependent_handling_clause )?
			int alt96=2;
			int LA96_0 = input.LA(1);
			if ( (LA96_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("cascade"))||(input.LT(1).getText().equalsIgnoreCase("invalidate"))))) {
				alt96=1;
			}
			switch (alt96) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:602:9: dependent_handling_clause
					{
					pushFollow(FOLLOW_dependent_handling_clause_in_alter_type5798);
					dependent_handling_clause369=dependent_handling_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dependent_handling_clause.add(dependent_handling_clause369.getTree());
					}
					break;

			}

			SEMICOLON370=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_type5809); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON370);

			// AST REWRITE
			// elements: compile_type_clause, modifier_clause, dependent_handling_clause, type_name, type_name, dependent_handling_clause, type_name, replace_type_clause, type_name, dependent_handling_clause, type_name, alter_attribute_definition, dependent_handling_clause, dependent_handling_clause, alter_collection_clauses, dependent_handling_clause, alter_method_spec, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 604:9: -> {mode == 1}? ^( ALTER_TYPE[$alter_key.start] type_name replace_type_clause ( dependent_handling_clause )? )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:604:25: ^( ALTER_TYPE[$alter_key.start] type_name replace_type_clause ( dependent_handling_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TYPE, (alter_key360!=null?(alter_key360.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_replace_type_clause.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:604:86: ( dependent_handling_clause )?
				if ( stream_dependent_handling_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());
				}
				stream_dependent_handling_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 605:9: -> {mode == 2}? ^( ALTER_TYPE[$alter_key.start] type_name alter_attribute_definition ( dependent_handling_clause )? )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:605:25: ^( ALTER_TYPE[$alter_key.start] type_name alter_attribute_definition ( dependent_handling_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TYPE, (alter_key360!=null?(alter_key360.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_alter_attribute_definition.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:605:93: ( dependent_handling_clause )?
				if ( stream_dependent_handling_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());
				}
				stream_dependent_handling_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 606:9: -> {mode == 3}? ^( ALTER_TYPE[$alter_key.start] type_name alter_method_spec ( dependent_handling_clause )? )
			if (mode == 3) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:606:25: ^( ALTER_TYPE[$alter_key.start] type_name alter_method_spec ( dependent_handling_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TYPE, (alter_key360!=null?(alter_key360.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_alter_method_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:606:84: ( dependent_handling_clause )?
				if ( stream_dependent_handling_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());
				}
				stream_dependent_handling_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 607:9: -> {mode == 4}? ^( ALTER_TYPE[$alter_key.start] type_name alter_collection_clauses ( dependent_handling_clause )? )
			if (mode == 4) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:607:25: ^( ALTER_TYPE[$alter_key.start] type_name alter_collection_clauses ( dependent_handling_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TYPE, (alter_key360!=null?(alter_key360.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_alter_collection_clauses.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:607:91: ( dependent_handling_clause )?
				if ( stream_dependent_handling_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());
				}
				stream_dependent_handling_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 608:9: -> {mode == 5}? ^( ALTER_TYPE[$alter_key.start] type_name modifier_clause ( dependent_handling_clause )? )
			if (mode == 5) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:608:25: ^( ALTER_TYPE[$alter_key.start] type_name modifier_clause ( dependent_handling_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TYPE, (alter_key360!=null?(alter_key360.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_modifier_clause.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:608:82: ( dependent_handling_clause )?
				if ( stream_dependent_handling_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());
				}
				stream_dependent_handling_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 609:9: -> ^( ALTER_TYPE[$alter_key.start] type_name compile_type_clause ( dependent_handling_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:609:12: ^( ALTER_TYPE[$alter_key.start] type_name compile_type_clause ( dependent_handling_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_TYPE, (alter_key360!=null?(alter_key360.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_compile_type_clause.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:609:73: ( dependent_handling_clause )?
				if ( stream_dependent_handling_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_dependent_handling_clause.nextTree());
				}
				stream_dependent_handling_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_type"


	public static class compile_type_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compile_type_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:613:1: compile_type_clause : compile_key ( debug_key )? ( specification_key | body_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? -> ^( compile_key ( specification_key )? ( body_key )? ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) ;
	public final PLSQLParser.compile_type_clause_return compile_type_clause() throws RecognitionException {
		PLSQLParser.compile_type_clause_return retval = new PLSQLParser.compile_type_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope compile_key371 =null;
		ParserRuleReturnScope debug_key372 =null;
		ParserRuleReturnScope specification_key373 =null;
		ParserRuleReturnScope body_key374 =null;
		ParserRuleReturnScope compiler_parameters_clause375 =null;
		ParserRuleReturnScope reuse_key376 =null;
		ParserRuleReturnScope settings_key377 =null;

		RewriteRuleSubtreeStream stream_compiler_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule compiler_parameters_clause");
		RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
		RewriteRuleSubtreeStream stream_compile_key=new RewriteRuleSubtreeStream(adaptor,"rule compile_key");
		RewriteRuleSubtreeStream stream_reuse_key=new RewriteRuleSubtreeStream(adaptor,"rule reuse_key");
		RewriteRuleSubtreeStream stream_debug_key=new RewriteRuleSubtreeStream(adaptor,"rule debug_key");
		RewriteRuleSubtreeStream stream_specification_key=new RewriteRuleSubtreeStream(adaptor,"rule specification_key");
		RewriteRuleSubtreeStream stream_settings_key=new RewriteRuleSubtreeStream(adaptor,"rule settings_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:5: ( compile_key ( debug_key )? ( specification_key | body_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )? -> ^( compile_key ( specification_key )? ( body_key )? ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:10: compile_key ( debug_key )? ( specification_key | body_key )? ( compiler_parameters_clause )* ( reuse_key settings_key )?
			{
			pushFollow(FOLLOW_compile_key_in_compile_type_clause5972);
			compile_key371=compile_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_compile_key.add(compile_key371.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:22: ( debug_key )?
			int alt97=2;
			int LA97_0 = input.LA(1);
			if ( (LA97_0==REGULAR_ID) ) {
				int LA97_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("debug"))) ) {
					alt97=1;
				}
			}
			switch (alt97) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:22: debug_key
					{
					pushFollow(FOLLOW_debug_key_in_compile_type_clause5974);
					debug_key372=debug_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_debug_key.add(debug_key372.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:33: ( specification_key | body_key )?
			int alt98=3;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==REGULAR_ID) ) {
				int LA98_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("specification"))) ) {
					alt98=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("body"))) ) {
					alt98=2;
				}
			}
			switch (alt98) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:34: specification_key
					{
					pushFollow(FOLLOW_specification_key_in_compile_type_clause5978);
					specification_key373=specification_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_specification_key.add(specification_key373.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:52: body_key
					{
					pushFollow(FOLLOW_body_key_in_compile_type_clause5980);
					body_key374=body_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_body_key.add(body_key374.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:63: ( compiler_parameters_clause )*
			loop99:
			while (true) {
				int alt99=2;
				int LA99_0 = input.LA(1);
				if ( (LA99_0==REGULAR_ID) ) {
					int LA99_1 = input.LA(2);
					if ( (LA99_1==EQUALS_OP) ) {
						alt99=1;
					}

				}
				else if ( (LA99_0==DELIMITED_ID||LA99_0==INTRODUCER) ) {
					alt99=1;
				}

				switch (alt99) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:63: compiler_parameters_clause
					{
					pushFollow(FOLLOW_compiler_parameters_clause_in_compile_type_clause5984);
					compiler_parameters_clause375=compiler_parameters_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_compiler_parameters_clause.add(compiler_parameters_clause375.getTree());
					}
					break;

				default :
					break loop99;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:91: ( reuse_key settings_key )?
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==REGULAR_ID) ) {
				int LA100_1 = input.LA(2);
				if ( (LA100_1==REGULAR_ID) ) {
					int LA100_3 = input.LA(3);
					if ( (LA100_3==REGULAR_ID) ) {
						int LA100_6 = input.LA(4);
						if ( (LA100_6==REGULAR_ID||LA100_6==SEMICOLON||LA100_6==SQL92_RESERVED_NOT) ) {
							alt100=1;
						}
					}
					else if ( (LA100_3==SEMICOLON) ) {
						alt100=1;
					}
				}
			}
			switch (alt100) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:614:92: reuse_key settings_key
					{
					pushFollow(FOLLOW_reuse_key_in_compile_type_clause5988);
					reuse_key376=reuse_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_reuse_key.add(reuse_key376.getTree());
					pushFollow(FOLLOW_settings_key_in_compile_type_clause5990);
					settings_key377=settings_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_settings_key.add(settings_key377.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: body_key, compile_key, debug_key, reuse_key, specification_key, compiler_parameters_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 615:9: -> ^( compile_key ( specification_key )? ( body_key )? ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:615:12: ^( compile_key ( specification_key )? ( body_key )? ( debug_key )? ( reuse_key )? ( compiler_parameters_clause )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_compile_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:615:26: ( specification_key )?
				if ( stream_specification_key.hasNext() ) {
					adaptor.addChild(root_1, stream_specification_key.nextTree());
				}
				stream_specification_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:615:45: ( body_key )?
				if ( stream_body_key.hasNext() ) {
					adaptor.addChild(root_1, stream_body_key.nextTree());
				}
				stream_body_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:615:55: ( debug_key )?
				if ( stream_debug_key.hasNext() ) {
					adaptor.addChild(root_1, stream_debug_key.nextTree());
				}
				stream_debug_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:615:66: ( reuse_key )?
				if ( stream_reuse_key.hasNext() ) {
					adaptor.addChild(root_1, stream_reuse_key.nextTree());
				}
				stream_reuse_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:615:77: ( compiler_parameters_clause )*
				while ( stream_compiler_parameters_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_compiler_parameters_clause.nextTree());
				}
				stream_compiler_parameters_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compile_type_clause"


	public static class replace_type_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "replace_type_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:618:1: replace_type_clause : replace_key ( invoker_rights_clause )? as_key object_key LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN -> ^( replace_key ^( OBJECT_MEMBERS ( object_member_spec )+ ) ( invoker_rights_clause )? ) ;
	public final PLSQLParser.replace_type_clause_return replace_type_clause() throws RecognitionException {
		PLSQLParser.replace_type_clause_return retval = new PLSQLParser.replace_type_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN382=null;
		Token COMMA384=null;
		Token RIGHT_PAREN386=null;
		ParserRuleReturnScope replace_key378 =null;
		ParserRuleReturnScope invoker_rights_clause379 =null;
		ParserRuleReturnScope as_key380 =null;
		ParserRuleReturnScope object_key381 =null;
		ParserRuleReturnScope object_member_spec383 =null;
		ParserRuleReturnScope object_member_spec385 =null;

		Object LEFT_PAREN382_tree=null;
		Object COMMA384_tree=null;
		Object RIGHT_PAREN386_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_object_key=new RewriteRuleSubtreeStream(adaptor,"rule object_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
		RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
		RewriteRuleSubtreeStream stream_object_member_spec=new RewriteRuleSubtreeStream(adaptor,"rule object_member_spec");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:619:5: ( replace_key ( invoker_rights_clause )? as_key object_key LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN -> ^( replace_key ^( OBJECT_MEMBERS ( object_member_spec )+ ) ( invoker_rights_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:619:10: replace_key ( invoker_rights_clause )? as_key object_key LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN
			{
			pushFollow(FOLLOW_replace_key_in_replace_type_clause6041);
			replace_key378=replace_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_replace_key.add(replace_key378.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:619:22: ( invoker_rights_clause )?
			int alt101=2;
			int LA101_0 = input.LA(1);
			if ( (LA101_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
				alt101=1;
			}
			switch (alt101) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:619:22: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_replace_type_clause6043);
					invoker_rights_clause379=invoker_rights_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause379.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_as_key_in_replace_type_clause6046);
			as_key380=as_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_as_key.add(as_key380.getTree());
			pushFollow(FOLLOW_object_key_in_replace_type_clause6048);
			object_key381=object_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_object_key.add(object_key381.getTree());
			LEFT_PAREN382=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_replace_type_clause6058); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN382);

			pushFollow(FOLLOW_object_member_spec_in_replace_type_clause6060);
			object_member_spec383=object_member_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_object_member_spec.add(object_member_spec383.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:620:39: ( COMMA object_member_spec )*
			loop102:
			while (true) {
				int alt102=2;
				int LA102_0 = input.LA(1);
				if ( (LA102_0==COMMA) ) {
					alt102=1;
				}

				switch (alt102) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:620:40: COMMA object_member_spec
					{
					COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_replace_type_clause6063); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA384);

					pushFollow(FOLLOW_object_member_spec_in_replace_type_clause6065);
					object_member_spec385=object_member_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_object_member_spec.add(object_member_spec385.getTree());
					}
					break;

				default :
					break loop102;
				}
			}

			RIGHT_PAREN386=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_replace_type_clause6069); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN386);

			// AST REWRITE
			// elements: replace_key, object_member_spec, invoker_rights_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 621:9: -> ^( replace_key ^( OBJECT_MEMBERS ( object_member_spec )+ ) ( invoker_rights_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:621:12: ^( replace_key ^( OBJECT_MEMBERS ( object_member_spec )+ ) ( invoker_rights_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_replace_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:621:26: ^( OBJECT_MEMBERS ( object_member_spec )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(OBJECT_MEMBERS, "OBJECT_MEMBERS"), root_2);
				if ( !(stream_object_member_spec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_object_member_spec.hasNext() ) {
					adaptor.addChild(root_2, stream_object_member_spec.nextTree());
				}
				stream_object_member_spec.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:621:64: ( invoker_rights_clause )?
				if ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replace_type_clause"


	public static class alter_method_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_method_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:624:1: alter_method_spec : alter_method_element ( COMMA alter_method_element )* -> ^( ALTER_METHOD ( alter_method_element )+ ) ;
	public final PLSQLParser.alter_method_spec_return alter_method_spec() throws RecognitionException {
		PLSQLParser.alter_method_spec_return retval = new PLSQLParser.alter_method_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA388=null;
		ParserRuleReturnScope alter_method_element387 =null;
		ParserRuleReturnScope alter_method_element389 =null;

		Object COMMA388_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_alter_method_element=new RewriteRuleSubtreeStream(adaptor,"rule alter_method_element");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:625:5: ( alter_method_element ( COMMA alter_method_element )* -> ^( ALTER_METHOD ( alter_method_element )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:625:11: alter_method_element ( COMMA alter_method_element )*
			{
			pushFollow(FOLLOW_alter_method_element_in_alter_method_spec6114);
			alter_method_element387=alter_method_element();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_alter_method_element.add(alter_method_element387.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:625:32: ( COMMA alter_method_element )*
			loop103:
			while (true) {
				int alt103=2;
				int LA103_0 = input.LA(1);
				if ( (LA103_0==COMMA) ) {
					alt103=1;
				}

				switch (alt103) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:625:33: COMMA alter_method_element
					{
					COMMA388=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_method_spec6117); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA388);

					pushFollow(FOLLOW_alter_method_element_in_alter_method_spec6119);
					alter_method_element389=alter_method_element();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alter_method_element.add(alter_method_element389.getTree());
					}
					break;

				default :
					break loop103;
				}
			}

			// AST REWRITE
			// elements: alter_method_element
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 626:9: -> ^( ALTER_METHOD ( alter_method_element )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:626:12: ^( ALTER_METHOD ( alter_method_element )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_METHOD, "ALTER_METHOD"), root_1);
				if ( !(stream_alter_method_element.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_alter_method_element.hasNext() ) {
					adaptor.addChild(root_1, stream_alter_method_element.nextTree());
				}
				stream_alter_method_element.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_method_spec"


	public static class alter_method_element_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_method_element"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:629:1: alter_method_element : ( add_key | drop_key ) ( map_order_function_spec | subprogram_spec ) -> ^( ALTER_METHOD_ELEMENT ( add_key )? ( drop_key )? ( map_order_function_spec )? ( subprogram_spec )? ) ;
	public final PLSQLParser.alter_method_element_return alter_method_element() throws RecognitionException {
		PLSQLParser.alter_method_element_return retval = new PLSQLParser.alter_method_element_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope add_key390 =null;
		ParserRuleReturnScope drop_key391 =null;
		ParserRuleReturnScope map_order_function_spec392 =null;
		ParserRuleReturnScope subprogram_spec393 =null;

		RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
		RewriteRuleSubtreeStream stream_map_order_function_spec=new RewriteRuleSubtreeStream(adaptor,"rule map_order_function_spec");
		RewriteRuleSubtreeStream stream_subprogram_spec=new RewriteRuleSubtreeStream(adaptor,"rule subprogram_spec");
		RewriteRuleSubtreeStream stream_add_key=new RewriteRuleSubtreeStream(adaptor,"rule add_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:630:5: ( ( add_key | drop_key ) ( map_order_function_spec | subprogram_spec ) -> ^( ALTER_METHOD_ELEMENT ( add_key )? ( drop_key )? ( map_order_function_spec )? ( subprogram_spec )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:630:10: ( add_key | drop_key ) ( map_order_function_spec | subprogram_spec )
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:630:10: ( add_key | drop_key )
			int alt104=2;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("add")))) {
				alt104=1;
			}
			else if ( (LA104_0==SQL92_RESERVED_DROP) ) {
				alt104=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				throw nvae;
			}

			switch (alt104) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:630:11: add_key
					{
					pushFollow(FOLLOW_add_key_in_alter_method_element6159);
					add_key390=add_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_add_key.add(add_key390.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:630:19: drop_key
					{
					pushFollow(FOLLOW_drop_key_in_alter_method_element6161);
					drop_key391=drop_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_drop_key.add(drop_key391.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:630:29: ( map_order_function_spec | subprogram_spec )
			int alt105=2;
			int LA105_0 = input.LA(1);
			if ( (LA105_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
				int LA105_1 = input.LA(2);
				if ( (LA105_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
					int LA105_3 = input.LA(3);
					if ( (LA105_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
						int LA105_5 = input.LA(4);
						if ( (LA105_5==DELIMITED_ID||LA105_5==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
							alt105=1;
						}
						else if ( (LA105_5==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
							int LA105_7 = input.LA(5);
							if ( (LA105_7==LEFT_PAREN||LA105_7==PERIOD) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
								alt105=1;
							}
							else if ( (LA105_7==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
								int LA105_8 = input.LA(6);
								if ( (LA105_8==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
									int LA105_9 = input.LA(7);
									if ( ((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
										alt105=1;
									}
									else if ( (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
										alt105=2;
									}

									else {
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 105, 9, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

								}
								else if ( (LA105_8==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
									alt105=1;
								}
								else if ( (LA105_8==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
									int LA105_10 = input.LA(7);
									if ( ((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
										alt105=1;
									}
									else if ( (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
										alt105=2;
									}

									else {
										if (state.backtracking>0) {state.failed=true; return retval;}
										int nvaeMark = input.mark();
										try {
											for (int nvaeConsume = 0; nvaeConsume < 7 - 1; nvaeConsume++) {
												input.consume();
											}
											NoViableAltException nvae =
												new NoViableAltException("", 105, 10, input);
											throw nvae;
										} finally {
											input.rewind(nvaeMark);
										}
									}

								}
								else if ( (LA105_8==COMMA||LA105_8==LEFT_PAREN||(LA105_8 >= PERCENT && LA105_8 <= PERIOD)||LA105_8==SEMICOLON||LA105_8==SQL92_RESERVED_AS||LA105_8==SQL92_RESERVED_IS||LA105_8==SQL92_RESERVED_WITH) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
									alt105=2;
								}

							}
							else if ( (LA105_7==DELIMITED_ID||LA105_7==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
								alt105=2;
							}

						}
						else if ( (LA105_5==LEFT_PAREN||LA105_5==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
							alt105=2;
						}

					}
					else if ( (LA105_3==DELIMITED_ID||LA105_3==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
						alt105=2;
					}

				}
				else if ( (LA105_1==SQL92_RESERVED_PROCEDURE) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
					alt105=2;
				}

			}
			else if ( (LA105_0==SQL92_RESERVED_ORDER) ) {
				alt105=1;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 105, 0, input);
				throw nvae;
			}

			switch (alt105) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:630:30: map_order_function_spec
					{
					pushFollow(FOLLOW_map_order_function_spec_in_alter_method_element6165);
					map_order_function_spec392=map_order_function_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_map_order_function_spec.add(map_order_function_spec392.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:630:54: subprogram_spec
					{
					pushFollow(FOLLOW_subprogram_spec_in_alter_method_element6167);
					subprogram_spec393=subprogram_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_subprogram_spec.add(subprogram_spec393.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: subprogram_spec, map_order_function_spec, drop_key, add_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 631:9: -> ^( ALTER_METHOD_ELEMENT ( add_key )? ( drop_key )? ( map_order_function_spec )? ( subprogram_spec )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:631:12: ^( ALTER_METHOD_ELEMENT ( add_key )? ( drop_key )? ( map_order_function_spec )? ( subprogram_spec )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_METHOD_ELEMENT, "ALTER_METHOD_ELEMENT"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:631:35: ( add_key )?
				if ( stream_add_key.hasNext() ) {
					adaptor.addChild(root_1, stream_add_key.nextTree());
				}
				stream_add_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:631:44: ( drop_key )?
				if ( stream_drop_key.hasNext() ) {
					adaptor.addChild(root_1, stream_drop_key.nextTree());
				}
				stream_drop_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:631:54: ( map_order_function_spec )?
				if ( stream_map_order_function_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_map_order_function_spec.nextTree());
				}
				stream_map_order_function_spec.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:631:79: ( subprogram_spec )?
				if ( stream_subprogram_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_subprogram_spec.nextTree());
				}
				stream_subprogram_spec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_method_element"


	public static class alter_attribute_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_attribute_definition"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:634:1: alter_attribute_definition : ( add_key | modify_key | drop_key ) attribute_key ( attribute_definition | LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN ) -> ^( ALTER_ATTRIBUTE ( add_key )? ( modify_key )? ( drop_key )? ^( ATTRIBUTES ( attribute_definition )+ ) ) ;
	public final PLSQLParser.alter_attribute_definition_return alter_attribute_definition() throws RecognitionException {
		PLSQLParser.alter_attribute_definition_return retval = new PLSQLParser.alter_attribute_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN399=null;
		Token COMMA401=null;
		Token RIGHT_PAREN403=null;
		ParserRuleReturnScope add_key394 =null;
		ParserRuleReturnScope modify_key395 =null;
		ParserRuleReturnScope drop_key396 =null;
		ParserRuleReturnScope attribute_key397 =null;
		ParserRuleReturnScope attribute_definition398 =null;
		ParserRuleReturnScope attribute_definition400 =null;
		ParserRuleReturnScope attribute_definition402 =null;

		Object LEFT_PAREN399_tree=null;
		Object COMMA401_tree=null;
		Object RIGHT_PAREN403_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_modify_key=new RewriteRuleSubtreeStream(adaptor,"rule modify_key");
		RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
		RewriteRuleSubtreeStream stream_attribute_definition=new RewriteRuleSubtreeStream(adaptor,"rule attribute_definition");
		RewriteRuleSubtreeStream stream_attribute_key=new RewriteRuleSubtreeStream(adaptor,"rule attribute_key");
		RewriteRuleSubtreeStream stream_add_key=new RewriteRuleSubtreeStream(adaptor,"rule add_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:635:5: ( ( add_key | modify_key | drop_key ) attribute_key ( attribute_definition | LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN ) -> ^( ALTER_ATTRIBUTE ( add_key )? ( modify_key )? ( drop_key )? ^( ATTRIBUTES ( attribute_definition )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:635:10: ( add_key | modify_key | drop_key ) attribute_key ( attribute_definition | LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN )
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:635:10: ( add_key | modify_key | drop_key )
			int alt106=3;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("modify"))||(input.LT(1).getText().equalsIgnoreCase("add"))))) {
				int LA106_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("add"))) ) {
					alt106=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("modify"))) ) {
					alt106=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 106, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA106_0==SQL92_RESERVED_DROP) ) {
				alt106=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 106, 0, input);
				throw nvae;
			}

			switch (alt106) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:635:11: add_key
					{
					pushFollow(FOLLOW_add_key_in_alter_attribute_definition6215);
					add_key394=add_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_add_key.add(add_key394.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:635:19: modify_key
					{
					pushFollow(FOLLOW_modify_key_in_alter_attribute_definition6217);
					modify_key395=modify_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_modify_key.add(modify_key395.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:635:30: drop_key
					{
					pushFollow(FOLLOW_drop_key_in_alter_attribute_definition6219);
					drop_key396=drop_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_drop_key.add(drop_key396.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_attribute_key_in_alter_attribute_definition6222);
			attribute_key397=attribute_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_attribute_key.add(attribute_key397.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:636:9: ( attribute_definition | LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN )
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==DELIMITED_ID||LA108_0==INTRODUCER||LA108_0==REGULAR_ID) ) {
				alt108=1;
			}
			else if ( (LA108_0==LEFT_PAREN) ) {
				alt108=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 108, 0, input);
				throw nvae;
			}

			switch (alt108) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:636:14: attribute_definition
					{
					pushFollow(FOLLOW_attribute_definition_in_alter_attribute_definition6237);
					attribute_definition398=attribute_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_attribute_definition.add(attribute_definition398.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:637:14: LEFT_PAREN attribute_definition ( COMMA attribute_definition )* RIGHT_PAREN
					{
					LEFT_PAREN399=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_alter_attribute_definition6252); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN399);

					pushFollow(FOLLOW_attribute_definition_in_alter_attribute_definition6254);
					attribute_definition400=attribute_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_attribute_definition.add(attribute_definition400.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:637:46: ( COMMA attribute_definition )*
					loop107:
					while (true) {
						int alt107=2;
						int LA107_0 = input.LA(1);
						if ( (LA107_0==COMMA) ) {
							alt107=1;
						}

						switch (alt107) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:637:47: COMMA attribute_definition
							{
							COMMA401=(Token)match(input,COMMA,FOLLOW_COMMA_in_alter_attribute_definition6257); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA401);

							pushFollow(FOLLOW_attribute_definition_in_alter_attribute_definition6259);
							attribute_definition402=attribute_definition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_attribute_definition.add(attribute_definition402.getTree());
							}
							break;

						default :
							break loop107;
						}
					}

					RIGHT_PAREN403=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_alter_attribute_definition6263); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN403);

					}
					break;

			}

			// AST REWRITE
			// elements: add_key, attribute_definition, drop_key, modify_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 639:9: -> ^( ALTER_ATTRIBUTE ( add_key )? ( modify_key )? ( drop_key )? ^( ATTRIBUTES ( attribute_definition )+ ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:639:12: ^( ALTER_ATTRIBUTE ( add_key )? ( modify_key )? ( drop_key )? ^( ATTRIBUTES ( attribute_definition )+ ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_ATTRIBUTE, "ALTER_ATTRIBUTE"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:639:30: ( add_key )?
				if ( stream_add_key.hasNext() ) {
					adaptor.addChild(root_1, stream_add_key.nextTree());
				}
				stream_add_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:639:39: ( modify_key )?
				if ( stream_modify_key.hasNext() ) {
					adaptor.addChild(root_1, stream_modify_key.nextTree());
				}
				stream_modify_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:639:51: ( drop_key )?
				if ( stream_drop_key.hasNext() ) {
					adaptor.addChild(root_1, stream_drop_key.nextTree());
				}
				stream_drop_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:639:61: ^( ATTRIBUTES ( attribute_definition )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ATTRIBUTES, "ATTRIBUTES"), root_2);
				if ( !(stream_attribute_definition.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_definition.hasNext() ) {
					adaptor.addChild(root_2, stream_attribute_definition.nextTree());
				}
				stream_attribute_definition.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_attribute_definition"


	public static class attribute_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "attribute_definition"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:642:1: attribute_definition : attribute_name ( type_spec )? -> ^( ATTRIBUTE attribute_name ( type_spec )? ) ;
	public final PLSQLParser.attribute_definition_return attribute_definition() throws RecognitionException {
		PLSQLParser.attribute_definition_return retval = new PLSQLParser.attribute_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope attribute_name404 =null;
		ParserRuleReturnScope type_spec405 =null;

		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_attribute_name=new RewriteRuleSubtreeStream(adaptor,"rule attribute_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:643:5: ( attribute_name ( type_spec )? -> ^( ATTRIBUTE attribute_name ( type_spec )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:643:10: attribute_name ( type_spec )?
			{
			pushFollow(FOLLOW_attribute_name_in_attribute_definition6323);
			attribute_name404=attribute_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_attribute_name.add(attribute_name404.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:643:25: ( type_spec )?
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==DELIMITED_ID||LA109_0==REGULAR_ID||LA109_0==SQL92_RESERVED_DATE) ) {
				alt109=1;
			}
			switch (alt109) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:643:25: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_attribute_definition6325);
					type_spec405=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec405.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: attribute_name, type_spec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 644:9: -> ^( ATTRIBUTE attribute_name ( type_spec )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:644:12: ^( ATTRIBUTE attribute_name ( type_spec )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ATTRIBUTE, "ATTRIBUTE"), root_1);
				adaptor.addChild(root_1, stream_attribute_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:644:39: ( type_spec )?
				if ( stream_type_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_type_spec.nextTree());
				}
				stream_type_spec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "attribute_definition"


	public static class alter_collection_clauses_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_collection_clauses"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:647:1: alter_collection_clauses : modify_key ( limit_key expression | element_key type_key type_spec ) -> {mode == 1}? ^( ALTER_COLLECTION[$modify_key.start] ^( type_key type_spec ) ) -> ^( ALTER_COLLECTION[$modify_key.start] ^( limit_key ^( EXPR expression ) ) ) ;
	public final PLSQLParser.alter_collection_clauses_return alter_collection_clauses() throws RecognitionException {
		PLSQLParser.alter_collection_clauses_return retval = new PLSQLParser.alter_collection_clauses_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope modify_key406 =null;
		ParserRuleReturnScope limit_key407 =null;
		ParserRuleReturnScope expression408 =null;
		ParserRuleReturnScope element_key409 =null;
		ParserRuleReturnScope type_key410 =null;
		ParserRuleReturnScope type_spec411 =null;

		RewriteRuleSubtreeStream stream_modify_key=new RewriteRuleSubtreeStream(adaptor,"rule modify_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_limit_key=new RewriteRuleSubtreeStream(adaptor,"rule limit_key");
		RewriteRuleSubtreeStream stream_element_key=new RewriteRuleSubtreeStream(adaptor,"rule element_key");
		RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:649:5: ( modify_key ( limit_key expression | element_key type_key type_spec ) -> {mode == 1}? ^( ALTER_COLLECTION[$modify_key.start] ^( type_key type_spec ) ) -> ^( ALTER_COLLECTION[$modify_key.start] ^( limit_key ^( EXPR expression ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:649:10: modify_key ( limit_key expression | element_key type_key type_spec )
			{
			pushFollow(FOLLOW_modify_key_in_alter_collection_clauses6373);
			modify_key406=modify_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_modify_key.add(modify_key406.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:650:5: ( limit_key expression | element_key type_key type_spec )
			int alt110=2;
			int LA110_0 = input.LA(1);
			if ( (LA110_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("element"))||(input.LT(1).getText().equalsIgnoreCase("limit"))))) {
				int LA110_1 = input.LA(2);
				if ( (LA110_1==APPROXIMATE_NUM_LIT||LA110_1==BINDVAR||(LA110_1 >= CHAR_STRING && LA110_1 <= COLON)||LA110_1==DELIMITED_ID||LA110_1==EXACT_NUM_LIT||LA110_1==INTRODUCER||LA110_1==LEFT_PAREN||LA110_1==MINUS_SIGN||LA110_1==NATIONAL_CHAR_STRING_LIT||LA110_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA110_1==PLUS_SIGN||LA110_1==SQL92_RESERVED_ALL||LA110_1==SQL92_RESERVED_ANY||LA110_1==SQL92_RESERVED_CASE||(LA110_1 >= SQL92_RESERVED_CURSOR && LA110_1 <= SQL92_RESERVED_DATE)||(LA110_1 >= SQL92_RESERVED_DEFAULT && LA110_1 <= SQL92_RESERVED_DELETE)||LA110_1==SQL92_RESERVED_DISTINCT||(LA110_1 >= SQL92_RESERVED_EXISTS && LA110_1 <= SQL92_RESERVED_FALSE)||(LA110_1 >= SQL92_RESERVED_NOT && LA110_1 <= SQL92_RESERVED_NULL)||LA110_1==SQL92_RESERVED_PRIOR||LA110_1==SQL92_RESERVED_TRUE||LA110_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("limit")))) {
					alt110=1;
				}
				else if ( (LA110_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("element"))||(input.LT(1).getText().equalsIgnoreCase("limit"))))) {
					int LA110_3 = input.LA(3);
					if ( (LA110_3==APPROXIMATE_NUM_LIT||LA110_3==ASTERISK||LA110_3==BINDVAR||(LA110_3 >= CARRET_OPERATOR_PART && LA110_3 <= COLON)||LA110_3==CONCATENATION_OP||(LA110_3 >= EQUALS_OP && LA110_3 <= EXCLAMATION_OPERATOR_PART)||(LA110_3 >= GREATER_THAN_OP && LA110_3 <= GREATER_THAN_OR_EQUALS_OP)||LA110_3==INTRODUCER||(LA110_3 >= LEFT_BRACKET && LA110_3 <= LESS_THAN_OR_EQUALS_OP)||LA110_3==MINUS_SIGN||LA110_3==NATIONAL_CHAR_STRING_LIT||LA110_3==NOT_EQUAL_OP||(LA110_3 >= PERCENT && LA110_3 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA110_3==PLUS_SIGN||LA110_3==SEMICOLON||LA110_3==SOLIDUS||LA110_3==SQL92_RESERVED_ALL||(LA110_3 >= SQL92_RESERVED_AND && LA110_3 <= SQL92_RESERVED_ANY)||LA110_3==SQL92_RESERVED_BETWEEN||LA110_3==SQL92_RESERVED_CASE||(LA110_3 >= SQL92_RESERVED_DEFAULT && LA110_3 <= SQL92_RESERVED_DELETE)||LA110_3==SQL92_RESERVED_DISTINCT||(LA110_3 >= SQL92_RESERVED_EXISTS && LA110_3 <= SQL92_RESERVED_FALSE)||LA110_3==SQL92_RESERVED_IN||(LA110_3 >= SQL92_RESERVED_IS && LA110_3 <= SQL92_RESERVED_NULL)||LA110_3==SQL92_RESERVED_OR||LA110_3==SQL92_RESERVED_PRIOR||LA110_3==SQL92_RESERVED_TRUE||LA110_3==UNSIGNED_INTEGER||LA110_3==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("limit")))) {
						alt110=1;
					}
					else if ( (LA110_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("element"))||(input.LT(1).getText().equalsIgnoreCase("limit"))))) {
						int LA110_4 = input.LA(4);
						if ( ((input.LT(1).getText().equalsIgnoreCase("limit"))) ) {
							alt110=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("element"))) ) {
							alt110=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 110, 4, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA110_3==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("element"))||(input.LT(1).getText().equalsIgnoreCase("limit"))))) {
						int LA110_5 = input.LA(4);
						if ( ((input.LT(1).getText().equalsIgnoreCase("limit"))) ) {
							alt110=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("element"))) ) {
							alt110=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 110, 5, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA110_3==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("element"))||(input.LT(1).getText().equalsIgnoreCase("limit"))))) {
						int LA110_6 = input.LA(4);
						if ( ((LA110_6 >= CHAR_STRING && LA110_6 <= CHAR_STRING_PERL)||LA110_6==NATIONAL_CHAR_STRING_LIT) && ((input.LT(1).getText().equalsIgnoreCase("limit")))) {
							alt110=1;
						}
						else if ( (LA110_6==LEFT_PAREN||LA110_6==REGULAR_ID||LA110_6==SEMICOLON||LA110_6==SQL92_RESERVED_WITH) && ((input.LT(1).getText().equalsIgnoreCase("element")))) {
							alt110=2;
						}

					}

				}

			}

			switch (alt110) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:650:10: limit_key expression
					{
					pushFollow(FOLLOW_limit_key_in_alter_collection_clauses6384);
					limit_key407=limit_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_limit_key.add(limit_key407.getTree());
					pushFollow(FOLLOW_expression_in_alter_collection_clauses6386);
					expression408=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression408.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:651:10: element_key type_key type_spec
					{
					pushFollow(FOLLOW_element_key_in_alter_collection_clauses6397);
					element_key409=element_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_element_key.add(element_key409.getTree());
					pushFollow(FOLLOW_type_key_in_alter_collection_clauses6399);
					type_key410=type_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_key.add(type_key410.getTree());
					pushFollow(FOLLOW_type_spec_in_alter_collection_clauses6401);
					type_spec411=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec411.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			// AST REWRITE
			// elements: limit_key, type_spec, type_key, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 653:9: -> {mode == 1}? ^( ALTER_COLLECTION[$modify_key.start] ^( type_key type_spec ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:653:25: ^( ALTER_COLLECTION[$modify_key.start] ^( type_key type_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_COLLECTION, (modify_key406!=null?(modify_key406.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:653:63: ^( type_key type_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_type_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_type_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 654:9: -> ^( ALTER_COLLECTION[$modify_key.start] ^( limit_key ^( EXPR expression ) ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:654:13: ^( ALTER_COLLECTION[$modify_key.start] ^( limit_key ^( EXPR expression ) ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_COLLECTION, (modify_key406!=null?(modify_key406.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:654:51: ^( limit_key ^( EXPR expression ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_limit_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:654:63: ^( EXPR expression )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);
				adaptor.addChild(root_3, stream_expression.nextTree());
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_collection_clauses"


	public static class dependent_handling_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dependent_handling_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:657:1: dependent_handling_clause : ( invalidate_key -> ^( DEPENDENT_HANDLING invalidate_key ) | cascade_key ( convert_key to_key substitutable_key | ( not_key )? including_key table_key data_key )? ( dependent_exceptions_part )? -> {mode == 1}? ^( DEPENDENT_HANDLING ^( cascade_key convert_key ) ( dependent_exceptions_part )? ) -> {mode == 2}? ^( DEPENDENT_HANDLING ^( cascade_key ( not_key )? including_key ) ( dependent_exceptions_part )? ) -> ^( DEPENDENT_HANDLING ^( cascade_key ) ( dependent_exceptions_part )? ) );
	public final PLSQLParser.dependent_handling_clause_return dependent_handling_clause() throws RecognitionException {
		PLSQLParser.dependent_handling_clause_return retval = new PLSQLParser.dependent_handling_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope invalidate_key412 =null;
		ParserRuleReturnScope cascade_key413 =null;
		ParserRuleReturnScope convert_key414 =null;
		ParserRuleReturnScope to_key415 =null;
		ParserRuleReturnScope substitutable_key416 =null;
		ParserRuleReturnScope not_key417 =null;
		ParserRuleReturnScope including_key418 =null;
		ParserRuleReturnScope table_key419 =null;
		ParserRuleReturnScope data_key420 =null;
		ParserRuleReturnScope dependent_exceptions_part421 =null;

		RewriteRuleSubtreeStream stream_invalidate_key=new RewriteRuleSubtreeStream(adaptor,"rule invalidate_key");
		RewriteRuleSubtreeStream stream_cascade_key=new RewriteRuleSubtreeStream(adaptor,"rule cascade_key");
		RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
		RewriteRuleSubtreeStream stream_substitutable_key=new RewriteRuleSubtreeStream(adaptor,"rule substitutable_key");
		RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
		RewriteRuleSubtreeStream stream_including_key=new RewriteRuleSubtreeStream(adaptor,"rule including_key");
		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_convert_key=new RewriteRuleSubtreeStream(adaptor,"rule convert_key");
		RewriteRuleSubtreeStream stream_data_key=new RewriteRuleSubtreeStream(adaptor,"rule data_key");
		RewriteRuleSubtreeStream stream_dependent_exceptions_part=new RewriteRuleSubtreeStream(adaptor,"rule dependent_exceptions_part");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:659:5: ( invalidate_key -> ^( DEPENDENT_HANDLING invalidate_key ) | cascade_key ( convert_key to_key substitutable_key | ( not_key )? including_key table_key data_key )? ( dependent_exceptions_part )? -> {mode == 1}? ^( DEPENDENT_HANDLING ^( cascade_key convert_key ) ( dependent_exceptions_part )? ) -> {mode == 2}? ^( DEPENDENT_HANDLING ^( cascade_key ( not_key )? including_key ) ( dependent_exceptions_part )? ) -> ^( DEPENDENT_HANDLING ^( cascade_key ) ( dependent_exceptions_part )? ) )
			int alt114=2;
			int LA114_0 = input.LA(1);
			if ( (LA114_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("cascade"))||(input.LT(1).getText().equalsIgnoreCase("invalidate"))))) {
				int LA114_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("invalidate"))) ) {
					alt114=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("cascade"))) ) {
					alt114=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 114, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt114) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:659:10: invalidate_key
					{
					pushFollow(FOLLOW_invalidate_key_in_dependent_handling_clause6487);
					invalidate_key412=invalidate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_invalidate_key.add(invalidate_key412.getTree());
					// AST REWRITE
					// elements: invalidate_key
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 659:25: -> ^( DEPENDENT_HANDLING invalidate_key )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:659:28: ^( DEPENDENT_HANDLING invalidate_key )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEPENDENT_HANDLING, "DEPENDENT_HANDLING"), root_1);
						adaptor.addChild(root_1, stream_invalidate_key.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:660:10: cascade_key ( convert_key to_key substitutable_key | ( not_key )? including_key table_key data_key )? ( dependent_exceptions_part )?
					{
					pushFollow(FOLLOW_cascade_key_in_dependent_handling_clause6506);
					cascade_key413=cascade_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_cascade_key.add(cascade_key413.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:661:9: ( convert_key to_key substitutable_key | ( not_key )? including_key table_key data_key )?
					int alt112=3;
					int LA112_0 = input.LA(1);
					if ( (LA112_0==REGULAR_ID) ) {
						int LA112_1 = input.LA(2);
						if ( (LA112_1==SQL92_RESERVED_TO) ) {
							alt112=1;
						}
						else if ( (LA112_1==SQL92_RESERVED_TABLE) && ((input.LT(1).getText().equalsIgnoreCase("including")))) {
							alt112=2;
						}
					}
					else if ( (LA112_0==SQL92_RESERVED_NOT) ) {
						alt112=2;
					}
					switch (alt112) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:661:14: convert_key to_key substitutable_key
							{
							pushFollow(FOLLOW_convert_key_in_dependent_handling_clause6521);
							convert_key414=convert_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_convert_key.add(convert_key414.getTree());
							pushFollow(FOLLOW_to_key_in_dependent_handling_clause6523);
							to_key415=to_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_to_key.add(to_key415.getTree());
							pushFollow(FOLLOW_substitutable_key_in_dependent_handling_clause6525);
							substitutable_key416=substitutable_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_substitutable_key.add(substitutable_key416.getTree());
							if ( state.backtracking==0 ) {mode = 1;}
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:662:14: ( not_key )? including_key table_key data_key
							{
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:662:14: ( not_key )?
							int alt111=2;
							int LA111_0 = input.LA(1);
							if ( (LA111_0==SQL92_RESERVED_NOT) ) {
								alt111=1;
							}
							switch (alt111) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:662:14: not_key
									{
									pushFollow(FOLLOW_not_key_in_dependent_handling_clause6542);
									not_key417=not_key();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_not_key.add(not_key417.getTree());
									}
									break;

							}

							pushFollow(FOLLOW_including_key_in_dependent_handling_clause6545);
							including_key418=including_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_including_key.add(including_key418.getTree());
							pushFollow(FOLLOW_table_key_in_dependent_handling_clause6547);
							table_key419=table_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_table_key.add(table_key419.getTree());
							pushFollow(FOLLOW_data_key_in_dependent_handling_clause6549);
							data_key420=data_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_data_key.add(data_key420.getTree());
							if ( state.backtracking==0 ) {mode = 2;}
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:664:9: ( dependent_exceptions_part )?
					int alt113=2;
					int LA113_0 = input.LA(1);
					if ( (LA113_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("force"))||(input.LT(1).getText().equalsIgnoreCase("exceptions"))))) {
						alt113=1;
					}
					switch (alt113) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:664:9: dependent_exceptions_part
							{
							pushFollow(FOLLOW_dependent_exceptions_part_in_dependent_handling_clause6572);
							dependent_exceptions_part421=dependent_exceptions_part();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_dependent_exceptions_part.add(dependent_exceptions_part421.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: dependent_exceptions_part, including_key, cascade_key, cascade_key, dependent_exceptions_part, cascade_key, convert_key, dependent_exceptions_part, not_key
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 665:9: -> {mode == 1}? ^( DEPENDENT_HANDLING ^( cascade_key convert_key ) ( dependent_exceptions_part )? )
					if (mode == 1) {
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:665:25: ^( DEPENDENT_HANDLING ^( cascade_key convert_key ) ( dependent_exceptions_part )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEPENDENT_HANDLING, "DEPENDENT_HANDLING"), root_1);
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:665:46: ^( cascade_key convert_key )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot(stream_cascade_key.nextNode(), root_2);
						adaptor.addChild(root_2, stream_convert_key.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:665:73: ( dependent_exceptions_part )?
						if ( stream_dependent_exceptions_part.hasNext() ) {
							adaptor.addChild(root_1, stream_dependent_exceptions_part.nextTree());
						}
						stream_dependent_exceptions_part.reset();

						adaptor.addChild(root_0, root_1);
						}

					}

					else // 666:9: -> {mode == 2}? ^( DEPENDENT_HANDLING ^( cascade_key ( not_key )? including_key ) ( dependent_exceptions_part )? )
					if (mode == 2) {
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:666:25: ^( DEPENDENT_HANDLING ^( cascade_key ( not_key )? including_key ) ( dependent_exceptions_part )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEPENDENT_HANDLING, "DEPENDENT_HANDLING"), root_1);
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:666:46: ^( cascade_key ( not_key )? including_key )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot(stream_cascade_key.nextNode(), root_2);
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:666:60: ( not_key )?
						if ( stream_not_key.hasNext() ) {
							adaptor.addChild(root_2, stream_not_key.nextTree());
						}
						stream_not_key.reset();

						adaptor.addChild(root_2, stream_including_key.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:666:84: ( dependent_exceptions_part )?
						if ( stream_dependent_exceptions_part.hasNext() ) {
							adaptor.addChild(root_1, stream_dependent_exceptions_part.nextTree());
						}
						stream_dependent_exceptions_part.reset();

						adaptor.addChild(root_0, root_1);
						}

					}

					else // 667:9: -> ^( DEPENDENT_HANDLING ^( cascade_key ) ( dependent_exceptions_part )? )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:667:12: ^( DEPENDENT_HANDLING ^( cascade_key ) ( dependent_exceptions_part )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEPENDENT_HANDLING, "DEPENDENT_HANDLING"), root_1);
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:667:33: ^( cascade_key )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot(stream_cascade_key.nextNode(), root_2);
						adaptor.addChild(root_1, root_2);
						}

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:667:48: ( dependent_exceptions_part )?
						if ( stream_dependent_exceptions_part.hasNext() ) {
							adaptor.addChild(root_1, stream_dependent_exceptions_part.nextTree());
						}
						stream_dependent_exceptions_part.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_handling_clause"


	public static class dependent_exceptions_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dependent_exceptions_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:670:1: dependent_exceptions_part : ( force_key )? exceptions_key into_key tableview_name -> ^( exceptions_key ( force_key )? tableview_name ) ;
	public final PLSQLParser.dependent_exceptions_part_return dependent_exceptions_part() throws RecognitionException {
		PLSQLParser.dependent_exceptions_part_return retval = new PLSQLParser.dependent_exceptions_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope force_key422 =null;
		ParserRuleReturnScope exceptions_key423 =null;
		ParserRuleReturnScope into_key424 =null;
		ParserRuleReturnScope tableview_name425 =null;

		RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
		RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
		RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
		RewriteRuleSubtreeStream stream_exceptions_key=new RewriteRuleSubtreeStream(adaptor,"rule exceptions_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:671:5: ( ( force_key )? exceptions_key into_key tableview_name -> ^( exceptions_key ( force_key )? tableview_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:671:10: ( force_key )? exceptions_key into_key tableview_name
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:671:10: ( force_key )?
			int alt115=2;
			int LA115_0 = input.LA(1);
			if ( (LA115_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("force"))||(input.LT(1).getText().equalsIgnoreCase("exceptions"))))) {
				int LA115_1 = input.LA(2);
				if ( (LA115_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("force")))) {
					alt115=1;
				}
			}
			switch (alt115) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:671:10: force_key
					{
					pushFollow(FOLLOW_force_key_in_dependent_exceptions_part6667);
					force_key422=force_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_force_key.add(force_key422.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_exceptions_key_in_dependent_exceptions_part6670);
			exceptions_key423=exceptions_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_exceptions_key.add(exceptions_key423.getTree());
			pushFollow(FOLLOW_into_key_in_dependent_exceptions_part6672);
			into_key424=into_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_into_key.add(into_key424.getTree());
			pushFollow(FOLLOW_tableview_name_in_dependent_exceptions_part6674);
			tableview_name425=tableview_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name425.getTree());
			// AST REWRITE
			// elements: tableview_name, force_key, exceptions_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 672:9: -> ^( exceptions_key ( force_key )? tableview_name )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:672:12: ^( exceptions_key ( force_key )? tableview_name )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_exceptions_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:672:29: ( force_key )?
				if ( stream_force_key.hasNext() ) {
					adaptor.addChild(root_1, stream_force_key.nextTree());
				}
				stream_force_key.reset();

				adaptor.addChild(root_1, stream_tableview_name.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dependent_exceptions_part"


	public static class create_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:677:1: create_type : create_key ( or_key replace_key )? type_key ( type_definition | type_body ) SEMICOLON -> {mode == 1}? ^( CREATE_TYPE_BODY[$create_key.start] create_key ( replace_key )? type_body ) -> ^( CREATE_TYPE_SPEC[$create_key.start] create_key ( replace_key )? type_definition ) ;
	public final PLSQLParser.create_type_return create_type() throws RecognitionException {
		PLSQLParser.create_type_return retval = new PLSQLParser.create_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON432=null;
		ParserRuleReturnScope create_key426 =null;
		ParserRuleReturnScope or_key427 =null;
		ParserRuleReturnScope replace_key428 =null;
		ParserRuleReturnScope type_key429 =null;
		ParserRuleReturnScope type_definition430 =null;
		ParserRuleReturnScope type_body431 =null;

		Object SEMICOLON432_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_type_definition=new RewriteRuleSubtreeStream(adaptor,"rule type_definition");
		RewriteRuleSubtreeStream stream_type_body=new RewriteRuleSubtreeStream(adaptor,"rule type_body");
		RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
		RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
		RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:679:5: ( create_key ( or_key replace_key )? type_key ( type_definition | type_body ) SEMICOLON -> {mode == 1}? ^( CREATE_TYPE_BODY[$create_key.start] create_key ( replace_key )? type_body ) -> ^( CREATE_TYPE_SPEC[$create_key.start] create_key ( replace_key )? type_definition ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:679:10: create_key ( or_key replace_key )? type_key ( type_definition | type_body ) SEMICOLON
			{
			pushFollow(FOLLOW_create_key_in_create_type6723);
			create_key426=create_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_create_key.add(create_key426.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:679:21: ( or_key replace_key )?
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==SQL92_RESERVED_OR) ) {
				alt116=1;
			}
			switch (alt116) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:679:22: or_key replace_key
					{
					pushFollow(FOLLOW_or_key_in_create_type6726);
					or_key427=or_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_or_key.add(or_key427.getTree());
					pushFollow(FOLLOW_replace_key_in_create_type6728);
					replace_key428=replace_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replace_key.add(replace_key428.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_type_key_in_create_type6732);
			type_key429=type_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_key.add(type_key429.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:680:9: ( type_definition | type_body )
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==REGULAR_ID) ) {
				switch ( input.LA(2) ) {
				case PERIOD:
				case SEMICOLON:
				case SQL92_RESERVED_AS:
				case SQL92_RESERVED_IS:
					{
					alt117=1;
					}
					break;
				case REGULAR_ID:
					{
					int LA117_3 = input.LA(3);
					if ( (LA117_3==CHAR_STRING||LA117_3==DELIMITED_ID||LA117_3==REGULAR_ID||LA117_3==SQL92_RESERVED_DATE) ) {
						alt117=1;
					}
					else if ( (LA117_3==PERIOD||LA117_3==SQL92_RESERVED_AS||LA117_3==SQL92_RESERVED_IS) ) {
						alt117=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 117, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case DELIMITED_ID:
					{
					alt117=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 117, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA117_0==DELIMITED_ID) ) {
				alt117=1;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 117, 0, input);
				throw nvae;
			}

			switch (alt117) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:680:11: type_definition
					{
					pushFollow(FOLLOW_type_definition_in_create_type6744);
					type_definition430=type_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_definition.add(type_definition430.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:680:29: type_body
					{
					pushFollow(FOLLOW_type_body_in_create_type6748);
					type_body431=type_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_body.add(type_body431.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			SEMICOLON432=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_type6761); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON432);

			// AST REWRITE
			// elements: create_key, type_body, type_definition, replace_key, replace_key, create_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 682:9: -> {mode == 1}? ^( CREATE_TYPE_BODY[$create_key.start] create_key ( replace_key )? type_body )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:682:24: ^( CREATE_TYPE_BODY[$create_key.start] create_key ( replace_key )? type_body )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_TYPE_BODY, (create_key426!=null?(create_key426.start):null)), root_1);
				adaptor.addChild(root_1, stream_create_key.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:682:73: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_type_body.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 683:9: -> ^( CREATE_TYPE_SPEC[$create_key.start] create_key ( replace_key )? type_definition )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:683:12: ^( CREATE_TYPE_SPEC[$create_key.start] create_key ( replace_key )? type_definition )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_TYPE_SPEC, (create_key426!=null?(create_key426.start):null)), root_1);
				adaptor.addChild(root_1, stream_create_key.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:683:61: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				adaptor.addChild(root_1, stream_type_definition.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_type"


	public static class type_in_decl_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "type_in_decl"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:686:1: type_in_decl : type_key ( type_definition | type_body ) SEMICOLON -> {mode == 1}? ^( CREATE_TYPE_BODY[$type_key.start] type_body ) -> ^( CREATE_TYPE_SPEC[$type_key.start] type_definition ) ;
	public final PLSQLParser.type_in_decl_return type_in_decl() throws RecognitionException {
		PLSQLParser.type_in_decl_return retval = new PLSQLParser.type_in_decl_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON436=null;
		ParserRuleReturnScope type_key433 =null;
		ParserRuleReturnScope type_definition434 =null;
		ParserRuleReturnScope type_body435 =null;

		Object SEMICOLON436_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_type_definition=new RewriteRuleSubtreeStream(adaptor,"rule type_definition");
		RewriteRuleSubtreeStream stream_type_body=new RewriteRuleSubtreeStream(adaptor,"rule type_body");
		RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:688:5: ( type_key ( type_definition | type_body ) SEMICOLON -> {mode == 1}? ^( CREATE_TYPE_BODY[$type_key.start] type_body ) -> ^( CREATE_TYPE_SPEC[$type_key.start] type_definition ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:688:10: type_key ( type_definition | type_body ) SEMICOLON
			{
			pushFollow(FOLLOW_type_key_in_type_in_decl6834);
			type_key433=type_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_key.add(type_key433.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:689:9: ( type_definition | type_body )
			int alt118=2;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==REGULAR_ID) ) {
				switch ( input.LA(2) ) {
				case PERIOD:
				case SEMICOLON:
				case SQL92_RESERVED_AS:
				case SQL92_RESERVED_IS:
					{
					alt118=1;
					}
					break;
				case REGULAR_ID:
					{
					int LA118_3 = input.LA(3);
					if ( (LA118_3==CHAR_STRING||LA118_3==DELIMITED_ID||LA118_3==REGULAR_ID||LA118_3==SQL92_RESERVED_DATE) ) {
						alt118=1;
					}
					else if ( (LA118_3==PERIOD||LA118_3==SQL92_RESERVED_AS||LA118_3==SQL92_RESERVED_IS) ) {
						alt118=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 118, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case DELIMITED_ID:
					{
					alt118=2;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 118, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA118_0==DELIMITED_ID) ) {
				alt118=1;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 118, 0, input);
				throw nvae;
			}

			switch (alt118) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:689:11: type_definition
					{
					pushFollow(FOLLOW_type_definition_in_type_in_decl6846);
					type_definition434=type_definition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_definition.add(type_definition434.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:689:29: type_body
					{
					pushFollow(FOLLOW_type_body_in_type_in_decl6850);
					type_body435=type_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_body.add(type_body435.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			SEMICOLON436=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_in_decl6863); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON436);

			// AST REWRITE
			// elements: type_body, type_definition
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 691:9: -> {mode == 1}? ^( CREATE_TYPE_BODY[$type_key.start] type_body )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:691:24: ^( CREATE_TYPE_BODY[$type_key.start] type_body )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_TYPE_BODY, (type_key433!=null?(type_key433.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_body.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 692:9: -> ^( CREATE_TYPE_SPEC[$type_key.start] type_definition )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:692:12: ^( CREATE_TYPE_SPEC[$type_key.start] type_definition )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_TYPE_SPEC, (type_key433!=null?(type_key433.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_definition.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_in_decl"


	public static class type_definition_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "type_definition"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:696:1: type_definition : type_name ( oid_key CHAR_STRING )? ( object_type_def )? -> type_name ( CHAR_STRING )? ( object_type_def )? ;
	public final PLSQLParser.type_definition_return type_definition() throws RecognitionException {
		PLSQLParser.type_definition_return retval = new PLSQLParser.type_definition_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CHAR_STRING439=null;
		ParserRuleReturnScope type_name437 =null;
		ParserRuleReturnScope oid_key438 =null;
		ParserRuleReturnScope object_type_def440 =null;

		Object CHAR_STRING439_tree=null;
		RewriteRuleTokenStream stream_CHAR_STRING=new RewriteRuleTokenStream(adaptor,"token CHAR_STRING");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_object_type_def=new RewriteRuleSubtreeStream(adaptor,"rule object_type_def");
		RewriteRuleSubtreeStream stream_oid_key=new RewriteRuleSubtreeStream(adaptor,"rule oid_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:697:5: ( type_name ( oid_key CHAR_STRING )? ( object_type_def )? -> type_name ( CHAR_STRING )? ( object_type_def )? )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:697:10: type_name ( oid_key CHAR_STRING )? ( object_type_def )?
			{
			pushFollow(FOLLOW_type_name_in_type_definition6919);
			type_name437=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_name.add(type_name437.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:698:9: ( oid_key CHAR_STRING )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))||(input.LT(1).getText().equalsIgnoreCase("oid"))))) {
				int LA119_1 = input.LA(2);
				if ( (LA119_1==CHAR_STRING) && ((input.LT(1).getText().equalsIgnoreCase("oid")))) {
					alt119=1;
				}
			}
			switch (alt119) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:698:10: oid_key CHAR_STRING
					{
					pushFollow(FOLLOW_oid_key_in_type_definition6931);
					oid_key438=oid_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_oid_key.add(oid_key438.getTree());
					CHAR_STRING439=(Token)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_type_definition6933); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CHAR_STRING.add(CHAR_STRING439);

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:699:9: ( object_type_def )?
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
				alt120=1;
			}
			else if ( (LA120_0==SQL92_RESERVED_AS||LA120_0==SQL92_RESERVED_IS) ) {
				alt120=1;
			}
			switch (alt120) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:699:9: object_type_def
					{
					pushFollow(FOLLOW_object_type_def_in_type_definition6945);
					object_type_def440=object_type_def();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_object_type_def.add(object_type_def440.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: object_type_def, CHAR_STRING, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 700:9: -> type_name ( CHAR_STRING )? ( object_type_def )?
			{
				adaptor.addChild(root_0, stream_type_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:700:22: ( CHAR_STRING )?
				if ( stream_CHAR_STRING.hasNext() ) {
					adaptor.addChild(root_0, stream_CHAR_STRING.nextNode());
				}
				stream_CHAR_STRING.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:700:35: ( object_type_def )?
				if ( stream_object_type_def.hasNext() ) {
					adaptor.addChild(root_0, stream_object_type_def.nextTree());
				}
				stream_object_type_def.reset();

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_definition"


	public static class object_type_def_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "object_type_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:703:1: object_type_def : ( invoker_rights_clause )? ( object_as_part | object_under_part ) ( sqlj_object_type )? ( LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN )? ( modifier_clause )* -> ^( OBJECT_TYPE_DEF ( object_as_part )? ( object_under_part )? ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( object_member_spec )* ) ) ;
	public final PLSQLParser.object_type_def_return object_type_def() throws RecognitionException {
		PLSQLParser.object_type_def_return retval = new PLSQLParser.object_type_def_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN445=null;
		Token COMMA447=null;
		Token RIGHT_PAREN449=null;
		ParserRuleReturnScope invoker_rights_clause441 =null;
		ParserRuleReturnScope object_as_part442 =null;
		ParserRuleReturnScope object_under_part443 =null;
		ParserRuleReturnScope sqlj_object_type444 =null;
		ParserRuleReturnScope object_member_spec446 =null;
		ParserRuleReturnScope object_member_spec448 =null;
		ParserRuleReturnScope modifier_clause450 =null;

		Object LEFT_PAREN445_tree=null;
		Object COMMA447_tree=null;
		Object RIGHT_PAREN449_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_modifier_clause=new RewriteRuleSubtreeStream(adaptor,"rule modifier_clause");
		RewriteRuleSubtreeStream stream_object_under_part=new RewriteRuleSubtreeStream(adaptor,"rule object_under_part");
		RewriteRuleSubtreeStream stream_sqlj_object_type=new RewriteRuleSubtreeStream(adaptor,"rule sqlj_object_type");
		RewriteRuleSubtreeStream stream_invoker_rights_clause=new RewriteRuleSubtreeStream(adaptor,"rule invoker_rights_clause");
		RewriteRuleSubtreeStream stream_object_as_part=new RewriteRuleSubtreeStream(adaptor,"rule object_as_part");
		RewriteRuleSubtreeStream stream_object_member_spec=new RewriteRuleSubtreeStream(adaptor,"rule object_member_spec");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:704:5: ( ( invoker_rights_clause )? ( object_as_part | object_under_part ) ( sqlj_object_type )? ( LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN )? ( modifier_clause )* -> ^( OBJECT_TYPE_DEF ( object_as_part )? ( object_under_part )? ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( object_member_spec )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:704:10: ( invoker_rights_clause )? ( object_as_part | object_under_part ) ( sqlj_object_type )? ( LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN )? ( modifier_clause )*
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:704:10: ( invoker_rights_clause )?
			int alt121=2;
			int LA121_0 = input.LA(1);
			if ( (LA121_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
				int LA121_1 = input.LA(2);
				if ( (LA121_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
					int LA121_3 = input.LA(3);
					if ( (LA121_3==SQL92_RESERVED_AS||LA121_3==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
						alt121=1;
					}
					else if ( (LA121_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
						int LA121_6 = input.LA(4);
						if ( (LA121_6==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("authid"))||(input.LT(1).getText().equalsIgnoreCase("under"))))) {
							int LA121_7 = input.LA(5);
							if ( ((input.LT(1).getText().equalsIgnoreCase("authid"))) ) {
								alt121=1;
							}
						}
						else if ( (LA121_6==DELIMITED_ID||LA121_6==SQL92_RESERVED_DATE) && ((input.LT(1).getText().equalsIgnoreCase("authid")))) {
							alt121=1;
						}
					}
				}
			}
			switch (alt121) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:704:10: invoker_rights_clause
					{
					pushFollow(FOLLOW_invoker_rights_clause_in_object_type_def6984);
					invoker_rights_clause441=invoker_rights_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_invoker_rights_clause.add(invoker_rights_clause441.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:705:5: ( object_as_part | object_under_part )
			int alt122=2;
			int LA122_0 = input.LA(1);
			if ( (LA122_0==SQL92_RESERVED_AS||LA122_0==SQL92_RESERVED_IS) ) {
				alt122=1;
			}
			else if ( (LA122_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("under")))) {
				alt122=2;
			}

			switch (alt122) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:705:10: object_as_part
					{
					pushFollow(FOLLOW_object_as_part_in_object_type_def6996);
					object_as_part442=object_as_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_object_as_part.add(object_as_part442.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:706:10: object_under_part
					{
					pushFollow(FOLLOW_object_under_part_in_object_type_def7007);
					object_under_part443=object_under_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_object_under_part.add(object_under_part443.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:708:9: ( sqlj_object_type )?
			int alt123=2;
			int LA123_0 = input.LA(1);
			if ( (LA123_0==REGULAR_ID) ) {
				int LA123_1 = input.LA(2);
				if ( (LA123_1==REGULAR_ID) ) {
					switch ( input.LA(3) ) {
						case APPROXIMATE_NUM_LIT:
						case BINDVAR:
						case CHAR_STRING:
						case CHAR_STRING_PERL:
						case COLON:
						case DELIMITED_ID:
						case EXACT_NUM_LIT:
						case INTRODUCER:
						case LEFT_PAREN:
						case MINUS_SIGN:
						case NATIONAL_CHAR_STRING_LIT:
						case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
						case PLUS_SIGN:
						case SQL92_RESERVED_ALL:
						case SQL92_RESERVED_ANY:
						case SQL92_RESERVED_CASE:
						case SQL92_RESERVED_CURSOR:
						case SQL92_RESERVED_DATE:
						case SQL92_RESERVED_DEFAULT:
						case SQL92_RESERVED_DELETE:
						case SQL92_RESERVED_DISTINCT:
						case SQL92_RESERVED_EXISTS:
						case SQL92_RESERVED_FALSE:
						case SQL92_RESERVED_NULL:
						case SQL92_RESERVED_PRIOR:
						case SQL92_RESERVED_TRUE:
						case UNSIGNED_INTEGER:
							{
							alt123=1;
							}
							break;
						case SQL92_RESERVED_NOT:
							{
							int LA123_6 = input.LA(4);
							if ( (LA123_6==APPROXIMATE_NUM_LIT||LA123_6==BINDVAR||(LA123_6 >= CHAR_STRING && LA123_6 <= COLON)||LA123_6==DELIMITED_ID||LA123_6==EXACT_NUM_LIT||LA123_6==INTRODUCER||LA123_6==LEFT_PAREN||LA123_6==MINUS_SIGN||LA123_6==NATIONAL_CHAR_STRING_LIT||LA123_6==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_6==PLUS_SIGN||LA123_6==SQL92_RESERVED_ALL||LA123_6==SQL92_RESERVED_ANY||LA123_6==SQL92_RESERVED_CASE||LA123_6==SQL92_RESERVED_DATE||(LA123_6 >= SQL92_RESERVED_DEFAULT && LA123_6 <= SQL92_RESERVED_DELETE)||LA123_6==SQL92_RESERVED_DISTINCT||(LA123_6 >= SQL92_RESERVED_EXISTS && LA123_6 <= SQL92_RESERVED_FALSE)||(LA123_6 >= SQL92_RESERVED_NOT && LA123_6 <= SQL92_RESERVED_NULL)||LA123_6==SQL92_RESERVED_PRIOR||LA123_6==SQL92_RESERVED_TRUE||LA123_6==UNSIGNED_INTEGER) ) {
								alt123=1;
							}
							else if ( (LA123_6==REGULAR_ID) ) {
								switch ( input.LA(5) ) {
									case APPROXIMATE_NUM_LIT:
									case ASTERISK:
									case BINDVAR:
									case CARRET_OPERATOR_PART:
									case CHAR_STRING:
									case CHAR_STRING_PERL:
									case COLON:
									case CONCATENATION_OP:
									case DELIMITED_ID:
									case EQUALS_OP:
									case EXACT_NUM_LIT:
									case EXCLAMATION_OPERATOR_PART:
									case GREATER_THAN_OP:
									case GREATER_THAN_OR_EQUALS_OP:
									case INTRODUCER:
									case LEFT_BRACKET:
									case LEFT_PAREN:
									case LESS_THAN_OP:
									case LESS_THAN_OR_EQUALS_OP:
									case MINUS_SIGN:
									case NATIONAL_CHAR_STRING_LIT:
									case NOT_EQUAL_OP:
									case PERCENT:
									case PERIOD:
									case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
									case PLUS_SIGN:
									case SOLIDUS:
									case SQL92_RESERVED_ALL:
									case SQL92_RESERVED_AND:
									case SQL92_RESERVED_ANY:
									case SQL92_RESERVED_BETWEEN:
									case SQL92_RESERVED_CASE:
									case SQL92_RESERVED_DATE:
									case SQL92_RESERVED_DEFAULT:
									case SQL92_RESERVED_DELETE:
									case SQL92_RESERVED_DISTINCT:
									case SQL92_RESERVED_EXISTS:
									case SQL92_RESERVED_FALSE:
									case SQL92_RESERVED_IN:
									case SQL92_RESERVED_IS:
									case SQL92_RESERVED_LIKE:
									case SQL92_RESERVED_NULL:
									case SQL92_RESERVED_OR:
									case SQL92_RESERVED_PRIOR:
									case SQL92_RESERVED_TRUE:
									case UNSIGNED_INTEGER:
									case VERTICAL_BAR:
										{
										alt123=1;
										}
										break;
									case REGULAR_ID:
										{
										switch ( input.LA(6) ) {
											case APPROXIMATE_NUM_LIT:
											case ASTERISK:
											case BINDVAR:
											case CARRET_OPERATOR_PART:
											case CHAR_STRING:
											case CHAR_STRING_PERL:
											case COLON:
											case CONCATENATION_OP:
											case DELIMITED_ID:
											case EQUALS_OP:
											case EXACT_NUM_LIT:
											case EXCLAMATION_OPERATOR_PART:
											case GREATER_THAN_OP:
											case GREATER_THAN_OR_EQUALS_OP:
											case INTRODUCER:
											case LEFT_BRACKET:
											case LEFT_PAREN:
											case LESS_THAN_OP:
											case LESS_THAN_OR_EQUALS_OP:
											case MINUS_SIGN:
											case NATIONAL_CHAR_STRING_LIT:
											case NOT_EQUAL_OP:
											case PERCENT:
											case PERIOD:
											case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
											case PLUS_SIGN:
											case SOLIDUS:
											case SQL92_RESERVED_ALL:
											case SQL92_RESERVED_AND:
											case SQL92_RESERVED_ANY:
											case SQL92_RESERVED_BETWEEN:
											case SQL92_RESERVED_CASE:
											case SQL92_RESERVED_DATE:
											case SQL92_RESERVED_DEFAULT:
											case SQL92_RESERVED_DELETE:
											case SQL92_RESERVED_DISTINCT:
											case SQL92_RESERVED_EXISTS:
											case SQL92_RESERVED_FALSE:
											case SQL92_RESERVED_IN:
											case SQL92_RESERVED_IS:
											case SQL92_RESERVED_LIKE:
											case SQL92_RESERVED_NULL:
											case SQL92_RESERVED_OF:
											case SQL92_RESERVED_OR:
											case SQL92_RESERVED_PRIOR:
											case SQL92_RESERVED_TO:
											case SQL92_RESERVED_TRUE:
											case UNSIGNED_INTEGER:
											case VERTICAL_BAR:
												{
												alt123=1;
												}
												break;
											case REGULAR_ID:
												{
												switch ( input.LA(7) ) {
													case APPROXIMATE_NUM_LIT:
													case ASTERISK:
													case BINDVAR:
													case CARRET_OPERATOR_PART:
													case CHAR_STRING:
													case CHAR_STRING_PERL:
													case COLON:
													case CONCATENATION_OP:
													case DELIMITED_ID:
													case EQUALS_OP:
													case EXACT_NUM_LIT:
													case EXCLAMATION_OPERATOR_PART:
													case GREATER_THAN_OP:
													case GREATER_THAN_OR_EQUALS_OP:
													case INTRODUCER:
													case LEFT_BRACKET:
													case LEFT_PAREN:
													case LESS_THAN_OP:
													case LESS_THAN_OR_EQUALS_OP:
													case MINUS_SIGN:
													case NATIONAL_CHAR_STRING_LIT:
													case NOT_EQUAL_OP:
													case PERCENT:
													case PERIOD:
													case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
													case PLSQL_NON_RESERVED_USING:
													case PLUS_SIGN:
													case SOLIDUS:
													case SQL92_RESERVED_ALL:
													case SQL92_RESERVED_AND:
													case SQL92_RESERVED_ANY:
													case SQL92_RESERVED_BETWEEN:
													case SQL92_RESERVED_CASE:
													case SQL92_RESERVED_DATE:
													case SQL92_RESERVED_DEFAULT:
													case SQL92_RESERVED_DELETE:
													case SQL92_RESERVED_DISTINCT:
													case SQL92_RESERVED_EXISTS:
													case SQL92_RESERVED_FALSE:
													case SQL92_RESERVED_IN:
													case SQL92_RESERVED_IS:
													case SQL92_RESERVED_LIKE:
													case SQL92_RESERVED_NULL:
													case SQL92_RESERVED_OF:
													case SQL92_RESERVED_OR:
													case SQL92_RESERVED_PRIOR:
													case SQL92_RESERVED_TO:
													case SQL92_RESERVED_TRUE:
													case UNSIGNED_INTEGER:
													case VERTICAL_BAR:
														{
														alt123=1;
														}
														break;
													case REGULAR_ID:
														{
														switch ( input.LA(8) ) {
															case APPROXIMATE_NUM_LIT:
															case ASTERISK:
															case BINDVAR:
															case CARRET_OPERATOR_PART:
															case CHAR_STRING:
															case CHAR_STRING_PERL:
															case COLON:
															case CONCATENATION_OP:
															case DELIMITED_ID:
															case EQUALS_OP:
															case EXACT_NUM_LIT:
															case EXCLAMATION_OPERATOR_PART:
															case GREATER_THAN_OP:
															case GREATER_THAN_OR_EQUALS_OP:
															case INTRODUCER:
															case LEFT_BRACKET:
															case LEFT_PAREN:
															case LESS_THAN_OP:
															case LESS_THAN_OR_EQUALS_OP:
															case MINUS_SIGN:
															case NATIONAL_CHAR_STRING_LIT:
															case NOT_EQUAL_OP:
															case PERCENT:
															case PERIOD:
															case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
															case PLSQL_NON_RESERVED_USING:
															case PLUS_SIGN:
															case SOLIDUS:
															case SQL92_RESERVED_ALL:
															case SQL92_RESERVED_AND:
															case SQL92_RESERVED_ANY:
															case SQL92_RESERVED_BETWEEN:
															case SQL92_RESERVED_CASE:
															case SQL92_RESERVED_DATE:
															case SQL92_RESERVED_DEFAULT:
															case SQL92_RESERVED_DELETE:
															case SQL92_RESERVED_DISTINCT:
															case SQL92_RESERVED_EXISTS:
															case SQL92_RESERVED_FALSE:
															case SQL92_RESERVED_IN:
															case SQL92_RESERVED_IS:
															case SQL92_RESERVED_LIKE:
															case SQL92_RESERVED_NULL:
															case SQL92_RESERVED_OF:
															case SQL92_RESERVED_OR:
															case SQL92_RESERVED_PRIOR:
															case SQL92_RESERVED_TO:
															case SQL92_RESERVED_TRUE:
															case UNSIGNED_INTEGER:
															case VERTICAL_BAR:
																{
																alt123=1;
																}
																break;
															case REGULAR_ID:
																{
																int LA123_23 = input.LA(9);
																if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																	alt123=1;
																}
																}
																break;
															case SQL92_RESERVED_NOT:
																{
																int LA123_12 = input.LA(9);
																if ( (LA123_12==SQL92_RESERVED_BETWEEN||LA123_12==SQL92_RESERVED_IN||LA123_12==SQL92_RESERVED_LIKE) ) {
																	alt123=1;
																}
																else if ( (LA123_12==REGULAR_ID) ) {
																	int LA123_16 = input.LA(10);
																	if ( (LA123_16==APPROXIMATE_NUM_LIT||LA123_16==BINDVAR||(LA123_16 >= CHAR_STRING && LA123_16 <= COLON)||LA123_16==DELIMITED_ID||LA123_16==EXACT_NUM_LIT||LA123_16==INTRODUCER||LA123_16==LEFT_PAREN||LA123_16==MINUS_SIGN||LA123_16==NATIONAL_CHAR_STRING_LIT||LA123_16==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_16==PLUS_SIGN||LA123_16==SQL92_RESERVED_ALL||LA123_16==SQL92_RESERVED_ANY||LA123_16==SQL92_RESERVED_CASE||LA123_16==SQL92_RESERVED_DATE||(LA123_16 >= SQL92_RESERVED_DEFAULT && LA123_16 <= SQL92_RESERVED_DELETE)||LA123_16==SQL92_RESERVED_DISTINCT||(LA123_16 >= SQL92_RESERVED_EXISTS && LA123_16 <= SQL92_RESERVED_FALSE)||LA123_16==SQL92_RESERVED_NULL||LA123_16==SQL92_RESERVED_PRIOR||LA123_16==SQL92_RESERVED_TRUE||LA123_16==UNSIGNED_INTEGER) ) {
																		alt123=1;
																	}
																	else if ( (LA123_16==REGULAR_ID) ) {
																		int LA123_20 = input.LA(11);
																		if ( (LA123_20==APPROXIMATE_NUM_LIT||LA123_20==ASTERISK||LA123_20==BINDVAR||(LA123_20 >= CARRET_OPERATOR_PART && LA123_20 <= COLON)||LA123_20==CONCATENATION_OP||LA123_20==DELIMITED_ID||(LA123_20 >= EQUALS_OP && LA123_20 <= EXCLAMATION_OPERATOR_PART)||(LA123_20 >= GREATER_THAN_OP && LA123_20 <= GREATER_THAN_OR_EQUALS_OP)||LA123_20==INTRODUCER||(LA123_20 >= LEFT_BRACKET && LA123_20 <= LESS_THAN_OR_EQUALS_OP)||LA123_20==MINUS_SIGN||LA123_20==NATIONAL_CHAR_STRING_LIT||LA123_20==NOT_EQUAL_OP||(LA123_20 >= PERCENT && LA123_20 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_20==PLUS_SIGN||LA123_20==SOLIDUS||LA123_20==SQL92_RESERVED_ALL||(LA123_20 >= SQL92_RESERVED_AND && LA123_20 <= SQL92_RESERVED_ANY)||LA123_20==SQL92_RESERVED_CASE||LA123_20==SQL92_RESERVED_DATE||(LA123_20 >= SQL92_RESERVED_DEFAULT && LA123_20 <= SQL92_RESERVED_DELETE)||LA123_20==SQL92_RESERVED_DISTINCT||(LA123_20 >= SQL92_RESERVED_EXISTS && LA123_20 <= SQL92_RESERVED_FALSE)||LA123_20==SQL92_RESERVED_IS||LA123_20==SQL92_RESERVED_NULL||LA123_20==SQL92_RESERVED_OR||LA123_20==SQL92_RESERVED_PRIOR||LA123_20==SQL92_RESERVED_TRUE||LA123_20==UNSIGNED_INTEGER||LA123_20==VERTICAL_BAR) ) {
																			alt123=1;
																		}
																		else if ( (LA123_20==REGULAR_ID) ) {
																			int LA123_24 = input.LA(12);
																			if ( (LA123_24==APPROXIMATE_NUM_LIT||LA123_24==ASTERISK||LA123_24==BINDVAR||(LA123_24 >= CARRET_OPERATOR_PART && LA123_24 <= COLON)||LA123_24==CONCATENATION_OP||LA123_24==DELIMITED_ID||(LA123_24 >= EQUALS_OP && LA123_24 <= EXCLAMATION_OPERATOR_PART)||(LA123_24 >= GREATER_THAN_OP && LA123_24 <= GREATER_THAN_OR_EQUALS_OP)||LA123_24==INTRODUCER||(LA123_24 >= LEFT_BRACKET && LA123_24 <= LESS_THAN_OR_EQUALS_OP)||LA123_24==MINUS_SIGN||LA123_24==NATIONAL_CHAR_STRING_LIT||LA123_24==NOT_EQUAL_OP||(LA123_24 >= PERCENT && LA123_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_24==PLUS_SIGN||LA123_24==SOLIDUS||LA123_24==SQL92_RESERVED_ALL||(LA123_24 >= SQL92_RESERVED_AND && LA123_24 <= SQL92_RESERVED_ANY)||LA123_24==SQL92_RESERVED_CASE||LA123_24==SQL92_RESERVED_DATE||(LA123_24 >= SQL92_RESERVED_DEFAULT && LA123_24 <= SQL92_RESERVED_DELETE)||LA123_24==SQL92_RESERVED_DISTINCT||(LA123_24 >= SQL92_RESERVED_EXISTS && LA123_24 <= SQL92_RESERVED_FALSE)||LA123_24==SQL92_RESERVED_IS||(LA123_24 >= SQL92_RESERVED_NULL && LA123_24 <= SQL92_RESERVED_OF)||LA123_24==SQL92_RESERVED_OR||LA123_24==SQL92_RESERVED_PRIOR||(LA123_24 >= SQL92_RESERVED_TO && LA123_24 <= SQL92_RESERVED_TRUE)||LA123_24==UNSIGNED_INTEGER||LA123_24==VERTICAL_BAR) ) {
																				alt123=1;
																			}
																			else if ( (LA123_24==REGULAR_ID) ) {
																				int LA123_26 = input.LA(13);
																				if ( (LA123_26==APPROXIMATE_NUM_LIT||LA123_26==ASTERISK||LA123_26==BINDVAR||(LA123_26 >= CARRET_OPERATOR_PART && LA123_26 <= COLON)||LA123_26==CONCATENATION_OP||LA123_26==DELIMITED_ID||(LA123_26 >= EQUALS_OP && LA123_26 <= EXCLAMATION_OPERATOR_PART)||(LA123_26 >= GREATER_THAN_OP && LA123_26 <= GREATER_THAN_OR_EQUALS_OP)||LA123_26==INTRODUCER||(LA123_26 >= LEFT_BRACKET && LA123_26 <= LESS_THAN_OR_EQUALS_OP)||LA123_26==MINUS_SIGN||LA123_26==NATIONAL_CHAR_STRING_LIT||LA123_26==NOT_EQUAL_OP||(LA123_26 >= PERCENT && LA123_26 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_26==PLSQL_NON_RESERVED_USING||LA123_26==PLUS_SIGN||LA123_26==SOLIDUS||LA123_26==SQL92_RESERVED_ALL||(LA123_26 >= SQL92_RESERVED_AND && LA123_26 <= SQL92_RESERVED_ANY)||LA123_26==SQL92_RESERVED_CASE||LA123_26==SQL92_RESERVED_DATE||(LA123_26 >= SQL92_RESERVED_DEFAULT && LA123_26 <= SQL92_RESERVED_DELETE)||LA123_26==SQL92_RESERVED_DISTINCT||(LA123_26 >= SQL92_RESERVED_EXISTS && LA123_26 <= SQL92_RESERVED_FALSE)||LA123_26==SQL92_RESERVED_IS||(LA123_26 >= SQL92_RESERVED_NULL && LA123_26 <= SQL92_RESERVED_OF)||LA123_26==SQL92_RESERVED_OR||LA123_26==SQL92_RESERVED_PRIOR||(LA123_26 >= SQL92_RESERVED_TO && LA123_26 <= SQL92_RESERVED_TRUE)||LA123_26==UNSIGNED_INTEGER||LA123_26==VERTICAL_BAR) ) {
																					alt123=1;
																				}
																				else if ( (LA123_26==REGULAR_ID) ) {
																					int LA123_28 = input.LA(14);
																					if ( (LA123_28==APPROXIMATE_NUM_LIT||LA123_28==ASTERISK||LA123_28==BINDVAR||(LA123_28 >= CARRET_OPERATOR_PART && LA123_28 <= COLON)||LA123_28==CONCATENATION_OP||LA123_28==DELIMITED_ID||(LA123_28 >= EQUALS_OP && LA123_28 <= EXCLAMATION_OPERATOR_PART)||(LA123_28 >= GREATER_THAN_OP && LA123_28 <= GREATER_THAN_OR_EQUALS_OP)||LA123_28==INTRODUCER||(LA123_28 >= LEFT_BRACKET && LA123_28 <= LESS_THAN_OR_EQUALS_OP)||LA123_28==MINUS_SIGN||LA123_28==NATIONAL_CHAR_STRING_LIT||LA123_28==NOT_EQUAL_OP||(LA123_28 >= PERCENT && LA123_28 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_28==PLSQL_NON_RESERVED_USING||LA123_28==PLUS_SIGN||LA123_28==SOLIDUS||LA123_28==SQL92_RESERVED_ALL||(LA123_28 >= SQL92_RESERVED_AND && LA123_28 <= SQL92_RESERVED_ANY)||LA123_28==SQL92_RESERVED_CASE||LA123_28==SQL92_RESERVED_DATE||(LA123_28 >= SQL92_RESERVED_DEFAULT && LA123_28 <= SQL92_RESERVED_DELETE)||LA123_28==SQL92_RESERVED_DISTINCT||(LA123_28 >= SQL92_RESERVED_EXISTS && LA123_28 <= SQL92_RESERVED_FALSE)||LA123_28==SQL92_RESERVED_IS||(LA123_28 >= SQL92_RESERVED_NULL && LA123_28 <= SQL92_RESERVED_OF)||LA123_28==SQL92_RESERVED_OR||LA123_28==SQL92_RESERVED_PRIOR||(LA123_28 >= SQL92_RESERVED_TO && LA123_28 <= SQL92_RESERVED_TRUE)||LA123_28==UNSIGNED_INTEGER||LA123_28==VERTICAL_BAR) ) {
																						alt123=1;
																					}
																					else if ( (LA123_28==REGULAR_ID) ) {
																						int LA123_30 = input.LA(15);
																						if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																							alt123=1;
																						}
																					}
																				}
																			}
																		}
																	}
																}
																}
																break;
														}
														}
														break;
													case SQL92_RESERVED_NOT:
														{
														int LA123_12 = input.LA(8);
														if ( (LA123_12==SQL92_RESERVED_BETWEEN||LA123_12==SQL92_RESERVED_IN||LA123_12==SQL92_RESERVED_LIKE) ) {
															alt123=1;
														}
														else if ( (LA123_12==REGULAR_ID) ) {
															int LA123_16 = input.LA(9);
															if ( (LA123_16==APPROXIMATE_NUM_LIT||LA123_16==BINDVAR||(LA123_16 >= CHAR_STRING && LA123_16 <= COLON)||LA123_16==DELIMITED_ID||LA123_16==EXACT_NUM_LIT||LA123_16==INTRODUCER||LA123_16==LEFT_PAREN||LA123_16==MINUS_SIGN||LA123_16==NATIONAL_CHAR_STRING_LIT||LA123_16==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_16==PLUS_SIGN||LA123_16==SQL92_RESERVED_ALL||LA123_16==SQL92_RESERVED_ANY||LA123_16==SQL92_RESERVED_CASE||LA123_16==SQL92_RESERVED_DATE||(LA123_16 >= SQL92_RESERVED_DEFAULT && LA123_16 <= SQL92_RESERVED_DELETE)||LA123_16==SQL92_RESERVED_DISTINCT||(LA123_16 >= SQL92_RESERVED_EXISTS && LA123_16 <= SQL92_RESERVED_FALSE)||LA123_16==SQL92_RESERVED_NULL||LA123_16==SQL92_RESERVED_PRIOR||LA123_16==SQL92_RESERVED_TRUE||LA123_16==UNSIGNED_INTEGER) ) {
																alt123=1;
															}
															else if ( (LA123_16==REGULAR_ID) ) {
																int LA123_20 = input.LA(10);
																if ( (LA123_20==APPROXIMATE_NUM_LIT||LA123_20==ASTERISK||LA123_20==BINDVAR||(LA123_20 >= CARRET_OPERATOR_PART && LA123_20 <= COLON)||LA123_20==CONCATENATION_OP||LA123_20==DELIMITED_ID||(LA123_20 >= EQUALS_OP && LA123_20 <= EXCLAMATION_OPERATOR_PART)||(LA123_20 >= GREATER_THAN_OP && LA123_20 <= GREATER_THAN_OR_EQUALS_OP)||LA123_20==INTRODUCER||(LA123_20 >= LEFT_BRACKET && LA123_20 <= LESS_THAN_OR_EQUALS_OP)||LA123_20==MINUS_SIGN||LA123_20==NATIONAL_CHAR_STRING_LIT||LA123_20==NOT_EQUAL_OP||(LA123_20 >= PERCENT && LA123_20 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_20==PLUS_SIGN||LA123_20==SOLIDUS||LA123_20==SQL92_RESERVED_ALL||(LA123_20 >= SQL92_RESERVED_AND && LA123_20 <= SQL92_RESERVED_ANY)||LA123_20==SQL92_RESERVED_CASE||LA123_20==SQL92_RESERVED_DATE||(LA123_20 >= SQL92_RESERVED_DEFAULT && LA123_20 <= SQL92_RESERVED_DELETE)||LA123_20==SQL92_RESERVED_DISTINCT||(LA123_20 >= SQL92_RESERVED_EXISTS && LA123_20 <= SQL92_RESERVED_FALSE)||LA123_20==SQL92_RESERVED_IS||LA123_20==SQL92_RESERVED_NULL||LA123_20==SQL92_RESERVED_OR||LA123_20==SQL92_RESERVED_PRIOR||LA123_20==SQL92_RESERVED_TRUE||LA123_20==UNSIGNED_INTEGER||LA123_20==VERTICAL_BAR) ) {
																	alt123=1;
																}
																else if ( (LA123_20==REGULAR_ID) ) {
																	int LA123_24 = input.LA(11);
																	if ( (LA123_24==APPROXIMATE_NUM_LIT||LA123_24==ASTERISK||LA123_24==BINDVAR||(LA123_24 >= CARRET_OPERATOR_PART && LA123_24 <= COLON)||LA123_24==CONCATENATION_OP||LA123_24==DELIMITED_ID||(LA123_24 >= EQUALS_OP && LA123_24 <= EXCLAMATION_OPERATOR_PART)||(LA123_24 >= GREATER_THAN_OP && LA123_24 <= GREATER_THAN_OR_EQUALS_OP)||LA123_24==INTRODUCER||(LA123_24 >= LEFT_BRACKET && LA123_24 <= LESS_THAN_OR_EQUALS_OP)||LA123_24==MINUS_SIGN||LA123_24==NATIONAL_CHAR_STRING_LIT||LA123_24==NOT_EQUAL_OP||(LA123_24 >= PERCENT && LA123_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_24==PLUS_SIGN||LA123_24==SOLIDUS||LA123_24==SQL92_RESERVED_ALL||(LA123_24 >= SQL92_RESERVED_AND && LA123_24 <= SQL92_RESERVED_ANY)||LA123_24==SQL92_RESERVED_CASE||LA123_24==SQL92_RESERVED_DATE||(LA123_24 >= SQL92_RESERVED_DEFAULT && LA123_24 <= SQL92_RESERVED_DELETE)||LA123_24==SQL92_RESERVED_DISTINCT||(LA123_24 >= SQL92_RESERVED_EXISTS && LA123_24 <= SQL92_RESERVED_FALSE)||LA123_24==SQL92_RESERVED_IS||(LA123_24 >= SQL92_RESERVED_NULL && LA123_24 <= SQL92_RESERVED_OF)||LA123_24==SQL92_RESERVED_OR||LA123_24==SQL92_RESERVED_PRIOR||(LA123_24 >= SQL92_RESERVED_TO && LA123_24 <= SQL92_RESERVED_TRUE)||LA123_24==UNSIGNED_INTEGER||LA123_24==VERTICAL_BAR) ) {
																		alt123=1;
																	}
																	else if ( (LA123_24==REGULAR_ID) ) {
																		int LA123_26 = input.LA(12);
																		if ( (LA123_26==APPROXIMATE_NUM_LIT||LA123_26==ASTERISK||LA123_26==BINDVAR||(LA123_26 >= CARRET_OPERATOR_PART && LA123_26 <= COLON)||LA123_26==CONCATENATION_OP||LA123_26==DELIMITED_ID||(LA123_26 >= EQUALS_OP && LA123_26 <= EXCLAMATION_OPERATOR_PART)||(LA123_26 >= GREATER_THAN_OP && LA123_26 <= GREATER_THAN_OR_EQUALS_OP)||LA123_26==INTRODUCER||(LA123_26 >= LEFT_BRACKET && LA123_26 <= LESS_THAN_OR_EQUALS_OP)||LA123_26==MINUS_SIGN||LA123_26==NATIONAL_CHAR_STRING_LIT||LA123_26==NOT_EQUAL_OP||(LA123_26 >= PERCENT && LA123_26 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_26==PLSQL_NON_RESERVED_USING||LA123_26==PLUS_SIGN||LA123_26==SOLIDUS||LA123_26==SQL92_RESERVED_ALL||(LA123_26 >= SQL92_RESERVED_AND && LA123_26 <= SQL92_RESERVED_ANY)||LA123_26==SQL92_RESERVED_CASE||LA123_26==SQL92_RESERVED_DATE||(LA123_26 >= SQL92_RESERVED_DEFAULT && LA123_26 <= SQL92_RESERVED_DELETE)||LA123_26==SQL92_RESERVED_DISTINCT||(LA123_26 >= SQL92_RESERVED_EXISTS && LA123_26 <= SQL92_RESERVED_FALSE)||LA123_26==SQL92_RESERVED_IS||(LA123_26 >= SQL92_RESERVED_NULL && LA123_26 <= SQL92_RESERVED_OF)||LA123_26==SQL92_RESERVED_OR||LA123_26==SQL92_RESERVED_PRIOR||(LA123_26 >= SQL92_RESERVED_TO && LA123_26 <= SQL92_RESERVED_TRUE)||LA123_26==UNSIGNED_INTEGER||LA123_26==VERTICAL_BAR) ) {
																			alt123=1;
																		}
																		else if ( (LA123_26==REGULAR_ID) ) {
																			int LA123_28 = input.LA(13);
																			if ( (LA123_28==APPROXIMATE_NUM_LIT||LA123_28==ASTERISK||LA123_28==BINDVAR||(LA123_28 >= CARRET_OPERATOR_PART && LA123_28 <= COLON)||LA123_28==CONCATENATION_OP||LA123_28==DELIMITED_ID||(LA123_28 >= EQUALS_OP && LA123_28 <= EXCLAMATION_OPERATOR_PART)||(LA123_28 >= GREATER_THAN_OP && LA123_28 <= GREATER_THAN_OR_EQUALS_OP)||LA123_28==INTRODUCER||(LA123_28 >= LEFT_BRACKET && LA123_28 <= LESS_THAN_OR_EQUALS_OP)||LA123_28==MINUS_SIGN||LA123_28==NATIONAL_CHAR_STRING_LIT||LA123_28==NOT_EQUAL_OP||(LA123_28 >= PERCENT && LA123_28 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_28==PLSQL_NON_RESERVED_USING||LA123_28==PLUS_SIGN||LA123_28==SOLIDUS||LA123_28==SQL92_RESERVED_ALL||(LA123_28 >= SQL92_RESERVED_AND && LA123_28 <= SQL92_RESERVED_ANY)||LA123_28==SQL92_RESERVED_CASE||LA123_28==SQL92_RESERVED_DATE||(LA123_28 >= SQL92_RESERVED_DEFAULT && LA123_28 <= SQL92_RESERVED_DELETE)||LA123_28==SQL92_RESERVED_DISTINCT||(LA123_28 >= SQL92_RESERVED_EXISTS && LA123_28 <= SQL92_RESERVED_FALSE)||LA123_28==SQL92_RESERVED_IS||(LA123_28 >= SQL92_RESERVED_NULL && LA123_28 <= SQL92_RESERVED_OF)||LA123_28==SQL92_RESERVED_OR||LA123_28==SQL92_RESERVED_PRIOR||(LA123_28 >= SQL92_RESERVED_TO && LA123_28 <= SQL92_RESERVED_TRUE)||LA123_28==UNSIGNED_INTEGER||LA123_28==VERTICAL_BAR) ) {
																				alt123=1;
																			}
																			else if ( (LA123_28==REGULAR_ID) ) {
																				int LA123_30 = input.LA(14);
																				if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																					alt123=1;
																				}
																			}
																		}
																	}
																}
															}
														}
														}
														break;
												}
												}
												break;
											case SQL92_RESERVED_NOT:
												{
												int LA123_12 = input.LA(7);
												if ( (LA123_12==SQL92_RESERVED_BETWEEN||LA123_12==SQL92_RESERVED_IN||LA123_12==SQL92_RESERVED_LIKE) ) {
													alt123=1;
												}
												else if ( (LA123_12==REGULAR_ID) ) {
													int LA123_16 = input.LA(8);
													if ( (LA123_16==APPROXIMATE_NUM_LIT||LA123_16==BINDVAR||(LA123_16 >= CHAR_STRING && LA123_16 <= COLON)||LA123_16==DELIMITED_ID||LA123_16==EXACT_NUM_LIT||LA123_16==INTRODUCER||LA123_16==LEFT_PAREN||LA123_16==MINUS_SIGN||LA123_16==NATIONAL_CHAR_STRING_LIT||LA123_16==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_16==PLUS_SIGN||LA123_16==SQL92_RESERVED_ALL||LA123_16==SQL92_RESERVED_ANY||LA123_16==SQL92_RESERVED_CASE||LA123_16==SQL92_RESERVED_DATE||(LA123_16 >= SQL92_RESERVED_DEFAULT && LA123_16 <= SQL92_RESERVED_DELETE)||LA123_16==SQL92_RESERVED_DISTINCT||(LA123_16 >= SQL92_RESERVED_EXISTS && LA123_16 <= SQL92_RESERVED_FALSE)||LA123_16==SQL92_RESERVED_NULL||LA123_16==SQL92_RESERVED_PRIOR||LA123_16==SQL92_RESERVED_TRUE||LA123_16==UNSIGNED_INTEGER) ) {
														alt123=1;
													}
													else if ( (LA123_16==REGULAR_ID) ) {
														int LA123_20 = input.LA(9);
														if ( (LA123_20==APPROXIMATE_NUM_LIT||LA123_20==ASTERISK||LA123_20==BINDVAR||(LA123_20 >= CARRET_OPERATOR_PART && LA123_20 <= COLON)||LA123_20==CONCATENATION_OP||LA123_20==DELIMITED_ID||(LA123_20 >= EQUALS_OP && LA123_20 <= EXCLAMATION_OPERATOR_PART)||(LA123_20 >= GREATER_THAN_OP && LA123_20 <= GREATER_THAN_OR_EQUALS_OP)||LA123_20==INTRODUCER||(LA123_20 >= LEFT_BRACKET && LA123_20 <= LESS_THAN_OR_EQUALS_OP)||LA123_20==MINUS_SIGN||LA123_20==NATIONAL_CHAR_STRING_LIT||LA123_20==NOT_EQUAL_OP||(LA123_20 >= PERCENT && LA123_20 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_20==PLUS_SIGN||LA123_20==SOLIDUS||LA123_20==SQL92_RESERVED_ALL||(LA123_20 >= SQL92_RESERVED_AND && LA123_20 <= SQL92_RESERVED_ANY)||LA123_20==SQL92_RESERVED_CASE||LA123_20==SQL92_RESERVED_DATE||(LA123_20 >= SQL92_RESERVED_DEFAULT && LA123_20 <= SQL92_RESERVED_DELETE)||LA123_20==SQL92_RESERVED_DISTINCT||(LA123_20 >= SQL92_RESERVED_EXISTS && LA123_20 <= SQL92_RESERVED_FALSE)||LA123_20==SQL92_RESERVED_IS||LA123_20==SQL92_RESERVED_NULL||LA123_20==SQL92_RESERVED_OR||LA123_20==SQL92_RESERVED_PRIOR||LA123_20==SQL92_RESERVED_TRUE||LA123_20==UNSIGNED_INTEGER||LA123_20==VERTICAL_BAR) ) {
															alt123=1;
														}
														else if ( (LA123_20==REGULAR_ID) ) {
															int LA123_24 = input.LA(10);
															if ( (LA123_24==APPROXIMATE_NUM_LIT||LA123_24==ASTERISK||LA123_24==BINDVAR||(LA123_24 >= CARRET_OPERATOR_PART && LA123_24 <= COLON)||LA123_24==CONCATENATION_OP||LA123_24==DELIMITED_ID||(LA123_24 >= EQUALS_OP && LA123_24 <= EXCLAMATION_OPERATOR_PART)||(LA123_24 >= GREATER_THAN_OP && LA123_24 <= GREATER_THAN_OR_EQUALS_OP)||LA123_24==INTRODUCER||(LA123_24 >= LEFT_BRACKET && LA123_24 <= LESS_THAN_OR_EQUALS_OP)||LA123_24==MINUS_SIGN||LA123_24==NATIONAL_CHAR_STRING_LIT||LA123_24==NOT_EQUAL_OP||(LA123_24 >= PERCENT && LA123_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_24==PLUS_SIGN||LA123_24==SOLIDUS||LA123_24==SQL92_RESERVED_ALL||(LA123_24 >= SQL92_RESERVED_AND && LA123_24 <= SQL92_RESERVED_ANY)||LA123_24==SQL92_RESERVED_CASE||LA123_24==SQL92_RESERVED_DATE||(LA123_24 >= SQL92_RESERVED_DEFAULT && LA123_24 <= SQL92_RESERVED_DELETE)||LA123_24==SQL92_RESERVED_DISTINCT||(LA123_24 >= SQL92_RESERVED_EXISTS && LA123_24 <= SQL92_RESERVED_FALSE)||LA123_24==SQL92_RESERVED_IS||(LA123_24 >= SQL92_RESERVED_NULL && LA123_24 <= SQL92_RESERVED_OF)||LA123_24==SQL92_RESERVED_OR||LA123_24==SQL92_RESERVED_PRIOR||(LA123_24 >= SQL92_RESERVED_TO && LA123_24 <= SQL92_RESERVED_TRUE)||LA123_24==UNSIGNED_INTEGER||LA123_24==VERTICAL_BAR) ) {
																alt123=1;
															}
															else if ( (LA123_24==REGULAR_ID) ) {
																int LA123_26 = input.LA(11);
																if ( (LA123_26==APPROXIMATE_NUM_LIT||LA123_26==ASTERISK||LA123_26==BINDVAR||(LA123_26 >= CARRET_OPERATOR_PART && LA123_26 <= COLON)||LA123_26==CONCATENATION_OP||LA123_26==DELIMITED_ID||(LA123_26 >= EQUALS_OP && LA123_26 <= EXCLAMATION_OPERATOR_PART)||(LA123_26 >= GREATER_THAN_OP && LA123_26 <= GREATER_THAN_OR_EQUALS_OP)||LA123_26==INTRODUCER||(LA123_26 >= LEFT_BRACKET && LA123_26 <= LESS_THAN_OR_EQUALS_OP)||LA123_26==MINUS_SIGN||LA123_26==NATIONAL_CHAR_STRING_LIT||LA123_26==NOT_EQUAL_OP||(LA123_26 >= PERCENT && LA123_26 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_26==PLSQL_NON_RESERVED_USING||LA123_26==PLUS_SIGN||LA123_26==SOLIDUS||LA123_26==SQL92_RESERVED_ALL||(LA123_26 >= SQL92_RESERVED_AND && LA123_26 <= SQL92_RESERVED_ANY)||LA123_26==SQL92_RESERVED_CASE||LA123_26==SQL92_RESERVED_DATE||(LA123_26 >= SQL92_RESERVED_DEFAULT && LA123_26 <= SQL92_RESERVED_DELETE)||LA123_26==SQL92_RESERVED_DISTINCT||(LA123_26 >= SQL92_RESERVED_EXISTS && LA123_26 <= SQL92_RESERVED_FALSE)||LA123_26==SQL92_RESERVED_IS||(LA123_26 >= SQL92_RESERVED_NULL && LA123_26 <= SQL92_RESERVED_OF)||LA123_26==SQL92_RESERVED_OR||LA123_26==SQL92_RESERVED_PRIOR||(LA123_26 >= SQL92_RESERVED_TO && LA123_26 <= SQL92_RESERVED_TRUE)||LA123_26==UNSIGNED_INTEGER||LA123_26==VERTICAL_BAR) ) {
																	alt123=1;
																}
																else if ( (LA123_26==REGULAR_ID) ) {
																	int LA123_28 = input.LA(12);
																	if ( (LA123_28==APPROXIMATE_NUM_LIT||LA123_28==ASTERISK||LA123_28==BINDVAR||(LA123_28 >= CARRET_OPERATOR_PART && LA123_28 <= COLON)||LA123_28==CONCATENATION_OP||LA123_28==DELIMITED_ID||(LA123_28 >= EQUALS_OP && LA123_28 <= EXCLAMATION_OPERATOR_PART)||(LA123_28 >= GREATER_THAN_OP && LA123_28 <= GREATER_THAN_OR_EQUALS_OP)||LA123_28==INTRODUCER||(LA123_28 >= LEFT_BRACKET && LA123_28 <= LESS_THAN_OR_EQUALS_OP)||LA123_28==MINUS_SIGN||LA123_28==NATIONAL_CHAR_STRING_LIT||LA123_28==NOT_EQUAL_OP||(LA123_28 >= PERCENT && LA123_28 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_28==PLSQL_NON_RESERVED_USING||LA123_28==PLUS_SIGN||LA123_28==SOLIDUS||LA123_28==SQL92_RESERVED_ALL||(LA123_28 >= SQL92_RESERVED_AND && LA123_28 <= SQL92_RESERVED_ANY)||LA123_28==SQL92_RESERVED_CASE||LA123_28==SQL92_RESERVED_DATE||(LA123_28 >= SQL92_RESERVED_DEFAULT && LA123_28 <= SQL92_RESERVED_DELETE)||LA123_28==SQL92_RESERVED_DISTINCT||(LA123_28 >= SQL92_RESERVED_EXISTS && LA123_28 <= SQL92_RESERVED_FALSE)||LA123_28==SQL92_RESERVED_IS||(LA123_28 >= SQL92_RESERVED_NULL && LA123_28 <= SQL92_RESERVED_OF)||LA123_28==SQL92_RESERVED_OR||LA123_28==SQL92_RESERVED_PRIOR||(LA123_28 >= SQL92_RESERVED_TO && LA123_28 <= SQL92_RESERVED_TRUE)||LA123_28==UNSIGNED_INTEGER||LA123_28==VERTICAL_BAR) ) {
																		alt123=1;
																	}
																	else if ( (LA123_28==REGULAR_ID) ) {
																		int LA123_30 = input.LA(13);
																		if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																			alt123=1;
																		}
																	}
																}
															}
														}
													}
												}
												}
												break;
										}
										}
										break;
									case SQL92_RESERVED_NOT:
										{
										int LA123_12 = input.LA(6);
										if ( (LA123_12==SQL92_RESERVED_BETWEEN||LA123_12==SQL92_RESERVED_IN||LA123_12==SQL92_RESERVED_LIKE) ) {
											alt123=1;
										}
										else if ( (LA123_12==REGULAR_ID) ) {
											int LA123_16 = input.LA(7);
											if ( (LA123_16==APPROXIMATE_NUM_LIT||LA123_16==BINDVAR||(LA123_16 >= CHAR_STRING && LA123_16 <= COLON)||LA123_16==DELIMITED_ID||LA123_16==EXACT_NUM_LIT||LA123_16==INTRODUCER||LA123_16==LEFT_PAREN||LA123_16==MINUS_SIGN||LA123_16==NATIONAL_CHAR_STRING_LIT||LA123_16==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_16==PLUS_SIGN||LA123_16==SQL92_RESERVED_ALL||LA123_16==SQL92_RESERVED_ANY||LA123_16==SQL92_RESERVED_CASE||LA123_16==SQL92_RESERVED_DATE||(LA123_16 >= SQL92_RESERVED_DEFAULT && LA123_16 <= SQL92_RESERVED_DELETE)||LA123_16==SQL92_RESERVED_DISTINCT||(LA123_16 >= SQL92_RESERVED_EXISTS && LA123_16 <= SQL92_RESERVED_FALSE)||LA123_16==SQL92_RESERVED_NULL||LA123_16==SQL92_RESERVED_PRIOR||LA123_16==SQL92_RESERVED_TRUE||LA123_16==UNSIGNED_INTEGER) ) {
												alt123=1;
											}
											else if ( (LA123_16==REGULAR_ID) ) {
												int LA123_20 = input.LA(8);
												if ( (LA123_20==APPROXIMATE_NUM_LIT||LA123_20==ASTERISK||LA123_20==BINDVAR||(LA123_20 >= CARRET_OPERATOR_PART && LA123_20 <= COLON)||LA123_20==CONCATENATION_OP||LA123_20==DELIMITED_ID||(LA123_20 >= EQUALS_OP && LA123_20 <= EXCLAMATION_OPERATOR_PART)||(LA123_20 >= GREATER_THAN_OP && LA123_20 <= GREATER_THAN_OR_EQUALS_OP)||LA123_20==INTRODUCER||(LA123_20 >= LEFT_BRACKET && LA123_20 <= LESS_THAN_OR_EQUALS_OP)||LA123_20==MINUS_SIGN||LA123_20==NATIONAL_CHAR_STRING_LIT||LA123_20==NOT_EQUAL_OP||(LA123_20 >= PERCENT && LA123_20 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_20==PLUS_SIGN||LA123_20==SOLIDUS||LA123_20==SQL92_RESERVED_ALL||(LA123_20 >= SQL92_RESERVED_AND && LA123_20 <= SQL92_RESERVED_ANY)||LA123_20==SQL92_RESERVED_CASE||LA123_20==SQL92_RESERVED_DATE||(LA123_20 >= SQL92_RESERVED_DEFAULT && LA123_20 <= SQL92_RESERVED_DELETE)||LA123_20==SQL92_RESERVED_DISTINCT||(LA123_20 >= SQL92_RESERVED_EXISTS && LA123_20 <= SQL92_RESERVED_FALSE)||LA123_20==SQL92_RESERVED_IS||LA123_20==SQL92_RESERVED_NULL||LA123_20==SQL92_RESERVED_OR||LA123_20==SQL92_RESERVED_PRIOR||LA123_20==SQL92_RESERVED_TRUE||LA123_20==UNSIGNED_INTEGER||LA123_20==VERTICAL_BAR) ) {
													alt123=1;
												}
												else if ( (LA123_20==REGULAR_ID) ) {
													int LA123_24 = input.LA(9);
													if ( (LA123_24==APPROXIMATE_NUM_LIT||LA123_24==ASTERISK||LA123_24==BINDVAR||(LA123_24 >= CARRET_OPERATOR_PART && LA123_24 <= COLON)||LA123_24==CONCATENATION_OP||LA123_24==DELIMITED_ID||(LA123_24 >= EQUALS_OP && LA123_24 <= EXCLAMATION_OPERATOR_PART)||(LA123_24 >= GREATER_THAN_OP && LA123_24 <= GREATER_THAN_OR_EQUALS_OP)||LA123_24==INTRODUCER||(LA123_24 >= LEFT_BRACKET && LA123_24 <= LESS_THAN_OR_EQUALS_OP)||LA123_24==MINUS_SIGN||LA123_24==NATIONAL_CHAR_STRING_LIT||LA123_24==NOT_EQUAL_OP||(LA123_24 >= PERCENT && LA123_24 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_24==PLUS_SIGN||LA123_24==SOLIDUS||LA123_24==SQL92_RESERVED_ALL||(LA123_24 >= SQL92_RESERVED_AND && LA123_24 <= SQL92_RESERVED_ANY)||LA123_24==SQL92_RESERVED_CASE||LA123_24==SQL92_RESERVED_DATE||(LA123_24 >= SQL92_RESERVED_DEFAULT && LA123_24 <= SQL92_RESERVED_DELETE)||LA123_24==SQL92_RESERVED_DISTINCT||(LA123_24 >= SQL92_RESERVED_EXISTS && LA123_24 <= SQL92_RESERVED_FALSE)||LA123_24==SQL92_RESERVED_IS||(LA123_24 >= SQL92_RESERVED_NULL && LA123_24 <= SQL92_RESERVED_OF)||LA123_24==SQL92_RESERVED_OR||LA123_24==SQL92_RESERVED_PRIOR||(LA123_24 >= SQL92_RESERVED_TO && LA123_24 <= SQL92_RESERVED_TRUE)||LA123_24==UNSIGNED_INTEGER||LA123_24==VERTICAL_BAR) ) {
														alt123=1;
													}
													else if ( (LA123_24==REGULAR_ID) ) {
														int LA123_26 = input.LA(10);
														if ( (LA123_26==APPROXIMATE_NUM_LIT||LA123_26==ASTERISK||LA123_26==BINDVAR||(LA123_26 >= CARRET_OPERATOR_PART && LA123_26 <= COLON)||LA123_26==CONCATENATION_OP||LA123_26==DELIMITED_ID||(LA123_26 >= EQUALS_OP && LA123_26 <= EXCLAMATION_OPERATOR_PART)||(LA123_26 >= GREATER_THAN_OP && LA123_26 <= GREATER_THAN_OR_EQUALS_OP)||LA123_26==INTRODUCER||(LA123_26 >= LEFT_BRACKET && LA123_26 <= LESS_THAN_OR_EQUALS_OP)||LA123_26==MINUS_SIGN||LA123_26==NATIONAL_CHAR_STRING_LIT||LA123_26==NOT_EQUAL_OP||(LA123_26 >= PERCENT && LA123_26 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_26==PLSQL_NON_RESERVED_USING||LA123_26==PLUS_SIGN||LA123_26==SOLIDUS||LA123_26==SQL92_RESERVED_ALL||(LA123_26 >= SQL92_RESERVED_AND && LA123_26 <= SQL92_RESERVED_ANY)||LA123_26==SQL92_RESERVED_CASE||LA123_26==SQL92_RESERVED_DATE||(LA123_26 >= SQL92_RESERVED_DEFAULT && LA123_26 <= SQL92_RESERVED_DELETE)||LA123_26==SQL92_RESERVED_DISTINCT||(LA123_26 >= SQL92_RESERVED_EXISTS && LA123_26 <= SQL92_RESERVED_FALSE)||LA123_26==SQL92_RESERVED_IS||(LA123_26 >= SQL92_RESERVED_NULL && LA123_26 <= SQL92_RESERVED_OF)||LA123_26==SQL92_RESERVED_OR||LA123_26==SQL92_RESERVED_PRIOR||(LA123_26 >= SQL92_RESERVED_TO && LA123_26 <= SQL92_RESERVED_TRUE)||LA123_26==UNSIGNED_INTEGER||LA123_26==VERTICAL_BAR) ) {
															alt123=1;
														}
														else if ( (LA123_26==REGULAR_ID) ) {
															int LA123_28 = input.LA(11);
															if ( (LA123_28==APPROXIMATE_NUM_LIT||LA123_28==ASTERISK||LA123_28==BINDVAR||(LA123_28 >= CARRET_OPERATOR_PART && LA123_28 <= COLON)||LA123_28==CONCATENATION_OP||LA123_28==DELIMITED_ID||(LA123_28 >= EQUALS_OP && LA123_28 <= EXCLAMATION_OPERATOR_PART)||(LA123_28 >= GREATER_THAN_OP && LA123_28 <= GREATER_THAN_OR_EQUALS_OP)||LA123_28==INTRODUCER||(LA123_28 >= LEFT_BRACKET && LA123_28 <= LESS_THAN_OR_EQUALS_OP)||LA123_28==MINUS_SIGN||LA123_28==NATIONAL_CHAR_STRING_LIT||LA123_28==NOT_EQUAL_OP||(LA123_28 >= PERCENT && LA123_28 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_28==PLSQL_NON_RESERVED_USING||LA123_28==PLUS_SIGN||LA123_28==SOLIDUS||LA123_28==SQL92_RESERVED_ALL||(LA123_28 >= SQL92_RESERVED_AND && LA123_28 <= SQL92_RESERVED_ANY)||LA123_28==SQL92_RESERVED_CASE||LA123_28==SQL92_RESERVED_DATE||(LA123_28 >= SQL92_RESERVED_DEFAULT && LA123_28 <= SQL92_RESERVED_DELETE)||LA123_28==SQL92_RESERVED_DISTINCT||(LA123_28 >= SQL92_RESERVED_EXISTS && LA123_28 <= SQL92_RESERVED_FALSE)||LA123_28==SQL92_RESERVED_IS||(LA123_28 >= SQL92_RESERVED_NULL && LA123_28 <= SQL92_RESERVED_OF)||LA123_28==SQL92_RESERVED_OR||LA123_28==SQL92_RESERVED_PRIOR||(LA123_28 >= SQL92_RESERVED_TO && LA123_28 <= SQL92_RESERVED_TRUE)||LA123_28==UNSIGNED_INTEGER||LA123_28==VERTICAL_BAR) ) {
																alt123=1;
															}
															else if ( (LA123_28==REGULAR_ID) ) {
																int LA123_30 = input.LA(12);
																if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																	alt123=1;
																}
															}
														}
													}
												}
											}
										}
										}
										break;
								}
							}
							}
							break;
						case REGULAR_ID:
							{
							switch ( input.LA(4) ) {
								case APPROXIMATE_NUM_LIT:
								case ASTERISK:
								case BINDVAR:
								case CARRET_OPERATOR_PART:
								case CHAR_STRING:
								case CHAR_STRING_PERL:
								case COLON:
								case CONCATENATION_OP:
								case DELIMITED_ID:
								case EQUALS_OP:
								case EXACT_NUM_LIT:
								case EXCLAMATION_OPERATOR_PART:
								case GREATER_THAN_OP:
								case GREATER_THAN_OR_EQUALS_OP:
								case INTRODUCER:
								case LEFT_BRACKET:
								case LEFT_PAREN:
								case LESS_THAN_OP:
								case LESS_THAN_OR_EQUALS_OP:
								case MINUS_SIGN:
								case NATIONAL_CHAR_STRING_LIT:
								case NOT_EQUAL_OP:
								case PERCENT:
								case PERIOD:
								case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
								case PLUS_SIGN:
								case SOLIDUS:
								case SQL92_RESERVED_ALL:
								case SQL92_RESERVED_AND:
								case SQL92_RESERVED_ANY:
								case SQL92_RESERVED_BETWEEN:
								case SQL92_RESERVED_CASE:
								case SQL92_RESERVED_DATE:
								case SQL92_RESERVED_DEFAULT:
								case SQL92_RESERVED_DELETE:
								case SQL92_RESERVED_DISTINCT:
								case SQL92_RESERVED_EXISTS:
								case SQL92_RESERVED_FALSE:
								case SQL92_RESERVED_IN:
								case SQL92_RESERVED_IS:
								case SQL92_RESERVED_LIKE:
								case SQL92_RESERVED_NULL:
								case SQL92_RESERVED_OR:
								case SQL92_RESERVED_PRIOR:
								case SQL92_RESERVED_TRUE:
								case UNSIGNED_INTEGER:
								case VERTICAL_BAR:
									{
									alt123=1;
									}
									break;
								case REGULAR_ID:
									{
									switch ( input.LA(5) ) {
										case APPROXIMATE_NUM_LIT:
										case ASTERISK:
										case BINDVAR:
										case CARRET_OPERATOR_PART:
										case CHAR_STRING:
										case CHAR_STRING_PERL:
										case COLON:
										case CONCATENATION_OP:
										case DELIMITED_ID:
										case EQUALS_OP:
										case EXACT_NUM_LIT:
										case EXCLAMATION_OPERATOR_PART:
										case GREATER_THAN_OP:
										case GREATER_THAN_OR_EQUALS_OP:
										case INTRODUCER:
										case LEFT_BRACKET:
										case LEFT_PAREN:
										case LESS_THAN_OP:
										case LESS_THAN_OR_EQUALS_OP:
										case MINUS_SIGN:
										case NATIONAL_CHAR_STRING_LIT:
										case NOT_EQUAL_OP:
										case PERCENT:
										case PERIOD:
										case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
										case PLUS_SIGN:
										case SOLIDUS:
										case SQL92_RESERVED_ALL:
										case SQL92_RESERVED_AND:
										case SQL92_RESERVED_ANY:
										case SQL92_RESERVED_BETWEEN:
										case SQL92_RESERVED_CASE:
										case SQL92_RESERVED_DATE:
										case SQL92_RESERVED_DEFAULT:
										case SQL92_RESERVED_DELETE:
										case SQL92_RESERVED_DISTINCT:
										case SQL92_RESERVED_EXISTS:
										case SQL92_RESERVED_FALSE:
										case SQL92_RESERVED_IN:
										case SQL92_RESERVED_IS:
										case SQL92_RESERVED_LIKE:
										case SQL92_RESERVED_NULL:
										case SQL92_RESERVED_OF:
										case SQL92_RESERVED_OR:
										case SQL92_RESERVED_PRIOR:
										case SQL92_RESERVED_TO:
										case SQL92_RESERVED_TRUE:
										case UNSIGNED_INTEGER:
										case VERTICAL_BAR:
											{
											alt123=1;
											}
											break;
										case REGULAR_ID:
											{
											switch ( input.LA(6) ) {
												case APPROXIMATE_NUM_LIT:
												case ASTERISK:
												case BINDVAR:
												case CARRET_OPERATOR_PART:
												case CHAR_STRING:
												case CHAR_STRING_PERL:
												case COLON:
												case CONCATENATION_OP:
												case DELIMITED_ID:
												case EQUALS_OP:
												case EXACT_NUM_LIT:
												case EXCLAMATION_OPERATOR_PART:
												case GREATER_THAN_OP:
												case GREATER_THAN_OR_EQUALS_OP:
												case INTRODUCER:
												case LEFT_BRACKET:
												case LEFT_PAREN:
												case LESS_THAN_OP:
												case LESS_THAN_OR_EQUALS_OP:
												case MINUS_SIGN:
												case NATIONAL_CHAR_STRING_LIT:
												case NOT_EQUAL_OP:
												case PERCENT:
												case PERIOD:
												case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
												case PLSQL_NON_RESERVED_USING:
												case PLUS_SIGN:
												case SOLIDUS:
												case SQL92_RESERVED_ALL:
												case SQL92_RESERVED_AND:
												case SQL92_RESERVED_ANY:
												case SQL92_RESERVED_BETWEEN:
												case SQL92_RESERVED_CASE:
												case SQL92_RESERVED_DATE:
												case SQL92_RESERVED_DEFAULT:
												case SQL92_RESERVED_DELETE:
												case SQL92_RESERVED_DISTINCT:
												case SQL92_RESERVED_EXISTS:
												case SQL92_RESERVED_FALSE:
												case SQL92_RESERVED_IN:
												case SQL92_RESERVED_IS:
												case SQL92_RESERVED_LIKE:
												case SQL92_RESERVED_NULL:
												case SQL92_RESERVED_OF:
												case SQL92_RESERVED_OR:
												case SQL92_RESERVED_PRIOR:
												case SQL92_RESERVED_TO:
												case SQL92_RESERVED_TRUE:
												case UNSIGNED_INTEGER:
												case VERTICAL_BAR:
													{
													alt123=1;
													}
													break;
												case REGULAR_ID:
													{
													switch ( input.LA(7) ) {
														case APPROXIMATE_NUM_LIT:
														case ASTERISK:
														case BINDVAR:
														case CARRET_OPERATOR_PART:
														case CHAR_STRING:
														case CHAR_STRING_PERL:
														case COLON:
														case CONCATENATION_OP:
														case DELIMITED_ID:
														case EQUALS_OP:
														case EXACT_NUM_LIT:
														case EXCLAMATION_OPERATOR_PART:
														case GREATER_THAN_OP:
														case GREATER_THAN_OR_EQUALS_OP:
														case INTRODUCER:
														case LEFT_BRACKET:
														case LEFT_PAREN:
														case LESS_THAN_OP:
														case LESS_THAN_OR_EQUALS_OP:
														case MINUS_SIGN:
														case NATIONAL_CHAR_STRING_LIT:
														case NOT_EQUAL_OP:
														case PERCENT:
														case PERIOD:
														case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
														case PLSQL_NON_RESERVED_USING:
														case PLUS_SIGN:
														case SOLIDUS:
														case SQL92_RESERVED_ALL:
														case SQL92_RESERVED_AND:
														case SQL92_RESERVED_ANY:
														case SQL92_RESERVED_BETWEEN:
														case SQL92_RESERVED_CASE:
														case SQL92_RESERVED_DATE:
														case SQL92_RESERVED_DEFAULT:
														case SQL92_RESERVED_DELETE:
														case SQL92_RESERVED_DISTINCT:
														case SQL92_RESERVED_EXISTS:
														case SQL92_RESERVED_FALSE:
														case SQL92_RESERVED_IN:
														case SQL92_RESERVED_IS:
														case SQL92_RESERVED_LIKE:
														case SQL92_RESERVED_NULL:
														case SQL92_RESERVED_OF:
														case SQL92_RESERVED_OR:
														case SQL92_RESERVED_PRIOR:
														case SQL92_RESERVED_TO:
														case SQL92_RESERVED_TRUE:
														case UNSIGNED_INTEGER:
														case VERTICAL_BAR:
															{
															alt123=1;
															}
															break;
														case REGULAR_ID:
															{
															int LA123_21 = input.LA(8);
															if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																alt123=1;
															}
															}
															break;
														case SQL92_RESERVED_NOT:
															{
															int LA123_10 = input.LA(8);
															if ( (LA123_10==SQL92_RESERVED_BETWEEN||LA123_10==SQL92_RESERVED_IN||LA123_10==SQL92_RESERVED_LIKE) ) {
																alt123=1;
															}
															else if ( (LA123_10==REGULAR_ID) ) {
																int LA123_14 = input.LA(9);
																if ( (LA123_14==APPROXIMATE_NUM_LIT||LA123_14==BINDVAR||(LA123_14 >= CHAR_STRING && LA123_14 <= COLON)||LA123_14==DELIMITED_ID||LA123_14==EXACT_NUM_LIT||LA123_14==INTRODUCER||LA123_14==LEFT_PAREN||LA123_14==MINUS_SIGN||LA123_14==NATIONAL_CHAR_STRING_LIT||LA123_14==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_14==PLUS_SIGN||LA123_14==SQL92_RESERVED_ALL||LA123_14==SQL92_RESERVED_ANY||LA123_14==SQL92_RESERVED_CASE||LA123_14==SQL92_RESERVED_DATE||(LA123_14 >= SQL92_RESERVED_DEFAULT && LA123_14 <= SQL92_RESERVED_DELETE)||LA123_14==SQL92_RESERVED_DISTINCT||(LA123_14 >= SQL92_RESERVED_EXISTS && LA123_14 <= SQL92_RESERVED_FALSE)||LA123_14==SQL92_RESERVED_NULL||LA123_14==SQL92_RESERVED_PRIOR||LA123_14==SQL92_RESERVED_TRUE||LA123_14==UNSIGNED_INTEGER) ) {
																	alt123=1;
																}
																else if ( (LA123_14==REGULAR_ID) ) {
																	int LA123_18 = input.LA(10);
																	if ( (LA123_18==APPROXIMATE_NUM_LIT||LA123_18==ASTERISK||LA123_18==BINDVAR||(LA123_18 >= CARRET_OPERATOR_PART && LA123_18 <= COLON)||LA123_18==CONCATENATION_OP||LA123_18==DELIMITED_ID||(LA123_18 >= EQUALS_OP && LA123_18 <= EXCLAMATION_OPERATOR_PART)||(LA123_18 >= GREATER_THAN_OP && LA123_18 <= GREATER_THAN_OR_EQUALS_OP)||LA123_18==INTRODUCER||(LA123_18 >= LEFT_BRACKET && LA123_18 <= LESS_THAN_OR_EQUALS_OP)||LA123_18==MINUS_SIGN||LA123_18==NATIONAL_CHAR_STRING_LIT||LA123_18==NOT_EQUAL_OP||(LA123_18 >= PERCENT && LA123_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_18==PLUS_SIGN||LA123_18==SOLIDUS||LA123_18==SQL92_RESERVED_ALL||(LA123_18 >= SQL92_RESERVED_AND && LA123_18 <= SQL92_RESERVED_ANY)||LA123_18==SQL92_RESERVED_CASE||LA123_18==SQL92_RESERVED_DATE||(LA123_18 >= SQL92_RESERVED_DEFAULT && LA123_18 <= SQL92_RESERVED_DELETE)||LA123_18==SQL92_RESERVED_DISTINCT||(LA123_18 >= SQL92_RESERVED_EXISTS && LA123_18 <= SQL92_RESERVED_FALSE)||LA123_18==SQL92_RESERVED_IS||LA123_18==SQL92_RESERVED_NULL||LA123_18==SQL92_RESERVED_OR||LA123_18==SQL92_RESERVED_PRIOR||LA123_18==SQL92_RESERVED_TRUE||LA123_18==UNSIGNED_INTEGER||LA123_18==VERTICAL_BAR) ) {
																		alt123=1;
																	}
																	else if ( (LA123_18==REGULAR_ID) ) {
																		int LA123_22 = input.LA(11);
																		if ( (LA123_22==APPROXIMATE_NUM_LIT||LA123_22==ASTERISK||LA123_22==BINDVAR||(LA123_22 >= CARRET_OPERATOR_PART && LA123_22 <= COLON)||LA123_22==CONCATENATION_OP||LA123_22==DELIMITED_ID||(LA123_22 >= EQUALS_OP && LA123_22 <= EXCLAMATION_OPERATOR_PART)||(LA123_22 >= GREATER_THAN_OP && LA123_22 <= GREATER_THAN_OR_EQUALS_OP)||LA123_22==INTRODUCER||(LA123_22 >= LEFT_BRACKET && LA123_22 <= LESS_THAN_OR_EQUALS_OP)||LA123_22==MINUS_SIGN||LA123_22==NATIONAL_CHAR_STRING_LIT||LA123_22==NOT_EQUAL_OP||(LA123_22 >= PERCENT && LA123_22 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_22==PLUS_SIGN||LA123_22==SOLIDUS||LA123_22==SQL92_RESERVED_ALL||(LA123_22 >= SQL92_RESERVED_AND && LA123_22 <= SQL92_RESERVED_ANY)||LA123_22==SQL92_RESERVED_CASE||LA123_22==SQL92_RESERVED_DATE||(LA123_22 >= SQL92_RESERVED_DEFAULT && LA123_22 <= SQL92_RESERVED_DELETE)||LA123_22==SQL92_RESERVED_DISTINCT||(LA123_22 >= SQL92_RESERVED_EXISTS && LA123_22 <= SQL92_RESERVED_FALSE)||LA123_22==SQL92_RESERVED_IS||(LA123_22 >= SQL92_RESERVED_NULL && LA123_22 <= SQL92_RESERVED_OF)||LA123_22==SQL92_RESERVED_OR||LA123_22==SQL92_RESERVED_PRIOR||(LA123_22 >= SQL92_RESERVED_TO && LA123_22 <= SQL92_RESERVED_TRUE)||LA123_22==UNSIGNED_INTEGER||LA123_22==VERTICAL_BAR) ) {
																			alt123=1;
																		}
																		else if ( (LA123_22==REGULAR_ID) ) {
																			int LA123_25 = input.LA(12);
																			if ( (LA123_25==APPROXIMATE_NUM_LIT||LA123_25==ASTERISK||LA123_25==BINDVAR||(LA123_25 >= CARRET_OPERATOR_PART && LA123_25 <= COLON)||LA123_25==CONCATENATION_OP||LA123_25==DELIMITED_ID||(LA123_25 >= EQUALS_OP && LA123_25 <= EXCLAMATION_OPERATOR_PART)||(LA123_25 >= GREATER_THAN_OP && LA123_25 <= GREATER_THAN_OR_EQUALS_OP)||LA123_25==INTRODUCER||(LA123_25 >= LEFT_BRACKET && LA123_25 <= LESS_THAN_OR_EQUALS_OP)||LA123_25==MINUS_SIGN||LA123_25==NATIONAL_CHAR_STRING_LIT||LA123_25==NOT_EQUAL_OP||(LA123_25 >= PERCENT && LA123_25 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_25==PLSQL_NON_RESERVED_USING||LA123_25==PLUS_SIGN||LA123_25==SOLIDUS||LA123_25==SQL92_RESERVED_ALL||(LA123_25 >= SQL92_RESERVED_AND && LA123_25 <= SQL92_RESERVED_ANY)||LA123_25==SQL92_RESERVED_CASE||LA123_25==SQL92_RESERVED_DATE||(LA123_25 >= SQL92_RESERVED_DEFAULT && LA123_25 <= SQL92_RESERVED_DELETE)||LA123_25==SQL92_RESERVED_DISTINCT||(LA123_25 >= SQL92_RESERVED_EXISTS && LA123_25 <= SQL92_RESERVED_FALSE)||LA123_25==SQL92_RESERVED_IS||(LA123_25 >= SQL92_RESERVED_NULL && LA123_25 <= SQL92_RESERVED_OF)||LA123_25==SQL92_RESERVED_OR||LA123_25==SQL92_RESERVED_PRIOR||(LA123_25 >= SQL92_RESERVED_TO && LA123_25 <= SQL92_RESERVED_TRUE)||LA123_25==UNSIGNED_INTEGER||LA123_25==VERTICAL_BAR) ) {
																				alt123=1;
																			}
																			else if ( (LA123_25==REGULAR_ID) ) {
																				int LA123_27 = input.LA(13);
																				if ( (LA123_27==APPROXIMATE_NUM_LIT||LA123_27==ASTERISK||LA123_27==BINDVAR||(LA123_27 >= CARRET_OPERATOR_PART && LA123_27 <= COLON)||LA123_27==CONCATENATION_OP||LA123_27==DELIMITED_ID||(LA123_27 >= EQUALS_OP && LA123_27 <= EXCLAMATION_OPERATOR_PART)||(LA123_27 >= GREATER_THAN_OP && LA123_27 <= GREATER_THAN_OR_EQUALS_OP)||LA123_27==INTRODUCER||(LA123_27 >= LEFT_BRACKET && LA123_27 <= LESS_THAN_OR_EQUALS_OP)||LA123_27==MINUS_SIGN||LA123_27==NATIONAL_CHAR_STRING_LIT||LA123_27==NOT_EQUAL_OP||(LA123_27 >= PERCENT && LA123_27 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_27==PLSQL_NON_RESERVED_USING||LA123_27==PLUS_SIGN||LA123_27==SOLIDUS||LA123_27==SQL92_RESERVED_ALL||(LA123_27 >= SQL92_RESERVED_AND && LA123_27 <= SQL92_RESERVED_ANY)||LA123_27==SQL92_RESERVED_CASE||LA123_27==SQL92_RESERVED_DATE||(LA123_27 >= SQL92_RESERVED_DEFAULT && LA123_27 <= SQL92_RESERVED_DELETE)||LA123_27==SQL92_RESERVED_DISTINCT||(LA123_27 >= SQL92_RESERVED_EXISTS && LA123_27 <= SQL92_RESERVED_FALSE)||LA123_27==SQL92_RESERVED_IS||(LA123_27 >= SQL92_RESERVED_NULL && LA123_27 <= SQL92_RESERVED_OF)||LA123_27==SQL92_RESERVED_OR||LA123_27==SQL92_RESERVED_PRIOR||(LA123_27 >= SQL92_RESERVED_TO && LA123_27 <= SQL92_RESERVED_TRUE)||LA123_27==UNSIGNED_INTEGER||LA123_27==VERTICAL_BAR) ) {
																					alt123=1;
																				}
																				else if ( (LA123_27==REGULAR_ID) ) {
																					int LA123_29 = input.LA(14);
																					if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																						alt123=1;
																					}
																				}
																			}
																		}
																	}
																}
															}
															}
															break;
													}
													}
													break;
												case SQL92_RESERVED_NOT:
													{
													int LA123_10 = input.LA(7);
													if ( (LA123_10==SQL92_RESERVED_BETWEEN||LA123_10==SQL92_RESERVED_IN||LA123_10==SQL92_RESERVED_LIKE) ) {
														alt123=1;
													}
													else if ( (LA123_10==REGULAR_ID) ) {
														int LA123_14 = input.LA(8);
														if ( (LA123_14==APPROXIMATE_NUM_LIT||LA123_14==BINDVAR||(LA123_14 >= CHAR_STRING && LA123_14 <= COLON)||LA123_14==DELIMITED_ID||LA123_14==EXACT_NUM_LIT||LA123_14==INTRODUCER||LA123_14==LEFT_PAREN||LA123_14==MINUS_SIGN||LA123_14==NATIONAL_CHAR_STRING_LIT||LA123_14==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_14==PLUS_SIGN||LA123_14==SQL92_RESERVED_ALL||LA123_14==SQL92_RESERVED_ANY||LA123_14==SQL92_RESERVED_CASE||LA123_14==SQL92_RESERVED_DATE||(LA123_14 >= SQL92_RESERVED_DEFAULT && LA123_14 <= SQL92_RESERVED_DELETE)||LA123_14==SQL92_RESERVED_DISTINCT||(LA123_14 >= SQL92_RESERVED_EXISTS && LA123_14 <= SQL92_RESERVED_FALSE)||LA123_14==SQL92_RESERVED_NULL||LA123_14==SQL92_RESERVED_PRIOR||LA123_14==SQL92_RESERVED_TRUE||LA123_14==UNSIGNED_INTEGER) ) {
															alt123=1;
														}
														else if ( (LA123_14==REGULAR_ID) ) {
															int LA123_18 = input.LA(9);
															if ( (LA123_18==APPROXIMATE_NUM_LIT||LA123_18==ASTERISK||LA123_18==BINDVAR||(LA123_18 >= CARRET_OPERATOR_PART && LA123_18 <= COLON)||LA123_18==CONCATENATION_OP||LA123_18==DELIMITED_ID||(LA123_18 >= EQUALS_OP && LA123_18 <= EXCLAMATION_OPERATOR_PART)||(LA123_18 >= GREATER_THAN_OP && LA123_18 <= GREATER_THAN_OR_EQUALS_OP)||LA123_18==INTRODUCER||(LA123_18 >= LEFT_BRACKET && LA123_18 <= LESS_THAN_OR_EQUALS_OP)||LA123_18==MINUS_SIGN||LA123_18==NATIONAL_CHAR_STRING_LIT||LA123_18==NOT_EQUAL_OP||(LA123_18 >= PERCENT && LA123_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_18==PLUS_SIGN||LA123_18==SOLIDUS||LA123_18==SQL92_RESERVED_ALL||(LA123_18 >= SQL92_RESERVED_AND && LA123_18 <= SQL92_RESERVED_ANY)||LA123_18==SQL92_RESERVED_CASE||LA123_18==SQL92_RESERVED_DATE||(LA123_18 >= SQL92_RESERVED_DEFAULT && LA123_18 <= SQL92_RESERVED_DELETE)||LA123_18==SQL92_RESERVED_DISTINCT||(LA123_18 >= SQL92_RESERVED_EXISTS && LA123_18 <= SQL92_RESERVED_FALSE)||LA123_18==SQL92_RESERVED_IS||LA123_18==SQL92_RESERVED_NULL||LA123_18==SQL92_RESERVED_OR||LA123_18==SQL92_RESERVED_PRIOR||LA123_18==SQL92_RESERVED_TRUE||LA123_18==UNSIGNED_INTEGER||LA123_18==VERTICAL_BAR) ) {
																alt123=1;
															}
															else if ( (LA123_18==REGULAR_ID) ) {
																int LA123_22 = input.LA(10);
																if ( (LA123_22==APPROXIMATE_NUM_LIT||LA123_22==ASTERISK||LA123_22==BINDVAR||(LA123_22 >= CARRET_OPERATOR_PART && LA123_22 <= COLON)||LA123_22==CONCATENATION_OP||LA123_22==DELIMITED_ID||(LA123_22 >= EQUALS_OP && LA123_22 <= EXCLAMATION_OPERATOR_PART)||(LA123_22 >= GREATER_THAN_OP && LA123_22 <= GREATER_THAN_OR_EQUALS_OP)||LA123_22==INTRODUCER||(LA123_22 >= LEFT_BRACKET && LA123_22 <= LESS_THAN_OR_EQUALS_OP)||LA123_22==MINUS_SIGN||LA123_22==NATIONAL_CHAR_STRING_LIT||LA123_22==NOT_EQUAL_OP||(LA123_22 >= PERCENT && LA123_22 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_22==PLUS_SIGN||LA123_22==SOLIDUS||LA123_22==SQL92_RESERVED_ALL||(LA123_22 >= SQL92_RESERVED_AND && LA123_22 <= SQL92_RESERVED_ANY)||LA123_22==SQL92_RESERVED_CASE||LA123_22==SQL92_RESERVED_DATE||(LA123_22 >= SQL92_RESERVED_DEFAULT && LA123_22 <= SQL92_RESERVED_DELETE)||LA123_22==SQL92_RESERVED_DISTINCT||(LA123_22 >= SQL92_RESERVED_EXISTS && LA123_22 <= SQL92_RESERVED_FALSE)||LA123_22==SQL92_RESERVED_IS||(LA123_22 >= SQL92_RESERVED_NULL && LA123_22 <= SQL92_RESERVED_OF)||LA123_22==SQL92_RESERVED_OR||LA123_22==SQL92_RESERVED_PRIOR||(LA123_22 >= SQL92_RESERVED_TO && LA123_22 <= SQL92_RESERVED_TRUE)||LA123_22==UNSIGNED_INTEGER||LA123_22==VERTICAL_BAR) ) {
																	alt123=1;
																}
																else if ( (LA123_22==REGULAR_ID) ) {
																	int LA123_25 = input.LA(11);
																	if ( (LA123_25==APPROXIMATE_NUM_LIT||LA123_25==ASTERISK||LA123_25==BINDVAR||(LA123_25 >= CARRET_OPERATOR_PART && LA123_25 <= COLON)||LA123_25==CONCATENATION_OP||LA123_25==DELIMITED_ID||(LA123_25 >= EQUALS_OP && LA123_25 <= EXCLAMATION_OPERATOR_PART)||(LA123_25 >= GREATER_THAN_OP && LA123_25 <= GREATER_THAN_OR_EQUALS_OP)||LA123_25==INTRODUCER||(LA123_25 >= LEFT_BRACKET && LA123_25 <= LESS_THAN_OR_EQUALS_OP)||LA123_25==MINUS_SIGN||LA123_25==NATIONAL_CHAR_STRING_LIT||LA123_25==NOT_EQUAL_OP||(LA123_25 >= PERCENT && LA123_25 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_25==PLSQL_NON_RESERVED_USING||LA123_25==PLUS_SIGN||LA123_25==SOLIDUS||LA123_25==SQL92_RESERVED_ALL||(LA123_25 >= SQL92_RESERVED_AND && LA123_25 <= SQL92_RESERVED_ANY)||LA123_25==SQL92_RESERVED_CASE||LA123_25==SQL92_RESERVED_DATE||(LA123_25 >= SQL92_RESERVED_DEFAULT && LA123_25 <= SQL92_RESERVED_DELETE)||LA123_25==SQL92_RESERVED_DISTINCT||(LA123_25 >= SQL92_RESERVED_EXISTS && LA123_25 <= SQL92_RESERVED_FALSE)||LA123_25==SQL92_RESERVED_IS||(LA123_25 >= SQL92_RESERVED_NULL && LA123_25 <= SQL92_RESERVED_OF)||LA123_25==SQL92_RESERVED_OR||LA123_25==SQL92_RESERVED_PRIOR||(LA123_25 >= SQL92_RESERVED_TO && LA123_25 <= SQL92_RESERVED_TRUE)||LA123_25==UNSIGNED_INTEGER||LA123_25==VERTICAL_BAR) ) {
																		alt123=1;
																	}
																	else if ( (LA123_25==REGULAR_ID) ) {
																		int LA123_27 = input.LA(12);
																		if ( (LA123_27==APPROXIMATE_NUM_LIT||LA123_27==ASTERISK||LA123_27==BINDVAR||(LA123_27 >= CARRET_OPERATOR_PART && LA123_27 <= COLON)||LA123_27==CONCATENATION_OP||LA123_27==DELIMITED_ID||(LA123_27 >= EQUALS_OP && LA123_27 <= EXCLAMATION_OPERATOR_PART)||(LA123_27 >= GREATER_THAN_OP && LA123_27 <= GREATER_THAN_OR_EQUALS_OP)||LA123_27==INTRODUCER||(LA123_27 >= LEFT_BRACKET && LA123_27 <= LESS_THAN_OR_EQUALS_OP)||LA123_27==MINUS_SIGN||LA123_27==NATIONAL_CHAR_STRING_LIT||LA123_27==NOT_EQUAL_OP||(LA123_27 >= PERCENT && LA123_27 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_27==PLSQL_NON_RESERVED_USING||LA123_27==PLUS_SIGN||LA123_27==SOLIDUS||LA123_27==SQL92_RESERVED_ALL||(LA123_27 >= SQL92_RESERVED_AND && LA123_27 <= SQL92_RESERVED_ANY)||LA123_27==SQL92_RESERVED_CASE||LA123_27==SQL92_RESERVED_DATE||(LA123_27 >= SQL92_RESERVED_DEFAULT && LA123_27 <= SQL92_RESERVED_DELETE)||LA123_27==SQL92_RESERVED_DISTINCT||(LA123_27 >= SQL92_RESERVED_EXISTS && LA123_27 <= SQL92_RESERVED_FALSE)||LA123_27==SQL92_RESERVED_IS||(LA123_27 >= SQL92_RESERVED_NULL && LA123_27 <= SQL92_RESERVED_OF)||LA123_27==SQL92_RESERVED_OR||LA123_27==SQL92_RESERVED_PRIOR||(LA123_27 >= SQL92_RESERVED_TO && LA123_27 <= SQL92_RESERVED_TRUE)||LA123_27==UNSIGNED_INTEGER||LA123_27==VERTICAL_BAR) ) {
																			alt123=1;
																		}
																		else if ( (LA123_27==REGULAR_ID) ) {
																			int LA123_29 = input.LA(13);
																			if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																				alt123=1;
																			}
																		}
																	}
																}
															}
														}
													}
													}
													break;
											}
											}
											break;
										case SQL92_RESERVED_NOT:
											{
											int LA123_10 = input.LA(6);
											if ( (LA123_10==SQL92_RESERVED_BETWEEN||LA123_10==SQL92_RESERVED_IN||LA123_10==SQL92_RESERVED_LIKE) ) {
												alt123=1;
											}
											else if ( (LA123_10==REGULAR_ID) ) {
												int LA123_14 = input.LA(7);
												if ( (LA123_14==APPROXIMATE_NUM_LIT||LA123_14==BINDVAR||(LA123_14 >= CHAR_STRING && LA123_14 <= COLON)||LA123_14==DELIMITED_ID||LA123_14==EXACT_NUM_LIT||LA123_14==INTRODUCER||LA123_14==LEFT_PAREN||LA123_14==MINUS_SIGN||LA123_14==NATIONAL_CHAR_STRING_LIT||LA123_14==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_14==PLUS_SIGN||LA123_14==SQL92_RESERVED_ALL||LA123_14==SQL92_RESERVED_ANY||LA123_14==SQL92_RESERVED_CASE||LA123_14==SQL92_RESERVED_DATE||(LA123_14 >= SQL92_RESERVED_DEFAULT && LA123_14 <= SQL92_RESERVED_DELETE)||LA123_14==SQL92_RESERVED_DISTINCT||(LA123_14 >= SQL92_RESERVED_EXISTS && LA123_14 <= SQL92_RESERVED_FALSE)||LA123_14==SQL92_RESERVED_NULL||LA123_14==SQL92_RESERVED_PRIOR||LA123_14==SQL92_RESERVED_TRUE||LA123_14==UNSIGNED_INTEGER) ) {
													alt123=1;
												}
												else if ( (LA123_14==REGULAR_ID) ) {
													int LA123_18 = input.LA(8);
													if ( (LA123_18==APPROXIMATE_NUM_LIT||LA123_18==ASTERISK||LA123_18==BINDVAR||(LA123_18 >= CARRET_OPERATOR_PART && LA123_18 <= COLON)||LA123_18==CONCATENATION_OP||LA123_18==DELIMITED_ID||(LA123_18 >= EQUALS_OP && LA123_18 <= EXCLAMATION_OPERATOR_PART)||(LA123_18 >= GREATER_THAN_OP && LA123_18 <= GREATER_THAN_OR_EQUALS_OP)||LA123_18==INTRODUCER||(LA123_18 >= LEFT_BRACKET && LA123_18 <= LESS_THAN_OR_EQUALS_OP)||LA123_18==MINUS_SIGN||LA123_18==NATIONAL_CHAR_STRING_LIT||LA123_18==NOT_EQUAL_OP||(LA123_18 >= PERCENT && LA123_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_18==PLUS_SIGN||LA123_18==SOLIDUS||LA123_18==SQL92_RESERVED_ALL||(LA123_18 >= SQL92_RESERVED_AND && LA123_18 <= SQL92_RESERVED_ANY)||LA123_18==SQL92_RESERVED_CASE||LA123_18==SQL92_RESERVED_DATE||(LA123_18 >= SQL92_RESERVED_DEFAULT && LA123_18 <= SQL92_RESERVED_DELETE)||LA123_18==SQL92_RESERVED_DISTINCT||(LA123_18 >= SQL92_RESERVED_EXISTS && LA123_18 <= SQL92_RESERVED_FALSE)||LA123_18==SQL92_RESERVED_IS||LA123_18==SQL92_RESERVED_NULL||LA123_18==SQL92_RESERVED_OR||LA123_18==SQL92_RESERVED_PRIOR||LA123_18==SQL92_RESERVED_TRUE||LA123_18==UNSIGNED_INTEGER||LA123_18==VERTICAL_BAR) ) {
														alt123=1;
													}
													else if ( (LA123_18==REGULAR_ID) ) {
														int LA123_22 = input.LA(9);
														if ( (LA123_22==APPROXIMATE_NUM_LIT||LA123_22==ASTERISK||LA123_22==BINDVAR||(LA123_22 >= CARRET_OPERATOR_PART && LA123_22 <= COLON)||LA123_22==CONCATENATION_OP||LA123_22==DELIMITED_ID||(LA123_22 >= EQUALS_OP && LA123_22 <= EXCLAMATION_OPERATOR_PART)||(LA123_22 >= GREATER_THAN_OP && LA123_22 <= GREATER_THAN_OR_EQUALS_OP)||LA123_22==INTRODUCER||(LA123_22 >= LEFT_BRACKET && LA123_22 <= LESS_THAN_OR_EQUALS_OP)||LA123_22==MINUS_SIGN||LA123_22==NATIONAL_CHAR_STRING_LIT||LA123_22==NOT_EQUAL_OP||(LA123_22 >= PERCENT && LA123_22 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_22==PLUS_SIGN||LA123_22==SOLIDUS||LA123_22==SQL92_RESERVED_ALL||(LA123_22 >= SQL92_RESERVED_AND && LA123_22 <= SQL92_RESERVED_ANY)||LA123_22==SQL92_RESERVED_CASE||LA123_22==SQL92_RESERVED_DATE||(LA123_22 >= SQL92_RESERVED_DEFAULT && LA123_22 <= SQL92_RESERVED_DELETE)||LA123_22==SQL92_RESERVED_DISTINCT||(LA123_22 >= SQL92_RESERVED_EXISTS && LA123_22 <= SQL92_RESERVED_FALSE)||LA123_22==SQL92_RESERVED_IS||(LA123_22 >= SQL92_RESERVED_NULL && LA123_22 <= SQL92_RESERVED_OF)||LA123_22==SQL92_RESERVED_OR||LA123_22==SQL92_RESERVED_PRIOR||(LA123_22 >= SQL92_RESERVED_TO && LA123_22 <= SQL92_RESERVED_TRUE)||LA123_22==UNSIGNED_INTEGER||LA123_22==VERTICAL_BAR) ) {
															alt123=1;
														}
														else if ( (LA123_22==REGULAR_ID) ) {
															int LA123_25 = input.LA(10);
															if ( (LA123_25==APPROXIMATE_NUM_LIT||LA123_25==ASTERISK||LA123_25==BINDVAR||(LA123_25 >= CARRET_OPERATOR_PART && LA123_25 <= COLON)||LA123_25==CONCATENATION_OP||LA123_25==DELIMITED_ID||(LA123_25 >= EQUALS_OP && LA123_25 <= EXCLAMATION_OPERATOR_PART)||(LA123_25 >= GREATER_THAN_OP && LA123_25 <= GREATER_THAN_OR_EQUALS_OP)||LA123_25==INTRODUCER||(LA123_25 >= LEFT_BRACKET && LA123_25 <= LESS_THAN_OR_EQUALS_OP)||LA123_25==MINUS_SIGN||LA123_25==NATIONAL_CHAR_STRING_LIT||LA123_25==NOT_EQUAL_OP||(LA123_25 >= PERCENT && LA123_25 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_25==PLSQL_NON_RESERVED_USING||LA123_25==PLUS_SIGN||LA123_25==SOLIDUS||LA123_25==SQL92_RESERVED_ALL||(LA123_25 >= SQL92_RESERVED_AND && LA123_25 <= SQL92_RESERVED_ANY)||LA123_25==SQL92_RESERVED_CASE||LA123_25==SQL92_RESERVED_DATE||(LA123_25 >= SQL92_RESERVED_DEFAULT && LA123_25 <= SQL92_RESERVED_DELETE)||LA123_25==SQL92_RESERVED_DISTINCT||(LA123_25 >= SQL92_RESERVED_EXISTS && LA123_25 <= SQL92_RESERVED_FALSE)||LA123_25==SQL92_RESERVED_IS||(LA123_25 >= SQL92_RESERVED_NULL && LA123_25 <= SQL92_RESERVED_OF)||LA123_25==SQL92_RESERVED_OR||LA123_25==SQL92_RESERVED_PRIOR||(LA123_25 >= SQL92_RESERVED_TO && LA123_25 <= SQL92_RESERVED_TRUE)||LA123_25==UNSIGNED_INTEGER||LA123_25==VERTICAL_BAR) ) {
																alt123=1;
															}
															else if ( (LA123_25==REGULAR_ID) ) {
																int LA123_27 = input.LA(11);
																if ( (LA123_27==APPROXIMATE_NUM_LIT||LA123_27==ASTERISK||LA123_27==BINDVAR||(LA123_27 >= CARRET_OPERATOR_PART && LA123_27 <= COLON)||LA123_27==CONCATENATION_OP||LA123_27==DELIMITED_ID||(LA123_27 >= EQUALS_OP && LA123_27 <= EXCLAMATION_OPERATOR_PART)||(LA123_27 >= GREATER_THAN_OP && LA123_27 <= GREATER_THAN_OR_EQUALS_OP)||LA123_27==INTRODUCER||(LA123_27 >= LEFT_BRACKET && LA123_27 <= LESS_THAN_OR_EQUALS_OP)||LA123_27==MINUS_SIGN||LA123_27==NATIONAL_CHAR_STRING_LIT||LA123_27==NOT_EQUAL_OP||(LA123_27 >= PERCENT && LA123_27 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_27==PLSQL_NON_RESERVED_USING||LA123_27==PLUS_SIGN||LA123_27==SOLIDUS||LA123_27==SQL92_RESERVED_ALL||(LA123_27 >= SQL92_RESERVED_AND && LA123_27 <= SQL92_RESERVED_ANY)||LA123_27==SQL92_RESERVED_CASE||LA123_27==SQL92_RESERVED_DATE||(LA123_27 >= SQL92_RESERVED_DEFAULT && LA123_27 <= SQL92_RESERVED_DELETE)||LA123_27==SQL92_RESERVED_DISTINCT||(LA123_27 >= SQL92_RESERVED_EXISTS && LA123_27 <= SQL92_RESERVED_FALSE)||LA123_27==SQL92_RESERVED_IS||(LA123_27 >= SQL92_RESERVED_NULL && LA123_27 <= SQL92_RESERVED_OF)||LA123_27==SQL92_RESERVED_OR||LA123_27==SQL92_RESERVED_PRIOR||(LA123_27 >= SQL92_RESERVED_TO && LA123_27 <= SQL92_RESERVED_TRUE)||LA123_27==UNSIGNED_INTEGER||LA123_27==VERTICAL_BAR) ) {
																	alt123=1;
																}
																else if ( (LA123_27==REGULAR_ID) ) {
																	int LA123_29 = input.LA(12);
																	if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																		alt123=1;
																	}
																}
															}
														}
													}
												}
											}
											}
											break;
									}
									}
									break;
								case SQL92_RESERVED_NOT:
									{
									int LA123_10 = input.LA(5);
									if ( (LA123_10==SQL92_RESERVED_BETWEEN||LA123_10==SQL92_RESERVED_IN||LA123_10==SQL92_RESERVED_LIKE) ) {
										alt123=1;
									}
									else if ( (LA123_10==REGULAR_ID) ) {
										int LA123_14 = input.LA(6);
										if ( (LA123_14==APPROXIMATE_NUM_LIT||LA123_14==BINDVAR||(LA123_14 >= CHAR_STRING && LA123_14 <= COLON)||LA123_14==DELIMITED_ID||LA123_14==EXACT_NUM_LIT||LA123_14==INTRODUCER||LA123_14==LEFT_PAREN||LA123_14==MINUS_SIGN||LA123_14==NATIONAL_CHAR_STRING_LIT||LA123_14==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA123_14==PLUS_SIGN||LA123_14==SQL92_RESERVED_ALL||LA123_14==SQL92_RESERVED_ANY||LA123_14==SQL92_RESERVED_CASE||LA123_14==SQL92_RESERVED_DATE||(LA123_14 >= SQL92_RESERVED_DEFAULT && LA123_14 <= SQL92_RESERVED_DELETE)||LA123_14==SQL92_RESERVED_DISTINCT||(LA123_14 >= SQL92_RESERVED_EXISTS && LA123_14 <= SQL92_RESERVED_FALSE)||LA123_14==SQL92_RESERVED_NULL||LA123_14==SQL92_RESERVED_PRIOR||LA123_14==SQL92_RESERVED_TRUE||LA123_14==UNSIGNED_INTEGER) ) {
											alt123=1;
										}
										else if ( (LA123_14==REGULAR_ID) ) {
											int LA123_18 = input.LA(7);
											if ( (LA123_18==APPROXIMATE_NUM_LIT||LA123_18==ASTERISK||LA123_18==BINDVAR||(LA123_18 >= CARRET_OPERATOR_PART && LA123_18 <= COLON)||LA123_18==CONCATENATION_OP||LA123_18==DELIMITED_ID||(LA123_18 >= EQUALS_OP && LA123_18 <= EXCLAMATION_OPERATOR_PART)||(LA123_18 >= GREATER_THAN_OP && LA123_18 <= GREATER_THAN_OR_EQUALS_OP)||LA123_18==INTRODUCER||(LA123_18 >= LEFT_BRACKET && LA123_18 <= LESS_THAN_OR_EQUALS_OP)||LA123_18==MINUS_SIGN||LA123_18==NATIONAL_CHAR_STRING_LIT||LA123_18==NOT_EQUAL_OP||(LA123_18 >= PERCENT && LA123_18 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_18==PLUS_SIGN||LA123_18==SOLIDUS||LA123_18==SQL92_RESERVED_ALL||(LA123_18 >= SQL92_RESERVED_AND && LA123_18 <= SQL92_RESERVED_ANY)||LA123_18==SQL92_RESERVED_CASE||LA123_18==SQL92_RESERVED_DATE||(LA123_18 >= SQL92_RESERVED_DEFAULT && LA123_18 <= SQL92_RESERVED_DELETE)||LA123_18==SQL92_RESERVED_DISTINCT||(LA123_18 >= SQL92_RESERVED_EXISTS && LA123_18 <= SQL92_RESERVED_FALSE)||LA123_18==SQL92_RESERVED_IS||LA123_18==SQL92_RESERVED_NULL||LA123_18==SQL92_RESERVED_OR||LA123_18==SQL92_RESERVED_PRIOR||LA123_18==SQL92_RESERVED_TRUE||LA123_18==UNSIGNED_INTEGER||LA123_18==VERTICAL_BAR) ) {
												alt123=1;
											}
											else if ( (LA123_18==REGULAR_ID) ) {
												int LA123_22 = input.LA(8);
												if ( (LA123_22==APPROXIMATE_NUM_LIT||LA123_22==ASTERISK||LA123_22==BINDVAR||(LA123_22 >= CARRET_OPERATOR_PART && LA123_22 <= COLON)||LA123_22==CONCATENATION_OP||LA123_22==DELIMITED_ID||(LA123_22 >= EQUALS_OP && LA123_22 <= EXCLAMATION_OPERATOR_PART)||(LA123_22 >= GREATER_THAN_OP && LA123_22 <= GREATER_THAN_OR_EQUALS_OP)||LA123_22==INTRODUCER||(LA123_22 >= LEFT_BRACKET && LA123_22 <= LESS_THAN_OR_EQUALS_OP)||LA123_22==MINUS_SIGN||LA123_22==NATIONAL_CHAR_STRING_LIT||LA123_22==NOT_EQUAL_OP||(LA123_22 >= PERCENT && LA123_22 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_22==PLUS_SIGN||LA123_22==SOLIDUS||LA123_22==SQL92_RESERVED_ALL||(LA123_22 >= SQL92_RESERVED_AND && LA123_22 <= SQL92_RESERVED_ANY)||LA123_22==SQL92_RESERVED_CASE||LA123_22==SQL92_RESERVED_DATE||(LA123_22 >= SQL92_RESERVED_DEFAULT && LA123_22 <= SQL92_RESERVED_DELETE)||LA123_22==SQL92_RESERVED_DISTINCT||(LA123_22 >= SQL92_RESERVED_EXISTS && LA123_22 <= SQL92_RESERVED_FALSE)||LA123_22==SQL92_RESERVED_IS||(LA123_22 >= SQL92_RESERVED_NULL && LA123_22 <= SQL92_RESERVED_OF)||LA123_22==SQL92_RESERVED_OR||LA123_22==SQL92_RESERVED_PRIOR||(LA123_22 >= SQL92_RESERVED_TO && LA123_22 <= SQL92_RESERVED_TRUE)||LA123_22==UNSIGNED_INTEGER||LA123_22==VERTICAL_BAR) ) {
													alt123=1;
												}
												else if ( (LA123_22==REGULAR_ID) ) {
													int LA123_25 = input.LA(9);
													if ( (LA123_25==APPROXIMATE_NUM_LIT||LA123_25==ASTERISK||LA123_25==BINDVAR||(LA123_25 >= CARRET_OPERATOR_PART && LA123_25 <= COLON)||LA123_25==CONCATENATION_OP||LA123_25==DELIMITED_ID||(LA123_25 >= EQUALS_OP && LA123_25 <= EXCLAMATION_OPERATOR_PART)||(LA123_25 >= GREATER_THAN_OP && LA123_25 <= GREATER_THAN_OR_EQUALS_OP)||LA123_25==INTRODUCER||(LA123_25 >= LEFT_BRACKET && LA123_25 <= LESS_THAN_OR_EQUALS_OP)||LA123_25==MINUS_SIGN||LA123_25==NATIONAL_CHAR_STRING_LIT||LA123_25==NOT_EQUAL_OP||(LA123_25 >= PERCENT && LA123_25 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_25==PLSQL_NON_RESERVED_USING||LA123_25==PLUS_SIGN||LA123_25==SOLIDUS||LA123_25==SQL92_RESERVED_ALL||(LA123_25 >= SQL92_RESERVED_AND && LA123_25 <= SQL92_RESERVED_ANY)||LA123_25==SQL92_RESERVED_CASE||LA123_25==SQL92_RESERVED_DATE||(LA123_25 >= SQL92_RESERVED_DEFAULT && LA123_25 <= SQL92_RESERVED_DELETE)||LA123_25==SQL92_RESERVED_DISTINCT||(LA123_25 >= SQL92_RESERVED_EXISTS && LA123_25 <= SQL92_RESERVED_FALSE)||LA123_25==SQL92_RESERVED_IS||(LA123_25 >= SQL92_RESERVED_NULL && LA123_25 <= SQL92_RESERVED_OF)||LA123_25==SQL92_RESERVED_OR||LA123_25==SQL92_RESERVED_PRIOR||(LA123_25 >= SQL92_RESERVED_TO && LA123_25 <= SQL92_RESERVED_TRUE)||LA123_25==UNSIGNED_INTEGER||LA123_25==VERTICAL_BAR) ) {
														alt123=1;
													}
													else if ( (LA123_25==REGULAR_ID) ) {
														int LA123_27 = input.LA(10);
														if ( (LA123_27==APPROXIMATE_NUM_LIT||LA123_27==ASTERISK||LA123_27==BINDVAR||(LA123_27 >= CARRET_OPERATOR_PART && LA123_27 <= COLON)||LA123_27==CONCATENATION_OP||LA123_27==DELIMITED_ID||(LA123_27 >= EQUALS_OP && LA123_27 <= EXCLAMATION_OPERATOR_PART)||(LA123_27 >= GREATER_THAN_OP && LA123_27 <= GREATER_THAN_OR_EQUALS_OP)||LA123_27==INTRODUCER||(LA123_27 >= LEFT_BRACKET && LA123_27 <= LESS_THAN_OR_EQUALS_OP)||LA123_27==MINUS_SIGN||LA123_27==NATIONAL_CHAR_STRING_LIT||LA123_27==NOT_EQUAL_OP||(LA123_27 >= PERCENT && LA123_27 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA123_27==PLSQL_NON_RESERVED_USING||LA123_27==PLUS_SIGN||LA123_27==SOLIDUS||LA123_27==SQL92_RESERVED_ALL||(LA123_27 >= SQL92_RESERVED_AND && LA123_27 <= SQL92_RESERVED_ANY)||LA123_27==SQL92_RESERVED_CASE||LA123_27==SQL92_RESERVED_DATE||(LA123_27 >= SQL92_RESERVED_DEFAULT && LA123_27 <= SQL92_RESERVED_DELETE)||LA123_27==SQL92_RESERVED_DISTINCT||(LA123_27 >= SQL92_RESERVED_EXISTS && LA123_27 <= SQL92_RESERVED_FALSE)||LA123_27==SQL92_RESERVED_IS||(LA123_27 >= SQL92_RESERVED_NULL && LA123_27 <= SQL92_RESERVED_OF)||LA123_27==SQL92_RESERVED_OR||LA123_27==SQL92_RESERVED_PRIOR||(LA123_27 >= SQL92_RESERVED_TO && LA123_27 <= SQL92_RESERVED_TRUE)||LA123_27==UNSIGNED_INTEGER||LA123_27==VERTICAL_BAR) ) {
															alt123=1;
														}
														else if ( (LA123_27==REGULAR_ID) ) {
															int LA123_29 = input.LA(11);
															if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
																alt123=1;
															}
														}
													}
												}
											}
										}
									}
									}
									break;
							}
							}
							break;
					}
				}
			}
			switch (alt123) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:708:9: sqlj_object_type
					{
					pushFollow(FOLLOW_sqlj_object_type_in_object_type_def7023);
					sqlj_object_type444=sqlj_object_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sqlj_object_type.add(sqlj_object_type444.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:709:9: ( LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN )?
			int alt125=2;
			int LA125_0 = input.LA(1);
			if ( (LA125_0==LEFT_PAREN) ) {
				alt125=1;
			}
			switch (alt125) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:709:10: LEFT_PAREN object_member_spec ( COMMA object_member_spec )* RIGHT_PAREN
					{
					LEFT_PAREN445=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_object_type_def7035); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN445);

					pushFollow(FOLLOW_object_member_spec_in_object_type_def7037);
					object_member_spec446=object_member_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_object_member_spec.add(object_member_spec446.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:709:40: ( COMMA object_member_spec )*
					loop124:
					while (true) {
						int alt124=2;
						int LA124_0 = input.LA(1);
						if ( (LA124_0==COMMA) ) {
							alt124=1;
						}

						switch (alt124) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:709:41: COMMA object_member_spec
							{
							COMMA447=(Token)match(input,COMMA,FOLLOW_COMMA_in_object_type_def7040); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA447);

							pushFollow(FOLLOW_object_member_spec_in_object_type_def7042);
							object_member_spec448=object_member_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_object_member_spec.add(object_member_spec448.getTree());
							}
							break;

						default :
							break loop124;
						}
					}

					RIGHT_PAREN449=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_object_type_def7046); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN449);

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:710:9: ( modifier_clause )*
			loop126:
			while (true) {
				int alt126=2;
				int LA126_0 = input.LA(1);
				if ( (LA126_0==SQL92_RESERVED_NOT) ) {
					alt126=1;
				}
				else if ( (LA126_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
					alt126=1;
				}

				switch (alt126) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:710:9: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_object_type_def7058);
					modifier_clause450=modifier_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_modifier_clause.add(modifier_clause450.getTree());
					}
					break;

				default :
					break loop126;
				}
			}

			// AST REWRITE
			// elements: modifier_clause, object_under_part, object_member_spec, sqlj_object_type, invoker_rights_clause, object_as_part
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 711:9: -> ^( OBJECT_TYPE_DEF ( object_as_part )? ( object_under_part )? ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( object_member_spec )* ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:711:12: ^( OBJECT_TYPE_DEF ( object_as_part )? ( object_under_part )? ( invoker_rights_clause )? ( sqlj_object_type )? ( modifier_clause )* ^( OBJECT_MEMBERS ( object_member_spec )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OBJECT_TYPE_DEF, "OBJECT_TYPE_DEF"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:711:30: ( object_as_part )?
				if ( stream_object_as_part.hasNext() ) {
					adaptor.addChild(root_1, stream_object_as_part.nextTree());
				}
				stream_object_as_part.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:711:46: ( object_under_part )?
				if ( stream_object_under_part.hasNext() ) {
					adaptor.addChild(root_1, stream_object_under_part.nextTree());
				}
				stream_object_under_part.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:711:65: ( invoker_rights_clause )?
				if ( stream_invoker_rights_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_invoker_rights_clause.nextTree());
				}
				stream_invoker_rights_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:712:14: ( sqlj_object_type )?
				if ( stream_sqlj_object_type.hasNext() ) {
					adaptor.addChild(root_1, stream_sqlj_object_type.nextTree());
				}
				stream_sqlj_object_type.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:712:32: ( modifier_clause )*
				while ( stream_modifier_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_modifier_clause.nextTree());
				}
				stream_modifier_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:712:49: ^( OBJECT_MEMBERS ( object_member_spec )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(OBJECT_MEMBERS, "OBJECT_MEMBERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:712:66: ( object_member_spec )*
				while ( stream_object_member_spec.hasNext() ) {
					adaptor.addChild(root_2, stream_object_member_spec.nextTree());
				}
				stream_object_member_spec.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_type_def"


	public static class object_as_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "object_as_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:715:1: object_as_part : ( is_key | as_key ) ( object_key | varray_type_def | nested_table_type_def ) -> ^( OBJECT_AS ( object_key )? ( varray_type_def )? ( nested_table_type_def )? ) ;
	public final PLSQLParser.object_as_part_return object_as_part() throws RecognitionException {
		PLSQLParser.object_as_part_return retval = new PLSQLParser.object_as_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope is_key451 =null;
		ParserRuleReturnScope as_key452 =null;
		ParserRuleReturnScope object_key453 =null;
		ParserRuleReturnScope varray_type_def454 =null;
		ParserRuleReturnScope nested_table_type_def455 =null;

		RewriteRuleSubtreeStream stream_nested_table_type_def=new RewriteRuleSubtreeStream(adaptor,"rule nested_table_type_def");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_object_key=new RewriteRuleSubtreeStream(adaptor,"rule object_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_varray_type_def=new RewriteRuleSubtreeStream(adaptor,"rule varray_type_def");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:5: ( ( is_key | as_key ) ( object_key | varray_type_def | nested_table_type_def ) -> ^( OBJECT_AS ( object_key )? ( varray_type_def )? ( nested_table_type_def )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:10: ( is_key | as_key ) ( object_key | varray_type_def | nested_table_type_def )
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:10: ( is_key | as_key )
			int alt127=2;
			int LA127_0 = input.LA(1);
			if ( (LA127_0==SQL92_RESERVED_IS) ) {
				alt127=1;
			}
			else if ( (LA127_0==SQL92_RESERVED_AS) ) {
				alt127=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 127, 0, input);
				throw nvae;
			}

			switch (alt127) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:11: is_key
					{
					pushFollow(FOLLOW_is_key_in_object_as_part7131);
					is_key451=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key451.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:18: as_key
					{
					pushFollow(FOLLOW_as_key_in_object_as_part7133);
					as_key452=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key452.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:26: ( object_key | varray_type_def | nested_table_type_def )
			int alt128=3;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("varying"))||(input.LT(1).getText().equalsIgnoreCase("varray"))||(input.LT(1).getText().equalsIgnoreCase("object"))))) {
				int LA128_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("object"))) ) {
					alt128=1;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("varying"))||(input.LT(1).getText().equalsIgnoreCase("varray")))) ) {
					alt128=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 128, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA128_0==SQL92_RESERVED_TABLE) ) {
				alt128=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 128, 0, input);
				throw nvae;
			}

			switch (alt128) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:27: object_key
					{
					pushFollow(FOLLOW_object_key_in_object_as_part7137);
					object_key453=object_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_object_key.add(object_key453.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:38: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_object_as_part7139);
					varray_type_def454=varray_type_def();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varray_type_def.add(varray_type_def454.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:716:54: nested_table_type_def
					{
					pushFollow(FOLLOW_nested_table_type_def_in_object_as_part7141);
					nested_table_type_def455=nested_table_type_def();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nested_table_type_def.add(nested_table_type_def455.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: varray_type_def, object_key, nested_table_type_def
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 717:9: -> ^( OBJECT_AS ( object_key )? ( varray_type_def )? ( nested_table_type_def )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:717:12: ^( OBJECT_AS ( object_key )? ( varray_type_def )? ( nested_table_type_def )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OBJECT_AS, "OBJECT_AS"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:717:24: ( object_key )?
				if ( stream_object_key.hasNext() ) {
					adaptor.addChild(root_1, stream_object_key.nextTree());
				}
				stream_object_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:717:36: ( varray_type_def )?
				if ( stream_varray_type_def.hasNext() ) {
					adaptor.addChild(root_1, stream_varray_type_def.nextTree());
				}
				stream_varray_type_def.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:717:53: ( nested_table_type_def )?
				if ( stream_nested_table_type_def.hasNext() ) {
					adaptor.addChild(root_1, stream_nested_table_type_def.nextTree());
				}
				stream_nested_table_type_def.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_as_part"


	public static class object_under_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "object_under_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:720:1: object_under_part : under_key ^ type_spec ;
	public final PLSQLParser.object_under_part_return object_under_part() throws RecognitionException {
		PLSQLParser.object_under_part_return retval = new PLSQLParser.object_under_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope under_key456 =null;
		ParserRuleReturnScope type_spec457 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:721:5: ( under_key ^ type_spec )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:721:10: under_key ^ type_spec
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_under_key_in_object_under_part7185);
			under_key456=under_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(under_key456.getTree(), root_0);
			pushFollow(FOLLOW_type_spec_in_object_under_part7188);
			type_spec457=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec457.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_under_part"


	public static class nested_table_type_def_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "nested_table_type_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:724:1: nested_table_type_def : table_key of_key type_spec ( not_key null_key )? ( table_indexed_by_part )? -> ^( NESTED_TABLE_TYPE_DEF[$table_key.start] type_spec ( null_key )? ( table_indexed_by_part )? ) ;
	public final PLSQLParser.nested_table_type_def_return nested_table_type_def() throws RecognitionException {
		PLSQLParser.nested_table_type_def_return retval = new PLSQLParser.nested_table_type_def_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope table_key458 =null;
		ParserRuleReturnScope of_key459 =null;
		ParserRuleReturnScope type_spec460 =null;
		ParserRuleReturnScope not_key461 =null;
		ParserRuleReturnScope null_key462 =null;
		ParserRuleReturnScope table_indexed_by_part463 =null;

		RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
		RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
		RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_table_indexed_by_part=new RewriteRuleSubtreeStream(adaptor,"rule table_indexed_by_part");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:725:5: ( table_key of_key type_spec ( not_key null_key )? ( table_indexed_by_part )? -> ^( NESTED_TABLE_TYPE_DEF[$table_key.start] type_spec ( null_key )? ( table_indexed_by_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:725:10: table_key of_key type_spec ( not_key null_key )? ( table_indexed_by_part )?
			{
			pushFollow(FOLLOW_table_key_in_nested_table_type_def7208);
			table_key458=table_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table_key.add(table_key458.getTree());
			pushFollow(FOLLOW_of_key_in_nested_table_type_def7210);
			of_key459=of_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_of_key.add(of_key459.getTree());
			pushFollow(FOLLOW_type_spec_in_nested_table_type_def7212);
			type_spec460=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec460.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:726:9: ( not_key null_key )?
			int alt129=2;
			int LA129_0 = input.LA(1);
			if ( (LA129_0==SQL92_RESERVED_NOT) ) {
				int LA129_1 = input.LA(2);
				if ( (LA129_1==SQL92_RESERVED_NULL) ) {
					alt129=1;
				}
			}
			switch (alt129) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:726:10: not_key null_key
					{
					pushFollow(FOLLOW_not_key_in_nested_table_type_def7223);
					not_key461=not_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_not_key.add(not_key461.getTree());
					pushFollow(FOLLOW_null_key_in_nested_table_type_def7225);
					null_key462=null_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_null_key.add(null_key462.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:727:9: ( table_indexed_by_part )?
			int alt130=2;
			int LA130_0 = input.LA(1);
			if ( (LA130_0==REGULAR_ID) ) {
				int LA130_1 = input.LA(2);
				if ( (LA130_1==SQL92_RESERVED_BY) ) {
					alt130=1;
				}
			}
			else if ( (LA130_0==PLSQL_RESERVED_INDEX) ) {
				alt130=1;
			}
			switch (alt130) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:727:9: table_indexed_by_part
					{
					pushFollow(FOLLOW_table_indexed_by_part_in_nested_table_type_def7237);
					table_indexed_by_part463=table_indexed_by_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_table_indexed_by_part.add(table_indexed_by_part463.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: null_key, type_spec, table_indexed_by_part
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 728:9: -> ^( NESTED_TABLE_TYPE_DEF[$table_key.start] type_spec ( null_key )? ( table_indexed_by_part )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:728:12: ^( NESTED_TABLE_TYPE_DEF[$table_key.start] type_spec ( null_key )? ( table_indexed_by_part )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NESTED_TABLE_TYPE_DEF, (table_key458!=null?(table_key458.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:728:64: ( null_key )?
				if ( stream_null_key.hasNext() ) {
					adaptor.addChild(root_1, stream_null_key.nextTree());
				}
				stream_null_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:728:74: ( table_indexed_by_part )?
				if ( stream_table_indexed_by_part.hasNext() ) {
					adaptor.addChild(root_1, stream_table_indexed_by_part.nextTree());
				}
				stream_table_indexed_by_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nested_table_type_def"


	public static class sqlj_object_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "sqlj_object_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:731:1: sqlj_object_type : external_key name_key expression language_key java_key using_key ( sqldata_key | customdatum_key | oradata_key ) -> ^( java_key ^( EXPR expression ) ( sqldata_key )? ( customdatum_key )? ( oradata_key )? ) ;
	public final PLSQLParser.sqlj_object_type_return sqlj_object_type() throws RecognitionException {
		PLSQLParser.sqlj_object_type_return retval = new PLSQLParser.sqlj_object_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope external_key464 =null;
		ParserRuleReturnScope name_key465 =null;
		ParserRuleReturnScope expression466 =null;
		ParserRuleReturnScope language_key467 =null;
		ParserRuleReturnScope java_key468 =null;
		ParserRuleReturnScope using_key469 =null;
		ParserRuleReturnScope sqldata_key470 =null;
		ParserRuleReturnScope customdatum_key471 =null;
		ParserRuleReturnScope oradata_key472 =null;

		RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
		RewriteRuleSubtreeStream stream_external_key=new RewriteRuleSubtreeStream(adaptor,"rule external_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_sqldata_key=new RewriteRuleSubtreeStream(adaptor,"rule sqldata_key");
		RewriteRuleSubtreeStream stream_java_key=new RewriteRuleSubtreeStream(adaptor,"rule java_key");
		RewriteRuleSubtreeStream stream_customdatum_key=new RewriteRuleSubtreeStream(adaptor,"rule customdatum_key");
		RewriteRuleSubtreeStream stream_oradata_key=new RewriteRuleSubtreeStream(adaptor,"rule oradata_key");
		RewriteRuleSubtreeStream stream_language_key=new RewriteRuleSubtreeStream(adaptor,"rule language_key");
		RewriteRuleSubtreeStream stream_using_key=new RewriteRuleSubtreeStream(adaptor,"rule using_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:732:5: ( external_key name_key expression language_key java_key using_key ( sqldata_key | customdatum_key | oradata_key ) -> ^( java_key ^( EXPR expression ) ( sqldata_key )? ( customdatum_key )? ( oradata_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:732:10: external_key name_key expression language_key java_key using_key ( sqldata_key | customdatum_key | oradata_key )
			{
			pushFollow(FOLLOW_external_key_in_sqlj_object_type7282);
			external_key464=external_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_external_key.add(external_key464.getTree());
			pushFollow(FOLLOW_name_key_in_sqlj_object_type7284);
			name_key465=name_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_name_key.add(name_key465.getTree());
			pushFollow(FOLLOW_expression_in_sqlj_object_type7286);
			expression466=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression466.getTree());
			pushFollow(FOLLOW_language_key_in_sqlj_object_type7288);
			language_key467=language_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_language_key.add(language_key467.getTree());
			pushFollow(FOLLOW_java_key_in_sqlj_object_type7290);
			java_key468=java_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_java_key.add(java_key468.getTree());
			pushFollow(FOLLOW_using_key_in_sqlj_object_type7292);
			using_key469=using_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_using_key.add(using_key469.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:732:75: ( sqldata_key | customdatum_key | oradata_key )
			int alt131=3;
			int LA131_0 = input.LA(1);
			if ( (LA131_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("customdatum"))||(input.LT(1).getText().equalsIgnoreCase("sqldata"))||(input.LT(1).getText().equalsIgnoreCase("oradata"))))) {
				int LA131_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("sqldata"))) ) {
					alt131=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("customdatum"))) ) {
					alt131=2;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("oradata"))) ) {
					alt131=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 131, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt131) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:732:76: sqldata_key
					{
					pushFollow(FOLLOW_sqldata_key_in_sqlj_object_type7295);
					sqldata_key470=sqldata_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sqldata_key.add(sqldata_key470.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:732:88: customdatum_key
					{
					pushFollow(FOLLOW_customdatum_key_in_sqlj_object_type7297);
					customdatum_key471=customdatum_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_customdatum_key.add(customdatum_key471.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:732:104: oradata_key
					{
					pushFollow(FOLLOW_oradata_key_in_sqlj_object_type7299);
					oradata_key472=oradata_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_oradata_key.add(oradata_key472.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: sqldata_key, oradata_key, java_key, customdatum_key, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 733:9: -> ^( java_key ^( EXPR expression ) ( sqldata_key )? ( customdatum_key )? ( oradata_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:733:12: ^( java_key ^( EXPR expression ) ( sqldata_key )? ( customdatum_key )? ( oradata_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_java_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:733:23: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:733:42: ( sqldata_key )?
				if ( stream_sqldata_key.hasNext() ) {
					adaptor.addChild(root_1, stream_sqldata_key.nextTree());
				}
				stream_sqldata_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:733:55: ( customdatum_key )?
				if ( stream_customdatum_key.hasNext() ) {
					adaptor.addChild(root_1, stream_customdatum_key.nextTree());
				}
				stream_customdatum_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:733:72: ( oradata_key )?
				if ( stream_oradata_key.hasNext() ) {
					adaptor.addChild(root_1, stream_oradata_key.nextTree());
				}
				stream_oradata_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type"


	public static class type_body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "type_body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:736:1: type_body : body_key type_name ( is_key | as_key ) type_body_elements ( COMMA type_body_elements )* end_key -> type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) ;
	public final PLSQLParser.type_body_return type_body() throws RecognitionException {
		PLSQLParser.type_body_return retval = new PLSQLParser.type_body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA478=null;
		ParserRuleReturnScope body_key473 =null;
		ParserRuleReturnScope type_name474 =null;
		ParserRuleReturnScope is_key475 =null;
		ParserRuleReturnScope as_key476 =null;
		ParserRuleReturnScope type_body_elements477 =null;
		ParserRuleReturnScope type_body_elements479 =null;
		ParserRuleReturnScope end_key480 =null;

		Object COMMA478_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_body_key=new RewriteRuleSubtreeStream(adaptor,"rule body_key");
		RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_type_body_elements=new RewriteRuleSubtreeStream(adaptor,"rule type_body_elements");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:737:5: ( body_key type_name ( is_key | as_key ) type_body_elements ( COMMA type_body_elements )* end_key -> type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:737:10: body_key type_name ( is_key | as_key ) type_body_elements ( COMMA type_body_elements )* end_key
			{
			pushFollow(FOLLOW_body_key_in_type_body7349);
			body_key473=body_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_body_key.add(body_key473.getTree());
			pushFollow(FOLLOW_type_name_in_type_body7351);
			type_name474=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_name.add(type_name474.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:738:9: ( is_key | as_key )
			int alt132=2;
			int LA132_0 = input.LA(1);
			if ( (LA132_0==SQL92_RESERVED_IS) ) {
				alt132=1;
			}
			else if ( (LA132_0==SQL92_RESERVED_AS) ) {
				alt132=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 132, 0, input);
				throw nvae;
			}

			switch (alt132) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:738:10: is_key
					{
					pushFollow(FOLLOW_is_key_in_type_body7362);
					is_key475=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key475.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:738:17: as_key
					{
					pushFollow(FOLLOW_as_key_in_type_body7364);
					as_key476=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key476.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_type_body_elements_in_type_body7367);
			type_body_elements477=type_body_elements();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_body_elements.add(type_body_elements477.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:738:44: ( COMMA type_body_elements )*
			loop133:
			while (true) {
				int alt133=2;
				int LA133_0 = input.LA(1);
				if ( (LA133_0==COMMA) ) {
					alt133=1;
				}

				switch (alt133) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:738:45: COMMA type_body_elements
					{
					COMMA478=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_body7370); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA478);

					pushFollow(FOLLOW_type_body_elements_in_type_body7372);
					type_body_elements479=type_body_elements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_body_elements.add(type_body_elements479.getTree());
					}
					break;

				default :
					break loop133;
				}
			}

			pushFollow(FOLLOW_end_key_in_type_body7384);
			end_key480=end_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_end_key.add(end_key480.getTree());
			// AST REWRITE
			// elements: type_name, type_body_elements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 740:9: -> type_name ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ )
			{
				adaptor.addChild(root_0, stream_type_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:740:22: ^( TYPE_BODY_ELEMENTS ( type_body_elements )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_BODY_ELEMENTS, "TYPE_BODY_ELEMENTS"), root_1);
				if ( !(stream_type_body_elements.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_type_body_elements.hasNext() ) {
					adaptor.addChild(root_1, stream_type_body_elements.nextTree());
				}
				stream_type_body_elements.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_body"


	public static class type_body_elements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "type_body_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:743:1: type_body_elements : ( map_order_func_declaration | subprog_decl_in_type );
	public final PLSQLParser.type_body_elements_return type_body_elements() throws RecognitionException {
		PLSQLParser.type_body_elements_return retval = new PLSQLParser.type_body_elements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope map_order_func_declaration481 =null;
		ParserRuleReturnScope subprog_decl_in_type482 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:744:5: ( map_order_func_declaration | subprog_decl_in_type )
			int alt134=2;
			int LA134_0 = input.LA(1);
			if ( (LA134_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
				int LA134_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
					alt134=1;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
					alt134=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 134, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA134_0==SQL92_RESERVED_ORDER) ) {
				alt134=1;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 134, 0, input);
				throw nvae;
			}

			switch (alt134) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:744:10: map_order_func_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_map_order_func_declaration_in_type_body_elements7423);
					map_order_func_declaration481=map_order_func_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_func_declaration481.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:745:10: subprog_decl_in_type
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subprog_decl_in_type_in_type_body_elements7434);
					subprog_decl_in_type482=subprog_decl_in_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subprog_decl_in_type482.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_body_elements"


	public static class map_order_func_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "map_order_func_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:748:1: map_order_func_declaration : ( map_key ^| order_key ^) member_key ! func_decl_in_type ;
	public final PLSQLParser.map_order_func_declaration_return map_order_func_declaration() throws RecognitionException {
		PLSQLParser.map_order_func_declaration_return retval = new PLSQLParser.map_order_func_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope map_key483 =null;
		ParserRuleReturnScope order_key484 =null;
		ParserRuleReturnScope member_key485 =null;
		ParserRuleReturnScope func_decl_in_type486 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:749:5: ( ( map_key ^| order_key ^) member_key ! func_decl_in_type )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:749:10: ( map_key ^| order_key ^) member_key ! func_decl_in_type
			{
			root_0 = (Object)adaptor.nil();


			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:749:10: ( map_key ^| order_key ^)
			int alt135=2;
			int LA135_0 = input.LA(1);
			if ( (LA135_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
				alt135=1;
			}
			else if ( (LA135_0==SQL92_RESERVED_ORDER) ) {
				alt135=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 135, 0, input);
				throw nvae;
			}

			switch (alt135) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:749:11: map_key ^
					{
					pushFollow(FOLLOW_map_key_in_map_order_func_declaration7455);
					map_key483=map_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(map_key483.getTree(), root_0);
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:749:20: order_key ^
					{
					pushFollow(FOLLOW_order_key_in_map_order_func_declaration7458);
					order_key484=order_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(order_key484.getTree(), root_0);
					}
					break;

			}

			pushFollow(FOLLOW_member_key_in_map_order_func_declaration7462);
			member_key485=member_key();
			state._fsp--;
			if (state.failed) return retval;
			pushFollow(FOLLOW_func_decl_in_type_in_map_order_func_declaration7465);
			func_decl_in_type486=func_decl_in_type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, func_decl_in_type486.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_func_declaration"


	public static class subprog_decl_in_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subprog_decl_in_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:752:1: subprog_decl_in_type : ( member_key ^| static_key ^) ( proc_decl_in_type | func_decl_in_type | constructor_declaration ) ;
	public final PLSQLParser.subprog_decl_in_type_return subprog_decl_in_type() throws RecognitionException {
		PLSQLParser.subprog_decl_in_type_return retval = new PLSQLParser.subprog_decl_in_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope member_key487 =null;
		ParserRuleReturnScope static_key488 =null;
		ParserRuleReturnScope proc_decl_in_type489 =null;
		ParserRuleReturnScope func_decl_in_type490 =null;
		ParserRuleReturnScope constructor_declaration491 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:753:5: ( ( member_key ^| static_key ^) ( proc_decl_in_type | func_decl_in_type | constructor_declaration ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:753:10: ( member_key ^| static_key ^) ( proc_decl_in_type | func_decl_in_type | constructor_declaration )
			{
			root_0 = (Object)adaptor.nil();


			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:753:10: ( member_key ^| static_key ^)
			int alt136=2;
			int LA136_0 = input.LA(1);
			if ( (LA136_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
				int LA136_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("member"))) ) {
					alt136=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("static"))) ) {
					alt136=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 136, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt136) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:753:11: member_key ^
					{
					pushFollow(FOLLOW_member_key_in_subprog_decl_in_type7486);
					member_key487=member_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(member_key487.getTree(), root_0);
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:753:23: static_key ^
					{
					pushFollow(FOLLOW_static_key_in_subprog_decl_in_type7489);
					static_key488=static_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(static_key488.getTree(), root_0);
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:754:5: ( proc_decl_in_type | func_decl_in_type | constructor_declaration )
			int alt137=3;
			int LA137_0 = input.LA(1);
			if ( (LA137_0==SQL92_RESERVED_PROCEDURE) ) {
				alt137=1;
			}
			else if ( (LA137_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("function"))))) {
				int LA137_2 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("function"))) ) {
					alt137=2;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("instantiable")))) ) {
					alt137=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 137, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt137) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:754:10: proc_decl_in_type
					{
					pushFollow(FOLLOW_proc_decl_in_type_in_subprog_decl_in_type7502);
					proc_decl_in_type489=proc_decl_in_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_decl_in_type489.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:755:10: func_decl_in_type
					{
					pushFollow(FOLLOW_func_decl_in_type_in_subprog_decl_in_type7513);
					func_decl_in_type490=func_decl_in_type();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, func_decl_in_type490.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:756:10: constructor_declaration
					{
					pushFollow(FOLLOW_constructor_declaration_in_subprog_decl_in_type7524);
					constructor_declaration491=constructor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_declaration491.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprog_decl_in_type"


	public static class proc_decl_in_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "proc_decl_in_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:759:1: proc_decl_in_type : procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( is_key | as_key ) ( call_spec | block SEMICOLON ) -> {mode == 1}? ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) ) -> ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( BODY_MODE block ) ) ;
	public final PLSQLParser.proc_decl_in_type_return proc_decl_in_type() throws RecognitionException {
		PLSQLParser.proc_decl_in_type_return retval = new PLSQLParser.proc_decl_in_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN494=null;
		Token COMMA496=null;
		Token RIGHT_PAREN498=null;
		Token SEMICOLON503=null;
		ParserRuleReturnScope procedure_key492 =null;
		ParserRuleReturnScope procedure_name493 =null;
		ParserRuleReturnScope type_elements_parameter495 =null;
		ParserRuleReturnScope type_elements_parameter497 =null;
		ParserRuleReturnScope is_key499 =null;
		ParserRuleReturnScope as_key500 =null;
		ParserRuleReturnScope call_spec501 =null;
		ParserRuleReturnScope block502 =null;

		Object LEFT_PAREN494_tree=null;
		Object COMMA496_tree=null;
		Object RIGHT_PAREN498_tree=null;
		Object SEMICOLON503_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
		RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
		RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:761:5: ( procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( is_key | as_key ) ( call_spec | block SEMICOLON ) -> {mode == 1}? ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) ) -> ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( BODY_MODE block ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:761:10: procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( is_key | as_key ) ( call_spec | block SEMICOLON )
			{
			pushFollow(FOLLOW_procedure_key_in_proc_decl_in_type7553);
			procedure_key492=procedure_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key492.getTree());
			pushFollow(FOLLOW_procedure_name_in_proc_decl_in_type7555);
			procedure_name493=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name493.getTree());
			LEFT_PAREN494=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_proc_decl_in_type7565); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN494);

			pushFollow(FOLLOW_type_elements_parameter_in_proc_decl_in_type7567);
			type_elements_parameter495=type_elements_parameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter495.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:762:44: ( COMMA type_elements_parameter )*
			loop138:
			while (true) {
				int alt138=2;
				int LA138_0 = input.LA(1);
				if ( (LA138_0==COMMA) ) {
					alt138=1;
				}

				switch (alt138) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:762:45: COMMA type_elements_parameter
					{
					COMMA496=(Token)match(input,COMMA,FOLLOW_COMMA_in_proc_decl_in_type7570); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA496);

					pushFollow(FOLLOW_type_elements_parameter_in_proc_decl_in_type7572);
					type_elements_parameter497=type_elements_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter497.getTree());
					}
					break;

				default :
					break loop138;
				}
			}

			RIGHT_PAREN498=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_proc_decl_in_type7576); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN498);

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:763:9: ( is_key | as_key )
			int alt139=2;
			int LA139_0 = input.LA(1);
			if ( (LA139_0==SQL92_RESERVED_IS) ) {
				alt139=1;
			}
			else if ( (LA139_0==SQL92_RESERVED_AS) ) {
				alt139=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 139, 0, input);
				throw nvae;
			}

			switch (alt139) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:763:10: is_key
					{
					pushFollow(FOLLOW_is_key_in_proc_decl_in_type7587);
					is_key499=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key499.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:763:17: as_key
					{
					pushFollow(FOLLOW_as_key_in_proc_decl_in_type7589);
					as_key500=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key500.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:764:13: ( call_spec | block SEMICOLON )
			int alt140=2;
			int LA140_0 = input.LA(1);
			if ( (LA140_0==REGULAR_ID) ) {
				int LA140_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
					alt140=1;
				}
				else if ( (true) ) {
					alt140=2;
				}

			}
			else if ( (LA140_0==BINDVAR||LA140_0==COLON||LA140_0==DELIMITED_ID||LA140_0==INTRODUCER||LA140_0==SQL92_RESERVED_BEGIN||LA140_0==SQL92_RESERVED_CREATE||LA140_0==SQL92_RESERVED_CURSOR||LA140_0==SQL92_RESERVED_DECLARE||LA140_0==SQL92_RESERVED_PROCEDURE) ) {
				alt140=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 140, 0, input);
				throw nvae;
			}

			switch (alt140) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:764:14: call_spec
					{
					pushFollow(FOLLOW_call_spec_in_proc_decl_in_type7606);
					call_spec501=call_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_call_spec.add(call_spec501.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:764:36: block SEMICOLON
					{
					pushFollow(FOLLOW_block_in_proc_decl_in_type7610);
					block502=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block502.getTree());
					SEMICOLON503=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_proc_decl_in_type7612); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON503);

					}
					break;

			}

			// AST REWRITE
			// elements: type_elements_parameter, call_spec, procedure_name, block, procedure_name, type_elements_parameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 765:9: -> {mode == 1}? ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:765:25: ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_PROCEDURE, "CREATE_PROCEDURE"), root_1);
				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:765:59: ^( PARAMETERS ( type_elements_parameter )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				if ( !(stream_type_elements_parameter.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:765:98: ^( CALL_MODE call_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(CALL_MODE, "CALL_MODE"), root_2);
				adaptor.addChild(root_2, stream_call_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 766:9: -> ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( BODY_MODE block ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:766:12: ^( CREATE_PROCEDURE procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( BODY_MODE block ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_PROCEDURE, "CREATE_PROCEDURE"), root_1);
				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:766:46: ^( PARAMETERS ( type_elements_parameter )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				if ( !(stream_type_elements_parameter.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:766:85: ^( BODY_MODE block )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BODY_MODE, "BODY_MODE"), root_2);
				adaptor.addChild(root_2, stream_block.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "proc_decl_in_type"


	public static class func_decl_in_type_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "func_decl_in_type"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:769:1: func_decl_in_type : function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key type_spec ( is_key | as_key ) ( call_spec | block SEMICOLON ) -> {mode == 1}? ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE block ) ) ;
	public final PLSQLParser.func_decl_in_type_return func_decl_in_type() throws RecognitionException {
		PLSQLParser.func_decl_in_type_return retval = new PLSQLParser.func_decl_in_type_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN506=null;
		Token COMMA508=null;
		Token RIGHT_PAREN510=null;
		Token SEMICOLON517=null;
		ParserRuleReturnScope function_key504 =null;
		ParserRuleReturnScope function_name505 =null;
		ParserRuleReturnScope type_elements_parameter507 =null;
		ParserRuleReturnScope type_elements_parameter509 =null;
		ParserRuleReturnScope return_key511 =null;
		ParserRuleReturnScope type_spec512 =null;
		ParserRuleReturnScope is_key513 =null;
		ParserRuleReturnScope as_key514 =null;
		ParserRuleReturnScope call_spec515 =null;
		ParserRuleReturnScope block516 =null;

		Object LEFT_PAREN506_tree=null;
		Object COMMA508_tree=null;
		Object RIGHT_PAREN510_tree=null;
		Object SEMICOLON517_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
		RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
		RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:771:5: ( function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key type_spec ( is_key | as_key ) ( call_spec | block SEMICOLON ) -> {mode == 1}? ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE block ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:771:10: function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key type_spec ( is_key | as_key ) ( call_spec | block SEMICOLON )
			{
			pushFollow(FOLLOW_function_key_in_func_decl_in_type7701);
			function_key504=function_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_key.add(function_key504.getTree());
			pushFollow(FOLLOW_function_name_in_func_decl_in_type7703);
			function_name505=function_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_name.add(function_name505.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:772:9: ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )?
			int alt142=2;
			int LA142_0 = input.LA(1);
			if ( (LA142_0==LEFT_PAREN) ) {
				alt142=1;
			}
			switch (alt142) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:772:10: LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN
					{
					LEFT_PAREN506=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_func_decl_in_type7715); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN506);

					pushFollow(FOLLOW_type_elements_parameter_in_func_decl_in_type7717);
					type_elements_parameter507=type_elements_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter507.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:772:45: ( COMMA type_elements_parameter )*
					loop141:
					while (true) {
						int alt141=2;
						int LA141_0 = input.LA(1);
						if ( (LA141_0==COMMA) ) {
							alt141=1;
						}

						switch (alt141) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:772:46: COMMA type_elements_parameter
							{
							COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_decl_in_type7720); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA508);

							pushFollow(FOLLOW_type_elements_parameter_in_func_decl_in_type7722);
							type_elements_parameter509=type_elements_parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter509.getTree());
							}
							break;

						default :
							break loop141;
						}
					}

					RIGHT_PAREN510=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_func_decl_in_type7726); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN510);

					}
					break;

			}

			pushFollow(FOLLOW_return_key_in_func_decl_in_type7739);
			return_key511=return_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_return_key.add(return_key511.getTree());
			pushFollow(FOLLOW_type_spec_in_func_decl_in_type7741);
			type_spec512=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec512.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:774:9: ( is_key | as_key )
			int alt143=2;
			int LA143_0 = input.LA(1);
			if ( (LA143_0==SQL92_RESERVED_IS) ) {
				alt143=1;
			}
			else if ( (LA143_0==SQL92_RESERVED_AS) ) {
				alt143=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 143, 0, input);
				throw nvae;
			}

			switch (alt143) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:774:10: is_key
					{
					pushFollow(FOLLOW_is_key_in_func_decl_in_type7752);
					is_key513=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key513.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:774:17: as_key
					{
					pushFollow(FOLLOW_as_key_in_func_decl_in_type7754);
					as_key514=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key514.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:775:13: ( call_spec | block SEMICOLON )
			int alt144=2;
			int LA144_0 = input.LA(1);
			if ( (LA144_0==REGULAR_ID) ) {
				int LA144_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
					alt144=1;
				}
				else if ( (true) ) {
					alt144=2;
				}

			}
			else if ( (LA144_0==BINDVAR||LA144_0==COLON||LA144_0==DELIMITED_ID||LA144_0==INTRODUCER||LA144_0==SQL92_RESERVED_BEGIN||LA144_0==SQL92_RESERVED_CREATE||LA144_0==SQL92_RESERVED_CURSOR||LA144_0==SQL92_RESERVED_DECLARE||LA144_0==SQL92_RESERVED_PROCEDURE) ) {
				alt144=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 144, 0, input);
				throw nvae;
			}

			switch (alt144) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:775:14: call_spec
					{
					pushFollow(FOLLOW_call_spec_in_func_decl_in_type7770);
					call_spec515=call_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_call_spec.add(call_spec515.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:775:36: block SEMICOLON
					{
					pushFollow(FOLLOW_block_in_func_decl_in_type7774);
					block516=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block516.getTree());
					SEMICOLON517=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_func_decl_in_type7776); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON517);

					}
					break;

			}

			// AST REWRITE
			// elements: call_spec, type_spec, block, function_name, type_elements_parameter, function_name, type_spec, type_elements_parameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 776:9: -> {mode == 1}? ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:776:25: ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_FUNCTION, "CREATE_FUNCTION"), root_1);
				adaptor.addChild(root_1, stream_function_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:776:67: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:776:80: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:776:106: ^( CALL_MODE call_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(CALL_MODE, "CALL_MODE"), root_2);
				adaptor.addChild(root_2, stream_call_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 777:9: -> ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE block ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:777:12: ^( CREATE_FUNCTION function_name type_spec ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE block ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_FUNCTION, "CREATE_FUNCTION"), root_1);
				adaptor.addChild(root_1, stream_function_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:777:54: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:777:67: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:777:93: ^( BODY_MODE block )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BODY_MODE, "BODY_MODE"), root_2);
				adaptor.addChild(root_2, stream_block.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "func_decl_in_type"


	public static class constructor_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constructor_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:780:1: constructor_declaration : ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( is_key | as_key ) ( call_spec | ( declare_key )? block SEMICOLON ) -> {mode == 1}? ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE block ) ) ;
	public final PLSQLParser.constructor_declaration_return constructor_declaration() throws RecognitionException {
		PLSQLParser.constructor_declaration_return retval = new PLSQLParser.constructor_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN523=null;
		Token COMMA528=null;
		Token COMMA530=null;
		Token RIGHT_PAREN532=null;
		Token SEMICOLON542=null;
		ParserRuleReturnScope final_key518 =null;
		ParserRuleReturnScope instantiable_key519 =null;
		ParserRuleReturnScope constructor_key520 =null;
		ParserRuleReturnScope function_key521 =null;
		ParserRuleReturnScope type_spec522 =null;
		ParserRuleReturnScope self_key524 =null;
		ParserRuleReturnScope in_key525 =null;
		ParserRuleReturnScope out_key526 =null;
		ParserRuleReturnScope type_spec527 =null;
		ParserRuleReturnScope type_elements_parameter529 =null;
		ParserRuleReturnScope type_elements_parameter531 =null;
		ParserRuleReturnScope return_key533 =null;
		ParserRuleReturnScope self_key534 =null;
		ParserRuleReturnScope as_key535 =null;
		ParserRuleReturnScope result_key536 =null;
		ParserRuleReturnScope is_key537 =null;
		ParserRuleReturnScope as_key538 =null;
		ParserRuleReturnScope call_spec539 =null;
		ParserRuleReturnScope declare_key540 =null;
		ParserRuleReturnScope block541 =null;

		Object LEFT_PAREN523_tree=null;
		Object COMMA528_tree=null;
		Object COMMA530_tree=null;
		Object RIGHT_PAREN532_tree=null;
		Object SEMICOLON542_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
		RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
		RewriteRuleSubtreeStream stream_out_key=new RewriteRuleSubtreeStream(adaptor,"rule out_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_constructor_key=new RewriteRuleSubtreeStream(adaptor,"rule constructor_key");
		RewriteRuleSubtreeStream stream_final_key=new RewriteRuleSubtreeStream(adaptor,"rule final_key");
		RewriteRuleSubtreeStream stream_instantiable_key=new RewriteRuleSubtreeStream(adaptor,"rule instantiable_key");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
		RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
		RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
		RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
		RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
		RewriteRuleSubtreeStream stream_self_key=new RewriteRuleSubtreeStream(adaptor,"rule self_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:782:5: ( ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( is_key | as_key ) ( call_spec | ( declare_key )? block SEMICOLON ) -> {mode == 1}? ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE block ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:782:10: ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( is_key | as_key ) ( call_spec | ( declare_key )? block SEMICOLON )
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:782:10: ( final_key )?
			int alt145=2;
			int LA145_0 = input.LA(1);
			if ( (LA145_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
				int LA145_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("final"))) ) {
					alt145=1;
				}
			}
			switch (alt145) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:782:10: final_key
					{
					pushFollow(FOLLOW_final_key_in_constructor_declaration7869);
					final_key518=final_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_final_key.add(final_key518.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:782:21: ( instantiable_key )?
			int alt146=2;
			int LA146_0 = input.LA(1);
			if ( (LA146_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
				int LA146_1 = input.LA(2);
				if ( (LA146_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
					int LA146_2 = input.LA(3);
					if ( (LA146_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
						int LA146_3 = input.LA(4);
						if ( ((input.LT(1).getText().equalsIgnoreCase("instantiable"))) ) {
							alt146=1;
						}
					}
				}
			}
			switch (alt146) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:782:21: instantiable_key
					{
					pushFollow(FOLLOW_instantiable_key_in_constructor_declaration7872);
					instantiable_key519=instantiable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_instantiable_key.add(instantiable_key519.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_constructor_key_in_constructor_declaration7875);
			constructor_key520=constructor_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constructor_key.add(constructor_key520.getTree());
			pushFollow(FOLLOW_function_key_in_constructor_declaration7877);
			function_key521=function_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_key.add(function_key521.getTree());
			pushFollow(FOLLOW_type_spec_in_constructor_declaration7879);
			type_spec522=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec522.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:783:9: ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )?
			int alt148=2;
			int LA148_0 = input.LA(1);
			if ( (LA148_0==LEFT_PAREN) ) {
				alt148=1;
			}
			switch (alt148) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:783:10: LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN
					{
					LEFT_PAREN523=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constructor_declaration7890); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN523);

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:783:21: ( self_key in_key out_key type_spec COMMA )
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:783:22: self_key in_key out_key type_spec COMMA
					{
					pushFollow(FOLLOW_self_key_in_constructor_declaration7893);
					self_key524=self_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_self_key.add(self_key524.getTree());
					pushFollow(FOLLOW_in_key_in_constructor_declaration7895);
					in_key525=in_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_in_key.add(in_key525.getTree());
					pushFollow(FOLLOW_out_key_in_constructor_declaration7897);
					out_key526=out_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_out_key.add(out_key526.getTree());
					pushFollow(FOLLOW_type_spec_in_constructor_declaration7899);
					type_spec527=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec527.getTree());
					COMMA528=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_declaration7901); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA528);

					}

					pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration7904);
					type_elements_parameter529=type_elements_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter529.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:783:87: ( COMMA type_elements_parameter )*
					loop147:
					while (true) {
						int alt147=2;
						int LA147_0 = input.LA(1);
						if ( (LA147_0==COMMA) ) {
							alt147=1;
						}

						switch (alt147) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:783:88: COMMA type_elements_parameter
							{
							COMMA530=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_declaration7907); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA530);

							pushFollow(FOLLOW_type_elements_parameter_in_constructor_declaration7909);
							type_elements_parameter531=type_elements_parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter531.getTree());
							}
							break;

						default :
							break loop147;
						}
					}

					RIGHT_PAREN532=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constructor_declaration7914); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN532);

					}
					break;

			}

			pushFollow(FOLLOW_return_key_in_constructor_declaration7926);
			return_key533=return_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_return_key.add(return_key533.getTree());
			pushFollow(FOLLOW_self_key_in_constructor_declaration7928);
			self_key534=self_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_self_key.add(self_key534.getTree());
			pushFollow(FOLLOW_as_key_in_constructor_declaration7930);
			as_key535=as_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_as_key.add(as_key535.getTree());
			pushFollow(FOLLOW_result_key_in_constructor_declaration7932);
			result_key536=result_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_result_key.add(result_key536.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:785:9: ( is_key | as_key )
			int alt149=2;
			int LA149_0 = input.LA(1);
			if ( (LA149_0==SQL92_RESERVED_IS) ) {
				alt149=1;
			}
			else if ( (LA149_0==SQL92_RESERVED_AS) ) {
				alt149=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 149, 0, input);
				throw nvae;
			}

			switch (alt149) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:785:10: is_key
					{
					pushFollow(FOLLOW_is_key_in_constructor_declaration7944);
					is_key537=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key537.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:785:17: as_key
					{
					pushFollow(FOLLOW_as_key_in_constructor_declaration7946);
					as_key538=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key538.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:786:13: ( call_spec | ( declare_key )? block SEMICOLON )
			int alt151=2;
			int LA151_0 = input.LA(1);
			if ( (LA151_0==REGULAR_ID) ) {
				int LA151_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("language"))) ) {
					alt151=1;
				}
				else if ( (true) ) {
					alt151=2;
				}

			}
			else if ( (LA151_0==BINDVAR||LA151_0==COLON||LA151_0==DELIMITED_ID||LA151_0==INTRODUCER||LA151_0==SQL92_RESERVED_BEGIN||LA151_0==SQL92_RESERVED_CREATE||LA151_0==SQL92_RESERVED_CURSOR||LA151_0==SQL92_RESERVED_DECLARE||LA151_0==SQL92_RESERVED_PROCEDURE) ) {
				alt151=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 151, 0, input);
				throw nvae;
			}

			switch (alt151) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:786:14: call_spec
					{
					pushFollow(FOLLOW_call_spec_in_constructor_declaration7963);
					call_spec539=call_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_call_spec.add(call_spec539.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:786:36: ( declare_key )? block SEMICOLON
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:786:36: ( declare_key )?
					int alt150=2;
					int LA150_0 = input.LA(1);
					if ( (LA150_0==SQL92_RESERVED_DECLARE) ) {
						alt150=1;
					}
					switch (alt150) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:786:36: declare_key
							{
							pushFollow(FOLLOW_declare_key_in_constructor_declaration7967);
							declare_key540=declare_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_declare_key.add(declare_key540.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_block_in_constructor_declaration7970);
					block541=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_block.add(block541.getTree());
					SEMICOLON542=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_constructor_declaration7972); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON542);

					}
					break;

			}

			// AST REWRITE
			// elements: constructor_key, final_key, type_spec, instantiable_key, call_spec, final_key, block, type_spec, type_elements_parameter, type_elements_parameter, constructor_key, instantiable_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 787:9: -> {mode == 1}? ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:787:25: ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_constructor_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:787:53: ( final_key )?
				if ( stream_final_key.hasNext() ) {
					adaptor.addChild(root_1, stream_final_key.nextTree());
				}
				stream_final_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:787:64: ( instantiable_key )?
				if ( stream_instantiable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_instantiable_key.nextTree());
				}
				stream_instantiable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:787:82: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:787:95: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:787:121: ^( CALL_MODE call_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(CALL_MODE, "CALL_MODE"), root_2);
				adaptor.addChild(root_2, stream_call_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 788:9: -> ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE block ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:788:12: ^( constructor_key type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( BODY_MODE block ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_constructor_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:788:40: ( final_key )?
				if ( stream_final_key.hasNext() ) {
					adaptor.addChild(root_1, stream_final_key.nextTree());
				}
				stream_final_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:788:51: ( instantiable_key )?
				if ( stream_instantiable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_instantiable_key.nextTree());
				}
				stream_instantiable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:788:69: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:788:82: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:788:108: ^( BODY_MODE block )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BODY_MODE, "BODY_MODE"), root_2);
				adaptor.addChild(root_2, stream_block.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_declaration"


	public static class modifier_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "modifier_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:795:1: modifier_clause : ( not_key )? ( instantiable_key | final_key | overriding_key ) -> ^( MODIFIER ( not_key )? ( instantiable_key )? ( final_key )? ( overriding_key )? ) ;
	public final PLSQLParser.modifier_clause_return modifier_clause() throws RecognitionException {
		PLSQLParser.modifier_clause_return retval = new PLSQLParser.modifier_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope not_key543 =null;
		ParserRuleReturnScope instantiable_key544 =null;
		ParserRuleReturnScope final_key545 =null;
		ParserRuleReturnScope overriding_key546 =null;

		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_instantiable_key=new RewriteRuleSubtreeStream(adaptor,"rule instantiable_key");
		RewriteRuleSubtreeStream stream_final_key=new RewriteRuleSubtreeStream(adaptor,"rule final_key");
		RewriteRuleSubtreeStream stream_overriding_key=new RewriteRuleSubtreeStream(adaptor,"rule overriding_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:796:5: ( ( not_key )? ( instantiable_key | final_key | overriding_key ) -> ^( MODIFIER ( not_key )? ( instantiable_key )? ( final_key )? ( overriding_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:796:10: ( not_key )? ( instantiable_key | final_key | overriding_key )
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:796:10: ( not_key )?
			int alt152=2;
			int LA152_0 = input.LA(1);
			if ( (LA152_0==SQL92_RESERVED_NOT) ) {
				alt152=1;
			}
			switch (alt152) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:796:10: not_key
					{
					pushFollow(FOLLOW_not_key_in_modifier_clause8069);
					not_key543=not_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_not_key.add(not_key543.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:796:19: ( instantiable_key | final_key | overriding_key )
			int alt153=3;
			int LA153_0 = input.LA(1);
			if ( (LA153_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
				int LA153_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("instantiable"))) ) {
					alt153=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("final"))) ) {
					alt153=2;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("overriding"))) ) {
					alt153=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 153, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt153) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:796:20: instantiable_key
					{
					pushFollow(FOLLOW_instantiable_key_in_modifier_clause8073);
					instantiable_key544=instantiable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_instantiable_key.add(instantiable_key544.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:796:37: final_key
					{
					pushFollow(FOLLOW_final_key_in_modifier_clause8075);
					final_key545=final_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_final_key.add(final_key545.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:796:47: overriding_key
					{
					pushFollow(FOLLOW_overriding_key_in_modifier_clause8077);
					overriding_key546=overriding_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_overriding_key.add(overriding_key546.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: not_key, overriding_key, final_key, instantiable_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 797:5: -> ^( MODIFIER ( not_key )? ( instantiable_key )? ( final_key )? ( overriding_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:797:11: ^( MODIFIER ( not_key )? ( instantiable_key )? ( final_key )? ( overriding_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIER, "MODIFIER"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:797:22: ( not_key )?
				if ( stream_not_key.hasNext() ) {
					adaptor.addChild(root_1, stream_not_key.nextTree());
				}
				stream_not_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:797:31: ( instantiable_key )?
				if ( stream_instantiable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_instantiable_key.nextTree());
				}
				stream_instantiable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:797:49: ( final_key )?
				if ( stream_final_key.hasNext() ) {
					adaptor.addChild(root_1, stream_final_key.nextTree());
				}
				stream_final_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:797:60: ( overriding_key )?
				if ( stream_overriding_key.hasNext() ) {
					adaptor.addChild(root_1, stream_overriding_key.nextTree());
				}
				stream_overriding_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "modifier_clause"


	public static class object_member_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "object_member_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:800:1: object_member_spec options {backtrack=true; } : ( id type_spec ( sqlj_object_type_attr )? -> ^( ELEMENT_SPEC ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) ) | element_spec );
	public final PLSQLParser.object_member_spec_return object_member_spec() throws RecognitionException {
		PLSQLParser.object_member_spec_return retval = new PLSQLParser.object_member_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope id547 =null;
		ParserRuleReturnScope type_spec548 =null;
		ParserRuleReturnScope sqlj_object_type_attr549 =null;
		ParserRuleReturnScope element_spec550 =null;

		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_sqlj_object_type_attr=new RewriteRuleSubtreeStream(adaptor,"rule sqlj_object_type_attr");
		RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:6: ( id type_spec ( sqlj_object_type_attr )? -> ^( ELEMENT_SPEC ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) ) | element_spec )
			int alt155=2;
			switch ( input.LA(1) ) {
			case DELIMITED_ID:
			case INTRODUCER:
				{
				alt155=1;
				}
				break;
			case REGULAR_ID:
				{
				int LA155_2 = input.LA(2);
				if ( (synpred38_PLSQLParser()) ) {
					alt155=1;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map")))) ) {
					alt155=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 155, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_NOT:
			case SQL92_RESERVED_ORDER:
				{
				alt155=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 155, 0, input);
				throw nvae;
			}
			switch (alt155) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:11: id type_spec ( sqlj_object_type_attr )?
					{
					pushFollow(FOLLOW_id_in_object_member_spec8131);
					id547=id();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id.add(id547.getTree());
					pushFollow(FOLLOW_type_spec_in_object_member_spec8133);
					type_spec548=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec548.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:24: ( sqlj_object_type_attr )?
					int alt154=2;
					int LA154_0 = input.LA(1);
					if ( (LA154_0==REGULAR_ID) ) {
						alt154=1;
					}
					switch (alt154) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:24: sqlj_object_type_attr
							{
							pushFollow(FOLLOW_sqlj_object_type_attr_in_object_member_spec8135);
							sqlj_object_type_attr549=sqlj_object_type_attr();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_sqlj_object_type_attr.add(sqlj_object_type_attr549.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: sqlj_object_type_attr, id, type_spec
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 803:47: -> ^( ELEMENT_SPEC ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:50: ^( ELEMENT_SPEC ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ELEMENT_SPEC, "ELEMENT_SPEC"), root_1);
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:65: ^( FIELD_SPEC id type_spec ( sqlj_object_type_attr )? )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD_SPEC, "FIELD_SPEC"), root_2);
						adaptor.addChild(root_2, stream_id.nextTree());
						adaptor.addChild(root_2, stream_type_spec.nextTree());
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:91: ( sqlj_object_type_attr )?
						if ( stream_sqlj_object_type_attr.hasNext() ) {
							adaptor.addChild(root_2, stream_sqlj_object_type_attr.nextTree());
						}
						stream_sqlj_object_type_attr.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:804:10: element_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_element_spec_in_object_member_spec8164);
					element_spec550=element_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, element_spec550.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "object_member_spec"


	public static class sqlj_object_type_attr_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "sqlj_object_type_attr"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:807:1: sqlj_object_type_attr : external_key name_key expression -> ^( external_key ^( EXPR expression ) ) ;
	public final PLSQLParser.sqlj_object_type_attr_return sqlj_object_type_attr() throws RecognitionException {
		PLSQLParser.sqlj_object_type_attr_return retval = new PLSQLParser.sqlj_object_type_attr_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope external_key551 =null;
		ParserRuleReturnScope name_key552 =null;
		ParserRuleReturnScope expression553 =null;

		RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
		RewriteRuleSubtreeStream stream_external_key=new RewriteRuleSubtreeStream(adaptor,"rule external_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:808:5: ( external_key name_key expression -> ^( external_key ^( EXPR expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:808:10: external_key name_key expression
			{
			pushFollow(FOLLOW_external_key_in_sqlj_object_type_attr8184);
			external_key551=external_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_external_key.add(external_key551.getTree());
			pushFollow(FOLLOW_name_key_in_sqlj_object_type_attr8186);
			name_key552=name_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_name_key.add(name_key552.getTree());
			pushFollow(FOLLOW_expression_in_sqlj_object_type_attr8188);
			expression553=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression553.getTree());
			// AST REWRITE
			// elements: external_key, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 809:9: -> ^( external_key ^( EXPR expression ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:809:12: ^( external_key ^( EXPR expression ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_external_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:809:27: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlj_object_type_attr"


	public static class element_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "element_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:812:1: element_spec : ( modifier_clause )? ( element_spec_options )+ ( COMMA pragma_clause )? -> ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) ;
	public final PLSQLParser.element_spec_return element_spec() throws RecognitionException {
		PLSQLParser.element_spec_return retval = new PLSQLParser.element_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA556=null;
		ParserRuleReturnScope modifier_clause554 =null;
		ParserRuleReturnScope element_spec_options555 =null;
		ParserRuleReturnScope pragma_clause557 =null;

		Object COMMA556_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_modifier_clause=new RewriteRuleSubtreeStream(adaptor,"rule modifier_clause");
		RewriteRuleSubtreeStream stream_pragma_clause=new RewriteRuleSubtreeStream(adaptor,"rule pragma_clause");
		RewriteRuleSubtreeStream stream_element_spec_options=new RewriteRuleSubtreeStream(adaptor,"rule element_spec_options");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:813:5: ( ( modifier_clause )? ( element_spec_options )+ ( COMMA pragma_clause )? -> ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:813:10: ( modifier_clause )? ( element_spec_options )+ ( COMMA pragma_clause )?
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:813:10: ( modifier_clause )?
			int alt156=2;
			int LA156_0 = input.LA(1);
			if ( (LA156_0==SQL92_RESERVED_NOT) ) {
				alt156=1;
			}
			else if ( (LA156_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
				int LA156_2 = input.LA(2);
				if ( (((input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("overriding"))||(input.LT(1).getText().equalsIgnoreCase("instantiable")))) ) {
					alt156=1;
				}
			}
			switch (alt156) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:813:10: modifier_clause
					{
					pushFollow(FOLLOW_modifier_clause_in_element_spec8228);
					modifier_clause554=modifier_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_modifier_clause.add(modifier_clause554.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:814:9: ( element_spec_options )+
			int cnt157=0;
			loop157:
			while (true) {
				int alt157=2;
				int LA157_0 = input.LA(1);
				if ( (LA157_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
					alt157=1;
				}
				else if ( (LA157_0==SQL92_RESERVED_ORDER) ) {
					alt157=1;
				}

				switch (alt157) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:814:9: element_spec_options
					{
					pushFollow(FOLLOW_element_spec_options_in_element_spec8239);
					element_spec_options555=element_spec_options();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_element_spec_options.add(element_spec_options555.getTree());
					}
					break;

				default :
					if ( cnt157 >= 1 ) break loop157;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(157, input);
					throw eee;
				}
				cnt157++;
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:815:9: ( COMMA pragma_clause )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==COMMA) ) {
				int LA158_1 = input.LA(2);
				if ( (LA158_1==REGULAR_ID) ) {
					int LA158_3 = input.LA(3);
					if ( (LA158_3==REGULAR_ID) ) {
						int LA158_4 = input.LA(4);
						if ( (LA158_4==LEFT_PAREN) ) {
							int LA158_5 = input.LA(5);
							if ( (LA158_5==DELIMITED_ID||LA158_5==INTRODUCER||LA158_5==REGULAR_ID||LA158_5==SQL92_RESERVED_DEFAULT) ) {
								alt158=1;
							}
						}
					}
				}
			}
			switch (alt158) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:815:10: COMMA pragma_clause
					{
					COMMA556=(Token)match(input,COMMA,FOLLOW_COMMA_in_element_spec8251); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA556);

					pushFollow(FOLLOW_pragma_clause_in_element_spec8253);
					pragma_clause557=pragma_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pragma_clause.add(pragma_clause557.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: pragma_clause, element_spec_options, modifier_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 816:9: -> ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:816:12: ^( ELEMENT_SPEC ( element_spec_options )+ ( modifier_clause )? ( pragma_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ELEMENT_SPEC, "ELEMENT_SPEC"), root_1);
				if ( !(stream_element_spec_options.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_element_spec_options.hasNext() ) {
					adaptor.addChild(root_1, stream_element_spec_options.nextTree());
				}
				stream_element_spec_options.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:816:49: ( modifier_clause )?
				if ( stream_modifier_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_modifier_clause.nextTree());
				}
				stream_modifier_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:816:66: ( pragma_clause )?
				if ( stream_pragma_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_pragma_clause.nextTree());
				}
				stream_pragma_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec"


	public static class element_spec_options_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "element_spec_options"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:819:1: element_spec_options : ( subprogram_spec | constructor_spec | map_order_function_spec );
	public final PLSQLParser.element_spec_options_return element_spec_options() throws RecognitionException {
		PLSQLParser.element_spec_options_return retval = new PLSQLParser.element_spec_options_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope subprogram_spec558 =null;
		ParserRuleReturnScope constructor_spec559 =null;
		ParserRuleReturnScope map_order_function_spec560 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:820:5: ( subprogram_spec | constructor_spec | map_order_function_spec )
			int alt159=3;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))||(input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))||(input.LT(1).getText().equalsIgnoreCase("map"))))) {
				int LA159_1 = input.LA(2);
				if ( (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member")))) ) {
					alt159=1;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("instantiable")))) ) {
					alt159=2;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("map"))) ) {
					alt159=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 159, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA159_0==SQL92_RESERVED_ORDER) ) {
				alt159=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 159, 0, input);
				throw nvae;
			}

			switch (alt159) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:820:10: subprogram_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subprogram_spec_in_element_spec_options8298);
					subprogram_spec558=subprogram_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subprogram_spec558.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:821:10: constructor_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_constructor_spec_in_element_spec_options8309);
					constructor_spec559=constructor_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, constructor_spec559.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:822:10: map_order_function_spec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_map_order_function_spec_in_element_spec_options8320);
					map_order_function_spec560=map_order_function_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, map_order_function_spec560.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "element_spec_options"


	public static class subprogram_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subprogram_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:825:1: subprogram_spec : ( member_key ^| static_key ^) ( type_procedure_spec | type_function_spec ) ;
	public final PLSQLParser.subprogram_spec_return subprogram_spec() throws RecognitionException {
		PLSQLParser.subprogram_spec_return retval = new PLSQLParser.subprogram_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope member_key561 =null;
		ParserRuleReturnScope static_key562 =null;
		ParserRuleReturnScope type_procedure_spec563 =null;
		ParserRuleReturnScope type_function_spec564 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:826:5: ( ( member_key ^| static_key ^) ( type_procedure_spec | type_function_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:826:10: ( member_key ^| static_key ^) ( type_procedure_spec | type_function_spec )
			{
			root_0 = (Object)adaptor.nil();


			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:826:10: ( member_key ^| static_key ^)
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("static"))||(input.LT(1).getText().equalsIgnoreCase("member"))))) {
				int LA160_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("member"))) ) {
					alt160=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("static"))) ) {
					alt160=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 160, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt160) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:826:11: member_key ^
					{
					pushFollow(FOLLOW_member_key_in_subprogram_spec8341);
					member_key561=member_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(member_key561.getTree(), root_0);
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:826:23: static_key ^
					{
					pushFollow(FOLLOW_static_key_in_subprogram_spec8344);
					static_key562=static_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(static_key562.getTree(), root_0);
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:827:9: ( type_procedure_spec | type_function_spec )
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==SQL92_RESERVED_PROCEDURE) ) {
				alt161=1;
			}
			else if ( (LA161_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("function")))) {
				alt161=2;
			}

			switch (alt161) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:827:10: type_procedure_spec
					{
					pushFollow(FOLLOW_type_procedure_spec_in_subprogram_spec8357);
					type_procedure_spec563=type_procedure_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_procedure_spec563.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:827:30: type_function_spec
					{
					pushFollow(FOLLOW_type_function_spec_in_subprogram_spec8359);
					type_function_spec564=type_function_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_function_spec564.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subprogram_spec"


	public static class type_procedure_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "type_procedure_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:830:1: type_procedure_spec : procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( ( is_key | as_key ) call_spec )? -> {mode == 1}? ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) ) -> ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ) ;
	public final PLSQLParser.type_procedure_spec_return type_procedure_spec() throws RecognitionException {
		PLSQLParser.type_procedure_spec_return retval = new PLSQLParser.type_procedure_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN567=null;
		Token COMMA569=null;
		Token RIGHT_PAREN571=null;
		ParserRuleReturnScope procedure_key565 =null;
		ParserRuleReturnScope procedure_name566 =null;
		ParserRuleReturnScope type_elements_parameter568 =null;
		ParserRuleReturnScope type_elements_parameter570 =null;
		ParserRuleReturnScope is_key572 =null;
		ParserRuleReturnScope as_key573 =null;
		ParserRuleReturnScope call_spec574 =null;

		Object LEFT_PAREN567_tree=null;
		Object COMMA569_tree=null;
		Object RIGHT_PAREN571_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
		RewriteRuleSubtreeStream stream_procedure_key=new RewriteRuleSubtreeStream(adaptor,"rule procedure_key");
		RewriteRuleSubtreeStream stream_procedure_name=new RewriteRuleSubtreeStream(adaptor,"rule procedure_name");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:832:5: ( procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( ( is_key | as_key ) call_spec )? -> {mode == 1}? ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) ) -> ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:832:10: procedure_key procedure_name LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN ( ( is_key | as_key ) call_spec )?
			{
			pushFollow(FOLLOW_procedure_key_in_type_procedure_spec8388);
			procedure_key565=procedure_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_key.add(procedure_key565.getTree());
			pushFollow(FOLLOW_procedure_name_in_type_procedure_spec8390);
			procedure_name566=procedure_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_procedure_name.add(procedure_name566.getTree());
			LEFT_PAREN567=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_type_procedure_spec8400); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN567);

			pushFollow(FOLLOW_type_elements_parameter_in_type_procedure_spec8402);
			type_elements_parameter568=type_elements_parameter();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter568.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:833:44: ( COMMA type_elements_parameter )*
			loop162:
			while (true) {
				int alt162=2;
				int LA162_0 = input.LA(1);
				if ( (LA162_0==COMMA) ) {
					alt162=1;
				}

				switch (alt162) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:833:45: COMMA type_elements_parameter
					{
					COMMA569=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_procedure_spec8405); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA569);

					pushFollow(FOLLOW_type_elements_parameter_in_type_procedure_spec8407);
					type_elements_parameter570=type_elements_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter570.getTree());
					}
					break;

				default :
					break loop162;
				}
			}

			RIGHT_PAREN571=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_type_procedure_spec8411); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN571);

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:834:9: ( ( is_key | as_key ) call_spec )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==SQL92_RESERVED_AS||LA164_0==SQL92_RESERVED_IS) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:834:10: ( is_key | as_key ) call_spec
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:834:10: ( is_key | as_key )
					int alt163=2;
					int LA163_0 = input.LA(1);
					if ( (LA163_0==SQL92_RESERVED_IS) ) {
						alt163=1;
					}
					else if ( (LA163_0==SQL92_RESERVED_AS) ) {
						alt163=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 163, 0, input);
						throw nvae;
					}

					switch (alt163) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:834:11: is_key
							{
							pushFollow(FOLLOW_is_key_in_type_procedure_spec8423);
							is_key572=is_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_is_key.add(is_key572.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:834:18: as_key
							{
							pushFollow(FOLLOW_as_key_in_type_procedure_spec8425);
							as_key573=as_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_as_key.add(as_key573.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_call_spec_in_type_procedure_spec8428);
					call_spec574=call_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_call_spec.add(call_spec574.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			// AST REWRITE
			// elements: call_spec, type_elements_parameter, procedure_name, type_elements_parameter, procedure_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 835:9: -> {mode == 1}? ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:835:24: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) ^( CALL_MODE call_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE_SPEC, "PROCEDURE_SPEC"), root_1);
				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:835:56: ^( PARAMETERS ( type_elements_parameter )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				if ( !(stream_type_elements_parameter.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:835:95: ^( CALL_MODE call_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(CALL_MODE, "CALL_MODE"), root_2);
				adaptor.addChild(root_2, stream_call_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 836:9: -> ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:836:12: ^( PROCEDURE_SPEC procedure_name ^( PARAMETERS ( type_elements_parameter )+ ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PROCEDURE_SPEC, "PROCEDURE_SPEC"), root_1);
				adaptor.addChild(root_1, stream_procedure_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:836:44: ^( PARAMETERS ( type_elements_parameter )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				if ( !(stream_type_elements_parameter.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_procedure_spec"


	public static class type_function_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "type_function_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:839:1: type_function_spec : function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key ( type_spec | self_key as_key result_key ) ( ( is_key | as_key ) call_spec | external_key ( variable_key )? name_key expression )? -> {mode == 1}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> {mode == 2}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( external_key ^( EXPR expression ) ) ) -> ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ) ;
	public final PLSQLParser.type_function_spec_return type_function_spec() throws RecognitionException {
		PLSQLParser.type_function_spec_return retval = new PLSQLParser.type_function_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN577=null;
		Token COMMA579=null;
		Token RIGHT_PAREN581=null;
		ParserRuleReturnScope function_key575 =null;
		ParserRuleReturnScope function_name576 =null;
		ParserRuleReturnScope type_elements_parameter578 =null;
		ParserRuleReturnScope type_elements_parameter580 =null;
		ParserRuleReturnScope return_key582 =null;
		ParserRuleReturnScope type_spec583 =null;
		ParserRuleReturnScope self_key584 =null;
		ParserRuleReturnScope as_key585 =null;
		ParserRuleReturnScope result_key586 =null;
		ParserRuleReturnScope is_key587 =null;
		ParserRuleReturnScope as_key588 =null;
		ParserRuleReturnScope call_spec589 =null;
		ParserRuleReturnScope external_key590 =null;
		ParserRuleReturnScope variable_key591 =null;
		ParserRuleReturnScope name_key592 =null;
		ParserRuleReturnScope expression593 =null;

		Object LEFT_PAREN577_tree=null;
		Object COMMA579_tree=null;
		Object RIGHT_PAREN581_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
		RewriteRuleSubtreeStream stream_external_key=new RewriteRuleSubtreeStream(adaptor,"rule external_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
		RewriteRuleSubtreeStream stream_variable_key=new RewriteRuleSubtreeStream(adaptor,"rule variable_key");
		RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
		RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
		RewriteRuleSubtreeStream stream_function_name=new RewriteRuleSubtreeStream(adaptor,"rule function_name");
		RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
		RewriteRuleSubtreeStream stream_self_key=new RewriteRuleSubtreeStream(adaptor,"rule self_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:841:5: ( function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key ( type_spec | self_key as_key result_key ) ( ( is_key | as_key ) call_spec | external_key ( variable_key )? name_key expression )? -> {mode == 1}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> {mode == 2}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( external_key ^( EXPR expression ) ) ) -> ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:841:10: function_key function_name ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key ( type_spec | self_key as_key result_key ) ( ( is_key | as_key ) call_spec | external_key ( variable_key )? name_key expression )?
			{
			pushFollow(FOLLOW_function_key_in_type_function_spec8513);
			function_key575=function_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_key.add(function_key575.getTree());
			pushFollow(FOLLOW_function_name_in_type_function_spec8515);
			function_name576=function_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_name.add(function_name576.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:842:9: ( LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==LEFT_PAREN) ) {
				alt166=1;
			}
			switch (alt166) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:842:10: LEFT_PAREN type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN
					{
					LEFT_PAREN577=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_type_function_spec8527); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN577);

					pushFollow(FOLLOW_type_elements_parameter_in_type_function_spec8529);
					type_elements_parameter578=type_elements_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter578.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:842:45: ( COMMA type_elements_parameter )*
					loop165:
					while (true) {
						int alt165=2;
						int LA165_0 = input.LA(1);
						if ( (LA165_0==COMMA) ) {
							alt165=1;
						}

						switch (alt165) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:842:46: COMMA type_elements_parameter
							{
							COMMA579=(Token)match(input,COMMA,FOLLOW_COMMA_in_type_function_spec8532); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA579);

							pushFollow(FOLLOW_type_elements_parameter_in_type_function_spec8534);
							type_elements_parameter580=type_elements_parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter580.getTree());
							}
							break;

						default :
							break loop165;
						}
					}

					RIGHT_PAREN581=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_type_function_spec8538); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN581);

					}
					break;

			}

			pushFollow(FOLLOW_return_key_in_type_function_spec8551);
			return_key582=return_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_return_key.add(return_key582.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:843:20: ( type_spec | self_key as_key result_key )
			int alt167=2;
			alt167 = dfa167.predict(input);
			switch (alt167) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:843:22: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_type_function_spec8555);
					type_spec583=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec583.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:843:34: self_key as_key result_key
					{
					pushFollow(FOLLOW_self_key_in_type_function_spec8559);
					self_key584=self_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_self_key.add(self_key584.getTree());
					pushFollow(FOLLOW_as_key_in_type_function_spec8561);
					as_key585=as_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_as_key.add(as_key585.getTree());
					pushFollow(FOLLOW_result_key_in_type_function_spec8563);
					result_key586=result_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_result_key.add(result_key586.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:844:9: ( ( is_key | as_key ) call_spec | external_key ( variable_key )? name_key expression )?
			int alt170=3;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==SQL92_RESERVED_AS||LA170_0==SQL92_RESERVED_IS) ) {
				alt170=1;
			}
			else if ( (LA170_0==REGULAR_ID) ) {
				int LA170_3 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("external"))) ) {
					alt170=2;
				}
			}
			switch (alt170) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:844:10: ( is_key | as_key ) call_spec
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:844:10: ( is_key | as_key )
					int alt168=2;
					int LA168_0 = input.LA(1);
					if ( (LA168_0==SQL92_RESERVED_IS) ) {
						alt168=1;
					}
					else if ( (LA168_0==SQL92_RESERVED_AS) ) {
						alt168=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 168, 0, input);
						throw nvae;
					}

					switch (alt168) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:844:11: is_key
							{
							pushFollow(FOLLOW_is_key_in_type_function_spec8576);
							is_key587=is_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_is_key.add(is_key587.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:844:18: as_key
							{
							pushFollow(FOLLOW_as_key_in_type_function_spec8578);
							as_key588=as_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_as_key.add(as_key588.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_call_spec_in_type_function_spec8581);
					call_spec589=call_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_call_spec.add(call_spec589.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:844:49: external_key ( variable_key )? name_key expression
					{
					pushFollow(FOLLOW_external_key_in_type_function_spec8586);
					external_key590=external_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_external_key.add(external_key590.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:844:62: ( variable_key )?
					int alt169=2;
					int LA169_0 = input.LA(1);
					if ( (LA169_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("variable"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {
						int LA169_1 = input.LA(2);
						if ( ((input.LT(1).getText().equalsIgnoreCase("variable"))) ) {
							alt169=1;
						}
					}
					switch (alt169) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:844:62: variable_key
							{
							pushFollow(FOLLOW_variable_key_in_type_function_spec8588);
							variable_key591=variable_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_variable_key.add(variable_key591.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_name_key_in_type_function_spec8591);
					name_key592=name_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name_key.add(name_key592.getTree());
					pushFollow(FOLLOW_expression_in_type_function_spec8593);
					expression593=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression593.getTree());
					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;

			}

			// AST REWRITE
			// elements: self_key, type_spec, external_key, type_spec, type_elements_parameter, type_spec, function_name, self_key, call_spec, function_name, self_key, function_name, expression, type_elements_parameter, type_elements_parameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 845:9: -> {mode == 1}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:845:24: ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNCTION_SPEC, "FUNCTION_SPEC"), root_1);
				adaptor.addChild(root_1, stream_function_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:845:54: ( type_spec )?
				if ( stream_type_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_type_spec.nextTree());
				}
				stream_type_spec.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:845:65: ( self_key )?
				if ( stream_self_key.hasNext() ) {
					adaptor.addChild(root_1, stream_self_key.nextTree());
				}
				stream_self_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:845:75: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:845:88: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:845:114: ^( CALL_MODE call_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(CALL_MODE, "CALL_MODE"), root_2);
				adaptor.addChild(root_2, stream_call_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 846:9: -> {mode == 2}? ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( external_key ^( EXPR expression ) ) )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:846:24: ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( external_key ^( EXPR expression ) ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNCTION_SPEC, "FUNCTION_SPEC"), root_1);
				adaptor.addChild(root_1, stream_function_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:846:54: ( type_spec )?
				if ( stream_type_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_type_spec.nextTree());
				}
				stream_type_spec.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:846:65: ( self_key )?
				if ( stream_self_key.hasNext() ) {
					adaptor.addChild(root_1, stream_self_key.nextTree());
				}
				stream_self_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:846:75: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:846:88: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:846:114: ^( external_key ^( EXPR expression ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_external_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:846:129: ^( EXPR expression )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);
				adaptor.addChild(root_3, stream_expression.nextTree());
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 847:9: -> ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:847:12: ^( FUNCTION_SPEC function_name ( type_spec )? ( self_key )? ^( PARAMETERS ( type_elements_parameter )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FUNCTION_SPEC, "FUNCTION_SPEC"), root_1);
				adaptor.addChild(root_1, stream_function_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:847:42: ( type_spec )?
				if ( stream_type_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_type_spec.nextTree());
				}
				stream_type_spec.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:847:53: ( self_key )?
				if ( stream_self_key.hasNext() ) {
					adaptor.addChild(root_1, stream_self_key.nextTree());
				}
				stream_self_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:847:63: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:847:76: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_function_spec"


	public static class constructor_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constructor_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:850:1: constructor_spec : ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( ( is_key | as_key ) call_spec )? -> {mode == 1}? ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ) ;
	public final PLSQLParser.constructor_spec_return constructor_spec() throws RecognitionException {
		PLSQLParser.constructor_spec_return retval = new PLSQLParser.constructor_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN599=null;
		Token COMMA604=null;
		Token COMMA606=null;
		Token RIGHT_PAREN608=null;
		ParserRuleReturnScope final_key594 =null;
		ParserRuleReturnScope instantiable_key595 =null;
		ParserRuleReturnScope constructor_key596 =null;
		ParserRuleReturnScope function_key597 =null;
		ParserRuleReturnScope type_spec598 =null;
		ParserRuleReturnScope self_key600 =null;
		ParserRuleReturnScope in_key601 =null;
		ParserRuleReturnScope out_key602 =null;
		ParserRuleReturnScope type_spec603 =null;
		ParserRuleReturnScope type_elements_parameter605 =null;
		ParserRuleReturnScope type_elements_parameter607 =null;
		ParserRuleReturnScope return_key609 =null;
		ParserRuleReturnScope self_key610 =null;
		ParserRuleReturnScope as_key611 =null;
		ParserRuleReturnScope result_key612 =null;
		ParserRuleReturnScope is_key613 =null;
		ParserRuleReturnScope as_key614 =null;
		ParserRuleReturnScope call_spec615 =null;

		Object LEFT_PAREN599_tree=null;
		Object COMMA604_tree=null;
		Object COMMA606_tree=null;
		Object RIGHT_PAREN608_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_type_elements_parameter=new RewriteRuleSubtreeStream(adaptor,"rule type_elements_parameter");
		RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
		RewriteRuleSubtreeStream stream_out_key=new RewriteRuleSubtreeStream(adaptor,"rule out_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_constructor_key=new RewriteRuleSubtreeStream(adaptor,"rule constructor_key");
		RewriteRuleSubtreeStream stream_final_key=new RewriteRuleSubtreeStream(adaptor,"rule final_key");
		RewriteRuleSubtreeStream stream_instantiable_key=new RewriteRuleSubtreeStream(adaptor,"rule instantiable_key");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
		RewriteRuleSubtreeStream stream_result_key=new RewriteRuleSubtreeStream(adaptor,"rule result_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_function_key=new RewriteRuleSubtreeStream(adaptor,"rule function_key");
		RewriteRuleSubtreeStream stream_call_spec=new RewriteRuleSubtreeStream(adaptor,"rule call_spec");
		RewriteRuleSubtreeStream stream_self_key=new RewriteRuleSubtreeStream(adaptor,"rule self_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:852:5: ( ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( ( is_key | as_key ) call_spec )? -> {mode == 1}? ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) ) -> ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:852:10: ( final_key )? ( instantiable_key )? constructor_key function_key type_spec ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )? return_key self_key as_key result_key ( ( is_key | as_key ) call_spec )?
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:852:10: ( final_key )?
			int alt171=2;
			int LA171_0 = input.LA(1);
			if ( (LA171_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("final"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
				int LA171_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("final"))) ) {
					alt171=1;
				}
			}
			switch (alt171) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:852:10: final_key
					{
					pushFollow(FOLLOW_final_key_in_constructor_spec8730);
					final_key594=final_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_final_key.add(final_key594.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:852:21: ( instantiable_key )?
			int alt172=2;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
				int LA172_1 = input.LA(2);
				if ( (LA172_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
					int LA172_2 = input.LA(3);
					if ( (LA172_2==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constructor"))||(input.LT(1).getText().equalsIgnoreCase("instantiable"))))) {
						int LA172_3 = input.LA(4);
						if ( ((input.LT(1).getText().equalsIgnoreCase("instantiable"))) ) {
							alt172=1;
						}
					}
				}
			}
			switch (alt172) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:852:21: instantiable_key
					{
					pushFollow(FOLLOW_instantiable_key_in_constructor_spec8733);
					instantiable_key595=instantiable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_instantiable_key.add(instantiable_key595.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_constructor_key_in_constructor_spec8736);
			constructor_key596=constructor_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constructor_key.add(constructor_key596.getTree());
			pushFollow(FOLLOW_function_key_in_constructor_spec8738);
			function_key597=function_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_function_key.add(function_key597.getTree());
			pushFollow(FOLLOW_type_spec_in_constructor_spec8740);
			type_spec598=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec598.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:853:9: ( LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==LEFT_PAREN) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:853:10: LEFT_PAREN ( self_key in_key out_key type_spec COMMA ) type_elements_parameter ( COMMA type_elements_parameter )* RIGHT_PAREN
					{
					LEFT_PAREN599=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_constructor_spec8751); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN599);

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:853:21: ( self_key in_key out_key type_spec COMMA )
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:853:22: self_key in_key out_key type_spec COMMA
					{
					pushFollow(FOLLOW_self_key_in_constructor_spec8754);
					self_key600=self_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_self_key.add(self_key600.getTree());
					pushFollow(FOLLOW_in_key_in_constructor_spec8756);
					in_key601=in_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_in_key.add(in_key601.getTree());
					pushFollow(FOLLOW_out_key_in_constructor_spec8758);
					out_key602=out_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_out_key.add(out_key602.getTree());
					pushFollow(FOLLOW_type_spec_in_constructor_spec8760);
					type_spec603=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec603.getTree());
					COMMA604=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec8762); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA604);

					}

					pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec8765);
					type_elements_parameter605=type_elements_parameter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter605.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:853:87: ( COMMA type_elements_parameter )*
					loop173:
					while (true) {
						int alt173=2;
						int LA173_0 = input.LA(1);
						if ( (LA173_0==COMMA) ) {
							alt173=1;
						}

						switch (alt173) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:853:88: COMMA type_elements_parameter
							{
							COMMA606=(Token)match(input,COMMA,FOLLOW_COMMA_in_constructor_spec8768); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA606);

							pushFollow(FOLLOW_type_elements_parameter_in_constructor_spec8770);
							type_elements_parameter607=type_elements_parameter();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_type_elements_parameter.add(type_elements_parameter607.getTree());
							}
							break;

						default :
							break loop173;
						}
					}

					RIGHT_PAREN608=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_constructor_spec8775); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN608);

					}
					break;

			}

			pushFollow(FOLLOW_return_key_in_constructor_spec8787);
			return_key609=return_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_return_key.add(return_key609.getTree());
			pushFollow(FOLLOW_self_key_in_constructor_spec8789);
			self_key610=self_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_self_key.add(self_key610.getTree());
			pushFollow(FOLLOW_as_key_in_constructor_spec8791);
			as_key611=as_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_as_key.add(as_key611.getTree());
			pushFollow(FOLLOW_result_key_in_constructor_spec8793);
			result_key612=result_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_result_key.add(result_key612.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:854:47: ( ( is_key | as_key ) call_spec )?
			int alt176=2;
			int LA176_0 = input.LA(1);
			if ( (LA176_0==SQL92_RESERVED_AS||LA176_0==SQL92_RESERVED_IS) ) {
				alt176=1;
			}
			switch (alt176) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:854:48: ( is_key | as_key ) call_spec
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:854:48: ( is_key | as_key )
					int alt175=2;
					int LA175_0 = input.LA(1);
					if ( (LA175_0==SQL92_RESERVED_IS) ) {
						alt175=1;
					}
					else if ( (LA175_0==SQL92_RESERVED_AS) ) {
						alt175=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 175, 0, input);
						throw nvae;
					}

					switch (alt175) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:854:49: is_key
							{
							pushFollow(FOLLOW_is_key_in_constructor_spec8797);
							is_key613=is_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_is_key.add(is_key613.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:854:56: as_key
							{
							pushFollow(FOLLOW_as_key_in_constructor_spec8799);
							as_key614=as_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_as_key.add(as_key614.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_call_spec_in_constructor_spec8802);
					call_spec615=call_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_call_spec.add(call_spec615.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			// AST REWRITE
			// elements: type_elements_parameter, type_elements_parameter, final_key, type_spec, final_key, call_spec, type_spec, instantiable_key, instantiable_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 855:9: -> {mode == 1}? ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:855:24: ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) ^( CALL_MODE call_spec ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONSTRUCTOR_SPEC, (constructor_key596!=null?(constructor_key596.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:855:77: ( final_key )?
				if ( stream_final_key.hasNext() ) {
					adaptor.addChild(root_1, stream_final_key.nextTree());
				}
				stream_final_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:855:88: ( instantiable_key )?
				if ( stream_instantiable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_instantiable_key.nextTree());
				}
				stream_instantiable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:855:106: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:855:119: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:855:145: ^( CALL_MODE call_spec )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(CALL_MODE, "CALL_MODE"), root_2);
				adaptor.addChild(root_2, stream_call_spec.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 856:9: -> ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:856:12: ^( CONSTRUCTOR_SPEC[$constructor_key.start] type_spec ( final_key )? ( instantiable_key )? ^( PARAMETERS ( type_elements_parameter )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONSTRUCTOR_SPEC, (constructor_key596!=null?(constructor_key596.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:856:65: ( final_key )?
				if ( stream_final_key.hasNext() ) {
					adaptor.addChild(root_1, stream_final_key.nextTree());
				}
				stream_final_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:856:76: ( instantiable_key )?
				if ( stream_instantiable_key.hasNext() ) {
					adaptor.addChild(root_1, stream_instantiable_key.nextTree());
				}
				stream_instantiable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:856:94: ^( PARAMETERS ( type_elements_parameter )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:856:107: ( type_elements_parameter )*
				while ( stream_type_elements_parameter.hasNext() ) {
					adaptor.addChild(root_2, stream_type_elements_parameter.nextTree());
				}
				stream_type_elements_parameter.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constructor_spec"


	public static class map_order_function_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "map_order_function_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:859:1: map_order_function_spec : ( map_key ^| order_key ^) member_key ! type_function_spec ;
	public final PLSQLParser.map_order_function_spec_return map_order_function_spec() throws RecognitionException {
		PLSQLParser.map_order_function_spec_return retval = new PLSQLParser.map_order_function_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope map_key616 =null;
		ParserRuleReturnScope order_key617 =null;
		ParserRuleReturnScope member_key618 =null;
		ParserRuleReturnScope type_function_spec619 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:860:5: ( ( map_key ^| order_key ^) member_key ! type_function_spec )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:860:10: ( map_key ^| order_key ^) member_key ! type_function_spec
			{
			root_0 = (Object)adaptor.nil();


			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:860:10: ( map_key ^| order_key ^)
			int alt177=2;
			int LA177_0 = input.LA(1);
			if ( (LA177_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("map")))) {
				alt177=1;
			}
			else if ( (LA177_0==SQL92_RESERVED_ORDER) ) {
				alt177=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 177, 0, input);
				throw nvae;
			}

			switch (alt177) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:860:11: map_key ^
					{
					pushFollow(FOLLOW_map_key_in_map_order_function_spec8894);
					map_key616=map_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(map_key616.getTree(), root_0);
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:860:20: order_key ^
					{
					pushFollow(FOLLOW_order_key_in_map_order_function_spec8897);
					order_key617=order_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(order_key617.getTree(), root_0);
					}
					break;

			}

			pushFollow(FOLLOW_member_key_in_map_order_function_spec8901);
			member_key618=member_key();
			state._fsp--;
			if (state.failed) return retval;
			pushFollow(FOLLOW_type_function_spec_in_map_order_function_spec8904);
			type_function_spec619=type_function_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type_function_spec619.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "map_order_function_spec"


	public static class pragma_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pragma_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:863:1: pragma_clause : pragma_key restrict_references_key LEFT_PAREN pragma_elements ( COMMA pragma_elements )* RIGHT_PAREN -> ^( pragma_key ( pragma_elements )+ ) ;
	public final PLSQLParser.pragma_clause_return pragma_clause() throws RecognitionException {
		PLSQLParser.pragma_clause_return retval = new PLSQLParser.pragma_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN622=null;
		Token COMMA624=null;
		Token RIGHT_PAREN626=null;
		ParserRuleReturnScope pragma_key620 =null;
		ParserRuleReturnScope restrict_references_key621 =null;
		ParserRuleReturnScope pragma_elements623 =null;
		ParserRuleReturnScope pragma_elements625 =null;

		Object LEFT_PAREN622_tree=null;
		Object COMMA624_tree=null;
		Object RIGHT_PAREN626_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_pragma_elements=new RewriteRuleSubtreeStream(adaptor,"rule pragma_elements");
		RewriteRuleSubtreeStream stream_restrict_references_key=new RewriteRuleSubtreeStream(adaptor,"rule restrict_references_key");
		RewriteRuleSubtreeStream stream_pragma_key=new RewriteRuleSubtreeStream(adaptor,"rule pragma_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:864:5: ( pragma_key restrict_references_key LEFT_PAREN pragma_elements ( COMMA pragma_elements )* RIGHT_PAREN -> ^( pragma_key ( pragma_elements )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:864:10: pragma_key restrict_references_key LEFT_PAREN pragma_elements ( COMMA pragma_elements )* RIGHT_PAREN
			{
			pushFollow(FOLLOW_pragma_key_in_pragma_clause8924);
			pragma_key620=pragma_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pragma_key.add(pragma_key620.getTree());
			pushFollow(FOLLOW_restrict_references_key_in_pragma_clause8926);
			restrict_references_key621=restrict_references_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_restrict_references_key.add(restrict_references_key621.getTree());
			LEFT_PAREN622=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pragma_clause8928); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN622);

			pushFollow(FOLLOW_pragma_elements_in_pragma_clause8930);
			pragma_elements623=pragma_elements();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pragma_elements.add(pragma_elements623.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:864:72: ( COMMA pragma_elements )*
			loop178:
			while (true) {
				int alt178=2;
				int LA178_0 = input.LA(1);
				if ( (LA178_0==COMMA) ) {
					alt178=1;
				}

				switch (alt178) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:864:73: COMMA pragma_elements
					{
					COMMA624=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_clause8933); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA624);

					pushFollow(FOLLOW_pragma_elements_in_pragma_clause8935);
					pragma_elements625=pragma_elements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_pragma_elements.add(pragma_elements625.getTree());
					}
					break;

				default :
					break loop178;
				}
			}

			RIGHT_PAREN626=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pragma_clause8939); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN626);

			// AST REWRITE
			// elements: pragma_key, pragma_elements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 865:9: -> ^( pragma_key ( pragma_elements )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:865:12: ^( pragma_key ( pragma_elements )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_pragma_key.nextNode(), root_1);
				if ( !(stream_pragma_elements.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_pragma_elements.hasNext() ) {
					adaptor.addChild(root_1, stream_pragma_elements.nextTree());
				}
				stream_pragma_elements.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_clause"


	public static class pragma_elements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pragma_elements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:868:1: pragma_elements : ( id | default_key );
	public final PLSQLParser.pragma_elements_return pragma_elements() throws RecognitionException {
		PLSQLParser.pragma_elements_return retval = new PLSQLParser.pragma_elements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope id627 =null;
		ParserRuleReturnScope default_key628 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:869:5: ( id | default_key )
			int alt179=2;
			int LA179_0 = input.LA(1);
			if ( (LA179_0==DELIMITED_ID||LA179_0==INTRODUCER||LA179_0==REGULAR_ID) ) {
				alt179=1;
			}
			else if ( (LA179_0==SQL92_RESERVED_DEFAULT) ) {
				alt179=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 179, 0, input);
				throw nvae;
			}

			switch (alt179) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:869:10: id
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_id_in_pragma_elements8976);
					id627=id();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, id627.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:870:10: default_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_default_key_in_pragma_elements8987);
					default_key628=default_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, default_key628.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_elements"


	public static class type_elements_parameter_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "type_elements_parameter"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:873:1: type_elements_parameter : parameter_name type_spec -> ^( PARAMETER parameter_name type_spec ) ;
	public final PLSQLParser.type_elements_parameter_return type_elements_parameter() throws RecognitionException {
		PLSQLParser.type_elements_parameter_return retval = new PLSQLParser.type_elements_parameter_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope parameter_name629 =null;
		ParserRuleReturnScope type_spec630 =null;

		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_parameter_name=new RewriteRuleSubtreeStream(adaptor,"rule parameter_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:874:5: ( parameter_name type_spec -> ^( PARAMETER parameter_name type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:874:10: parameter_name type_spec
			{
			pushFollow(FOLLOW_parameter_name_in_type_elements_parameter9007);
			parameter_name629=parameter_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_parameter_name.add(parameter_name629.getTree());
			pushFollow(FOLLOW_type_spec_in_type_elements_parameter9009);
			type_spec630=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec630.getTree());
			// AST REWRITE
			// elements: parameter_name, type_spec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 875:9: -> ^( PARAMETER parameter_name type_spec )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:875:12: ^( PARAMETER parameter_name type_spec )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_1);
				adaptor.addChild(root_1, stream_parameter_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type_elements_parameter"


	public static class drop_sequence_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "drop_sequence"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:883:1: drop_sequence : drop_key sequence_key sequence_name SEMICOLON -> ^( DROP_SEQUENCE[$drop_key.start] sequence_name ) ;
	public final PLSQLParser.drop_sequence_return drop_sequence() throws RecognitionException {
		PLSQLParser.drop_sequence_return retval = new PLSQLParser.drop_sequence_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON634=null;
		ParserRuleReturnScope drop_key631 =null;
		ParserRuleReturnScope sequence_key632 =null;
		ParserRuleReturnScope sequence_name633 =null;

		Object SEMICOLON634_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_drop_key=new RewriteRuleSubtreeStream(adaptor,"rule drop_key");
		RewriteRuleSubtreeStream stream_sequence_key=new RewriteRuleSubtreeStream(adaptor,"rule sequence_key");
		RewriteRuleSubtreeStream stream_sequence_name=new RewriteRuleSubtreeStream(adaptor,"rule sequence_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:884:5: ( drop_key sequence_key sequence_name SEMICOLON -> ^( DROP_SEQUENCE[$drop_key.start] sequence_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:884:9: drop_key sequence_key sequence_name SEMICOLON
			{
			pushFollow(FOLLOW_drop_key_in_drop_sequence9051);
			drop_key631=drop_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_drop_key.add(drop_key631.getTree());
			pushFollow(FOLLOW_sequence_key_in_drop_sequence9053);
			sequence_key632=sequence_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_sequence_key.add(sequence_key632.getTree());
			pushFollow(FOLLOW_sequence_name_in_drop_sequence9055);
			sequence_name633=sequence_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_sequence_name.add(sequence_name633.getTree());
			SEMICOLON634=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_drop_sequence9065); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON634);

			// AST REWRITE
			// elements: sequence_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 886:9: -> ^( DROP_SEQUENCE[$drop_key.start] sequence_name )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:886:12: ^( DROP_SEQUENCE[$drop_key.start] sequence_name )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DROP_SEQUENCE, (drop_key631!=null?(drop_key631.start):null)), root_1);
				adaptor.addChild(root_1, stream_sequence_name.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "drop_sequence"


	public static class alter_sequence_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "alter_sequence"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:889:1: alter_sequence : alter_key sequence_key sequence_name ( sequence_spec )+ SEMICOLON -> ^( ALTER_SEQUENCE[$alter_key.start] sequence_name ( sequence_spec )+ ) ;
	public final PLSQLParser.alter_sequence_return alter_sequence() throws RecognitionException {
		PLSQLParser.alter_sequence_return retval = new PLSQLParser.alter_sequence_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON639=null;
		ParserRuleReturnScope alter_key635 =null;
		ParserRuleReturnScope sequence_key636 =null;
		ParserRuleReturnScope sequence_name637 =null;
		ParserRuleReturnScope sequence_spec638 =null;

		Object SEMICOLON639_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_sequence_spec=new RewriteRuleSubtreeStream(adaptor,"rule sequence_spec");
		RewriteRuleSubtreeStream stream_sequence_key=new RewriteRuleSubtreeStream(adaptor,"rule sequence_key");
		RewriteRuleSubtreeStream stream_alter_key=new RewriteRuleSubtreeStream(adaptor,"rule alter_key");
		RewriteRuleSubtreeStream stream_sequence_name=new RewriteRuleSubtreeStream(adaptor,"rule sequence_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:890:5: ( alter_key sequence_key sequence_name ( sequence_spec )+ SEMICOLON -> ^( ALTER_SEQUENCE[$alter_key.start] sequence_name ( sequence_spec )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:890:10: alter_key sequence_key sequence_name ( sequence_spec )+ SEMICOLON
			{
			pushFollow(FOLLOW_alter_key_in_alter_sequence9102);
			alter_key635=alter_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_alter_key.add(alter_key635.getTree());
			pushFollow(FOLLOW_sequence_key_in_alter_sequence9104);
			sequence_key636=sequence_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_sequence_key.add(sequence_key636.getTree());
			pushFollow(FOLLOW_sequence_name_in_alter_sequence9106);
			sequence_name637=sequence_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_sequence_name.add(sequence_name637.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:890:47: ( sequence_spec )+
			int cnt180=0;
			loop180:
			while (true) {
				int alt180=2;
				int LA180_0 = input.LA(1);
				if ( (LA180_0==REGULAR_ID||LA180_0==SQL92_RESERVED_ORDER) ) {
					alt180=1;
				}

				switch (alt180) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:890:47: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_alter_sequence9108);
					sequence_spec638=sequence_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sequence_spec.add(sequence_spec638.getTree());
					}
					break;

				default :
					if ( cnt180 >= 1 ) break loop180;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(180, input);
					throw eee;
				}
				cnt180++;
			}

			SEMICOLON639=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_alter_sequence9120); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON639);

			// AST REWRITE
			// elements: sequence_spec, sequence_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 892:9: -> ^( ALTER_SEQUENCE[$alter_key.start] sequence_name ( sequence_spec )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:892:12: ^( ALTER_SEQUENCE[$alter_key.start] sequence_name ( sequence_spec )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ALTER_SEQUENCE, (alter_key635!=null?(alter_key635.start):null)), root_1);
				adaptor.addChild(root_1, stream_sequence_name.nextTree());
				if ( !(stream_sequence_spec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_sequence_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_sequence_spec.nextTree());
				}
				stream_sequence_spec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alter_sequence"


	public static class create_sequence_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_sequence"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:895:1: create_sequence : create_key sequence_key sequence_name ( sequence_start_clause | sequence_spec )* SEMICOLON -> ^( CREATE_SEQUENCE[$create_key.start] sequence_name ( sequence_start_clause )* ( sequence_spec )* ) ;
	public final PLSQLParser.create_sequence_return create_sequence() throws RecognitionException {
		PLSQLParser.create_sequence_return retval = new PLSQLParser.create_sequence_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON645=null;
		ParserRuleReturnScope create_key640 =null;
		ParserRuleReturnScope sequence_key641 =null;
		ParserRuleReturnScope sequence_name642 =null;
		ParserRuleReturnScope sequence_start_clause643 =null;
		ParserRuleReturnScope sequence_spec644 =null;

		Object SEMICOLON645_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_sequence_spec=new RewriteRuleSubtreeStream(adaptor,"rule sequence_spec");
		RewriteRuleSubtreeStream stream_sequence_key=new RewriteRuleSubtreeStream(adaptor,"rule sequence_key");
		RewriteRuleSubtreeStream stream_sequence_start_clause=new RewriteRuleSubtreeStream(adaptor,"rule sequence_start_clause");
		RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
		RewriteRuleSubtreeStream stream_sequence_name=new RewriteRuleSubtreeStream(adaptor,"rule sequence_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:896:5: ( create_key sequence_key sequence_name ( sequence_start_clause | sequence_spec )* SEMICOLON -> ^( CREATE_SEQUENCE[$create_key.start] sequence_name ( sequence_start_clause )* ( sequence_spec )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:896:10: create_key sequence_key sequence_name ( sequence_start_clause | sequence_spec )* SEMICOLON
			{
			pushFollow(FOLLOW_create_key_in_create_sequence9160);
			create_key640=create_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_create_key.add(create_key640.getTree());
			pushFollow(FOLLOW_sequence_key_in_create_sequence9162);
			sequence_key641=sequence_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_sequence_key.add(sequence_key641.getTree());
			pushFollow(FOLLOW_sequence_name_in_create_sequence9164);
			sequence_name642=sequence_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_sequence_name.add(sequence_name642.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:897:5: ( sequence_start_clause | sequence_spec )*
			loop181:
			while (true) {
				int alt181=3;
				int LA181_0 = input.LA(1);
				if ( (LA181_0==PLSQL_RESERVED_START) ) {
					alt181=1;
				}
				else if ( (LA181_0==REGULAR_ID||LA181_0==SQL92_RESERVED_ORDER) ) {
					alt181=2;
				}

				switch (alt181) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:897:10: sequence_start_clause
					{
					pushFollow(FOLLOW_sequence_start_clause_in_create_sequence9175);
					sequence_start_clause643=sequence_start_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sequence_start_clause.add(sequence_start_clause643.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:898:10: sequence_spec
					{
					pushFollow(FOLLOW_sequence_spec_in_create_sequence9186);
					sequence_spec644=sequence_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sequence_spec.add(sequence_spec644.getTree());
					}
					break;

				default :
					break loop181;
				}
			}

			SEMICOLON645=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_sequence9197); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON645);

			// AST REWRITE
			// elements: sequence_spec, sequence_name, sequence_start_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 900:9: -> ^( CREATE_SEQUENCE[$create_key.start] sequence_name ( sequence_start_clause )* ( sequence_spec )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:900:12: ^( CREATE_SEQUENCE[$create_key.start] sequence_name ( sequence_start_clause )* ( sequence_spec )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_SEQUENCE, (create_key640!=null?(create_key640.start):null)), root_1);
				adaptor.addChild(root_1, stream_sequence_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:900:63: ( sequence_start_clause )*
				while ( stream_sequence_start_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_sequence_start_clause.nextTree());
				}
				stream_sequence_start_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:900:86: ( sequence_spec )*
				while ( stream_sequence_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_sequence_spec.nextTree());
				}
				stream_sequence_spec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_sequence"


	public static class sequence_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "sequence_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:905:1: sequence_spec : ( increment_key ^ by_key ! UNSIGNED_INTEGER | maxvalue_key ^ UNSIGNED_INTEGER | minvalue_key ^ UNSIGNED_INTEGER | cache_key ^ UNSIGNED_INTEGER | nomaxvalue_key | nominvalue_key | cycle_key | nocycle_key | nocache_key | order_key | noorder_key );
	public final PLSQLParser.sequence_spec_return sequence_spec() throws RecognitionException {
		PLSQLParser.sequence_spec_return retval = new PLSQLParser.sequence_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token UNSIGNED_INTEGER648=null;
		Token UNSIGNED_INTEGER650=null;
		Token UNSIGNED_INTEGER652=null;
		Token UNSIGNED_INTEGER654=null;
		ParserRuleReturnScope increment_key646 =null;
		ParserRuleReturnScope by_key647 =null;
		ParserRuleReturnScope maxvalue_key649 =null;
		ParserRuleReturnScope minvalue_key651 =null;
		ParserRuleReturnScope cache_key653 =null;
		ParserRuleReturnScope nomaxvalue_key655 =null;
		ParserRuleReturnScope nominvalue_key656 =null;
		ParserRuleReturnScope cycle_key657 =null;
		ParserRuleReturnScope nocycle_key658 =null;
		ParserRuleReturnScope nocache_key659 =null;
		ParserRuleReturnScope order_key660 =null;
		ParserRuleReturnScope noorder_key661 =null;

		Object UNSIGNED_INTEGER648_tree=null;
		Object UNSIGNED_INTEGER650_tree=null;
		Object UNSIGNED_INTEGER652_tree=null;
		Object UNSIGNED_INTEGER654_tree=null;

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:906:5: ( increment_key ^ by_key ! UNSIGNED_INTEGER | maxvalue_key ^ UNSIGNED_INTEGER | minvalue_key ^ UNSIGNED_INTEGER | cache_key ^ UNSIGNED_INTEGER | nomaxvalue_key | nominvalue_key | cycle_key | nocycle_key | nocache_key | order_key | noorder_key )
			int alt182=11;
			int LA182_0 = input.LA(1);
			if ( (LA182_0==REGULAR_ID) ) {
				int LA182_1 = input.LA(2);
				if ( (LA182_1==SQL92_RESERVED_BY) && ((input.LT(1).getText().equalsIgnoreCase("increment")))) {
					alt182=1;
				}
				else if ( (LA182_1==UNSIGNED_INTEGER) ) {
					int LA182_4 = input.LA(3);
					if ( ((input.LT(1).getText().equalsIgnoreCase("maxvalue"))) ) {
						alt182=2;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("minvalue"))) ) {
						alt182=3;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("cache"))) ) {
						alt182=4;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 182, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("nomaxvalue"))) ) {
					alt182=5;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("nominvalue"))) ) {
					alt182=6;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("cycle"))) ) {
					alt182=7;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("nocycle"))) ) {
					alt182=8;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("nocache"))) ) {
					alt182=9;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("noorder"))) ) {
					alt182=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 182, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA182_0==SQL92_RESERVED_ORDER) ) {
				alt182=10;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 182, 0, input);
				throw nvae;
			}

			switch (alt182) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:906:10: increment_key ^ by_key ! UNSIGNED_INTEGER
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_increment_key_in_sequence_spec9242);
					increment_key646=increment_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(increment_key646.getTree(), root_0);
					pushFollow(FOLLOW_by_key_in_sequence_spec9245);
					by_key647=by_key();
					state._fsp--;
					if (state.failed) return retval;
					UNSIGNED_INTEGER648=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec9248); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNSIGNED_INTEGER648_tree = (Object)adaptor.create(UNSIGNED_INTEGER648);
					adaptor.addChild(root_0, UNSIGNED_INTEGER648_tree);
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:907:10: maxvalue_key ^ UNSIGNED_INTEGER
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_maxvalue_key_in_sequence_spec9259);
					maxvalue_key649=maxvalue_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(maxvalue_key649.getTree(), root_0);
					UNSIGNED_INTEGER650=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec9262); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNSIGNED_INTEGER650_tree = (Object)adaptor.create(UNSIGNED_INTEGER650);
					adaptor.addChild(root_0, UNSIGNED_INTEGER650_tree);
					}

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:908:10: minvalue_key ^ UNSIGNED_INTEGER
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_minvalue_key_in_sequence_spec9273);
					minvalue_key651=minvalue_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(minvalue_key651.getTree(), root_0);
					UNSIGNED_INTEGER652=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec9276); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNSIGNED_INTEGER652_tree = (Object)adaptor.create(UNSIGNED_INTEGER652);
					adaptor.addChild(root_0, UNSIGNED_INTEGER652_tree);
					}

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:909:10: cache_key ^ UNSIGNED_INTEGER
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_cache_key_in_sequence_spec9287);
					cache_key653=cache_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(cache_key653.getTree(), root_0);
					UNSIGNED_INTEGER654=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_spec9290); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNSIGNED_INTEGER654_tree = (Object)adaptor.create(UNSIGNED_INTEGER654);
					adaptor.addChild(root_0, UNSIGNED_INTEGER654_tree);
					}

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:910:10: nomaxvalue_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_nomaxvalue_key_in_sequence_spec9301);
					nomaxvalue_key655=nomaxvalue_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, nomaxvalue_key655.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:911:10: nominvalue_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_nominvalue_key_in_sequence_spec9312);
					nominvalue_key656=nominvalue_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, nominvalue_key656.getTree());

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:912:10: cycle_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_cycle_key_in_sequence_spec9323);
					cycle_key657=cycle_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cycle_key657.getTree());

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:913:10: nocycle_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_nocycle_key_in_sequence_spec9334);
					nocycle_key658=nocycle_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, nocycle_key658.getTree());

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:914:10: nocache_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_nocache_key_in_sequence_spec9345);
					nocache_key659=nocache_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, nocache_key659.getTree());

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:915:10: order_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_order_key_in_sequence_spec9356);
					order_key660=order_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, order_key660.getTree());

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:916:10: noorder_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_noorder_key_in_sequence_spec9367);
					noorder_key661=noorder_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, noorder_key661.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_spec"


	public static class sequence_start_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "sequence_start_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:919:1: sequence_start_clause : start_key ^ with_key ! UNSIGNED_INTEGER ;
	public final PLSQLParser.sequence_start_clause_return sequence_start_clause() throws RecognitionException {
		PLSQLParser.sequence_start_clause_return retval = new PLSQLParser.sequence_start_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token UNSIGNED_INTEGER664=null;
		ParserRuleReturnScope start_key662 =null;
		ParserRuleReturnScope with_key663 =null;

		Object UNSIGNED_INTEGER664_tree=null;

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:920:5: ( start_key ^ with_key ! UNSIGNED_INTEGER )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:920:10: start_key ^ with_key ! UNSIGNED_INTEGER
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_start_key_in_sequence_start_clause9387);
			start_key662=start_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(start_key662.getTree(), root_0);
			pushFollow(FOLLOW_with_key_in_sequence_start_clause9390);
			with_key663=with_key();
			state._fsp--;
			if (state.failed) return retval;
			UNSIGNED_INTEGER664=(Token)match(input,UNSIGNED_INTEGER,FOLLOW_UNSIGNED_INTEGER_in_sequence_start_clause9393); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			UNSIGNED_INTEGER664_tree = (Object)adaptor.create(UNSIGNED_INTEGER664);
			adaptor.addChild(root_0, UNSIGNED_INTEGER664_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sequence_start_clause"


	public static class create_view_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_view"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:928:1: create_view : create_key ( or_key replace_key )? ( create_view_force_clause )? view_key view_name ( view_type_clause )? as_key subquery ( subquery_restriction_clause )? SEMICOLON -> ^( CREATE_VIEW[$create_key.start, \"create view\"] ( replace_key )? ( create_view_force_clause )? view_name ( view_type_clause )? subquery ( subquery_restriction_clause )? ) ;
	public final PLSQLParser.create_view_return create_view() throws RecognitionException {
		PLSQLParser.create_view_return retval = new PLSQLParser.create_view_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON675=null;
		ParserRuleReturnScope create_key665 =null;
		ParserRuleReturnScope or_key666 =null;
		ParserRuleReturnScope replace_key667 =null;
		ParserRuleReturnScope create_view_force_clause668 =null;
		ParserRuleReturnScope view_key669 =null;
		ParserRuleReturnScope view_name670 =null;
		ParserRuleReturnScope view_type_clause671 =null;
		ParserRuleReturnScope as_key672 =null;
		ParserRuleReturnScope subquery673 =null;
		ParserRuleReturnScope subquery_restriction_clause674 =null;

		Object SEMICOLON675_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
		RewriteRuleSubtreeStream stream_view_type_clause=new RewriteRuleSubtreeStream(adaptor,"rule view_type_clause");
		RewriteRuleSubtreeStream stream_as_key=new RewriteRuleSubtreeStream(adaptor,"rule as_key");
		RewriteRuleSubtreeStream stream_subquery_restriction_clause=new RewriteRuleSubtreeStream(adaptor,"rule subquery_restriction_clause");
		RewriteRuleSubtreeStream stream_view_key=new RewriteRuleSubtreeStream(adaptor,"rule view_key");
		RewriteRuleSubtreeStream stream_create_key=new RewriteRuleSubtreeStream(adaptor,"rule create_key");
		RewriteRuleSubtreeStream stream_replace_key=new RewriteRuleSubtreeStream(adaptor,"rule replace_key");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");
		RewriteRuleSubtreeStream stream_create_view_force_clause=new RewriteRuleSubtreeStream(adaptor,"rule create_view_force_clause");
		RewriteRuleSubtreeStream stream_view_name=new RewriteRuleSubtreeStream(adaptor,"rule view_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:929:5: ( create_key ( or_key replace_key )? ( create_view_force_clause )? view_key view_name ( view_type_clause )? as_key subquery ( subquery_restriction_clause )? SEMICOLON -> ^( CREATE_VIEW[$create_key.start, \"create view\"] ( replace_key )? ( create_view_force_clause )? view_name ( view_type_clause )? subquery ( subquery_restriction_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:929:9: create_key ( or_key replace_key )? ( create_view_force_clause )? view_key view_name ( view_type_clause )? as_key subquery ( subquery_restriction_clause )? SEMICOLON
			{
			pushFollow(FOLLOW_create_key_in_create_view9417);
			create_key665=create_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_create_key.add(create_key665.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:930:9: ( or_key replace_key )?
			int alt183=2;
			int LA183_0 = input.LA(1);
			if ( (LA183_0==SQL92_RESERVED_OR) ) {
				alt183=1;
			}
			switch (alt183) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:930:10: or_key replace_key
					{
					pushFollow(FOLLOW_or_key_in_create_view9428);
					or_key666=or_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_or_key.add(or_key666.getTree());
					pushFollow(FOLLOW_replace_key_in_create_view9430);
					replace_key667=replace_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replace_key.add(replace_key667.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:931:9: ( create_view_force_clause )?
			int alt184=2;
			int LA184_0 = input.LA(1);
			if ( (LA184_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("force"))||(input.LT(1).getText().equalsIgnoreCase("no"))))) {
				alt184=1;
			}
			switch (alt184) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:931:9: create_view_force_clause
					{
					pushFollow(FOLLOW_create_view_force_clause_in_create_view9442);
					create_view_force_clause668=create_view_force_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_create_view_force_clause.add(create_view_force_clause668.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_view_key_in_create_view9453);
			view_key669=view_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_view_key.add(view_key669.getTree());
			pushFollow(FOLLOW_view_name_in_create_view9463);
			view_name670=view_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_view_name.add(view_name670.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:934:9: ( view_type_clause )?
			int alt185=2;
			int LA185_0 = input.LA(1);
			if ( (LA185_0==LEFT_PAREN) ) {
				alt185=1;
			}
			switch (alt185) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:934:9: view_type_clause
					{
					pushFollow(FOLLOW_view_type_clause_in_create_view9473);
					view_type_clause671=view_type_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_view_type_clause.add(view_type_clause671.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_as_key_in_create_view9484);
			as_key672=as_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_as_key.add(as_key672.getTree());
			pushFollow(FOLLOW_subquery_in_create_view9494);
			subquery673=subquery();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_subquery.add(subquery673.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:937:9: ( subquery_restriction_clause )?
			int alt186=2;
			int LA186_0 = input.LA(1);
			if ( (LA186_0==SQL92_RESERVED_WITH) ) {
				alt186=1;
			}
			switch (alt186) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:937:9: subquery_restriction_clause
					{
					pushFollow(FOLLOW_subquery_restriction_clause_in_create_view9504);
					subquery_restriction_clause674=subquery_restriction_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_subquery_restriction_clause.add(subquery_restriction_clause674.getTree());
					}
					break;

			}

			SEMICOLON675=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_create_view9515); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON675);

			// AST REWRITE
			// elements: view_type_clause, view_name, create_view_force_clause, subquery_restriction_clause, subquery, replace_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 939:9: -> ^( CREATE_VIEW[$create_key.start, \"create view\"] ( replace_key )? ( create_view_force_clause )? view_name ( view_type_clause )? subquery ( subquery_restriction_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:939:12: ^( CREATE_VIEW[$create_key.start, \"create view\"] ( replace_key )? ( create_view_force_clause )? view_name ( view_type_clause )? subquery ( subquery_restriction_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATE_VIEW, (create_key665!=null?(create_key665.start):null), "create view"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:940:11: ( replace_key )?
				if ( stream_replace_key.hasNext() ) {
					adaptor.addChild(root_1, stream_replace_key.nextTree());
				}
				stream_replace_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:941:11: ( create_view_force_clause )?
				if ( stream_create_view_force_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_create_view_force_clause.nextTree());
				}
				stream_create_view_force_clause.reset();

				adaptor.addChild(root_1, stream_view_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:943:11: ( view_type_clause )?
				if ( stream_view_type_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_view_type_clause.nextTree());
				}
				stream_view_type_clause.reset();

				adaptor.addChild(root_1, stream_subquery.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:945:11: ( subquery_restriction_clause )?
				if ( stream_subquery_restriction_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_subquery_restriction_clause.nextTree());
				}
				stream_subquery_restriction_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_view"


	public static class create_view_force_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "create_view_force_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:949:1: create_view_force_clause : ( no_key force_key -> ^( NOFORCE[$no_key.start, \"no force\"] ) | force_key -> force_key );
	public final PLSQLParser.create_view_force_clause_return create_view_force_clause() throws RecognitionException {
		PLSQLParser.create_view_force_clause_return retval = new PLSQLParser.create_view_force_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope no_key676 =null;
		ParserRuleReturnScope force_key677 =null;
		ParserRuleReturnScope force_key678 =null;

		RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
		RewriteRuleSubtreeStream stream_no_key=new RewriteRuleSubtreeStream(adaptor,"rule no_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:950:5: ( no_key force_key -> ^( NOFORCE[$no_key.start, \"no force\"] ) | force_key -> force_key )
			int alt187=2;
			int LA187_0 = input.LA(1);
			if ( (LA187_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("force"))||(input.LT(1).getText().equalsIgnoreCase("no"))))) {
				int LA187_1 = input.LA(2);
				if ( (LA187_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("no")))) {
					alt187=1;
				}
				else if ( (LA187_1==SQL92_RESERVED_VIEW) && ((input.LT(1).getText().equalsIgnoreCase("force")))) {
					alt187=2;
				}

			}

			switch (alt187) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:950:9: no_key force_key
					{
					pushFollow(FOLLOW_no_key_in_create_view_force_clause9638);
					no_key676=no_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_no_key.add(no_key676.getTree());
					pushFollow(FOLLOW_force_key_in_create_view_force_clause9640);
					force_key677=force_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_force_key.add(force_key677.getTree());
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 950:26: -> ^( NOFORCE[$no_key.start, \"no force\"] )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:950:29: ^( NOFORCE[$no_key.start, \"no force\"] )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOFORCE, (no_key676!=null?(no_key676.start):null), "no force"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:951:9: force_key
					{
					pushFollow(FOLLOW_force_key_in_create_view_force_clause9657);
					force_key678=force_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_force_key.add(force_key678.getTree());
					// AST REWRITE
					// elements: force_key
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 951:19: -> force_key
					{
						adaptor.addChild(root_0, stream_force_key.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "create_view_force_clause"


	public static class view_type_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "view_type_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:954:1: view_type_clause : view_type_constraints_clause ;
	public final PLSQLParser.view_type_clause_return view_type_clause() throws RecognitionException {
		PLSQLParser.view_type_clause_return retval = new PLSQLParser.view_type_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope view_type_constraints_clause679 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:955:5: ( view_type_constraints_clause )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:955:9: view_type_constraints_clause
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_view_type_constraints_clause_in_view_type_clause9684);
			view_type_constraints_clause679=view_type_constraints_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, view_type_constraints_clause679.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "view_type_clause"


	public static class view_type_constraints_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "view_type_constraints_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:961:1: view_type_constraints_clause : LEFT_PAREN view_type_constraints_clause_item ( COMMA view_type_constraints_clause_item )* RIGHT_PAREN -> ^( VIEW_TYPE_CONSTRAINTS[$LEFT_PAREN, \"view constraints\"] ( view_type_constraints_clause_item )+ ) ;
	public final PLSQLParser.view_type_constraints_clause_return view_type_constraints_clause() throws RecognitionException {
		PLSQLParser.view_type_constraints_clause_return retval = new PLSQLParser.view_type_constraints_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN680=null;
		Token COMMA682=null;
		Token RIGHT_PAREN684=null;
		ParserRuleReturnScope view_type_constraints_clause_item681 =null;
		ParserRuleReturnScope view_type_constraints_clause_item683 =null;

		Object LEFT_PAREN680_tree=null;
		Object COMMA682_tree=null;
		Object RIGHT_PAREN684_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_view_type_constraints_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule view_type_constraints_clause_item");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:962:5: ( LEFT_PAREN view_type_constraints_clause_item ( COMMA view_type_constraints_clause_item )* RIGHT_PAREN -> ^( VIEW_TYPE_CONSTRAINTS[$LEFT_PAREN, \"view constraints\"] ( view_type_constraints_clause_item )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:962:9: LEFT_PAREN view_type_constraints_clause_item ( COMMA view_type_constraints_clause_item )* RIGHT_PAREN
			{
			LEFT_PAREN680=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_view_type_constraints_clause9734); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN680);

			pushFollow(FOLLOW_view_type_constraints_clause_item_in_view_type_constraints_clause9736);
			view_type_constraints_clause_item681=view_type_constraints_clause_item();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_view_type_constraints_clause_item.add(view_type_constraints_clause_item681.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:962:54: ( COMMA view_type_constraints_clause_item )*
			loop188:
			while (true) {
				int alt188=2;
				int LA188_0 = input.LA(1);
				if ( (LA188_0==COMMA) ) {
					alt188=1;
				}

				switch (alt188) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:962:55: COMMA view_type_constraints_clause_item
					{
					COMMA682=(Token)match(input,COMMA,FOLLOW_COMMA_in_view_type_constraints_clause9739); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA682);

					pushFollow(FOLLOW_view_type_constraints_clause_item_in_view_type_constraints_clause9741);
					view_type_constraints_clause_item683=view_type_constraints_clause_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_view_type_constraints_clause_item.add(view_type_constraints_clause_item683.getTree());
					}
					break;

				default :
					break loop188;
				}
			}

			RIGHT_PAREN684=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_view_type_constraints_clause9745); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN684);

			// AST REWRITE
			// elements: view_type_constraints_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 963:5: -> ^( VIEW_TYPE_CONSTRAINTS[$LEFT_PAREN, \"view constraints\"] ( view_type_constraints_clause_item )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:963:8: ^( VIEW_TYPE_CONSTRAINTS[$LEFT_PAREN, \"view constraints\"] ( view_type_constraints_clause_item )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VIEW_TYPE_CONSTRAINTS, LEFT_PAREN680, "view constraints"), root_1);
				if ( !(stream_view_type_constraints_clause_item.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_view_type_constraints_clause_item.hasNext() ) {
					adaptor.addChild(root_1, stream_view_type_constraints_clause_item.nextTree());
				}
				stream_view_type_constraints_clause_item.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "view_type_constraints_clause"


	public static class view_type_constraints_clause_item_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "view_type_constraints_clause_item"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:966:1: view_type_constraints_clause_item : ( id_expression ( inline_constraint_clause )* -> ^( VIEW_TYPE_CONSTRAINT_ITEM_INLINE[$id_expression.start, \"view constraint item\"] id_expression ( inline_constraint_clause )* ) | out_of_line_constraint_clause );
	public final PLSQLParser.view_type_constraints_clause_item_return view_type_constraints_clause_item() throws RecognitionException {
		PLSQLParser.view_type_constraints_clause_item_return retval = new PLSQLParser.view_type_constraints_clause_item_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope id_expression685 =null;
		ParserRuleReturnScope inline_constraint_clause686 =null;
		ParserRuleReturnScope out_of_line_constraint_clause687 =null;

		RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
		RewriteRuleSubtreeStream stream_inline_constraint_clause=new RewriteRuleSubtreeStream(adaptor,"rule inline_constraint_clause");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:967:5: ( id_expression ( inline_constraint_clause )* -> ^( VIEW_TYPE_CONSTRAINT_ITEM_INLINE[$id_expression.start, \"view constraint item\"] id_expression ( inline_constraint_clause )* ) | out_of_line_constraint_clause )
			int alt190=2;
			alt190 = dfa190.predict(input);
			switch (alt190) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:967:9: id_expression ( inline_constraint_clause )*
					{
					pushFollow(FOLLOW_id_expression_in_view_type_constraints_clause_item9778);
					id_expression685=id_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id_expression.add(id_expression685.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:967:23: ( inline_constraint_clause )*
					loop189:
					while (true) {
						int alt189=2;
						int LA189_0 = input.LA(1);
						if ( (LA189_0==REGULAR_ID||LA189_0==SQL92_RESERVED_CHECK||(LA189_0 >= SQL92_RESERVED_NOT && LA189_0 <= SQL92_RESERVED_NULL)||LA189_0==SQL92_RESERVED_UNIQUE) ) {
							alt189=1;
						}

						switch (alt189) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:967:23: inline_constraint_clause
							{
							pushFollow(FOLLOW_inline_constraint_clause_in_view_type_constraints_clause_item9780);
							inline_constraint_clause686=inline_constraint_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_inline_constraint_clause.add(inline_constraint_clause686.getTree());
							}
							break;

						default :
							break loop189;
						}
					}

					// AST REWRITE
					// elements: id_expression, inline_constraint_clause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 968:9: -> ^( VIEW_TYPE_CONSTRAINT_ITEM_INLINE[$id_expression.start, \"view constraint item\"] id_expression ( inline_constraint_clause )* )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:968:12: ^( VIEW_TYPE_CONSTRAINT_ITEM_INLINE[$id_expression.start, \"view constraint item\"] id_expression ( inline_constraint_clause )* )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VIEW_TYPE_CONSTRAINT_ITEM_INLINE, (id_expression685!=null?(id_expression685.start):null), "view constraint item"), root_1);
						adaptor.addChild(root_1, stream_id_expression.nextTree());
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:968:107: ( inline_constraint_clause )*
						while ( stream_inline_constraint_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_inline_constraint_clause.nextTree());
						}
						stream_inline_constraint_clause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:969:11: out_of_line_constraint_clause
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_out_of_line_constraint_clause_in_view_type_constraints_clause_item9813);
					out_of_line_constraint_clause687=out_of_line_constraint_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, out_of_line_constraint_clause687.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "view_type_constraints_clause_item"


	public static class inline_constraint_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inline_constraint_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:972:1: inline_constraint_clause : ( constraint_key id_expression )? inline_constraint_def ( ( constraint_state_item )=> constraint_state_item )* -> ^( INLINE_CONSTRAINT_CLAUSE[\n $constraint_key.start != null ? $constraint_key.start : $inline_constraint_def.start,\n \"inline constraint\"] ( id_expression )? inline_constraint_def ( constraint_state_item )* ) ;
	public final PLSQLParser.inline_constraint_clause_return inline_constraint_clause() throws RecognitionException {
		PLSQLParser.inline_constraint_clause_return retval = new PLSQLParser.inline_constraint_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope constraint_key688 =null;
		ParserRuleReturnScope id_expression689 =null;
		ParserRuleReturnScope inline_constraint_def690 =null;
		ParserRuleReturnScope constraint_state_item691 =null;

		RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
		RewriteRuleSubtreeStream stream_constraint_key=new RewriteRuleSubtreeStream(adaptor,"rule constraint_key");
		RewriteRuleSubtreeStream stream_inline_constraint_def=new RewriteRuleSubtreeStream(adaptor,"rule inline_constraint_def");
		RewriteRuleSubtreeStream stream_constraint_state_item=new RewriteRuleSubtreeStream(adaptor,"rule constraint_state_item");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:973:5: ( ( constraint_key id_expression )? inline_constraint_def ( ( constraint_state_item )=> constraint_state_item )* -> ^( INLINE_CONSTRAINT_CLAUSE[\n $constraint_key.start != null ? $constraint_key.start : $inline_constraint_def.start,\n \"inline constraint\"] ( id_expression )? inline_constraint_def ( constraint_state_item )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:973:9: ( constraint_key id_expression )? inline_constraint_def ( ( constraint_state_item )=> constraint_state_item )*
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:973:9: ( constraint_key id_expression )?
			int alt191=2;
			int LA191_0 = input.LA(1);
			if ( (LA191_0==REGULAR_ID) ) {
				int LA191_1 = input.LA(2);
				if ( (LA191_1==REGULAR_ID) ) {
					int LA191_3 = input.LA(3);
					if ( ((input.LT(1).getText().equalsIgnoreCase("constraint"))) ) {
						alt191=1;
					}
				}
				else if ( (LA191_1==DELIMITED_ID) ) {
					int LA191_4 = input.LA(3);
					if ( (LA191_4==SQL92_RESERVED_CHECK||(LA191_4 >= SQL92_RESERVED_NOT && LA191_4 <= SQL92_RESERVED_NULL)||LA191_4==SQL92_RESERVED_UNIQUE) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {
						alt191=1;
					}
					else if ( (LA191_4==REGULAR_ID) ) {
						int LA191_6 = input.LA(4);
						if ( (LA191_6==DELIMITED_ID||LA191_6==INTRODUCER||LA191_6==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {
							alt191=1;
						}
					}
				}
			}
			switch (alt191) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:973:10: constraint_key id_expression
					{
					pushFollow(FOLLOW_constraint_key_in_inline_constraint_clause9837);
					constraint_key688=constraint_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraint_key.add(constraint_key688.getTree());
					pushFollow(FOLLOW_id_expression_in_inline_constraint_clause9839);
					id_expression689=id_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id_expression.add(id_expression689.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_inline_constraint_def_in_inline_constraint_clause9851);
			inline_constraint_def690=inline_constraint_def();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_inline_constraint_def.add(inline_constraint_def690.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:975:9: ( ( constraint_state_item )=> constraint_state_item )*
			loop192:
			while (true) {
				int alt192=2;
				int LA192_0 = input.LA(1);
				if ( (LA192_0==REGULAR_ID) ) {
					int LA192_2 = input.LA(2);
					if ( (LA192_2==REGULAR_ID) ) {
						int LA192_5 = input.LA(3);
						if ( ((((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("norely"))||(input.LT(1).getText().equalsIgnoreCase("initially"))||(input.LT(1).getText().equalsIgnoreCase("validate"))||(input.LT(1).getText().equalsIgnoreCase("novalidate"))||(input.LT(1).getText().equalsIgnoreCase("deferrable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("rely")))&&synpred39_PLSQLParser())) ) {
							alt192=1;
						}

					}
					else if ( (LA192_2==COMMA) && (synpred39_PLSQLParser())) {
						alt192=1;
					}
					else if ( (LA192_2==RIGHT_PAREN) && (synpred39_PLSQLParser())) {
						alt192=1;
					}
					else if ( (LA192_2==SQL92_RESERVED_NULL) && (synpred39_PLSQLParser())) {
						alt192=1;
					}
					else if ( (LA192_2==SQL92_RESERVED_NOT) && (synpred39_PLSQLParser())) {
						alt192=1;
					}
					else if ( (LA192_2==SQL92_RESERVED_UNIQUE) && (synpred39_PLSQLParser())) {
						alt192=1;
					}
					else if ( (LA192_2==SQL92_RESERVED_CHECK) && (synpred39_PLSQLParser())) {
						alt192=1;
					}
					else if ( (LA192_2==PLSQL_NON_RESERVED_USING) && (synpred39_PLSQLParser())) {
						alt192=1;
					}
					else if ( (LA192_2==SQL92_RESERVED_INTO) && ((synpred39_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("exceptions"))))) {
						alt192=1;
					}

				}
				else if ( (LA192_0==SQL92_RESERVED_NOT) ) {
					int LA192_3 = input.LA(2);
					if ( (LA192_3==REGULAR_ID) && (synpred39_PLSQLParser())) {
						alt192=1;
					}

				}
				else if ( (LA192_0==PLSQL_NON_RESERVED_USING) && (synpred39_PLSQLParser())) {
					alt192=1;
				}

				switch (alt192) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:975:10: ( constraint_state_item )=> constraint_state_item
					{
					pushFollow(FOLLOW_constraint_state_item_in_inline_constraint_clause9866);
					constraint_state_item691=constraint_state_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraint_state_item.add(constraint_state_item691.getTree());
					}
					break;

				default :
					break loop192;
				}
			}

			// AST REWRITE
			// elements: id_expression, constraint_state_item, inline_constraint_def
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 976:9: -> ^( INLINE_CONSTRAINT_CLAUSE[\n $constraint_key.start != null ? $constraint_key.start : $inline_constraint_def.start,\n \"inline constraint\"] ( id_expression )? inline_constraint_def ( constraint_state_item )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:976:12: ^( INLINE_CONSTRAINT_CLAUSE[\n $constraint_key.start != null ? $constraint_key.start : $inline_constraint_def.start,\n \"inline constraint\"] ( id_expression )? inline_constraint_def ( constraint_state_item )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INLINE_CONSTRAINT_CLAUSE, (constraint_key688!=null?(constraint_key688.start):null) != null ? (constraint_key688!=null?(constraint_key688.start):null) : (inline_constraint_def690!=null?(inline_constraint_def690.start):null), "inline constraint"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:978:34: ( id_expression )?
				if ( stream_id_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_id_expression.nextTree());
				}
				stream_id_expression.reset();

				adaptor.addChild(root_1, stream_inline_constraint_def.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:978:71: ( constraint_state_item )*
				while ( stream_constraint_state_item.hasNext() ) {
					adaptor.addChild(root_1, stream_constraint_state_item.nextTree());
				}
				stream_constraint_state_item.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "inline_constraint_clause"


	public static class inline_constraint_def_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inline_constraint_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:981:1: inline_constraint_def : ( inline_constraint_null | inline_constraint_not_null | inline_constraint_unique | inline_constraint_primary_key | references_clause | checks_clause );
	public final PLSQLParser.inline_constraint_def_return inline_constraint_def() throws RecognitionException {
		PLSQLParser.inline_constraint_def_return retval = new PLSQLParser.inline_constraint_def_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope inline_constraint_null692 =null;
		ParserRuleReturnScope inline_constraint_not_null693 =null;
		ParserRuleReturnScope inline_constraint_unique694 =null;
		ParserRuleReturnScope inline_constraint_primary_key695 =null;
		ParserRuleReturnScope references_clause696 =null;
		ParserRuleReturnScope checks_clause697 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:982:5: ( inline_constraint_null | inline_constraint_not_null | inline_constraint_unique | inline_constraint_primary_key | references_clause | checks_clause )
			int alt193=6;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NULL:
				{
				alt193=1;
				}
				break;
			case SQL92_RESERVED_NOT:
				{
				alt193=2;
				}
				break;
			case SQL92_RESERVED_UNIQUE:
				{
				alt193=3;
				}
				break;
			case REGULAR_ID:
				{
				int LA193_4 = input.LA(2);
				if ( (LA193_4==REGULAR_ID) ) {
					switch ( input.LA(3) ) {
					case COMMA:
					case PLSQL_NON_RESERVED_USING:
					case RIGHT_PAREN:
					case SQL92_RESERVED_CHECK:
					case SQL92_RESERVED_NOT:
					case SQL92_RESERVED_NULL:
					case SQL92_RESERVED_UNIQUE:
						{
						alt193=4;
						}
						break;
					case REGULAR_ID:
						{
						int LA193_9 = input.LA(4);
						if ( (LA193_9==COMMA||LA193_9==DELIMITED_ID||LA193_9==INTRODUCER||LA193_9==PLSQL_NON_RESERVED_USING||LA193_9==REGULAR_ID||LA193_9==RIGHT_PAREN||LA193_9==SQL92_RESERVED_CHECK||LA193_9==SQL92_RESERVED_INTO||(LA193_9 >= SQL92_RESERVED_NOT && LA193_9 <= SQL92_RESERVED_NULL)||LA193_9==SQL92_RESERVED_UNIQUE) ) {
							alt193=4;
						}
						else if ( (LA193_9==LEFT_PAREN||LA193_9==SQL92_RESERVED_FOR) ) {
							alt193=5;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 193, 9, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AT_SIGN:
					case LEFT_PAREN:
					case PERIOD:
						{
						alt193=5;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 193, 6, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}
				else if ( (LA193_4==DELIMITED_ID||LA193_4==INTRODUCER) ) {
					alt193=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 193, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_CHECK:
				{
				alt193=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 193, 0, input);
				throw nvae;
			}
			switch (alt193) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:983:9: inline_constraint_null
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inline_constraint_null_in_inline_constraint_def9920);
					inline_constraint_null692=inline_constraint_null();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_constraint_null692.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:984:11: inline_constraint_not_null
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inline_constraint_not_null_in_inline_constraint_def9932);
					inline_constraint_not_null693=inline_constraint_not_null();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_constraint_not_null693.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:985:11: inline_constraint_unique
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inline_constraint_unique_in_inline_constraint_def9944);
					inline_constraint_unique694=inline_constraint_unique();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_constraint_unique694.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:986:11: inline_constraint_primary_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_inline_constraint_primary_key_in_inline_constraint_def9956);
					inline_constraint_primary_key695=inline_constraint_primary_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, inline_constraint_primary_key695.getTree());

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:987:11: references_clause
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_references_clause_in_inline_constraint_def9968);
					references_clause696=references_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, references_clause696.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:988:11: checks_clause
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_checks_clause_in_inline_constraint_def9980);
					checks_clause697=checks_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, checks_clause697.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "inline_constraint_def"


	public static class inline_constraint_null_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inline_constraint_null"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:991:1: inline_constraint_null : null_key ;
	public final PLSQLParser.inline_constraint_null_return inline_constraint_null() throws RecognitionException {
		PLSQLParser.inline_constraint_null_return retval = new PLSQLParser.inline_constraint_null_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope null_key698 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:991:23: ( null_key )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:991:25: null_key
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_null_key_in_inline_constraint_null9996);
			null_key698=null_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, null_key698.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "inline_constraint_null"


	public static class inline_constraint_not_null_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inline_constraint_not_null"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:992:1: inline_constraint_not_null : not_key null_key -> NOT_NULL[$not_key.start, \"not null\"] ;
	public final PLSQLParser.inline_constraint_not_null_return inline_constraint_not_null() throws RecognitionException {
		PLSQLParser.inline_constraint_not_null_return retval = new PLSQLParser.inline_constraint_not_null_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope not_key699 =null;
		ParserRuleReturnScope null_key700 =null;

		RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:992:27: ( not_key null_key -> NOT_NULL[$not_key.start, \"not null\"] )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:992:29: not_key null_key
			{
			pushFollow(FOLLOW_not_key_in_inline_constraint_not_null10002);
			not_key699=not_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_not_key.add(not_key699.getTree());
			pushFollow(FOLLOW_null_key_in_inline_constraint_not_null10004);
			null_key700=null_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_null_key.add(null_key700.getTree());
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 992:46: -> NOT_NULL[$not_key.start, \"not null\"]
			{
				adaptor.addChild(root_0, (Object)adaptor.create(NOT_NULL, (not_key699!=null?(not_key699.start):null), "not null"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "inline_constraint_not_null"


	public static class inline_constraint_unique_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inline_constraint_unique"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:993:1: inline_constraint_unique : unique_key ;
	public final PLSQLParser.inline_constraint_unique_return inline_constraint_unique() throws RecognitionException {
		PLSQLParser.inline_constraint_unique_return retval = new PLSQLParser.inline_constraint_unique_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope unique_key701 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:993:25: ( unique_key )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:993:27: unique_key
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_unique_key_in_inline_constraint_unique10015);
			unique_key701=unique_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, unique_key701.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "inline_constraint_unique"


	public static class inline_constraint_primary_key_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "inline_constraint_primary_key"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:994:1: inline_constraint_primary_key : primary_key key_key -> PRIMARY_KEY[$primary_key.start, \"primary key\"] ;
	public final PLSQLParser.inline_constraint_primary_key_return inline_constraint_primary_key() throws RecognitionException {
		PLSQLParser.inline_constraint_primary_key_return retval = new PLSQLParser.inline_constraint_primary_key_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope primary_key702 =null;
		ParserRuleReturnScope key_key703 =null;

		RewriteRuleSubtreeStream stream_key_key=new RewriteRuleSubtreeStream(adaptor,"rule key_key");
		RewriteRuleSubtreeStream stream_primary_key=new RewriteRuleSubtreeStream(adaptor,"rule primary_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:994:30: ( primary_key key_key -> PRIMARY_KEY[$primary_key.start, \"primary key\"] )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:994:32: primary_key key_key
			{
			pushFollow(FOLLOW_primary_key_in_inline_constraint_primary_key10021);
			primary_key702=primary_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_primary_key.add(primary_key702.getTree());
			pushFollow(FOLLOW_key_key_in_inline_constraint_primary_key10023);
			key_key703=key_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_key_key.add(key_key703.getTree());
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 994:52: -> PRIMARY_KEY[$primary_key.start, \"primary key\"]
			{
				adaptor.addChild(root_0, (Object)adaptor.create(PRIMARY_KEY, (primary_key702!=null?(primary_key702.start):null), "primary key"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "inline_constraint_primary_key"


	public static class references_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "references_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:996:1: references_clause : references_key tableview_name LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN ( references_on_delete_clause )? -> ^( REFERENCES_CLAUSE[$references_key.start] tableview_name ( id_expression )+ ( references_on_delete_clause )? ) ;
	public final PLSQLParser.references_clause_return references_clause() throws RecognitionException {
		PLSQLParser.references_clause_return retval = new PLSQLParser.references_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN706=null;
		Token COMMA708=null;
		Token RIGHT_PAREN710=null;
		ParserRuleReturnScope references_key704 =null;
		ParserRuleReturnScope tableview_name705 =null;
		ParserRuleReturnScope id_expression707 =null;
		ParserRuleReturnScope id_expression709 =null;
		ParserRuleReturnScope references_on_delete_clause711 =null;

		Object LEFT_PAREN706_tree=null;
		Object COMMA708_tree=null;
		Object RIGHT_PAREN710_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
		RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
		RewriteRuleSubtreeStream stream_references_on_delete_clause=new RewriteRuleSubtreeStream(adaptor,"rule references_on_delete_clause");
		RewriteRuleSubtreeStream stream_references_key=new RewriteRuleSubtreeStream(adaptor,"rule references_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:997:5: ( references_key tableview_name LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN ( references_on_delete_clause )? -> ^( REFERENCES_CLAUSE[$references_key.start] tableview_name ( id_expression )+ ( references_on_delete_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:997:7: references_key tableview_name LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN ( references_on_delete_clause )?
			{
			pushFollow(FOLLOW_references_key_in_references_clause10040);
			references_key704=references_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_references_key.add(references_key704.getTree());
			pushFollow(FOLLOW_tableview_name_in_references_clause10042);
			tableview_name705=tableview_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name705.getTree());
			LEFT_PAREN706=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_references_clause10044); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN706);

			pushFollow(FOLLOW_id_expression_in_references_clause10046);
			id_expression707=id_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_id_expression.add(id_expression707.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:997:62: ( COMMA id_expression )*
			loop194:
			while (true) {
				int alt194=2;
				int LA194_0 = input.LA(1);
				if ( (LA194_0==COMMA) ) {
					alt194=1;
				}

				switch (alt194) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:997:63: COMMA id_expression
					{
					COMMA708=(Token)match(input,COMMA,FOLLOW_COMMA_in_references_clause10049); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA708);

					pushFollow(FOLLOW_id_expression_in_references_clause10051);
					id_expression709=id_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id_expression.add(id_expression709.getTree());
					}
					break;

				default :
					break loop194;
				}
			}

			RIGHT_PAREN710=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_references_clause10055); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN710);

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:997:97: ( references_on_delete_clause )?
			int alt195=2;
			int LA195_0 = input.LA(1);
			if ( (LA195_0==SQL92_RESERVED_ON) ) {
				alt195=1;
			}
			switch (alt195) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:997:97: references_on_delete_clause
					{
					pushFollow(FOLLOW_references_on_delete_clause_in_references_clause10057);
					references_on_delete_clause711=references_on_delete_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_references_on_delete_clause.add(references_on_delete_clause711.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableview_name, id_expression, references_on_delete_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 998:7: -> ^( REFERENCES_CLAUSE[$references_key.start] tableview_name ( id_expression )+ ( references_on_delete_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:998:10: ^( REFERENCES_CLAUSE[$references_key.start] tableview_name ( id_expression )+ ( references_on_delete_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REFERENCES_CLAUSE, (references_key704!=null?(references_key704.start):null)), root_1);
				adaptor.addChild(root_1, stream_tableview_name.nextTree());
				if ( !(stream_id_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_id_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_id_expression.nextTree());
				}
				stream_id_expression.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:998:83: ( references_on_delete_clause )?
				if ( stream_references_on_delete_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_references_on_delete_clause.nextTree());
				}
				stream_references_on_delete_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "references_clause"


	public static class references_on_delete_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "references_on_delete_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1001:1: references_on_delete_clause : on_key delete_key on_delete_clause_action -> ^( ON_DELETE[$on_key.start, \"on delete\"] on_delete_clause_action ) ;
	public final PLSQLParser.references_on_delete_clause_return references_on_delete_clause() throws RecognitionException {
		PLSQLParser.references_on_delete_clause_return retval = new PLSQLParser.references_on_delete_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope on_key712 =null;
		ParserRuleReturnScope delete_key713 =null;
		ParserRuleReturnScope on_delete_clause_action714 =null;

		RewriteRuleSubtreeStream stream_delete_key=new RewriteRuleSubtreeStream(adaptor,"rule delete_key");
		RewriteRuleSubtreeStream stream_on_key=new RewriteRuleSubtreeStream(adaptor,"rule on_key");
		RewriteRuleSubtreeStream stream_on_delete_clause_action=new RewriteRuleSubtreeStream(adaptor,"rule on_delete_clause_action");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1002:5: ( on_key delete_key on_delete_clause_action -> ^( ON_DELETE[$on_key.start, \"on delete\"] on_delete_clause_action ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1002:7: on_key delete_key on_delete_clause_action
			{
			pushFollow(FOLLOW_on_key_in_references_on_delete_clause10096);
			on_key712=on_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_on_key.add(on_key712.getTree());
			pushFollow(FOLLOW_delete_key_in_references_on_delete_clause10098);
			delete_key713=delete_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_delete_key.add(delete_key713.getTree());
			pushFollow(FOLLOW_on_delete_clause_action_in_references_on_delete_clause10100);
			on_delete_clause_action714=on_delete_clause_action();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_on_delete_clause_action.add(on_delete_clause_action714.getTree());
			// AST REWRITE
			// elements: on_delete_clause_action
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1003:5: -> ^( ON_DELETE[$on_key.start, \"on delete\"] on_delete_clause_action )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1003:9: ^( ON_DELETE[$on_key.start, \"on delete\"] on_delete_clause_action )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ON_DELETE, (on_key712!=null?(on_key712.start):null), "on delete"), root_1);
				adaptor.addChild(root_1, stream_on_delete_clause_action.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "references_on_delete_clause"


	public static class on_delete_clause_action_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "on_delete_clause_action"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1006:1: on_delete_clause_action : ( cascade_key | set_key null_key -> SET_NULL[$set_key.start, \"set null\"] );
	public final PLSQLParser.on_delete_clause_action_return on_delete_clause_action() throws RecognitionException {
		PLSQLParser.on_delete_clause_action_return retval = new PLSQLParser.on_delete_clause_action_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope cascade_key715 =null;
		ParserRuleReturnScope set_key716 =null;
		ParserRuleReturnScope null_key717 =null;

		RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
		RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1007:5: ( cascade_key | set_key null_key -> SET_NULL[$set_key.start, \"set null\"] )
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("cascade"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
				int LA196_1 = input.LA(2);
				if ( (LA196_1==COMMA||LA196_1==PLSQL_NON_RESERVED_USING||LA196_1==REGULAR_ID||LA196_1==RIGHT_PAREN||LA196_1==SQL92_RESERVED_CHECK||LA196_1==SQL92_RESERVED_NOT||LA196_1==SQL92_RESERVED_UNIQUE) && ((input.LT(1).getText().equalsIgnoreCase("cascade")))) {
					alt196=1;
				}
				else if ( (LA196_1==SQL92_RESERVED_NULL) && (((input.LT(1).getText().equalsIgnoreCase("cascade"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
					int LA196_3 = input.LA(3);
					if ( ((input.LT(1).getText().equalsIgnoreCase("cascade"))) ) {
						alt196=1;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("set"))) ) {
						alt196=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 196, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

			}

			switch (alt196) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1007:7: cascade_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_cascade_key_in_on_delete_clause_action10135);
					cascade_key715=cascade_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cascade_key715.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1008:7: set_key null_key
					{
					pushFollow(FOLLOW_set_key_in_on_delete_clause_action10143);
					set_key716=set_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_set_key.add(set_key716.getTree());
					pushFollow(FOLLOW_null_key_in_on_delete_clause_action10145);
					null_key717=null_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_null_key.add(null_key717.getTree());
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1008:24: -> SET_NULL[$set_key.start, \"set null\"]
					{
						adaptor.addChild(root_0, (Object)adaptor.create(SET_NULL, (set_key716!=null?(set_key716.start):null), "set null"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "on_delete_clause_action"


	public static class checks_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "checks_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1011:1: checks_clause : check_key LEFT_PAREN expression_wrapper RIGHT_PAREN -> ^( check_key expression_wrapper ) ;
	public final PLSQLParser.checks_clause_return checks_clause() throws RecognitionException {
		PLSQLParser.checks_clause_return retval = new PLSQLParser.checks_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN719=null;
		Token RIGHT_PAREN721=null;
		ParserRuleReturnScope check_key718 =null;
		ParserRuleReturnScope expression_wrapper720 =null;

		Object LEFT_PAREN719_tree=null;
		Object RIGHT_PAREN721_tree=null;
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_expression_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule expression_wrapper");
		RewriteRuleSubtreeStream stream_check_key=new RewriteRuleSubtreeStream(adaptor,"rule check_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1012:5: ( check_key LEFT_PAREN expression_wrapper RIGHT_PAREN -> ^( check_key expression_wrapper ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1012:7: check_key LEFT_PAREN expression_wrapper RIGHT_PAREN
			{
			pushFollow(FOLLOW_check_key_in_checks_clause10171);
			check_key718=check_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_check_key.add(check_key718.getTree());
			LEFT_PAREN719=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_checks_clause10173); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN719);

			pushFollow(FOLLOW_expression_wrapper_in_checks_clause10175);
			expression_wrapper720=expression_wrapper();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression_wrapper.add(expression_wrapper720.getTree());
			RIGHT_PAREN721=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_checks_clause10177); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN721);

			// AST REWRITE
			// elements: check_key, expression_wrapper
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1013:5: -> ^( check_key expression_wrapper )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1013:8: ^( check_key expression_wrapper )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_check_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_expression_wrapper.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "checks_clause"


	public static class constraint_state_item_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "constraint_state_item"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1016:1: constraint_state_item : ( not_key deferrable_key -> NOT_DEFERRABLE[$not_key.start, \"not deferrable\"] | deferrable_key | initially_key immediate_key -> immediate_key | initially_key deferred_key -> deferred_key | rely_key | norely_key | using_index_clause | enable_key | disable_key | validate_key | novalidate_key | exceptions_clause );
	public final PLSQLParser.constraint_state_item_return constraint_state_item() throws RecognitionException {
		PLSQLParser.constraint_state_item_return retval = new PLSQLParser.constraint_state_item_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope not_key722 =null;
		ParserRuleReturnScope deferrable_key723 =null;
		ParserRuleReturnScope deferrable_key724 =null;
		ParserRuleReturnScope initially_key725 =null;
		ParserRuleReturnScope immediate_key726 =null;
		ParserRuleReturnScope initially_key727 =null;
		ParserRuleReturnScope deferred_key728 =null;
		ParserRuleReturnScope rely_key729 =null;
		ParserRuleReturnScope norely_key730 =null;
		ParserRuleReturnScope using_index_clause731 =null;
		ParserRuleReturnScope enable_key732 =null;
		ParserRuleReturnScope disable_key733 =null;
		ParserRuleReturnScope validate_key734 =null;
		ParserRuleReturnScope novalidate_key735 =null;
		ParserRuleReturnScope exceptions_clause736 =null;

		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_deferrable_key=new RewriteRuleSubtreeStream(adaptor,"rule deferrable_key");
		RewriteRuleSubtreeStream stream_deferred_key=new RewriteRuleSubtreeStream(adaptor,"rule deferred_key");
		RewriteRuleSubtreeStream stream_initially_key=new RewriteRuleSubtreeStream(adaptor,"rule initially_key");
		RewriteRuleSubtreeStream stream_immediate_key=new RewriteRuleSubtreeStream(adaptor,"rule immediate_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1017:5: ( not_key deferrable_key -> NOT_DEFERRABLE[$not_key.start, \"not deferrable\"] | deferrable_key | initially_key immediate_key -> immediate_key | initially_key deferred_key -> deferred_key | rely_key | norely_key | using_index_clause | enable_key | disable_key | validate_key | novalidate_key | exceptions_clause )
			int alt197=12;
			switch ( input.LA(1) ) {
			case SQL92_RESERVED_NOT:
				{
				alt197=1;
				}
				break;
			case REGULAR_ID:
				{
				int LA197_2 = input.LA(2);
				if ( (LA197_2==REGULAR_ID) ) {
					int LA197_4 = input.LA(3);
					if ( ((input.LT(1).getText().equalsIgnoreCase("initially"))) ) {
						alt197=3;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("initially"))) ) {
						alt197=4;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 197, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA197_2==SQL92_RESERVED_INTO) && ((input.LT(1).getText().equalsIgnoreCase("exceptions")))) {
					alt197=12;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("deferrable"))) ) {
					alt197=2;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("rely"))) ) {
					alt197=5;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("norely"))) ) {
					alt197=6;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("enable"))) ) {
					alt197=8;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("disable"))) ) {
					alt197=9;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("validate"))) ) {
					alt197=10;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("novalidate"))) ) {
					alt197=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 197, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PLSQL_NON_RESERVED_USING:
				{
				alt197=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 197, 0, input);
				throw nvae;
			}
			switch (alt197) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1017:7: not_key deferrable_key
					{
					pushFollow(FOLLOW_not_key_in_constraint_state_item10210);
					not_key722=not_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_not_key.add(not_key722.getTree());
					pushFollow(FOLLOW_deferrable_key_in_constraint_state_item10212);
					deferrable_key723=deferrable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_deferrable_key.add(deferrable_key723.getTree());
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1017:30: -> NOT_DEFERRABLE[$not_key.start, \"not deferrable\"]
					{
						adaptor.addChild(root_0, (Object)adaptor.create(NOT_DEFERRABLE, (not_key722!=null?(not_key722.start):null), "not deferrable"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1018:7: deferrable_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_deferrable_key_in_constraint_state_item10225);
					deferrable_key724=deferrable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, deferrable_key724.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1019:7: initially_key immediate_key
					{
					pushFollow(FOLLOW_initially_key_in_constraint_state_item10233);
					initially_key725=initially_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_initially_key.add(initially_key725.getTree());
					pushFollow(FOLLOW_immediate_key_in_constraint_state_item10235);
					immediate_key726=immediate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_immediate_key.add(immediate_key726.getTree());
					// AST REWRITE
					// elements: immediate_key
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1019:35: -> immediate_key
					{
						adaptor.addChild(root_0, stream_immediate_key.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1020:7: initially_key deferred_key
					{
					pushFollow(FOLLOW_initially_key_in_constraint_state_item10247);
					initially_key727=initially_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_initially_key.add(initially_key727.getTree());
					pushFollow(FOLLOW_deferred_key_in_constraint_state_item10249);
					deferred_key728=deferred_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_deferred_key.add(deferred_key728.getTree());
					// AST REWRITE
					// elements: deferred_key
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1020:34: -> deferred_key
					{
						adaptor.addChild(root_0, stream_deferred_key.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1021:7: rely_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_rely_key_in_constraint_state_item10261);
					rely_key729=rely_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rely_key729.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1022:7: norely_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_norely_key_in_constraint_state_item10269);
					norely_key730=norely_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, norely_key730.getTree());

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1023:7: using_index_clause
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_using_index_clause_in_constraint_state_item10277);
					using_index_clause731=using_index_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, using_index_clause731.getTree());

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1024:7: enable_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_enable_key_in_constraint_state_item10285);
					enable_key732=enable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enable_key732.getTree());

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1025:7: disable_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_disable_key_in_constraint_state_item10293);
					disable_key733=disable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, disable_key733.getTree());

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1026:7: validate_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_validate_key_in_constraint_state_item10301);
					validate_key734=validate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, validate_key734.getTree());

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1027:7: novalidate_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_novalidate_key_in_constraint_state_item10309);
					novalidate_key735=novalidate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, novalidate_key735.getTree());

					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1028:7: exceptions_clause
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exceptions_clause_in_constraint_state_item10317);
					exceptions_clause736=exceptions_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exceptions_clause736.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraint_state_item"


	public static class using_index_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "using_index_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1031:1: using_index_clause : using_key index_key using_index_def -> ^( USING_INDEX[$using_key.start, \"using index\"] using_index_def ) ;
	public final PLSQLParser.using_index_clause_return using_index_clause() throws RecognitionException {
		PLSQLParser.using_index_clause_return retval = new PLSQLParser.using_index_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope using_key737 =null;
		ParserRuleReturnScope index_key738 =null;
		ParserRuleReturnScope using_index_def739 =null;

		RewriteRuleSubtreeStream stream_index_key=new RewriteRuleSubtreeStream(adaptor,"rule index_key");
		RewriteRuleSubtreeStream stream_using_key=new RewriteRuleSubtreeStream(adaptor,"rule using_key");
		RewriteRuleSubtreeStream stream_using_index_def=new RewriteRuleSubtreeStream(adaptor,"rule using_index_def");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1032:5: ( using_key index_key using_index_def -> ^( USING_INDEX[$using_key.start, \"using index\"] using_index_def ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1032:7: using_key index_key using_index_def
			{
			pushFollow(FOLLOW_using_key_in_using_index_clause10338);
			using_key737=using_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_using_key.add(using_key737.getTree());
			pushFollow(FOLLOW_index_key_in_using_index_clause10340);
			index_key738=index_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_index_key.add(index_key738.getTree());
			pushFollow(FOLLOW_using_index_def_in_using_index_clause10342);
			using_index_def739=using_index_def();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_using_index_def.add(using_index_def739.getTree());
			// AST REWRITE
			// elements: using_index_def
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1033:5: -> ^( USING_INDEX[$using_key.start, \"using index\"] using_index_def )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1033:8: ^( USING_INDEX[$using_key.start, \"using index\"] using_index_def )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(USING_INDEX, (using_key737!=null?(using_key737.start):null), "using index"), root_1);
				adaptor.addChild(root_1, stream_using_index_def.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_index_clause"


	public static class using_index_def_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "using_index_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1036:1: using_index_def : tableview_name ;
	public final PLSQLParser.using_index_def_return using_index_def() throws RecognitionException {
		PLSQLParser.using_index_def_return retval = new PLSQLParser.using_index_def_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope tableview_name740 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1037:5: ( tableview_name )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1037:7: tableview_name
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_tableview_name_in_using_index_def10372);
			tableview_name740=tableview_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tableview_name740.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "using_index_def"


	public static class exceptions_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exceptions_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1043:1: exceptions_clause : exceptions_key into_key tableview_name -> ^( exceptions_key tableview_name ) ;
	public final PLSQLParser.exceptions_clause_return exceptions_clause() throws RecognitionException {
		PLSQLParser.exceptions_clause_return retval = new PLSQLParser.exceptions_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope exceptions_key741 =null;
		ParserRuleReturnScope into_key742 =null;
		ParserRuleReturnScope tableview_name743 =null;

		RewriteRuleSubtreeStream stream_tableview_name=new RewriteRuleSubtreeStream(adaptor,"rule tableview_name");
		RewriteRuleSubtreeStream stream_into_key=new RewriteRuleSubtreeStream(adaptor,"rule into_key");
		RewriteRuleSubtreeStream stream_exceptions_key=new RewriteRuleSubtreeStream(adaptor,"rule exceptions_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1044:5: ( exceptions_key into_key tableview_name -> ^( exceptions_key tableview_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1044:7: exceptions_key into_key tableview_name
			{
			pushFollow(FOLLOW_exceptions_key_in_exceptions_clause10406);
			exceptions_key741=exceptions_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_exceptions_key.add(exceptions_key741.getTree());
			pushFollow(FOLLOW_into_key_in_exceptions_clause10408);
			into_key742=into_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_into_key.add(into_key742.getTree());
			pushFollow(FOLLOW_tableview_name_in_exceptions_clause10410);
			tableview_name743=tableview_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableview_name.add(tableview_name743.getTree());
			// AST REWRITE
			// elements: exceptions_key, tableview_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1045:5: -> ^( exceptions_key tableview_name )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1045:8: ^( exceptions_key tableview_name )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_exceptions_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_tableview_name.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exceptions_clause"


	public static class out_of_line_constraint_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "out_of_line_constraint_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1048:1: out_of_line_constraint_clause : ( constraint_key id_expression )? out_of_line_constraint_def ( constraint_state_item )* -> ^( OUT_OF_LINE_CONSTRAINT[$constraint_key.start != null ? $constraint_key.start : $out_of_line_constraint_def.start, \"out of line constraint\"] ( id_expression )? out_of_line_constraint_def ( constraint_state_item )* ) ;
	public final PLSQLParser.out_of_line_constraint_clause_return out_of_line_constraint_clause() throws RecognitionException {
		PLSQLParser.out_of_line_constraint_clause_return retval = new PLSQLParser.out_of_line_constraint_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope constraint_key744 =null;
		ParserRuleReturnScope id_expression745 =null;
		ParserRuleReturnScope out_of_line_constraint_def746 =null;
		ParserRuleReturnScope constraint_state_item747 =null;

		RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
		RewriteRuleSubtreeStream stream_constraint_key=new RewriteRuleSubtreeStream(adaptor,"rule constraint_key");
		RewriteRuleSubtreeStream stream_out_of_line_constraint_def=new RewriteRuleSubtreeStream(adaptor,"rule out_of_line_constraint_def");
		RewriteRuleSubtreeStream stream_constraint_state_item=new RewriteRuleSubtreeStream(adaptor,"rule constraint_state_item");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1049:5: ( ( constraint_key id_expression )? out_of_line_constraint_def ( constraint_state_item )* -> ^( OUT_OF_LINE_CONSTRAINT[$constraint_key.start != null ? $constraint_key.start : $out_of_line_constraint_def.start, \"out of line constraint\"] ( id_expression )? out_of_line_constraint_def ( constraint_state_item )* ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1049:7: ( constraint_key id_expression )? out_of_line_constraint_def ( constraint_state_item )*
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1049:7: ( constraint_key id_expression )?
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==REGULAR_ID) ) {
				int LA198_1 = input.LA(2);
				if ( (LA198_1==REGULAR_ID) ) {
					int LA198_3 = input.LA(3);
					if ( (LA198_3==REGULAR_ID||LA198_3==SQL92_RESERVED_CHECK||LA198_3==SQL92_RESERVED_UNIQUE) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {
						alt198=1;
					}
				}
				else if ( (LA198_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {
					alt198=1;
				}
			}
			switch (alt198) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1049:8: constraint_key id_expression
					{
					pushFollow(FOLLOW_constraint_key_in_out_of_line_constraint_clause10444);
					constraint_key744=constraint_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraint_key.add(constraint_key744.getTree());
					pushFollow(FOLLOW_id_expression_in_out_of_line_constraint_clause10446);
					id_expression745=id_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id_expression.add(id_expression745.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_out_of_line_constraint_def_in_out_of_line_constraint_clause10450);
			out_of_line_constraint_def746=out_of_line_constraint_def();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_out_of_line_constraint_def.add(out_of_line_constraint_def746.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1049:66: ( constraint_state_item )*
			loop199:
			while (true) {
				int alt199=2;
				int LA199_0 = input.LA(1);
				if ( (LA199_0==PLSQL_NON_RESERVED_USING||LA199_0==REGULAR_ID||LA199_0==SQL92_RESERVED_NOT) ) {
					alt199=1;
				}

				switch (alt199) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1049:66: constraint_state_item
					{
					pushFollow(FOLLOW_constraint_state_item_in_out_of_line_constraint_clause10452);
					constraint_state_item747=constraint_state_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraint_state_item.add(constraint_state_item747.getTree());
					}
					break;

				default :
					break loop199;
				}
			}

			// AST REWRITE
			// elements: out_of_line_constraint_def, constraint_state_item, id_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1050:7: -> ^( OUT_OF_LINE_CONSTRAINT[$constraint_key.start != null ? $constraint_key.start : $out_of_line_constraint_def.start, \"out of line constraint\"] ( id_expression )? out_of_line_constraint_def ( constraint_state_item )* )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1050:10: ^( OUT_OF_LINE_CONSTRAINT[$constraint_key.start != null ? $constraint_key.start : $out_of_line_constraint_def.start, \"out of line constraint\"] ( id_expression )? out_of_line_constraint_def ( constraint_state_item )* )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OUT_OF_LINE_CONSTRAINT, (constraint_key744!=null?(constraint_key744.start):null) != null ? (constraint_key744!=null?(constraint_key744.start):null) : (out_of_line_constraint_def746!=null?(out_of_line_constraint_def746.start):null), "out of line constraint"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1050:152: ( id_expression )?
				if ( stream_id_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_id_expression.nextTree());
				}
				stream_id_expression.reset();

				adaptor.addChild(root_1, stream_out_of_line_constraint_def.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1050:194: ( constraint_state_item )*
				while ( stream_constraint_state_item.hasNext() ) {
					adaptor.addChild(root_1, stream_constraint_state_item.nextTree());
				}
				stream_constraint_state_item.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "out_of_line_constraint_clause"


	public static class out_of_line_constraint_def_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "out_of_line_constraint_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1053:1: out_of_line_constraint_def : ( out_of_line_constraint_def_unique | out_of_line_constraint_def_primary_key | out_of_line_constraint_def_foreign_key | checks_clause );
	public final PLSQLParser.out_of_line_constraint_def_return out_of_line_constraint_def() throws RecognitionException {
		PLSQLParser.out_of_line_constraint_def_return retval = new PLSQLParser.out_of_line_constraint_def_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope out_of_line_constraint_def_unique748 =null;
		ParserRuleReturnScope out_of_line_constraint_def_primary_key749 =null;
		ParserRuleReturnScope out_of_line_constraint_def_foreign_key750 =null;
		ParserRuleReturnScope checks_clause751 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1054:5: ( out_of_line_constraint_def_unique | out_of_line_constraint_def_primary_key | out_of_line_constraint_def_foreign_key | checks_clause )
			int alt200=4;
			alt200 = dfa200.predict(input);
			switch (alt200) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1054:7: out_of_line_constraint_def_unique
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_out_of_line_constraint_def_unique_in_out_of_line_constraint_def10491);
					out_of_line_constraint_def_unique748=out_of_line_constraint_def_unique();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, out_of_line_constraint_def_unique748.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1055:7: out_of_line_constraint_def_primary_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_out_of_line_constraint_def_primary_key_in_out_of_line_constraint_def10499);
					out_of_line_constraint_def_primary_key749=out_of_line_constraint_def_primary_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, out_of_line_constraint_def_primary_key749.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1056:7: out_of_line_constraint_def_foreign_key
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_out_of_line_constraint_def_foreign_key_in_out_of_line_constraint_def10507);
					out_of_line_constraint_def_foreign_key750=out_of_line_constraint_def_foreign_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, out_of_line_constraint_def_foreign_key750.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1057:7: checks_clause
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_checks_clause_in_out_of_line_constraint_def10515);
					checks_clause751=checks_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, checks_clause751.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "out_of_line_constraint_def"


	public static class out_of_line_constraint_def_unique_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "out_of_line_constraint_def_unique"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1060:1: out_of_line_constraint_def_unique : unique_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN -> ^( unique_key ( id_expression )+ ) ;
	public final PLSQLParser.out_of_line_constraint_def_unique_return out_of_line_constraint_def_unique() throws RecognitionException {
		PLSQLParser.out_of_line_constraint_def_unique_return retval = new PLSQLParser.out_of_line_constraint_def_unique_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN753=null;
		Token COMMA755=null;
		Token RIGHT_PAREN757=null;
		ParserRuleReturnScope unique_key752 =null;
		ParserRuleReturnScope id_expression754 =null;
		ParserRuleReturnScope id_expression756 =null;

		Object LEFT_PAREN753_tree=null;
		Object COMMA755_tree=null;
		Object RIGHT_PAREN757_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
		RewriteRuleSubtreeStream stream_unique_key=new RewriteRuleSubtreeStream(adaptor,"rule unique_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1061:5: ( unique_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN -> ^( unique_key ( id_expression )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1061:7: unique_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN
			{
			pushFollow(FOLLOW_unique_key_in_out_of_line_constraint_def_unique10536);
			unique_key752=unique_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_unique_key.add(unique_key752.getTree());
			LEFT_PAREN753=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_out_of_line_constraint_def_unique10538); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN753);

			pushFollow(FOLLOW_id_expression_in_out_of_line_constraint_def_unique10540);
			id_expression754=id_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_id_expression.add(id_expression754.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1061:43: ( COMMA id_expression )*
			loop201:
			while (true) {
				int alt201=2;
				int LA201_0 = input.LA(1);
				if ( (LA201_0==COMMA) ) {
					alt201=1;
				}

				switch (alt201) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1061:44: COMMA id_expression
					{
					COMMA755=(Token)match(input,COMMA,FOLLOW_COMMA_in_out_of_line_constraint_def_unique10543); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA755);

					pushFollow(FOLLOW_id_expression_in_out_of_line_constraint_def_unique10545);
					id_expression756=id_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id_expression.add(id_expression756.getTree());
					}
					break;

				default :
					break loop201;
				}
			}

			RIGHT_PAREN757=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_out_of_line_constraint_def_unique10549); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN757);

			// AST REWRITE
			// elements: unique_key, id_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1062:7: -> ^( unique_key ( id_expression )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1062:10: ^( unique_key ( id_expression )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_unique_key.nextNode(), root_1);
				if ( !(stream_id_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_id_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_id_expression.nextTree());
				}
				stream_id_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "out_of_line_constraint_def_unique"


	public static class out_of_line_constraint_def_primary_key_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "out_of_line_constraint_def_primary_key"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1065:1: out_of_line_constraint_def_primary_key : primary_key key_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN -> ^( PRIMARY_KEY[$primary_key.start, \"primary key\"] ( id_expression )+ ) ;
	public final PLSQLParser.out_of_line_constraint_def_primary_key_return out_of_line_constraint_def_primary_key() throws RecognitionException {
		PLSQLParser.out_of_line_constraint_def_primary_key_return retval = new PLSQLParser.out_of_line_constraint_def_primary_key_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN760=null;
		Token COMMA762=null;
		Token RIGHT_PAREN764=null;
		ParserRuleReturnScope primary_key758 =null;
		ParserRuleReturnScope key_key759 =null;
		ParserRuleReturnScope id_expression761 =null;
		ParserRuleReturnScope id_expression763 =null;

		Object LEFT_PAREN760_tree=null;
		Object COMMA762_tree=null;
		Object RIGHT_PAREN764_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
		RewriteRuleSubtreeStream stream_key_key=new RewriteRuleSubtreeStream(adaptor,"rule key_key");
		RewriteRuleSubtreeStream stream_primary_key=new RewriteRuleSubtreeStream(adaptor,"rule primary_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1066:5: ( primary_key key_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN -> ^( PRIMARY_KEY[$primary_key.start, \"primary key\"] ( id_expression )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1066:7: primary_key key_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN
			{
			pushFollow(FOLLOW_primary_key_in_out_of_line_constraint_def_primary_key10585);
			primary_key758=primary_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_primary_key.add(primary_key758.getTree());
			pushFollow(FOLLOW_key_key_in_out_of_line_constraint_def_primary_key10587);
			key_key759=key_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_key_key.add(key_key759.getTree());
			LEFT_PAREN760=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_out_of_line_constraint_def_primary_key10589); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN760);

			pushFollow(FOLLOW_id_expression_in_out_of_line_constraint_def_primary_key10591);
			id_expression761=id_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_id_expression.add(id_expression761.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1066:52: ( COMMA id_expression )*
			loop202:
			while (true) {
				int alt202=2;
				int LA202_0 = input.LA(1);
				if ( (LA202_0==COMMA) ) {
					alt202=1;
				}

				switch (alt202) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1066:53: COMMA id_expression
					{
					COMMA762=(Token)match(input,COMMA,FOLLOW_COMMA_in_out_of_line_constraint_def_primary_key10594); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA762);

					pushFollow(FOLLOW_id_expression_in_out_of_line_constraint_def_primary_key10596);
					id_expression763=id_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id_expression.add(id_expression763.getTree());
					}
					break;

				default :
					break loop202;
				}
			}

			RIGHT_PAREN764=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_out_of_line_constraint_def_primary_key10600); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN764);

			// AST REWRITE
			// elements: id_expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1067:7: -> ^( PRIMARY_KEY[$primary_key.start, \"primary key\"] ( id_expression )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1067:10: ^( PRIMARY_KEY[$primary_key.start, \"primary key\"] ( id_expression )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PRIMARY_KEY, (primary_key758!=null?(primary_key758.start):null), "primary key"), root_1);
				if ( !(stream_id_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_id_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_id_expression.nextTree());
				}
				stream_id_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "out_of_line_constraint_def_primary_key"


	public static class out_of_line_constraint_def_foreign_key_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "out_of_line_constraint_def_foreign_key"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1070:1: out_of_line_constraint_def_foreign_key : foreign_key key_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN references_clause -> ^( FOREIGN_KEY[$foreign_key.start, \"foreign key\"] ( id_expression )+ references_clause ) ;
	public final PLSQLParser.out_of_line_constraint_def_foreign_key_return out_of_line_constraint_def_foreign_key() throws RecognitionException {
		PLSQLParser.out_of_line_constraint_def_foreign_key_return retval = new PLSQLParser.out_of_line_constraint_def_foreign_key_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN767=null;
		Token COMMA769=null;
		Token RIGHT_PAREN771=null;
		ParserRuleReturnScope foreign_key765 =null;
		ParserRuleReturnScope key_key766 =null;
		ParserRuleReturnScope id_expression768 =null;
		ParserRuleReturnScope id_expression770 =null;
		ParserRuleReturnScope references_clause772 =null;

		Object LEFT_PAREN767_tree=null;
		Object COMMA769_tree=null;
		Object RIGHT_PAREN771_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_id_expression=new RewriteRuleSubtreeStream(adaptor,"rule id_expression");
		RewriteRuleSubtreeStream stream_key_key=new RewriteRuleSubtreeStream(adaptor,"rule key_key");
		RewriteRuleSubtreeStream stream_foreign_key=new RewriteRuleSubtreeStream(adaptor,"rule foreign_key");
		RewriteRuleSubtreeStream stream_references_clause=new RewriteRuleSubtreeStream(adaptor,"rule references_clause");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1071:5: ( foreign_key key_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN references_clause -> ^( FOREIGN_KEY[$foreign_key.start, \"foreign key\"] ( id_expression )+ references_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1071:7: foreign_key key_key LEFT_PAREN id_expression ( COMMA id_expression )* RIGHT_PAREN references_clause
			{
			pushFollow(FOLLOW_foreign_key_in_out_of_line_constraint_def_foreign_key10633);
			foreign_key765=foreign_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_foreign_key.add(foreign_key765.getTree());
			pushFollow(FOLLOW_key_key_in_out_of_line_constraint_def_foreign_key10635);
			key_key766=key_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_key_key.add(key_key766.getTree());
			LEFT_PAREN767=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_out_of_line_constraint_def_foreign_key10637); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN767);

			pushFollow(FOLLOW_id_expression_in_out_of_line_constraint_def_foreign_key10639);
			id_expression768=id_expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_id_expression.add(id_expression768.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1071:52: ( COMMA id_expression )*
			loop203:
			while (true) {
				int alt203=2;
				int LA203_0 = input.LA(1);
				if ( (LA203_0==COMMA) ) {
					alt203=1;
				}

				switch (alt203) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1071:53: COMMA id_expression
					{
					COMMA769=(Token)match(input,COMMA,FOLLOW_COMMA_in_out_of_line_constraint_def_foreign_key10642); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA769);

					pushFollow(FOLLOW_id_expression_in_out_of_line_constraint_def_foreign_key10644);
					id_expression770=id_expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id_expression.add(id_expression770.getTree());
					}
					break;

				default :
					break loop203;
				}
			}

			RIGHT_PAREN771=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_out_of_line_constraint_def_foreign_key10648); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN771);

			pushFollow(FOLLOW_references_clause_in_out_of_line_constraint_def_foreign_key10650);
			references_clause772=references_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_references_clause.add(references_clause772.getTree());
			// AST REWRITE
			// elements: id_expression, references_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1072:7: -> ^( FOREIGN_KEY[$foreign_key.start, \"foreign key\"] ( id_expression )+ references_clause )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1072:10: ^( FOREIGN_KEY[$foreign_key.start, \"foreign key\"] ( id_expression )+ references_clause )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOREIGN_KEY, (foreign_key765!=null?(foreign_key765.start):null), "foreign key"), root_1);
				if ( !(stream_id_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_id_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_id_expression.nextTree());
				}
				stream_id_expression.reset();

				adaptor.addChild(root_1, stream_references_clause.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "out_of_line_constraint_def_foreign_key"


	public static class invoker_rights_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "invoker_rights_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1080:1: invoker_rights_clause : authid_key ( current_user_key | definer_key ) -> ^( authid_key ( current_user_key )? ( definer_key )? ) ;
	public final PLSQLParser.invoker_rights_clause_return invoker_rights_clause() throws RecognitionException {
		PLSQLParser.invoker_rights_clause_return retval = new PLSQLParser.invoker_rights_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope authid_key773 =null;
		ParserRuleReturnScope current_user_key774 =null;
		ParserRuleReturnScope definer_key775 =null;

		RewriteRuleSubtreeStream stream_authid_key=new RewriteRuleSubtreeStream(adaptor,"rule authid_key");
		RewriteRuleSubtreeStream stream_current_user_key=new RewriteRuleSubtreeStream(adaptor,"rule current_user_key");
		RewriteRuleSubtreeStream stream_definer_key=new RewriteRuleSubtreeStream(adaptor,"rule definer_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1081:5: ( authid_key ( current_user_key | definer_key ) -> ^( authid_key ( current_user_key )? ( definer_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1081:10: authid_key ( current_user_key | definer_key )
			{
			pushFollow(FOLLOW_authid_key_in_invoker_rights_clause10693);
			authid_key773=authid_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_authid_key.add(authid_key773.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1081:21: ( current_user_key | definer_key )
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==REGULAR_ID) ) {
				int LA204_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("current_user"))) ) {
					alt204=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("definer"))) ) {
					alt204=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 204, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 204, 0, input);
				throw nvae;
			}

			switch (alt204) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1081:22: current_user_key
					{
					pushFollow(FOLLOW_current_user_key_in_invoker_rights_clause10696);
					current_user_key774=current_user_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_current_user_key.add(current_user_key774.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1081:39: definer_key
					{
					pushFollow(FOLLOW_definer_key_in_invoker_rights_clause10698);
					definer_key775=definer_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_definer_key.add(definer_key775.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: authid_key, definer_key, current_user_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1082:9: -> ^( authid_key ( current_user_key )? ( definer_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1082:12: ^( authid_key ( current_user_key )? ( definer_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_authid_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1082:25: ( current_user_key )?
				if ( stream_current_user_key.hasNext() ) {
					adaptor.addChild(root_1, stream_current_user_key.nextTree());
				}
				stream_current_user_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1082:43: ( definer_key )?
				if ( stream_definer_key.hasNext() ) {
					adaptor.addChild(root_1, stream_definer_key.nextTree());
				}
				stream_definer_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "invoker_rights_clause"


	public static class compiler_parameters_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "compiler_parameters_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1085:1: compiler_parameters_clause : id EQUALS_OP expression -> ^( COMPILER_PARAMETER ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) ) ) ;
	public final PLSQLParser.compiler_parameters_clause_return compiler_parameters_clause() throws RecognitionException {
		PLSQLParser.compiler_parameters_clause_return retval = new PLSQLParser.compiler_parameters_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token EQUALS_OP777=null;
		ParserRuleReturnScope id776 =null;
		ParserRuleReturnScope expression778 =null;

		Object EQUALS_OP777_tree=null;
		RewriteRuleTokenStream stream_EQUALS_OP=new RewriteRuleTokenStream(adaptor,"token EQUALS_OP");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1086:5: ( id EQUALS_OP expression -> ^( COMPILER_PARAMETER ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1086:10: id EQUALS_OP expression
			{
			pushFollow(FOLLOW_id_in_compiler_parameters_clause10739);
			id776=id();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_id.add(id776.getTree());
			EQUALS_OP777=(Token)match(input,EQUALS_OP,FOLLOW_EQUALS_OP_in_compiler_parameters_clause10741); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUALS_OP.add(EQUALS_OP777);

			pushFollow(FOLLOW_expression_in_compiler_parameters_clause10743);
			expression778=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression778.getTree());
			// AST REWRITE
			// elements: expression, id
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1087:9: -> ^( COMPILER_PARAMETER ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1087:12: ^( COMPILER_PARAMETER ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(COMPILER_PARAMETER, "COMPILER_PARAMETER"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1087:33: ^( ASSIGN[$EQUALS_OP] id ^( EXPR expression ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, EQUALS_OP777), root_2);
				adaptor.addChild(root_2, stream_id.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1087:57: ^( EXPR expression )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);
				adaptor.addChild(root_3, stream_expression.nextTree());
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "compiler_parameters_clause"


	public static class call_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "call_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1090:1: call_spec : language_key ^ ( java_spec | c_spec ) ;
	public final PLSQLParser.call_spec_return call_spec() throws RecognitionException {
		PLSQLParser.call_spec_return retval = new PLSQLParser.call_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope language_key779 =null;
		ParserRuleReturnScope java_spec780 =null;
		ParserRuleReturnScope c_spec781 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1091:5: ( language_key ^ ( java_spec | c_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1091:10: language_key ^ ( java_spec | c_spec )
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_language_key_in_call_spec10790);
			language_key779=language_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(language_key779.getTree(), root_0);
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1091:24: ( java_spec | c_spec )
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==REGULAR_ID) ) {
				int LA205_1 = input.LA(2);
				if ( (LA205_1==REGULAR_ID) ) {
					int LA205_2 = input.LA(3);
					if ( (LA205_2==CHAR_STRING) ) {
						int LA205_3 = input.LA(4);
						if ( (LA205_3==COMMA||LA205_3==RIGHT_PAREN||LA205_3==SEMICOLON||LA205_3==SQL92_RESERVED_END||LA205_3==SQL92_RESERVED_ORDER) ) {
							alt205=1;
						}
						else if ( (LA205_3==REGULAR_ID) ) {
							int LA205_6 = input.LA(5);
							if ( (LA205_6==SEMICOLON||LA205_6==SQL92_RESERVED_NOT||LA205_6==SQL92_RESERVED_PROCEDURE) ) {
								alt205=1;
							}
							else if ( (LA205_6==REGULAR_ID) ) {
								int LA205_7 = input.LA(6);
								if ( ((input.LT(1).getText().equalsIgnoreCase("java"))) ) {
									alt205=1;
								}
								else if ( ((input.LT(1).getText().equalsIgnoreCase("c"))) ) {
									alt205=2;
								}

								else {
									if (state.backtracking>0) {state.failed=true; return retval;}
									int nvaeMark = input.mark();
									try {
										for (int nvaeConsume = 0; nvaeConsume < 6 - 1; nvaeConsume++) {
											input.consume();
										}
										NoViableAltException nvae =
											new NoViableAltException("", 205, 7, input);
										throw nvae;
									} finally {
										input.rewind(nvaeMark);
									}
								}

							}
							else if ( (LA205_6==DELIMITED_ID||LA205_6==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("c")))) {
								alt205=2;
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								for (int nvaeConsume = 0; nvaeConsume < 4 - 1; nvaeConsume++) {
									input.consume();
								}
								NoViableAltException nvae =
									new NoViableAltException("", 205, 3, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA205_2==DELIMITED_ID||LA205_2==INTRODUCER||LA205_2==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("c")))) {
						alt205=2;
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 205, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 205, 0, input);
				throw nvae;
			}

			switch (alt205) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1091:26: java_spec
					{
					pushFollow(FOLLOW_java_spec_in_call_spec10795);
					java_spec780=java_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, java_spec780.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1091:38: c_spec
					{
					pushFollow(FOLLOW_c_spec_in_call_spec10799);
					c_spec781=c_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, c_spec781.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "call_spec"


	public static class java_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "java_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1096:1: java_spec : java_key ^ name_key ! CHAR_STRING ;
	public final PLSQLParser.java_spec_return java_spec() throws RecognitionException {
		PLSQLParser.java_spec_return retval = new PLSQLParser.java_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CHAR_STRING784=null;
		ParserRuleReturnScope java_key782 =null;
		ParserRuleReturnScope name_key783 =null;

		Object CHAR_STRING784_tree=null;

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1097:5: ( java_key ^ name_key ! CHAR_STRING )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1097:10: java_key ^ name_key ! CHAR_STRING
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_java_key_in_java_spec10823);
			java_key782=java_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(java_key782.getTree(), root_0);
			pushFollow(FOLLOW_name_key_in_java_spec10826);
			name_key783=name_key();
			state._fsp--;
			if (state.failed) return retval;
			CHAR_STRING784=(Token)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_java_spec10829); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			CHAR_STRING784_tree = (Object)adaptor.create(CHAR_STRING784);
			adaptor.addChild(root_0, CHAR_STRING784_tree);
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "java_spec"


	public static class c_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "c_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1100:1: c_spec : c_key ( name_key CHAR_STRING )? library_key id ( c_agent_in_clause )? ( with_key context_key )? ( c_parameters_clause )? -> ^( c_key ( CHAR_STRING )? ( context_key )? ^( library_key id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) ;
	public final PLSQLParser.c_spec_return c_spec() throws RecognitionException {
		PLSQLParser.c_spec_return retval = new PLSQLParser.c_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token CHAR_STRING787=null;
		ParserRuleReturnScope c_key785 =null;
		ParserRuleReturnScope name_key786 =null;
		ParserRuleReturnScope library_key788 =null;
		ParserRuleReturnScope id789 =null;
		ParserRuleReturnScope c_agent_in_clause790 =null;
		ParserRuleReturnScope with_key791 =null;
		ParserRuleReturnScope context_key792 =null;
		ParserRuleReturnScope c_parameters_clause793 =null;

		Object CHAR_STRING787_tree=null;
		RewriteRuleTokenStream stream_CHAR_STRING=new RewriteRuleTokenStream(adaptor,"token CHAR_STRING");
		RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
		RewriteRuleSubtreeStream stream_with_key=new RewriteRuleSubtreeStream(adaptor,"rule with_key");
		RewriteRuleSubtreeStream stream_library_key=new RewriteRuleSubtreeStream(adaptor,"rule library_key");
		RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
		RewriteRuleSubtreeStream stream_c_key=new RewriteRuleSubtreeStream(adaptor,"rule c_key");
		RewriteRuleSubtreeStream stream_context_key=new RewriteRuleSubtreeStream(adaptor,"rule context_key");
		RewriteRuleSubtreeStream stream_c_parameters_clause=new RewriteRuleSubtreeStream(adaptor,"rule c_parameters_clause");
		RewriteRuleSubtreeStream stream_c_agent_in_clause=new RewriteRuleSubtreeStream(adaptor,"rule c_agent_in_clause");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1101:5: ( c_key ( name_key CHAR_STRING )? library_key id ( c_agent_in_clause )? ( with_key context_key )? ( c_parameters_clause )? -> ^( c_key ( CHAR_STRING )? ( context_key )? ^( library_key id ) ( c_agent_in_clause )? ( c_parameters_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1101:10: c_key ( name_key CHAR_STRING )? library_key id ( c_agent_in_clause )? ( with_key context_key )? ( c_parameters_clause )?
			{
			pushFollow(FOLLOW_c_key_in_c_spec10849);
			c_key785=c_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_c_key.add(c_key785.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1101:16: ( name_key CHAR_STRING )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("library"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {
				int LA206_1 = input.LA(2);
				if ( (LA206_1==CHAR_STRING) && ((input.LT(1).getText().equalsIgnoreCase("name")))) {
					alt206=1;
				}
			}
			switch (alt206) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1101:17: name_key CHAR_STRING
					{
					pushFollow(FOLLOW_name_key_in_c_spec10852);
					name_key786=name_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name_key.add(name_key786.getTree());
					CHAR_STRING787=(Token)match(input,CHAR_STRING,FOLLOW_CHAR_STRING_in_c_spec10854); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_CHAR_STRING.add(CHAR_STRING787);

					}
					break;

			}

			pushFollow(FOLLOW_library_key_in_c_spec10867);
			library_key788=library_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_library_key.add(library_key788.getTree());
			pushFollow(FOLLOW_id_in_c_spec10869);
			id789=id();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_id.add(id789.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1103:9: ( c_agent_in_clause )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==REGULAR_ID) ) {
				int LA207_1 = input.LA(2);
				if ( (LA207_1==SQL92_RESERVED_IN) && ((input.LT(1).getText().equalsIgnoreCase("agent")))) {
					alt207=1;
				}
			}
			switch (alt207) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1103:9: c_agent_in_clause
					{
					pushFollow(FOLLOW_c_agent_in_clause_in_c_spec10879);
					c_agent_in_clause790=c_agent_in_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_c_agent_in_clause.add(c_agent_in_clause790.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1103:28: ( with_key context_key )?
			int alt208=2;
			int LA208_0 = input.LA(1);
			if ( (LA208_0==SQL92_RESERVED_WITH) ) {
				alt208=1;
			}
			switch (alt208) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1103:29: with_key context_key
					{
					pushFollow(FOLLOW_with_key_in_c_spec10883);
					with_key791=with_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_with_key.add(with_key791.getTree());
					pushFollow(FOLLOW_context_key_in_c_spec10885);
					context_key792=context_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_context_key.add(context_key792.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1103:52: ( c_parameters_clause )?
			int alt209=2;
			int LA209_0 = input.LA(1);
			if ( (LA209_0==REGULAR_ID) ) {
				int LA209_1 = input.LA(2);
				if ( (LA209_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("parameters")))) {
					alt209=1;
				}
			}
			switch (alt209) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1103:52: c_parameters_clause
					{
					pushFollow(FOLLOW_c_parameters_clause_in_c_spec10889);
					c_parameters_clause793=c_parameters_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_c_parameters_clause.add(c_parameters_clause793.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: context_key, id, CHAR_STRING, library_key, c_key, c_agent_in_clause, c_parameters_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1104:9: -> ^( c_key ( CHAR_STRING )? ( context_key )? ^( library_key id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1104:12: ^( c_key ( CHAR_STRING )? ( context_key )? ^( library_key id ) ( c_agent_in_clause )? ( c_parameters_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_c_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1104:20: ( CHAR_STRING )?
				if ( stream_CHAR_STRING.hasNext() ) {
					adaptor.addChild(root_1, stream_CHAR_STRING.nextNode());
				}
				stream_CHAR_STRING.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1104:33: ( context_key )?
				if ( stream_context_key.hasNext() ) {
					adaptor.addChild(root_1, stream_context_key.nextTree());
				}
				stream_context_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1104:46: ^( library_key id )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_library_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_id.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1104:64: ( c_agent_in_clause )?
				if ( stream_c_agent_in_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_c_agent_in_clause.nextTree());
				}
				stream_c_agent_in_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1104:83: ( c_parameters_clause )?
				if ( stream_c_parameters_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_c_parameters_clause.nextTree());
				}
				stream_c_parameters_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_spec"


	public static class c_agent_in_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "c_agent_in_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1107:1: c_agent_in_clause : agent_key in_key LEFT_PAREN expression ( COMMA expression )* RIGHT_PAREN -> ^( agent_key ( ^( EXPR expression ) )+ ) ;
	public final PLSQLParser.c_agent_in_clause_return c_agent_in_clause() throws RecognitionException {
		PLSQLParser.c_agent_in_clause_return retval = new PLSQLParser.c_agent_in_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN796=null;
		Token COMMA798=null;
		Token RIGHT_PAREN800=null;
		ParserRuleReturnScope agent_key794 =null;
		ParserRuleReturnScope in_key795 =null;
		ParserRuleReturnScope expression797 =null;
		ParserRuleReturnScope expression799 =null;

		Object LEFT_PAREN796_tree=null;
		Object COMMA798_tree=null;
		Object RIGHT_PAREN800_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_agent_key=new RewriteRuleSubtreeStream(adaptor,"rule agent_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1108:5: ( agent_key in_key LEFT_PAREN expression ( COMMA expression )* RIGHT_PAREN -> ^( agent_key ( ^( EXPR expression ) )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1108:10: agent_key in_key LEFT_PAREN expression ( COMMA expression )* RIGHT_PAREN
			{
			pushFollow(FOLLOW_agent_key_in_c_agent_in_clause10942);
			agent_key794=agent_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_agent_key.add(agent_key794.getTree());
			pushFollow(FOLLOW_in_key_in_c_agent_in_clause10944);
			in_key795=in_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_in_key.add(in_key795.getTree());
			LEFT_PAREN796=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_c_agent_in_clause10946); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN796);

			pushFollow(FOLLOW_expression_in_c_agent_in_clause10948);
			expression797=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression797.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1108:49: ( COMMA expression )*
			loop210:
			while (true) {
				int alt210=2;
				int LA210_0 = input.LA(1);
				if ( (LA210_0==COMMA) ) {
					alt210=1;
				}

				switch (alt210) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1108:50: COMMA expression
					{
					COMMA798=(Token)match(input,COMMA,FOLLOW_COMMA_in_c_agent_in_clause10951); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA798);

					pushFollow(FOLLOW_expression_in_c_agent_in_clause10953);
					expression799=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression799.getTree());
					}
					break;

				default :
					break loop210;
				}
			}

			RIGHT_PAREN800=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_c_agent_in_clause10957); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN800);

			// AST REWRITE
			// elements: agent_key, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1109:9: -> ^( agent_key ( ^( EXPR expression ) )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1109:12: ^( agent_key ( ^( EXPR expression ) )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_agent_key.nextNode(), root_1);
				if ( !(stream_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.hasNext() ) {
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1109:24: ^( EXPR expression )
					{
					Object root_2 = (Object)adaptor.nil();
					root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
					adaptor.addChild(root_2, stream_expression.nextTree());
					adaptor.addChild(root_1, root_2);
					}

				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_agent_in_clause"


	public static class c_parameters_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "c_parameters_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1112:1: c_parameters_clause : parameters_key LEFT_PAREN ( expression ( COMMA expression )* | DOUBLE_PERIOD PERIOD ) RIGHT_PAREN -> {mode == 1}? ^( parameters_key THREE_DOTS[$DOUBLE_PERIOD, \"...\"] ) -> ^( parameters_key ( ^( EXPR expression ) )+ ) ;
	public final PLSQLParser.c_parameters_clause_return c_parameters_clause() throws RecognitionException {
		PLSQLParser.c_parameters_clause_return retval = new PLSQLParser.c_parameters_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN802=null;
		Token COMMA804=null;
		Token DOUBLE_PERIOD806=null;
		Token PERIOD807=null;
		Token RIGHT_PAREN808=null;
		ParserRuleReturnScope parameters_key801 =null;
		ParserRuleReturnScope expression803 =null;
		ParserRuleReturnScope expression805 =null;

		Object LEFT_PAREN802_tree=null;
		Object COMMA804_tree=null;
		Object DOUBLE_PERIOD806_tree=null;
		Object PERIOD807_tree=null;
		Object RIGHT_PAREN808_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_PERIOD=new RewriteRuleTokenStream(adaptor,"token PERIOD");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_parameters_key=new RewriteRuleSubtreeStream(adaptor,"rule parameters_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1114:5: ( parameters_key LEFT_PAREN ( expression ( COMMA expression )* | DOUBLE_PERIOD PERIOD ) RIGHT_PAREN -> {mode == 1}? ^( parameters_key THREE_DOTS[$DOUBLE_PERIOD, \"...\"] ) -> ^( parameters_key ( ^( EXPR expression ) )+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1114:10: parameters_key LEFT_PAREN ( expression ( COMMA expression )* | DOUBLE_PERIOD PERIOD ) RIGHT_PAREN
			{
			pushFollow(FOLLOW_parameters_key_in_c_parameters_clause11006);
			parameters_key801=parameters_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_parameters_key.add(parameters_key801.getTree());
			LEFT_PAREN802=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_c_parameters_clause11008); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN802);

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1114:36: ( expression ( COMMA expression )* | DOUBLE_PERIOD PERIOD )
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==APPROXIMATE_NUM_LIT||LA212_0==BINDVAR||(LA212_0 >= CHAR_STRING && LA212_0 <= COLON)||LA212_0==DELIMITED_ID||LA212_0==EXACT_NUM_LIT||LA212_0==INTRODUCER||LA212_0==LEFT_PAREN||LA212_0==MINUS_SIGN||LA212_0==NATIONAL_CHAR_STRING_LIT||LA212_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA212_0==PLUS_SIGN||LA212_0==REGULAR_ID||LA212_0==SQL92_RESERVED_ALL||LA212_0==SQL92_RESERVED_ANY||LA212_0==SQL92_RESERVED_CASE||(LA212_0 >= SQL92_RESERVED_CURSOR && LA212_0 <= SQL92_RESERVED_DATE)||(LA212_0 >= SQL92_RESERVED_DEFAULT && LA212_0 <= SQL92_RESERVED_DELETE)||LA212_0==SQL92_RESERVED_DISTINCT||(LA212_0 >= SQL92_RESERVED_EXISTS && LA212_0 <= SQL92_RESERVED_FALSE)||(LA212_0 >= SQL92_RESERVED_NOT && LA212_0 <= SQL92_RESERVED_NULL)||LA212_0==SQL92_RESERVED_PRIOR||LA212_0==SQL92_RESERVED_TRUE||LA212_0==UNSIGNED_INTEGER) ) {
				alt212=1;
			}
			else if ( (LA212_0==DOUBLE_PERIOD) ) {
				alt212=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 212, 0, input);
				throw nvae;
			}

			switch (alt212) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1114:37: expression ( COMMA expression )*
					{
					pushFollow(FOLLOW_expression_in_c_parameters_clause11011);
					expression803=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression803.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1114:48: ( COMMA expression )*
					loop211:
					while (true) {
						int alt211=2;
						int LA211_0 = input.LA(1);
						if ( (LA211_0==COMMA) ) {
							alt211=1;
						}

						switch (alt211) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1114:49: COMMA expression
							{
							COMMA804=(Token)match(input,COMMA,FOLLOW_COMMA_in_c_parameters_clause11014); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA804);

							pushFollow(FOLLOW_expression_in_c_parameters_clause11016);
							expression805=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression805.getTree());
							}
							break;

						default :
							break loop211;
						}
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1114:70: DOUBLE_PERIOD PERIOD
					{
					DOUBLE_PERIOD806=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_c_parameters_clause11022); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD806);

					PERIOD807=(Token)match(input,PERIOD,FOLLOW_PERIOD_in_c_parameters_clause11024); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_PERIOD.add(PERIOD807);

					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			RIGHT_PAREN808=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_c_parameters_clause11029); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN808);

			// AST REWRITE
			// elements: expression, parameters_key, parameters_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1115:5: -> {mode == 1}? ^( parameters_key THREE_DOTS[$DOUBLE_PERIOD, \"...\"] )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1115:24: ^( parameters_key THREE_DOTS[$DOUBLE_PERIOD, \"...\"] )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_parameters_key.nextNode(), root_1);
				adaptor.addChild(root_1, (Object)adaptor.create(THREE_DOTS, DOUBLE_PERIOD806, "..."));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1116:5: -> ^( parameters_key ( ^( EXPR expression ) )+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1116:8: ^( parameters_key ( ^( EXPR expression ) )+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_parameters_key.nextNode(), root_1);
				if ( !(stream_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.hasNext() ) {
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1116:25: ^( EXPR expression )
					{
					Object root_2 = (Object)adaptor.nil();
					root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
					adaptor.addChild(root_2, stream_expression.nextTree());
					adaptor.addChild(root_1, root_2);
					}

				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "c_parameters_clause"


	public static class parameter_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parameter"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1121:1: parameter : parameter_name ( in_key | out_key | inout_key | nocopy_key )* ( type_spec )? ( default_value_part )? -> ^( PARAMETER parameter_name ( in_key )* ( out_key )* ( inout_key )* ( type_spec )? ( default_value_part )? ) ;
	public final PLSQLParser.parameter_return parameter() throws RecognitionException {
		PLSQLParser.parameter_return retval = new PLSQLParser.parameter_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope parameter_name809 =null;
		ParserRuleReturnScope in_key810 =null;
		ParserRuleReturnScope out_key811 =null;
		ParserRuleReturnScope inout_key812 =null;
		ParserRuleReturnScope nocopy_key813 =null;
		ParserRuleReturnScope type_spec814 =null;
		ParserRuleReturnScope default_value_part815 =null;

		RewriteRuleSubtreeStream stream_nocopy_key=new RewriteRuleSubtreeStream(adaptor,"rule nocopy_key");
		RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
		RewriteRuleSubtreeStream stream_default_value_part=new RewriteRuleSubtreeStream(adaptor,"rule default_value_part");
		RewriteRuleSubtreeStream stream_out_key=new RewriteRuleSubtreeStream(adaptor,"rule out_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_inout_key=new RewriteRuleSubtreeStream(adaptor,"rule inout_key");
		RewriteRuleSubtreeStream stream_parameter_name=new RewriteRuleSubtreeStream(adaptor,"rule parameter_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:5: ( parameter_name ( in_key | out_key | inout_key | nocopy_key )* ( type_spec )? ( default_value_part )? -> ^( PARAMETER parameter_name ( in_key )* ( out_key )* ( inout_key )* ( type_spec )? ( default_value_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:10: parameter_name ( in_key | out_key | inout_key | nocopy_key )* ( type_spec )? ( default_value_part )?
			{
			pushFollow(FOLLOW_parameter_name_in_parameter11086);
			parameter_name809=parameter_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_parameter_name.add(parameter_name809.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:25: ( in_key | out_key | inout_key | nocopy_key )*
			loop213:
			while (true) {
				int alt213=5;
				int LA213_0 = input.LA(1);
				if ( (LA213_0==REGULAR_ID) ) {
					int LA213_1 = input.LA(2);
					if ( ((input.LT(1).getText().equalsIgnoreCase("out"))) ) {
						alt213=2;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("inout"))) ) {
						alt213=3;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("nocopy"))) ) {
						alt213=4;
					}

				}
				else if ( (LA213_0==SQL92_RESERVED_IN) ) {
					alt213=1;
				}

				switch (alt213) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:27: in_key
					{
					pushFollow(FOLLOW_in_key_in_parameter11090);
					in_key810=in_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_in_key.add(in_key810.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:36: out_key
					{
					pushFollow(FOLLOW_out_key_in_parameter11094);
					out_key811=out_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_out_key.add(out_key811.getTree());
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:46: inout_key
					{
					pushFollow(FOLLOW_inout_key_in_parameter11098);
					inout_key812=inout_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_inout_key.add(inout_key812.getTree());
					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:58: nocopy_key
					{
					pushFollow(FOLLOW_nocopy_key_in_parameter11102);
					nocopy_key813=nocopy_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nocopy_key.add(nocopy_key813.getTree());
					}
					break;

				default :
					break loop213;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:71: ( type_spec )?
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==DELIMITED_ID||LA214_0==REGULAR_ID||LA214_0==SQL92_RESERVED_DATE) ) {
				alt214=1;
			}
			switch (alt214) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:71: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_parameter11106);
					type_spec814=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec814.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:82: ( default_value_part )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==ASSIGN_OP||LA215_0==SQL92_RESERVED_DEFAULT) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1122:82: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter11109);
					default_value_part815=default_value_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_default_value_part.add(default_value_part815.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: type_spec, parameter_name, out_key, in_key, default_value_part, inout_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1123:9: -> ^( PARAMETER parameter_name ( in_key )* ( out_key )* ( inout_key )* ( type_spec )? ( default_value_part )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1123:12: ^( PARAMETER parameter_name ( in_key )* ( out_key )* ( inout_key )* ( type_spec )? ( default_value_part )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_1);
				adaptor.addChild(root_1, stream_parameter_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1123:39: ( in_key )*
				while ( stream_in_key.hasNext() ) {
					adaptor.addChild(root_1, stream_in_key.nextTree());
				}
				stream_in_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1123:47: ( out_key )*
				while ( stream_out_key.hasNext() ) {
					adaptor.addChild(root_1, stream_out_key.nextTree());
				}
				stream_out_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1123:56: ( inout_key )*
				while ( stream_inout_key.hasNext() ) {
					adaptor.addChild(root_1, stream_inout_key.nextTree());
				}
				stream_inout_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1123:67: ( type_spec )?
				if ( stream_type_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_type_spec.nextTree());
				}
				stream_type_spec.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1123:78: ( default_value_part )?
				if ( stream_default_value_part.hasNext() ) {
					adaptor.addChild(root_1, stream_default_value_part.nextTree());
				}
				stream_default_value_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter"


	public static class default_value_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "default_value_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1126:1: default_value_part : ( ASSIGN_OP | default_key ) expression -> ^( DEFAULT_VALUE ^( EXPR expression ) ) ;
	public final PLSQLParser.default_value_part_return default_value_part() throws RecognitionException {
		PLSQLParser.default_value_part_return retval = new PLSQLParser.default_value_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ASSIGN_OP816=null;
		ParserRuleReturnScope default_key817 =null;
		ParserRuleReturnScope expression818 =null;

		Object ASSIGN_OP816_tree=null;
		RewriteRuleTokenStream stream_ASSIGN_OP=new RewriteRuleTokenStream(adaptor,"token ASSIGN_OP");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_default_key=new RewriteRuleSubtreeStream(adaptor,"rule default_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1127:5: ( ( ASSIGN_OP | default_key ) expression -> ^( DEFAULT_VALUE ^( EXPR expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1127:10: ( ASSIGN_OP | default_key ) expression
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1127:10: ( ASSIGN_OP | default_key )
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==ASSIGN_OP) ) {
				alt216=1;
			}
			else if ( (LA216_0==SQL92_RESERVED_DEFAULT) ) {
				alt216=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 216, 0, input);
				throw nvae;
			}

			switch (alt216) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1127:11: ASSIGN_OP
					{
					ASSIGN_OP816=(Token)match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_default_value_part11162); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_ASSIGN_OP.add(ASSIGN_OP816);

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1127:21: default_key
					{
					pushFollow(FOLLOW_default_key_in_default_value_part11164);
					default_key817=default_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_default_key.add(default_key817.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_expression_in_default_value_part11167);
			expression818=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression818.getTree());
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1128:9: -> ^( DEFAULT_VALUE ^( EXPR expression ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1128:12: ^( DEFAULT_VALUE ^( EXPR expression ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEFAULT_VALUE, "DEFAULT_VALUE"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1128:28: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "default_value_part"


	public static class declare_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "declare_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1137:1: declare_spec options {backtrack=true; } : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body | type_in_decl );
	public final PLSQLParser.declare_spec_return declare_spec() throws RecognitionException {
		PLSQLParser.declare_spec_return retval = new PLSQLParser.declare_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope variable_declaration819 =null;
		ParserRuleReturnScope subtype_declaration820 =null;
		ParserRuleReturnScope cursor_declaration821 =null;
		ParserRuleReturnScope exception_declaration822 =null;
		ParserRuleReturnScope pragma_declaration823 =null;
		ParserRuleReturnScope record_declaration824 =null;
		ParserRuleReturnScope table_declaration825 =null;
		ParserRuleReturnScope create_procedure_body826 =null;
		ParserRuleReturnScope create_function_body827 =null;
		ParserRuleReturnScope type_in_decl828 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1140:6: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | pragma_declaration | record_declaration | table_declaration | create_procedure_body | create_function_body | type_in_decl )
			int alt217=10;
			switch ( input.LA(1) ) {
			case INTRODUCER:
				{
				int LA217_1 = input.LA(2);
				if ( (synpred40_PLSQLParser()) ) {
					alt217=1;
				}
				else if ( (synpred43_PLSQLParser()) ) {
					alt217=4;
				}
				else if ( (synpred45_PLSQLParser()) ) {
					alt217=6;
				}
				else if ( (synpred46_PLSQLParser()) ) {
					alt217=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 217, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REGULAR_ID:
				{
				int LA217_2 = input.LA(2);
				if ( (synpred40_PLSQLParser()) ) {
					alt217=1;
				}
				else if ( ((synpred41_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("subtype")))) ) {
					alt217=2;
				}
				else if ( (synpred43_PLSQLParser()) ) {
					alt217=4;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("pragma"))&&synpred44_PLSQLParser())) ) {
					alt217=5;
				}
				else if ( (synpred45_PLSQLParser()) ) {
					alt217=6;
				}
				else if ( (synpred46_PLSQLParser()) ) {
					alt217=7;
				}
				else if ( ((synpred48_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("function")))) ) {
					alt217=9;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("type"))) ) {
					alt217=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 217, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DELIMITED_ID:
				{
				int LA217_3 = input.LA(2);
				if ( (synpred40_PLSQLParser()) ) {
					alt217=1;
				}
				else if ( (synpred43_PLSQLParser()) ) {
					alt217=4;
				}
				else if ( (synpred45_PLSQLParser()) ) {
					alt217=6;
				}
				else if ( (synpred46_PLSQLParser()) ) {
					alt217=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 217, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BINDVAR:
				{
				int LA217_4 = input.LA(2);
				if ( (synpred40_PLSQLParser()) ) {
					alt217=1;
				}
				else if ( (synpred45_PLSQLParser()) ) {
					alt217=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 217, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case COLON:
				{
				int LA217_5 = input.LA(2);
				if ( (synpred40_PLSQLParser()) ) {
					alt217=1;
				}
				else if ( (synpred45_PLSQLParser()) ) {
					alt217=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 217, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_CURSOR:
				{
				alt217=3;
				}
				break;
			case SQL92_RESERVED_CREATE:
				{
				int LA217_7 = input.LA(2);
				if ( (synpred47_PLSQLParser()) ) {
					alt217=8;
				}
				else if ( (synpred48_PLSQLParser()) ) {
					alt217=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 217, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SQL92_RESERVED_PROCEDURE:
				{
				alt217=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 217, 0, input);
				throw nvae;
			}
			switch (alt217) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1140:11: variable_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_variable_declaration_in_declare_spec11221);
					variable_declaration819=variable_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration819.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1141:11: subtype_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_subtype_declaration_in_declare_spec11233);
					subtype_declaration820=subtype_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration820.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1142:11: cursor_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_cursor_declaration_in_declare_spec11245);
					cursor_declaration821=cursor_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration821.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1143:11: exception_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exception_declaration_in_declare_spec11257);
					exception_declaration822=exception_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration822.getTree());

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1144:11: pragma_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_pragma_declaration_in_declare_spec11269);
					pragma_declaration823=pragma_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration823.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1145:11: record_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_record_declaration_in_declare_spec11281);
					record_declaration824=record_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration824.getTree());

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1146:11: table_declaration
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_table_declaration_in_declare_spec11293);
					table_declaration825=table_declaration();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_declaration825.getTree());

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1147:11: create_procedure_body
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_procedure_body_in_declare_spec11305);
					create_procedure_body826=create_procedure_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_procedure_body826.getTree());

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1148:11: create_function_body
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_function_body_in_declare_spec11317);
					create_function_body827=create_function_body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_function_body827.getTree());

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1149:11: type_in_decl
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_type_in_decl_in_declare_spec11329);
					type_in_decl828=type_in_decl();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, type_in_decl828.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "declare_spec"


	public static class variable_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "variable_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1153:1: variable_declaration : variable_name ( constant_key )? type_spec ( not_key null_key )? ( default_value_part )? SEMICOLON -> ^( VARIABLE_DECLARE variable_name type_spec ( constant_key )? ( null_key )? ( default_value_part )? ) ;
	public final PLSQLParser.variable_declaration_return variable_declaration() throws RecognitionException {
		PLSQLParser.variable_declaration_return retval = new PLSQLParser.variable_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON835=null;
		ParserRuleReturnScope variable_name829 =null;
		ParserRuleReturnScope constant_key830 =null;
		ParserRuleReturnScope type_spec831 =null;
		ParserRuleReturnScope not_key832 =null;
		ParserRuleReturnScope null_key833 =null;
		ParserRuleReturnScope default_value_part834 =null;

		Object SEMICOLON835_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
		RewriteRuleSubtreeStream stream_default_value_part=new RewriteRuleSubtreeStream(adaptor,"rule default_value_part");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_constant_key=new RewriteRuleSubtreeStream(adaptor,"rule constant_key");
		RewriteRuleSubtreeStream stream_variable_name=new RewriteRuleSubtreeStream(adaptor,"rule variable_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1154:5: ( variable_name ( constant_key )? type_spec ( not_key null_key )? ( default_value_part )? SEMICOLON -> ^( VARIABLE_DECLARE variable_name type_spec ( constant_key )? ( null_key )? ( default_value_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1154:10: variable_name ( constant_key )? type_spec ( not_key null_key )? ( default_value_part )? SEMICOLON
			{
			pushFollow(FOLLOW_variable_name_in_variable_declaration11350);
			variable_name829=variable_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_variable_name.add(variable_name829.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1154:24: ( constant_key )?
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==REGULAR_ID) ) {
				int LA218_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("constant"))) ) {
					alt218=1;
				}
			}
			switch (alt218) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1154:24: constant_key
					{
					pushFollow(FOLLOW_constant_key_in_variable_declaration11352);
					constant_key830=constant_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constant_key.add(constant_key830.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_type_spec_in_variable_declaration11363);
			type_spec831=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec831.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1155:19: ( not_key null_key )?
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==SQL92_RESERVED_NOT) ) {
				alt219=1;
			}
			switch (alt219) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1155:20: not_key null_key
					{
					pushFollow(FOLLOW_not_key_in_variable_declaration11366);
					not_key832=not_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_not_key.add(not_key832.getTree());
					pushFollow(FOLLOW_null_key_in_variable_declaration11368);
					null_key833=null_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_null_key.add(null_key833.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1156:9: ( default_value_part )?
			int alt220=2;
			int LA220_0 = input.LA(1);
			if ( (LA220_0==ASSIGN_OP||LA220_0==SQL92_RESERVED_DEFAULT) ) {
				alt220=1;
			}
			switch (alt220) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1156:9: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_variable_declaration11381);
					default_value_part834=default_value_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_default_value_part.add(default_value_part834.getTree());
					}
					break;

			}

			SEMICOLON835=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_declaration11384); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON835);

			// AST REWRITE
			// elements: type_spec, default_value_part, constant_key, null_key, variable_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1157:9: -> ^( VARIABLE_DECLARE variable_name type_spec ( constant_key )? ( null_key )? ( default_value_part )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1157:12: ^( VARIABLE_DECLARE variable_name type_spec ( constant_key )? ( null_key )? ( default_value_part )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARIABLE_DECLARE, "VARIABLE_DECLARE"), root_1);
				adaptor.addChild(root_1, stream_variable_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1157:55: ( constant_key )?
				if ( stream_constant_key.hasNext() ) {
					adaptor.addChild(root_1, stream_constant_key.nextTree());
				}
				stream_constant_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1157:69: ( null_key )?
				if ( stream_null_key.hasNext() ) {
					adaptor.addChild(root_1, stream_null_key.nextTree());
				}
				stream_null_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1157:79: ( default_value_part )?
				if ( stream_default_value_part.hasNext() ) {
					adaptor.addChild(root_1, stream_default_value_part.nextTree());
				}
				stream_default_value_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "variable_declaration"


	public static class subtype_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "subtype_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1160:1: subtype_declaration : subtype_key type_name is_key type_spec ( range_key expression DOUBLE_PERIOD expression )? ( not_key null_key )? SEMICOLON -> {mode == 1}? ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ^( range_key ( ^( EXPR expression ) )+ ) ) -> ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ) ;
	public final PLSQLParser.subtype_declaration_return subtype_declaration() throws RecognitionException {
		PLSQLParser.subtype_declaration_return retval = new PLSQLParser.subtype_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOUBLE_PERIOD842=null;
		Token SEMICOLON846=null;
		ParserRuleReturnScope subtype_key836 =null;
		ParserRuleReturnScope type_name837 =null;
		ParserRuleReturnScope is_key838 =null;
		ParserRuleReturnScope type_spec839 =null;
		ParserRuleReturnScope range_key840 =null;
		ParserRuleReturnScope expression841 =null;
		ParserRuleReturnScope expression843 =null;
		ParserRuleReturnScope not_key844 =null;
		ParserRuleReturnScope null_key845 =null;

		Object DOUBLE_PERIOD842_tree=null;
		Object SEMICOLON846_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_range_key=new RewriteRuleSubtreeStream(adaptor,"rule range_key");
		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_subtype_key=new RewriteRuleSubtreeStream(adaptor,"rule subtype_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1162:7: ( subtype_key type_name is_key type_spec ( range_key expression DOUBLE_PERIOD expression )? ( not_key null_key )? SEMICOLON -> {mode == 1}? ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ^( range_key ( ^( EXPR expression ) )+ ) ) -> ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1162:12: subtype_key type_name is_key type_spec ( range_key expression DOUBLE_PERIOD expression )? ( not_key null_key )? SEMICOLON
			{
			pushFollow(FOLLOW_subtype_key_in_subtype_declaration11445);
			subtype_key836=subtype_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_subtype_key.add(subtype_key836.getTree());
			pushFollow(FOLLOW_type_name_in_subtype_declaration11447);
			type_name837=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_name.add(type_name837.getTree());
			pushFollow(FOLLOW_is_key_in_subtype_declaration11449);
			is_key838=is_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_is_key.add(is_key838.getTree());
			pushFollow(FOLLOW_type_spec_in_subtype_declaration11451);
			type_spec839=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec839.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1163:11: ( range_key expression DOUBLE_PERIOD expression )?
			int alt221=2;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("range")))) {
				alt221=1;
			}
			switch (alt221) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1163:12: range_key expression DOUBLE_PERIOD expression
					{
					pushFollow(FOLLOW_range_key_in_subtype_declaration11464);
					range_key840=range_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_range_key.add(range_key840.getTree());
					pushFollow(FOLLOW_expression_in_subtype_declaration11466);
					expression841=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression841.getTree());
					DOUBLE_PERIOD842=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_subtype_declaration11468); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD842);

					pushFollow(FOLLOW_expression_in_subtype_declaration11470);
					expression843=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression843.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1164:11: ( not_key null_key )?
			int alt222=2;
			int LA222_0 = input.LA(1);
			if ( (LA222_0==SQL92_RESERVED_NOT) ) {
				alt222=1;
			}
			switch (alt222) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1164:12: not_key null_key
					{
					pushFollow(FOLLOW_not_key_in_subtype_declaration11487);
					not_key844=not_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_not_key.add(not_key844.getTree());
					pushFollow(FOLLOW_null_key_in_subtype_declaration11489);
					null_key845=null_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_null_key.add(null_key845.getTree());
					}
					break;

			}

			SEMICOLON846=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_subtype_declaration11493); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON846);

			// AST REWRITE
			// elements: type_spec, range_key, type_spec, null_key, expression, null_key, type_name, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1165:11: -> {mode == 1}? ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ^( range_key ( ^( EXPR expression ) )+ ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1165:27: ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? ^( range_key ( ^( EXPR expression ) )+ ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUBTYPE_DECLARE, (subtype_key836!=null?(subtype_key836.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1165:85: ( null_key )?
				if ( stream_null_key.hasNext() ) {
					adaptor.addChild(root_1, stream_null_key.nextTree());
				}
				stream_null_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1165:95: ^( range_key ( ^( EXPR expression ) )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_range_key.nextNode(), root_2);
				if ( !(stream_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.hasNext() ) {
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1165:107: ^( EXPR expression )
					{
					Object root_3 = (Object)adaptor.nil();
					root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);
					adaptor.addChild(root_3, stream_expression.nextTree());
					adaptor.addChild(root_2, root_3);
					}

				}
				stream_expression.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1166:11: -> ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1166:14: ^( SUBTYPE_DECLARE[$subtype_key.start] type_name type_spec ( null_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUBTYPE_DECLARE, (subtype_key836!=null?(subtype_key836.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1166:72: ( null_key )?
				if ( stream_null_key.hasNext() ) {
					adaptor.addChild(root_1, stream_null_key.nextTree());
				}
				stream_null_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "subtype_declaration"


	public static class cursor_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "cursor_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1170:1: cursor_declaration : cursor_key cursor_name ( LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN )? ( return_key type_spec )? ( is_key select_statement )? SEMICOLON -> ^( CURSOR_DECLARE[$cursor_key.start] cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) ;
	public final PLSQLParser.cursor_declaration_return cursor_declaration() throws RecognitionException {
		PLSQLParser.cursor_declaration_return retval = new PLSQLParser.cursor_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN849=null;
		Token COMMA851=null;
		Token RIGHT_PAREN853=null;
		Token SEMICOLON858=null;
		ParserRuleReturnScope cursor_key847 =null;
		ParserRuleReturnScope cursor_name848 =null;
		ParserRuleReturnScope parameter_spec850 =null;
		ParserRuleReturnScope parameter_spec852 =null;
		ParserRuleReturnScope return_key854 =null;
		ParserRuleReturnScope type_spec855 =null;
		ParserRuleReturnScope is_key856 =null;
		ParserRuleReturnScope select_statement857 =null;

		Object LEFT_PAREN849_tree=null;
		Object COMMA851_tree=null;
		Object RIGHT_PAREN853_tree=null;
		Object SEMICOLON858_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_cursor_name=new RewriteRuleSubtreeStream(adaptor,"rule cursor_name");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
		RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
		RewriteRuleSubtreeStream stream_cursor_key=new RewriteRuleSubtreeStream(adaptor,"rule cursor_key");
		RewriteRuleSubtreeStream stream_parameter_spec=new RewriteRuleSubtreeStream(adaptor,"rule parameter_spec");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1171:5: ( cursor_key cursor_name ( LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN )? ( return_key type_spec )? ( is_key select_statement )? SEMICOLON -> ^( CURSOR_DECLARE[$cursor_key.start] cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1171:10: cursor_key cursor_name ( LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN )? ( return_key type_spec )? ( is_key select_statement )? SEMICOLON
			{
			pushFollow(FOLLOW_cursor_key_in_cursor_declaration11577);
			cursor_key847=cursor_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_cursor_key.add(cursor_key847.getTree());
			pushFollow(FOLLOW_cursor_name_in_cursor_declaration11579);
			cursor_name848=cursor_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_cursor_name.add(cursor_name848.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1172:15: ( LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==LEFT_PAREN) ) {
				alt224=1;
			}
			switch (alt224) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1172:16: LEFT_PAREN parameter_spec ( COMMA parameter_spec )* RIGHT_PAREN
					{
					LEFT_PAREN849=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cursor_declaration11596); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN849);

					pushFollow(FOLLOW_parameter_spec_in_cursor_declaration11598);
					parameter_spec850=parameter_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_parameter_spec.add(parameter_spec850.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1172:42: ( COMMA parameter_spec )*
					loop223:
					while (true) {
						int alt223=2;
						int LA223_0 = input.LA(1);
						if ( (LA223_0==COMMA) ) {
							alt223=1;
						}

						switch (alt223) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1172:43: COMMA parameter_spec
							{
							COMMA851=(Token)match(input,COMMA,FOLLOW_COMMA_in_cursor_declaration11601); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA851);

							pushFollow(FOLLOW_parameter_spec_in_cursor_declaration11603);
							parameter_spec852=parameter_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_parameter_spec.add(parameter_spec852.getTree());
							}
							break;

						default :
							break loop223;
						}
					}

					RIGHT_PAREN853=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cursor_declaration11607); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN853);

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1173:15: ( return_key type_spec )?
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==REGULAR_ID) ) {
				alt225=1;
			}
			switch (alt225) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1173:16: return_key type_spec
					{
					pushFollow(FOLLOW_return_key_in_cursor_declaration11627);
					return_key854=return_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_return_key.add(return_key854.getTree());
					pushFollow(FOLLOW_type_spec_in_cursor_declaration11629);
					type_spec855=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec855.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1173:39: ( is_key select_statement )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==SQL92_RESERVED_IS) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1173:40: is_key select_statement
					{
					pushFollow(FOLLOW_is_key_in_cursor_declaration11634);
					is_key856=is_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_is_key.add(is_key856.getTree());
					pushFollow(FOLLOW_select_statement_in_cursor_declaration11636);
					select_statement857=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_select_statement.add(select_statement857.getTree());
					}
					break;

			}

			SEMICOLON858=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_cursor_declaration11640); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON858);

			// AST REWRITE
			// elements: parameter_spec, select_statement, cursor_name, type_spec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1174:9: -> ^( CURSOR_DECLARE[$cursor_key.start] cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1174:12: ^( CURSOR_DECLARE[$cursor_key.start] cursor_name ( type_spec )? ( select_statement )? ^( PARAMETERS ( parameter_spec )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CURSOR_DECLARE, (cursor_key847!=null?(cursor_key847.start):null)), root_1);
				adaptor.addChild(root_1, stream_cursor_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1174:60: ( type_spec )?
				if ( stream_type_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_type_spec.nextTree());
				}
				stream_type_spec.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1174:71: ( select_statement )?
				if ( stream_select_statement.hasNext() ) {
					adaptor.addChild(root_1, stream_select_statement.nextTree());
				}
				stream_select_statement.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1174:89: ^( PARAMETERS ( parameter_spec )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1174:102: ( parameter_spec )*
				while ( stream_parameter_spec.hasNext() ) {
					adaptor.addChild(root_2, stream_parameter_spec.nextTree());
				}
				stream_parameter_spec.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_declaration"


	public static class parameter_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "parameter_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1177:1: parameter_spec : parameter_name ( ( in_key )? type_spec )? ( default_value_part )? -> ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) ;
	public final PLSQLParser.parameter_spec_return parameter_spec() throws RecognitionException {
		PLSQLParser.parameter_spec_return retval = new PLSQLParser.parameter_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope parameter_name859 =null;
		ParserRuleReturnScope in_key860 =null;
		ParserRuleReturnScope type_spec861 =null;
		ParserRuleReturnScope default_value_part862 =null;

		RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
		RewriteRuleSubtreeStream stream_default_value_part=new RewriteRuleSubtreeStream(adaptor,"rule default_value_part");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_parameter_name=new RewriteRuleSubtreeStream(adaptor,"rule parameter_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1178:5: ( parameter_name ( ( in_key )? type_spec )? ( default_value_part )? -> ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1178:10: parameter_name ( ( in_key )? type_spec )? ( default_value_part )?
			{
			pushFollow(FOLLOW_parameter_name_in_parameter_spec11691);
			parameter_name859=parameter_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_parameter_name.add(parameter_name859.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1178:25: ( ( in_key )? type_spec )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==DELIMITED_ID||LA228_0==REGULAR_ID||LA228_0==SQL92_RESERVED_DATE||LA228_0==SQL92_RESERVED_IN) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1178:26: ( in_key )? type_spec
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1178:26: ( in_key )?
					int alt227=2;
					int LA227_0 = input.LA(1);
					if ( (LA227_0==SQL92_RESERVED_IN) ) {
						alt227=1;
					}
					switch (alt227) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1178:26: in_key
							{
							pushFollow(FOLLOW_in_key_in_parameter_spec11694);
							in_key860=in_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_in_key.add(in_key860.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_type_spec_in_parameter_spec11697);
					type_spec861=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec861.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1179:9: ( default_value_part )?
			int alt229=2;
			int LA229_0 = input.LA(1);
			if ( (LA229_0==ASSIGN_OP||LA229_0==SQL92_RESERVED_DEFAULT) ) {
				alt229=1;
			}
			switch (alt229) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1179:9: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_parameter_spec11710);
					default_value_part862=default_value_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_default_value_part.add(default_value_part862.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: default_value_part, parameter_name, type_spec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1180:9: -> ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1180:12: ^( PARAMETER parameter_name ( type_spec )? ( default_value_part )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_1);
				adaptor.addChild(root_1, stream_parameter_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1180:39: ( type_spec )?
				if ( stream_type_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_type_spec.nextTree());
				}
				stream_type_spec.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1180:50: ( default_value_part )?
				if ( stream_default_value_part.hasNext() ) {
					adaptor.addChild(root_1, stream_default_value_part.nextTree());
				}
				stream_default_value_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "parameter_spec"


	public static class exception_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exception_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1183:1: exception_declaration : exception_name exception_key SEMICOLON -> ^( EXCEPTION_DECLARE[$exception_key.start] exception_name ) ;
	public final PLSQLParser.exception_declaration_return exception_declaration() throws RecognitionException {
		PLSQLParser.exception_declaration_return retval = new PLSQLParser.exception_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON865=null;
		ParserRuleReturnScope exception_name863 =null;
		ParserRuleReturnScope exception_key864 =null;

		Object SEMICOLON865_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_exception_key=new RewriteRuleSubtreeStream(adaptor,"rule exception_key");
		RewriteRuleSubtreeStream stream_exception_name=new RewriteRuleSubtreeStream(adaptor,"rule exception_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1184:5: ( exception_name exception_key SEMICOLON -> ^( EXCEPTION_DECLARE[$exception_key.start] exception_name ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1184:10: exception_name exception_key SEMICOLON
			{
			pushFollow(FOLLOW_exception_name_in_exception_declaration11754);
			exception_name863=exception_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_exception_name.add(exception_name863.getTree());
			pushFollow(FOLLOW_exception_key_in_exception_declaration11756);
			exception_key864=exception_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_exception_key.add(exception_key864.getTree());
			SEMICOLON865=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_exception_declaration11758); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON865);

			// AST REWRITE
			// elements: exception_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1185:9: -> ^( EXCEPTION_DECLARE[$exception_key.start] exception_name )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1185:12: ^( EXCEPTION_DECLARE[$exception_key.start] exception_name )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXCEPTION_DECLARE, (exception_key864!=null?(exception_key864.start):null)), root_1);
				adaptor.addChild(root_1, stream_exception_name.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_declaration"


	public static class pragma_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pragma_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1188:1: pragma_declaration : pragma_key ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN ) SEMICOLON -> {mode == 1}? ^( PRAGMA_DECLARE[$pragma_key.start] serially_reusable_key ) -> {mode == 2}? ^( PRAGMA_DECLARE[$pragma_key.start] autonomous_transaction_key ) -> {mode == 3}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( exception_init_key exception_name numeric ) ) -> {mode == 4}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( inline_key $id1 ^( EXPR expression ) ) ) -> ^( PRAGMA_DECLARE[$pragma_key.start] ^( restrict_references_key ( default_key )? ( id )* ) ) ;
	public final PLSQLParser.pragma_declaration_return pragma_declaration() throws RecognitionException {
		PLSQLParser.pragma_declaration_return retval = new PLSQLParser.pragma_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN870=null;
		Token COMMA872=null;
		Token RIGHT_PAREN874=null;
		Token LEFT_PAREN876=null;
		Token COMMA877=null;
		Token RIGHT_PAREN879=null;
		Token LEFT_PAREN881=null;
		Token COMMA884=null;
		Token RIGHT_PAREN886=null;
		Token SEMICOLON887=null;
		ParserRuleReturnScope id1 =null;
		ParserRuleReturnScope pragma_key866 =null;
		ParserRuleReturnScope serially_reusable_key867 =null;
		ParserRuleReturnScope autonomous_transaction_key868 =null;
		ParserRuleReturnScope exception_init_key869 =null;
		ParserRuleReturnScope exception_name871 =null;
		ParserRuleReturnScope numeric873 =null;
		ParserRuleReturnScope inline_key875 =null;
		ParserRuleReturnScope expression878 =null;
		ParserRuleReturnScope restrict_references_key880 =null;
		ParserRuleReturnScope id882 =null;
		ParserRuleReturnScope default_key883 =null;
		ParserRuleReturnScope id885 =null;

		Object LEFT_PAREN870_tree=null;
		Object COMMA872_tree=null;
		Object RIGHT_PAREN874_tree=null;
		Object LEFT_PAREN876_tree=null;
		Object COMMA877_tree=null;
		Object RIGHT_PAREN879_tree=null;
		Object LEFT_PAREN881_tree=null;
		Object COMMA884_tree=null;
		Object RIGHT_PAREN886_tree=null;
		Object SEMICOLON887_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_autonomous_transaction_key=new RewriteRuleSubtreeStream(adaptor,"rule autonomous_transaction_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_exception_name=new RewriteRuleSubtreeStream(adaptor,"rule exception_name");
		RewriteRuleSubtreeStream stream_serially_reusable_key=new RewriteRuleSubtreeStream(adaptor,"rule serially_reusable_key");
		RewriteRuleSubtreeStream stream_default_key=new RewriteRuleSubtreeStream(adaptor,"rule default_key");
		RewriteRuleSubtreeStream stream_numeric=new RewriteRuleSubtreeStream(adaptor,"rule numeric");
		RewriteRuleSubtreeStream stream_id=new RewriteRuleSubtreeStream(adaptor,"rule id");
		RewriteRuleSubtreeStream stream_restrict_references_key=new RewriteRuleSubtreeStream(adaptor,"rule restrict_references_key");
		RewriteRuleSubtreeStream stream_inline_key=new RewriteRuleSubtreeStream(adaptor,"rule inline_key");
		RewriteRuleSubtreeStream stream_pragma_key=new RewriteRuleSubtreeStream(adaptor,"rule pragma_key");
		RewriteRuleSubtreeStream stream_exception_init_key=new RewriteRuleSubtreeStream(adaptor,"rule exception_init_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1190:5: ( pragma_key ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN ) SEMICOLON -> {mode == 1}? ^( PRAGMA_DECLARE[$pragma_key.start] serially_reusable_key ) -> {mode == 2}? ^( PRAGMA_DECLARE[$pragma_key.start] autonomous_transaction_key ) -> {mode == 3}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( exception_init_key exception_name numeric ) ) -> {mode == 4}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( inline_key $id1 ^( EXPR expression ) ) ) -> ^( PRAGMA_DECLARE[$pragma_key.start] ^( restrict_references_key ( default_key )? ( id )* ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1190:10: pragma_key ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN ) SEMICOLON
			{
			pushFollow(FOLLOW_pragma_key_in_pragma_declaration11816);
			pragma_key866=pragma_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pragma_key.add(pragma_key866.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1191:9: ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN )
			int alt232=5;
			alt232 = dfa232.predict(input);
			switch (alt232) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1191:14: serially_reusable_key
					{
					pushFollow(FOLLOW_serially_reusable_key_in_pragma_declaration11831);
					serially_reusable_key867=serially_reusable_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_serially_reusable_key.add(serially_reusable_key867.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1192:14: autonomous_transaction_key
					{
					pushFollow(FOLLOW_autonomous_transaction_key_in_pragma_declaration11848);
					autonomous_transaction_key868=autonomous_transaction_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_autonomous_transaction_key.add(autonomous_transaction_key868.getTree());
					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1193:14: exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN
					{
					pushFollow(FOLLOW_exception_init_key_in_pragma_declaration11865);
					exception_init_key869=exception_init_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_exception_init_key.add(exception_init_key869.getTree());
					LEFT_PAREN870=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pragma_declaration11867); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN870);

					pushFollow(FOLLOW_exception_name_in_pragma_declaration11869);
					exception_name871=exception_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_exception_name.add(exception_name871.getTree());
					COMMA872=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration11871); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA872);

					pushFollow(FOLLOW_numeric_in_pragma_declaration11873);
					numeric873=numeric();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_numeric.add(numeric873.getTree());
					RIGHT_PAREN874=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pragma_declaration11875); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN874);

					if ( state.backtracking==0 ) {mode = 3;}
					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1194:14: inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN
					{
					pushFollow(FOLLOW_inline_key_in_pragma_declaration11893);
					inline_key875=inline_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_inline_key.add(inline_key875.getTree());
					LEFT_PAREN876=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pragma_declaration11895); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN876);

					pushFollow(FOLLOW_id_in_pragma_declaration11899);
					id1=id();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_id.add(id1.getTree());
					COMMA877=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration11901); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA877);

					pushFollow(FOLLOW_expression_in_pragma_declaration11903);
					expression878=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression878.getTree());
					RIGHT_PAREN879=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pragma_declaration11905); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN879);

					if ( state.backtracking==0 ) {mode = 4;}
					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1195:14: restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN
					{
					pushFollow(FOLLOW_restrict_references_key_in_pragma_declaration11922);
					restrict_references_key880=restrict_references_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrict_references_key.add(restrict_references_key880.getTree());
					LEFT_PAREN881=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pragma_declaration11924); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN881);

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1195:49: ( id | default_key )
					int alt230=2;
					int LA230_0 = input.LA(1);
					if ( (LA230_0==DELIMITED_ID||LA230_0==INTRODUCER||LA230_0==REGULAR_ID) ) {
						alt230=1;
					}
					else if ( (LA230_0==SQL92_RESERVED_DEFAULT) ) {
						alt230=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 230, 0, input);
						throw nvae;
					}

					switch (alt230) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1195:50: id
							{
							pushFollow(FOLLOW_id_in_pragma_declaration11927);
							id882=id();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_id.add(id882.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1195:53: default_key
							{
							pushFollow(FOLLOW_default_key_in_pragma_declaration11929);
							default_key883=default_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_default_key.add(default_key883.getTree());
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1195:66: ( COMMA id )+
					int cnt231=0;
					loop231:
					while (true) {
						int alt231=2;
						int LA231_0 = input.LA(1);
						if ( (LA231_0==COMMA) ) {
							alt231=1;
						}

						switch (alt231) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1195:67: COMMA id
							{
							COMMA884=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration11933); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA884);

							pushFollow(FOLLOW_id_in_pragma_declaration11935);
							id885=id();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_id.add(id885.getTree());
							}
							break;

						default :
							if ( cnt231 >= 1 ) break loop231;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(231, input);
							throw eee;
						}
						cnt231++;
					}

					RIGHT_PAREN886=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pragma_declaration11939); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN886);

					}
					break;

			}

			SEMICOLON887=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pragma_declaration11959); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON887);

			// AST REWRITE
			// elements: inline_key, id1, exception_name, autonomous_transaction_key, serially_reusable_key, restrict_references_key, default_key, numeric, expression, exception_init_key, id
			// token labels: 
			// rule labels: id1, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_id1=new RewriteRuleSubtreeStream(adaptor,"rule id1",id1!=null?id1.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1198:9: -> {mode == 1}? ^( PRAGMA_DECLARE[$pragma_key.start] serially_reusable_key )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1198:25: ^( PRAGMA_DECLARE[$pragma_key.start] serially_reusable_key )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PRAGMA_DECLARE, (pragma_key866!=null?(pragma_key866.start):null)), root_1);
				adaptor.addChild(root_1, stream_serially_reusable_key.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1199:9: -> {mode == 2}? ^( PRAGMA_DECLARE[$pragma_key.start] autonomous_transaction_key )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1199:25: ^( PRAGMA_DECLARE[$pragma_key.start] autonomous_transaction_key )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PRAGMA_DECLARE, (pragma_key866!=null?(pragma_key866.start):null)), root_1);
				adaptor.addChild(root_1, stream_autonomous_transaction_key.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1200:9: -> {mode == 3}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( exception_init_key exception_name numeric ) )
			if (mode == 3) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1200:25: ^( PRAGMA_DECLARE[$pragma_key.start] ^( exception_init_key exception_name numeric ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PRAGMA_DECLARE, (pragma_key866!=null?(pragma_key866.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1200:61: ^( exception_init_key exception_name numeric )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_exception_init_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_exception_name.nextTree());
				adaptor.addChild(root_2, stream_numeric.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1201:9: -> {mode == 4}? ^( PRAGMA_DECLARE[$pragma_key.start] ^( inline_key $id1 ^( EXPR expression ) ) )
			if (mode == 4) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1201:25: ^( PRAGMA_DECLARE[$pragma_key.start] ^( inline_key $id1 ^( EXPR expression ) ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PRAGMA_DECLARE, (pragma_key866!=null?(pragma_key866.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1201:61: ^( inline_key $id1 ^( EXPR expression ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_inline_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_id1.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1201:79: ^( EXPR expression )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);
				adaptor.addChild(root_3, stream_expression.nextTree());
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1202:9: -> ^( PRAGMA_DECLARE[$pragma_key.start] ^( restrict_references_key ( default_key )? ( id )* ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1202:12: ^( PRAGMA_DECLARE[$pragma_key.start] ^( restrict_references_key ( default_key )? ( id )* ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PRAGMA_DECLARE, (pragma_key866!=null?(pragma_key866.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1202:48: ^( restrict_references_key ( default_key )? ( id )* )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_restrict_references_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1202:74: ( default_key )?
				if ( stream_default_key.hasNext() ) {
					adaptor.addChild(root_2, stream_default_key.nextTree());
				}
				stream_default_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1202:87: ( id )*
				while ( stream_id.hasNext() ) {
					adaptor.addChild(root_2, stream_id.nextTree());
				}
				stream_id.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pragma_declaration"


	public static class record_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "record_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1205:1: record_declaration : ( record_type_dec | record_var_dec );
	public final PLSQLParser.record_declaration_return record_declaration() throws RecognitionException {
		PLSQLParser.record_declaration_return retval = new PLSQLParser.record_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope record_type_dec888 =null;
		ParserRuleReturnScope record_var_dec889 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1206:5: ( record_type_dec | record_var_dec )
			int alt233=2;
			alt233 = dfa233.predict(input);
			switch (alt233) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1206:10: record_type_dec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_record_type_dec_in_record_declaration12102);
					record_type_dec888=record_type_dec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, record_type_dec888.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1207:10: record_var_dec
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_record_var_dec_in_record_declaration12113);
					record_var_dec889=record_var_dec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, record_var_dec889.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_declaration"


	public static class record_type_dec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "record_type_dec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1213:1: record_type_dec : type_key type_name is_key ( record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN -> ^( RECORD_TYPE_DECLARE_FIELDS[$type_key.start] type_name ( field_spec )+ ) | ref_key cursor_key ( return_key type_spec )? -> ^( RECORD_TYPE_DECLARE_REFCURSOR[$type_key.start] type_name ( type_spec )? ) ) SEMICOLON ;
	public final PLSQLParser.record_type_dec_return record_type_dec() throws RecognitionException {
		PLSQLParser.record_type_dec_return retval = new PLSQLParser.record_type_dec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN894=null;
		Token COMMA896=null;
		Token RIGHT_PAREN898=null;
		Token SEMICOLON903=null;
		ParserRuleReturnScope type_key890 =null;
		ParserRuleReturnScope type_name891 =null;
		ParserRuleReturnScope is_key892 =null;
		ParserRuleReturnScope record_key893 =null;
		ParserRuleReturnScope field_spec895 =null;
		ParserRuleReturnScope field_spec897 =null;
		ParserRuleReturnScope ref_key899 =null;
		ParserRuleReturnScope cursor_key900 =null;
		ParserRuleReturnScope return_key901 =null;
		ParserRuleReturnScope type_spec902 =null;

		Object LEFT_PAREN894_tree=null;
		Object COMMA896_tree=null;
		Object RIGHT_PAREN898_tree=null;
		Object SEMICOLON903_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_field_spec=new RewriteRuleSubtreeStream(adaptor,"rule field_spec");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_record_key=new RewriteRuleSubtreeStream(adaptor,"rule record_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
		RewriteRuleSubtreeStream stream_ref_key=new RewriteRuleSubtreeStream(adaptor,"rule ref_key");
		RewriteRuleSubtreeStream stream_cursor_key=new RewriteRuleSubtreeStream(adaptor,"rule cursor_key");
		RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1214:5: ( type_key type_name is_key ( record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN -> ^( RECORD_TYPE_DECLARE_FIELDS[$type_key.start] type_name ( field_spec )+ ) | ref_key cursor_key ( return_key type_spec )? -> ^( RECORD_TYPE_DECLARE_REFCURSOR[$type_key.start] type_name ( type_spec )? ) ) SEMICOLON )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1214:10: type_key type_name is_key ( record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN -> ^( RECORD_TYPE_DECLARE_FIELDS[$type_key.start] type_name ( field_spec )+ ) | ref_key cursor_key ( return_key type_spec )? -> ^( RECORD_TYPE_DECLARE_REFCURSOR[$type_key.start] type_name ( type_spec )? ) ) SEMICOLON
			{
			pushFollow(FOLLOW_type_key_in_record_type_dec12136);
			type_key890=type_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_key.add(type_key890.getTree());
			pushFollow(FOLLOW_type_name_in_record_type_dec12138);
			type_name891=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_name.add(type_name891.getTree());
			pushFollow(FOLLOW_is_key_in_record_type_dec12140);
			is_key892=is_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_is_key.add(is_key892.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1215:5: ( record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN -> ^( RECORD_TYPE_DECLARE_FIELDS[$type_key.start] type_name ( field_spec )+ ) | ref_key cursor_key ( return_key type_spec )? -> ^( RECORD_TYPE_DECLARE_REFCURSOR[$type_key.start] type_name ( type_spec )? ) )
			int alt236=2;
			int LA236_0 = input.LA(1);
			if ( (LA236_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("record"))||(input.LT(1).getText().equalsIgnoreCase("ref"))))) {
				int LA236_1 = input.LA(2);
				if ( (LA236_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("record")))) {
					alt236=1;
				}
				else if ( (LA236_1==SQL92_RESERVED_CURSOR) && ((input.LT(1).getText().equalsIgnoreCase("ref")))) {
					alt236=2;
				}

			}

			switch (alt236) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1215:10: record_key LEFT_PAREN field_spec ( COMMA field_spec )* RIGHT_PAREN
					{
					pushFollow(FOLLOW_record_key_in_record_type_dec12152);
					record_key893=record_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_record_key.add(record_key893.getTree());
					LEFT_PAREN894=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_record_type_dec12154); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN894);

					pushFollow(FOLLOW_field_spec_in_record_type_dec12156);
					field_spec895=field_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_field_spec.add(field_spec895.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1215:43: ( COMMA field_spec )*
					loop234:
					while (true) {
						int alt234=2;
						int LA234_0 = input.LA(1);
						if ( (LA234_0==COMMA) ) {
							alt234=1;
						}

						switch (alt234) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1215:45: COMMA field_spec
							{
							COMMA896=(Token)match(input,COMMA,FOLLOW_COMMA_in_record_type_dec12160); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA896);

							pushFollow(FOLLOW_field_spec_in_record_type_dec12162);
							field_spec897=field_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_field_spec.add(field_spec897.getTree());
							}
							break;

						default :
							break loop234;
						}
					}

					RIGHT_PAREN898=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_record_type_dec12167); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN898);

					// AST REWRITE
					// elements: type_name, field_spec
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1216:7: -> ^( RECORD_TYPE_DECLARE_FIELDS[$type_key.start] type_name ( field_spec )+ )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1216:10: ^( RECORD_TYPE_DECLARE_FIELDS[$type_key.start] type_name ( field_spec )+ )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RECORD_TYPE_DECLARE_FIELDS, (type_key890!=null?(type_key890.start):null)), root_1);
						adaptor.addChild(root_1, stream_type_name.nextTree());
						if ( !(stream_field_spec.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_field_spec.hasNext() ) {
							adaptor.addChild(root_1, stream_field_spec.nextTree());
						}
						stream_field_spec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1217:10: ref_key cursor_key ( return_key type_spec )?
					{
					pushFollow(FOLLOW_ref_key_in_record_type_dec12196);
					ref_key899=ref_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ref_key.add(ref_key899.getTree());
					pushFollow(FOLLOW_cursor_key_in_record_type_dec12198);
					cursor_key900=cursor_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_cursor_key.add(cursor_key900.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1217:29: ( return_key type_spec )?
					int alt235=2;
					int LA235_0 = input.LA(1);
					if ( (LA235_0==REGULAR_ID) ) {
						alt235=1;
					}
					switch (alt235) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1217:30: return_key type_spec
							{
							pushFollow(FOLLOW_return_key_in_record_type_dec12201);
							return_key901=return_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_return_key.add(return_key901.getTree());
							pushFollow(FOLLOW_type_spec_in_record_type_dec12203);
							type_spec902=type_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_type_spec.add(type_spec902.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: type_name, type_spec
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1218:7: -> ^( RECORD_TYPE_DECLARE_REFCURSOR[$type_key.start] type_name ( type_spec )? )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1218:10: ^( RECORD_TYPE_DECLARE_REFCURSOR[$type_key.start] type_name ( type_spec )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RECORD_TYPE_DECLARE_REFCURSOR, (type_key890!=null?(type_key890.start):null)), root_1);
						adaptor.addChild(root_1, stream_type_name.nextTree());
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1218:69: ( type_spec )?
						if ( stream_type_spec.hasNext() ) {
							adaptor.addChild(root_1, stream_type_spec.nextTree());
						}
						stream_type_spec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			SEMICOLON903=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_record_type_dec12234); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON903);

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_type_dec"


	public static class field_spec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "field_spec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1222:1: field_spec : column_name ( type_spec )? ( not_key null_key )? ( default_value_part )? -> ^( FIELD_SPEC column_name ( type_spec )? ( null_key )? ( default_value_part )? ) ;
	public final PLSQLParser.field_spec_return field_spec() throws RecognitionException {
		PLSQLParser.field_spec_return retval = new PLSQLParser.field_spec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope column_name904 =null;
		ParserRuleReturnScope type_spec905 =null;
		ParserRuleReturnScope not_key906 =null;
		ParserRuleReturnScope null_key907 =null;
		ParserRuleReturnScope default_value_part908 =null;

		RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
		RewriteRuleSubtreeStream stream_default_value_part=new RewriteRuleSubtreeStream(adaptor,"rule default_value_part");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_column_name=new RewriteRuleSubtreeStream(adaptor,"rule column_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1223:5: ( column_name ( type_spec )? ( not_key null_key )? ( default_value_part )? -> ^( FIELD_SPEC column_name ( type_spec )? ( null_key )? ( default_value_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1223:10: column_name ( type_spec )? ( not_key null_key )? ( default_value_part )?
			{
			pushFollow(FOLLOW_column_name_in_field_spec12254);
			column_name904=column_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_column_name.add(column_name904.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1223:22: ( type_spec )?
			int alt237=2;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==DELIMITED_ID||LA237_0==REGULAR_ID||LA237_0==SQL92_RESERVED_DATE) ) {
				alt237=1;
			}
			switch (alt237) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1223:22: type_spec
					{
					pushFollow(FOLLOW_type_spec_in_field_spec12256);
					type_spec905=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec905.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1224:9: ( not_key null_key )?
			int alt238=2;
			int LA238_0 = input.LA(1);
			if ( (LA238_0==SQL92_RESERVED_NOT) ) {
				alt238=1;
			}
			switch (alt238) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1224:10: not_key null_key
					{
					pushFollow(FOLLOW_not_key_in_field_spec12268);
					not_key906=not_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_not_key.add(not_key906.getTree());
					pushFollow(FOLLOW_null_key_in_field_spec12270);
					null_key907=null_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_null_key.add(null_key907.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1225:9: ( default_value_part )?
			int alt239=2;
			int LA239_0 = input.LA(1);
			if ( (LA239_0==ASSIGN_OP||LA239_0==SQL92_RESERVED_DEFAULT) ) {
				alt239=1;
			}
			switch (alt239) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1225:9: default_value_part
					{
					pushFollow(FOLLOW_default_value_part_in_field_spec12282);
					default_value_part908=default_value_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_default_value_part.add(default_value_part908.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: column_name, type_spec, default_value_part, null_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1226:9: -> ^( FIELD_SPEC column_name ( type_spec )? ( null_key )? ( default_value_part )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1226:12: ^( FIELD_SPEC column_name ( type_spec )? ( null_key )? ( default_value_part )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD_SPEC, "FIELD_SPEC"), root_1);
				adaptor.addChild(root_1, stream_column_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1226:37: ( type_spec )?
				if ( stream_type_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_type_spec.nextTree());
				}
				stream_type_spec.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1226:48: ( null_key )?
				if ( stream_null_key.hasNext() ) {
					adaptor.addChild(root_1, stream_null_key.nextTree());
				}
				stream_null_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1226:58: ( default_value_part )?
				if ( stream_default_value_part.hasNext() ) {
					adaptor.addChild(root_1, stream_default_value_part.nextTree());
				}
				stream_default_value_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "field_spec"


	public static class record_var_dec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "record_var_dec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1229:1: record_var_dec : record_name type_name ( percent_rowtype_key | percent_type_key ) SEMICOLON -> ^( RECORD_VAR_DECLARE record_name type_name ( percent_rowtype_key )? ( percent_type_key )? ) ;
	public final PLSQLParser.record_var_dec_return record_var_dec() throws RecognitionException {
		PLSQLParser.record_var_dec_return retval = new PLSQLParser.record_var_dec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON913=null;
		ParserRuleReturnScope record_name909 =null;
		ParserRuleReturnScope type_name910 =null;
		ParserRuleReturnScope percent_rowtype_key911 =null;
		ParserRuleReturnScope percent_type_key912 =null;

		Object SEMICOLON913_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_percent_rowtype_key=new RewriteRuleSubtreeStream(adaptor,"rule percent_rowtype_key");
		RewriteRuleSubtreeStream stream_percent_type_key=new RewriteRuleSubtreeStream(adaptor,"rule percent_type_key");
		RewriteRuleSubtreeStream stream_record_name=new RewriteRuleSubtreeStream(adaptor,"rule record_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1230:5: ( record_name type_name ( percent_rowtype_key | percent_type_key ) SEMICOLON -> ^( RECORD_VAR_DECLARE record_name type_name ( percent_rowtype_key )? ( percent_type_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1230:10: record_name type_name ( percent_rowtype_key | percent_type_key ) SEMICOLON
			{
			pushFollow(FOLLOW_record_name_in_record_var_dec12328);
			record_name909=record_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_record_name.add(record_name909.getTree());
			pushFollow(FOLLOW_type_name_in_record_var_dec12330);
			type_name910=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_name.add(type_name910.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1230:32: ( percent_rowtype_key | percent_type_key )
			int alt240=2;
			int LA240_0 = input.LA(1);
			if ( (LA240_0==PERCENT) && (((input.LT(2).getText().equalsIgnoreCase("type"))||(input.LT(2).getText().equalsIgnoreCase("rowtype"))))) {
				int LA240_1 = input.LA(2);
				if ( (LA240_1==REGULAR_ID) && (((input.LT(2).getText().equalsIgnoreCase("type"))||(input.LT(2).getText().equalsIgnoreCase("rowtype"))))) {
					int LA240_2 = input.LA(3);
					if ( ((input.LT(2).getText().equalsIgnoreCase("rowtype"))) ) {
						alt240=1;
					}
					else if ( ((input.LT(2).getText().equalsIgnoreCase("type"))) ) {
						alt240=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 240, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

			}

			switch (alt240) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1230:33: percent_rowtype_key
					{
					pushFollow(FOLLOW_percent_rowtype_key_in_record_var_dec12333);
					percent_rowtype_key911=percent_rowtype_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_percent_rowtype_key.add(percent_rowtype_key911.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1230:53: percent_type_key
					{
					pushFollow(FOLLOW_percent_type_key_in_record_var_dec12335);
					percent_type_key912=percent_type_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_percent_type_key.add(percent_type_key912.getTree());
					}
					break;

			}

			SEMICOLON913=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_record_var_dec12338); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON913);

			// AST REWRITE
			// elements: percent_rowtype_key, record_name, percent_type_key, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1231:9: -> ^( RECORD_VAR_DECLARE record_name type_name ( percent_rowtype_key )? ( percent_type_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1231:12: ^( RECORD_VAR_DECLARE record_name type_name ( percent_rowtype_key )? ( percent_type_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RECORD_VAR_DECLARE, "RECORD_VAR_DECLARE"), root_1);
				adaptor.addChild(root_1, stream_record_name.nextTree());
				adaptor.addChild(root_1, stream_type_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1231:55: ( percent_rowtype_key )?
				if ( stream_percent_rowtype_key.hasNext() ) {
					adaptor.addChild(root_1, stream_percent_rowtype_key.nextTree());
				}
				stream_percent_rowtype_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1231:76: ( percent_type_key )?
				if ( stream_percent_type_key.hasNext() ) {
					adaptor.addChild(root_1, stream_percent_type_key.nextTree());
				}
				stream_percent_type_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "record_var_dec"


	public static class table_declaration_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_declaration"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1236:1: table_declaration : ( table_type_dec | table_var_dec ) SEMICOLON !;
	public final PLSQLParser.table_declaration_return table_declaration() throws RecognitionException {
		PLSQLParser.table_declaration_return retval = new PLSQLParser.table_declaration_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON916=null;
		ParserRuleReturnScope table_type_dec914 =null;
		ParserRuleReturnScope table_var_dec915 =null;

		Object SEMICOLON916_tree=null;

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1237:5: ( ( table_type_dec | table_var_dec ) SEMICOLON !)
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1237:10: ( table_type_dec | table_var_dec ) SEMICOLON !
			{
			root_0 = (Object)adaptor.nil();


			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1237:10: ( table_type_dec | table_var_dec )
			int alt241=2;
			alt241 = dfa241.predict(input);
			switch (alt241) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1237:11: table_type_dec
					{
					pushFollow(FOLLOW_table_type_dec_in_table_declaration12385);
					table_type_dec914=table_type_dec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_type_dec914.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1237:28: table_var_dec
					{
					pushFollow(FOLLOW_table_var_dec_in_table_declaration12389);
					table_var_dec915=table_var_dec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, table_var_dec915.getTree());

					}
					break;

			}

			SEMICOLON916=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_table_declaration12392); if (state.failed) return retval;
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_declaration"


	public static class table_type_dec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_type_dec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1240:1: table_type_dec : type_key type_name is_key ( table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )? | varray_type_def ) -> {mode == 1}? ^( TABLE_TYPE_DECLARE[$type_key.start] type_name varray_type_def ) -> ^( TABLE_TYPE_DECLARE[$type_key.start] type_name ( null_key )? ^( table_key type_spec ( table_indexed_by_part )? ) ) ;
	public final PLSQLParser.table_type_dec_return table_type_dec() throws RecognitionException {
		PLSQLParser.table_type_dec_return retval = new PLSQLParser.table_type_dec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope type_key917 =null;
		ParserRuleReturnScope type_name918 =null;
		ParserRuleReturnScope is_key919 =null;
		ParserRuleReturnScope table_key920 =null;
		ParserRuleReturnScope of_key921 =null;
		ParserRuleReturnScope type_spec922 =null;
		ParserRuleReturnScope table_indexed_by_part923 =null;
		ParserRuleReturnScope not_key924 =null;
		ParserRuleReturnScope null_key925 =null;
		ParserRuleReturnScope varray_type_def926 =null;

		RewriteRuleSubtreeStream stream_table_key=new RewriteRuleSubtreeStream(adaptor,"rule table_key");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
		RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
		RewriteRuleSubtreeStream stream_is_key=new RewriteRuleSubtreeStream(adaptor,"rule is_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_varray_type_def=new RewriteRuleSubtreeStream(adaptor,"rule varray_type_def");
		RewriteRuleSubtreeStream stream_table_indexed_by_part=new RewriteRuleSubtreeStream(adaptor,"rule table_indexed_by_part");
		RewriteRuleSubtreeStream stream_type_key=new RewriteRuleSubtreeStream(adaptor,"rule type_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1242:5: ( type_key type_name is_key ( table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )? | varray_type_def ) -> {mode == 1}? ^( TABLE_TYPE_DECLARE[$type_key.start] type_name varray_type_def ) -> ^( TABLE_TYPE_DECLARE[$type_key.start] type_name ( null_key )? ^( table_key type_spec ( table_indexed_by_part )? ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1242:10: type_key type_name is_key ( table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )? | varray_type_def )
			{
			pushFollow(FOLLOW_type_key_in_table_type_dec12421);
			type_key917=type_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_key.add(type_key917.getTree());
			pushFollow(FOLLOW_type_name_in_table_type_dec12423);
			type_name918=type_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_name.add(type_name918.getTree());
			pushFollow(FOLLOW_is_key_in_table_type_dec12425);
			is_key919=is_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_is_key.add(is_key919.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1243:5: ( table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )? | varray_type_def )
			int alt244=2;
			int LA244_0 = input.LA(1);
			if ( (LA244_0==SQL92_RESERVED_TABLE) ) {
				alt244=1;
			}
			else if ( (LA244_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("varying"))||(input.LT(1).getText().equalsIgnoreCase("varray"))))) {
				alt244=2;
			}

			switch (alt244) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1243:10: table_key of_key type_spec ( table_indexed_by_part )? ( not_key null_key )?
					{
					pushFollow(FOLLOW_table_key_in_table_type_dec12437);
					table_key920=table_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_table_key.add(table_key920.getTree());
					pushFollow(FOLLOW_of_key_in_table_type_dec12451);
					of_key921=of_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_of_key.add(of_key921.getTree());
					pushFollow(FOLLOW_type_spec_in_table_type_dec12453);
					type_spec922=type_spec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_type_spec.add(type_spec922.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1245:13: ( table_indexed_by_part )?
					int alt242=2;
					int LA242_0 = input.LA(1);
					if ( (LA242_0==PLSQL_RESERVED_INDEX||LA242_0==REGULAR_ID) ) {
						alt242=1;
					}
					switch (alt242) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1245:13: table_indexed_by_part
							{
							pushFollow(FOLLOW_table_indexed_by_part_in_table_type_dec12468);
							table_indexed_by_part923=table_indexed_by_part();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_table_indexed_by_part.add(table_indexed_by_part923.getTree());
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1246:9: ( not_key null_key )?
					int alt243=2;
					int LA243_0 = input.LA(1);
					if ( (LA243_0==SQL92_RESERVED_NOT) ) {
						alt243=1;
					}
					switch (alt243) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1246:10: not_key null_key
							{
							pushFollow(FOLLOW_not_key_in_table_type_dec12480);
							not_key924=not_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_not_key.add(not_key924.getTree());
							pushFollow(FOLLOW_null_key_in_table_type_dec12482);
							null_key925=null_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_null_key.add(null_key925.getTree());
							}
							break;

					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1247:10: varray_type_def
					{
					pushFollow(FOLLOW_varray_type_def_in_table_type_dec12495);
					varray_type_def926=varray_type_def();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varray_type_def.add(varray_type_def926.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			// AST REWRITE
			// elements: table_indexed_by_part, type_name, null_key, varray_type_def, type_name, table_key, type_spec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1249:9: -> {mode == 1}? ^( TABLE_TYPE_DECLARE[$type_key.start] type_name varray_type_def )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1249:24: ^( TABLE_TYPE_DECLARE[$type_key.start] type_name varray_type_def )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_TYPE_DECLARE, (type_key917!=null?(type_key917.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				adaptor.addChild(root_1, stream_varray_type_def.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1250:9: -> ^( TABLE_TYPE_DECLARE[$type_key.start] type_name ( null_key )? ^( table_key type_spec ( table_indexed_by_part )? ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1250:12: ^( TABLE_TYPE_DECLARE[$type_key.start] type_name ( null_key )? ^( table_key type_spec ( table_indexed_by_part )? ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_TYPE_DECLARE, (type_key917!=null?(type_key917.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1250:60: ( null_key )?
				if ( stream_null_key.hasNext() ) {
					adaptor.addChild(root_1, stream_null_key.nextTree());
				}
				stream_null_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1250:70: ^( table_key type_spec ( table_indexed_by_part )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_table_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_type_spec.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1250:92: ( table_indexed_by_part )?
				if ( stream_table_indexed_by_part.hasNext() ) {
					adaptor.addChild(root_2, stream_table_indexed_by_part.nextTree());
				}
				stream_table_indexed_by_part.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_type_dec"


	public static class table_indexed_by_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_indexed_by_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1253:1: table_indexed_by_part : (idx= indexed_key |idx= index_key ) by_key type_spec -> ^( INDEXED_BY[$idx.start] type_spec ) ;
	public final PLSQLParser.table_indexed_by_part_return table_indexed_by_part() throws RecognitionException {
		PLSQLParser.table_indexed_by_part_return retval = new PLSQLParser.table_indexed_by_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope idx =null;
		ParserRuleReturnScope by_key927 =null;
		ParserRuleReturnScope type_spec928 =null;

		RewriteRuleSubtreeStream stream_indexed_key=new RewriteRuleSubtreeStream(adaptor,"rule indexed_key");
		RewriteRuleSubtreeStream stream_index_key=new RewriteRuleSubtreeStream(adaptor,"rule index_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_by_key=new RewriteRuleSubtreeStream(adaptor,"rule by_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1254:5: ( (idx= indexed_key |idx= index_key ) by_key type_spec -> ^( INDEXED_BY[$idx.start] type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1254:10: (idx= indexed_key |idx= index_key ) by_key type_spec
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1254:10: (idx= indexed_key |idx= index_key )
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==REGULAR_ID) ) {
				alt245=1;
			}
			else if ( (LA245_0==PLSQL_RESERVED_INDEX) ) {
				alt245=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 245, 0, input);
				throw nvae;
			}

			switch (alt245) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1254:11: idx= indexed_key
					{
					pushFollow(FOLLOW_indexed_key_in_table_indexed_by_part12575);
					idx=indexed_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexed_key.add(idx.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1254:27: idx= index_key
					{
					pushFollow(FOLLOW_index_key_in_table_indexed_by_part12579);
					idx=index_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_index_key.add(idx.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_by_key_in_table_indexed_by_part12582);
			by_key927=by_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_by_key.add(by_key927.getTree());
			pushFollow(FOLLOW_type_spec_in_table_indexed_by_part12584);
			type_spec928=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec928.getTree());
			// AST REWRITE
			// elements: type_spec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1255:9: -> ^( INDEXED_BY[$idx.start] type_spec )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1255:12: ^( INDEXED_BY[$idx.start] type_spec )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INDEXED_BY, (idx!=null?(idx.start):null)), root_1);
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_indexed_by_part"


	public static class varray_type_def_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "varray_type_def"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1258:1: varray_type_def : ( varray_key | varying_key array_key ) LEFT_PAREN expression RIGHT_PAREN of_key type_spec ( not_key null_key )? -> ( null_key )? ^( VARR_ARRAY_DEF ^( EXPR expression ) type_spec ) ;
	public final PLSQLParser.varray_type_def_return varray_type_def() throws RecognitionException {
		PLSQLParser.varray_type_def_return retval = new PLSQLParser.varray_type_def_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN932=null;
		Token RIGHT_PAREN934=null;
		ParserRuleReturnScope varray_key929 =null;
		ParserRuleReturnScope varying_key930 =null;
		ParserRuleReturnScope array_key931 =null;
		ParserRuleReturnScope expression933 =null;
		ParserRuleReturnScope of_key935 =null;
		ParserRuleReturnScope type_spec936 =null;
		ParserRuleReturnScope not_key937 =null;
		ParserRuleReturnScope null_key938 =null;

		Object LEFT_PAREN932_tree=null;
		Object RIGHT_PAREN934_tree=null;
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_varying_key=new RewriteRuleSubtreeStream(adaptor,"rule varying_key");
		RewriteRuleSubtreeStream stream_varray_key=new RewriteRuleSubtreeStream(adaptor,"rule varray_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
		RewriteRuleSubtreeStream stream_null_key=new RewriteRuleSubtreeStream(adaptor,"rule null_key");
		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_not_key=new RewriteRuleSubtreeStream(adaptor,"rule not_key");
		RewriteRuleSubtreeStream stream_array_key=new RewriteRuleSubtreeStream(adaptor,"rule array_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1259:5: ( ( varray_key | varying_key array_key ) LEFT_PAREN expression RIGHT_PAREN of_key type_spec ( not_key null_key )? -> ( null_key )? ^( VARR_ARRAY_DEF ^( EXPR expression ) type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1259:10: ( varray_key | varying_key array_key ) LEFT_PAREN expression RIGHT_PAREN of_key type_spec ( not_key null_key )?
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1259:10: ( varray_key | varying_key array_key )
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("varying"))||(input.LT(1).getText().equalsIgnoreCase("varray"))))) {
				int LA246_1 = input.LA(2);
				if ( (LA246_1==LEFT_PAREN) && ((input.LT(1).getText().equalsIgnoreCase("varray")))) {
					alt246=1;
				}
				else if ( (LA246_1==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("varying")))) {
					alt246=2;
				}

			}

			switch (alt246) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1259:11: varray_key
					{
					pushFollow(FOLLOW_varray_key_in_varray_type_def12622);
					varray_key929=varray_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varray_key.add(varray_key929.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1259:23: varying_key array_key
					{
					pushFollow(FOLLOW_varying_key_in_varray_type_def12625);
					varying_key930=varying_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_varying_key.add(varying_key930.getTree());
					pushFollow(FOLLOW_array_key_in_varray_type_def12627);
					array_key931=array_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_array_key.add(array_key931.getTree());
					}
					break;

			}

			LEFT_PAREN932=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_varray_type_def12638); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN932);

			pushFollow(FOLLOW_expression_in_varray_type_def12640);
			expression933=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression933.getTree());
			RIGHT_PAREN934=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_varray_type_def12642); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN934);

			pushFollow(FOLLOW_of_key_in_varray_type_def12653);
			of_key935=of_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_of_key.add(of_key935.getTree());
			pushFollow(FOLLOW_type_spec_in_varray_type_def12655);
			type_spec936=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec936.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1262:9: ( not_key null_key )?
			int alt247=2;
			int LA247_0 = input.LA(1);
			if ( (LA247_0==SQL92_RESERVED_NOT) ) {
				int LA247_1 = input.LA(2);
				if ( (LA247_1==SQL92_RESERVED_NULL) ) {
					alt247=1;
				}
			}
			switch (alt247) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1262:10: not_key null_key
					{
					pushFollow(FOLLOW_not_key_in_varray_type_def12666);
					not_key937=not_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_not_key.add(not_key937.getTree());
					pushFollow(FOLLOW_null_key_in_varray_type_def12668);
					null_key938=null_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_null_key.add(null_key938.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: type_spec, null_key, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1263:9: -> ( null_key )? ^( VARR_ARRAY_DEF ^( EXPR expression ) type_spec )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1263:12: ( null_key )?
				if ( stream_null_key.hasNext() ) {
					adaptor.addChild(root_0, stream_null_key.nextTree());
				}
				stream_null_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1263:22: ^( VARR_ARRAY_DEF ^( EXPR expression ) type_spec )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARR_ARRAY_DEF, "VARR_ARRAY_DEF"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1263:39: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_type_spec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "varray_type_def"


	public static class table_var_dec_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "table_var_dec"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1266:1: table_var_dec : table_var_name type_spec -> ^( TABLE_VAR_DECLARE table_var_name type_spec ) ;
	public final PLSQLParser.table_var_dec_return table_var_dec() throws RecognitionException {
		PLSQLParser.table_var_dec_return retval = new PLSQLParser.table_var_dec_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope table_var_name939 =null;
		ParserRuleReturnScope type_spec940 =null;

		RewriteRuleSubtreeStream stream_type_spec=new RewriteRuleSubtreeStream(adaptor,"rule type_spec");
		RewriteRuleSubtreeStream stream_table_var_name=new RewriteRuleSubtreeStream(adaptor,"rule table_var_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1267:5: ( table_var_name type_spec -> ^( TABLE_VAR_DECLARE table_var_name type_spec ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1267:10: table_var_name type_spec
			{
			pushFollow(FOLLOW_table_var_name_in_table_var_dec12715);
			table_var_name939=table_var_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_table_var_name.add(table_var_name939.getTree());
			pushFollow(FOLLOW_type_spec_in_table_var_dec12717);
			type_spec940=type_spec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type_spec.add(type_spec940.getTree());
			// AST REWRITE
			// elements: type_spec, table_var_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1268:5: -> ^( TABLE_VAR_DECLARE table_var_name type_spec )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1268:11: ^( TABLE_VAR_DECLARE table_var_name type_spec )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TABLE_VAR_DECLARE, "TABLE_VAR_DECLARE"), root_1);
				adaptor.addChild(root_1, stream_table_var_name.nextTree());
				adaptor.addChild(root_1, stream_type_spec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "table_var_dec"


	public static class seq_of_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "seq_of_statements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1275:1: seq_of_statements : (items+= seq_of_statements_item )+ -> ^( STATEMENTS ( $items)+ ) ;
	public final PLSQLParser.seq_of_statements_return seq_of_statements() throws RecognitionException {
		PLSQLParser.seq_of_statements_return retval = new PLSQLParser.seq_of_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		List<Object> list_items=null;
		RuleReturnScope items = null;
		RewriteRuleSubtreeStream stream_seq_of_statements_item=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements_item");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1276:5: ( (items+= seq_of_statements_item )+ -> ^( STATEMENTS ( $items)+ ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1276:11: (items+= seq_of_statements_item )+
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1276:16: (items+= seq_of_statements_item )+
			int cnt248=0;
			loop248:
			while (true) {
				int alt248=2;
				switch ( input.LA(1) ) {
				case LESS_THAN_OP:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_CREATE:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_ALTER:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_GRANT:
					{
					alt248=1;
					}
					break;
				case REGULAR_ID:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_BEGIN:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_DECLARE:
					{
					alt248=1;
					}
					break;
				case INTRODUCER:
					{
					alt248=1;
					}
					break;
				case DELIMITED_ID:
					{
					alt248=1;
					}
					break;
				case BINDVAR:
					{
					alt248=1;
					}
					break;
				case COLON:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_CURSOR:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_PROCEDURE:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_DELETE:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_EXISTS:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_PRIOR:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_GOTO:
					{
					alt248=1;
					}
					break;
				case PLSQL_RESERVED_IF:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_FOR:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_NULL:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_CASE:
					{
					alt248=1;
					}
					break;
				case PLSQL_RESERVED_LOCK:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_WITH:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_SELECT:
					{
					alt248=1;
					}
					break;
				case LEFT_PAREN:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_UPDATE:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_INSERT:
					{
					alt248=1;
					}
					break;
				case SQL92_RESERVED_FETCH:
					{
					alt248=1;
					}
					break;
				}
				switch (alt248) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1276:16: items+= seq_of_statements_item
					{
					pushFollow(FOLLOW_seq_of_statements_item_in_seq_of_statements12761);
					items=seq_of_statements_item();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_seq_of_statements_item.add(items.getTree());
					if (list_items==null) list_items=new ArrayList<Object>();
					list_items.add(items.getTree());
					}
					break;

				default :
					if ( cnt248 >= 1 ) break loop248;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(248, input);
					throw eee;
				}
				cnt248++;
			}

			// AST REWRITE
			// elements: items
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: items
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_items=new RewriteRuleSubtreeStream(adaptor,"token items",list_items);
			root_0 = (Object)adaptor.nil();
			// 1277:9: -> ^( STATEMENTS ( $items)+ )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1277:12: ^( STATEMENTS ( $items)+ )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATEMENTS, "STATEMENTS"), root_1);
				if ( !(stream_items.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_items.hasNext() ) {
					adaptor.addChild(root_1, stream_items.nextTree());
				}
				stream_items.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seq_of_statements"


	public static class seq_of_statements_item_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "seq_of_statements_item"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1280:1: seq_of_statements_item : ( labeled_statement ( SEMICOLON | EOF ) -> labeled_statement | statement ( SEMICOLON | EOF ) -> statement );
	public final PLSQLParser.seq_of_statements_item_return seq_of_statements_item() throws RecognitionException {
		PLSQLParser.seq_of_statements_item_return retval = new PLSQLParser.seq_of_statements_item_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token SEMICOLON942=null;
		Token EOF943=null;
		Token SEMICOLON945=null;
		Token EOF946=null;
		ParserRuleReturnScope labeled_statement941 =null;
		ParserRuleReturnScope statement944 =null;

		Object SEMICOLON942_tree=null;
		Object EOF943_tree=null;
		Object SEMICOLON945_tree=null;
		Object EOF946_tree=null;
		RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
		RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_labeled_statement=new RewriteRuleSubtreeStream(adaptor,"rule labeled_statement");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1281:5: ( labeled_statement ( SEMICOLON | EOF ) -> labeled_statement | statement ( SEMICOLON | EOF ) -> statement )
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==LESS_THAN_OP) ) {
				alt251=1;
			}
			else if ( (LA251_0==BINDVAR||LA251_0==COLON||LA251_0==DELIMITED_ID||LA251_0==INTRODUCER||LA251_0==LEFT_PAREN||LA251_0==PLSQL_RESERVED_IF||LA251_0==PLSQL_RESERVED_LOCK||LA251_0==REGULAR_ID||LA251_0==SQL92_RESERVED_ALTER||LA251_0==SQL92_RESERVED_BEGIN||LA251_0==SQL92_RESERVED_CASE||LA251_0==SQL92_RESERVED_CREATE||LA251_0==SQL92_RESERVED_CURSOR||LA251_0==SQL92_RESERVED_DECLARE||LA251_0==SQL92_RESERVED_DELETE||LA251_0==SQL92_RESERVED_EXISTS||(LA251_0 >= SQL92_RESERVED_FETCH && LA251_0 <= SQL92_RESERVED_FOR)||(LA251_0 >= SQL92_RESERVED_GOTO && LA251_0 <= SQL92_RESERVED_GRANT)||LA251_0==SQL92_RESERVED_INSERT||LA251_0==SQL92_RESERVED_NULL||(LA251_0 >= SQL92_RESERVED_PRIOR && LA251_0 <= SQL92_RESERVED_PROCEDURE)||LA251_0==SQL92_RESERVED_SELECT||LA251_0==SQL92_RESERVED_UPDATE||LA251_0==SQL92_RESERVED_WITH) ) {
				alt251=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 251, 0, input);
				throw nvae;
			}

			switch (alt251) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1281:10: labeled_statement ( SEMICOLON | EOF )
					{
					pushFollow(FOLLOW_labeled_statement_in_seq_of_statements_item12800);
					labeled_statement941=labeled_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_labeled_statement.add(labeled_statement941.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1281:28: ( SEMICOLON | EOF )
					int alt249=2;
					int LA249_0 = input.LA(1);
					if ( (LA249_0==SEMICOLON) ) {
						alt249=1;
					}
					else if ( (LA249_0==EOF) ) {
						alt249=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 249, 0, input);
						throw nvae;
					}

					switch (alt249) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1281:29: SEMICOLON
							{
							SEMICOLON942=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_seq_of_statements_item12803); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON942);

							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1281:39: EOF
							{
							EOF943=(Token)match(input,EOF,FOLLOW_EOF_in_seq_of_statements_item12805); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_EOF.add(EOF943);

							}
							break;

					}

					// AST REWRITE
					// elements: labeled_statement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1281:44: -> labeled_statement
					{
						adaptor.addChild(root_0, stream_labeled_statement.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1282:10: statement ( SEMICOLON | EOF )
					{
					pushFollow(FOLLOW_statement_in_seq_of_statements_item12821);
					statement944=statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_statement.add(statement944.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1282:20: ( SEMICOLON | EOF )
					int alt250=2;
					int LA250_0 = input.LA(1);
					if ( (LA250_0==SEMICOLON) ) {
						alt250=1;
					}
					else if ( (LA250_0==EOF) ) {
						alt250=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 250, 0, input);
						throw nvae;
					}

					switch (alt250) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1282:21: SEMICOLON
							{
							SEMICOLON945=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_seq_of_statements_item12824); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON945);

							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1282:31: EOF
							{
							EOF946=(Token)match(input,EOF,FOLLOW_EOF_in_seq_of_statements_item12826); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_EOF.add(EOF946);

							}
							break;

					}

					// AST REWRITE
					// elements: statement
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1282:36: -> statement
					{
						adaptor.addChild(root_0, stream_statement.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "seq_of_statements_item"


	public static class labeled_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "labeled_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1285:1: labeled_statement : ltp1= LESS_THAN_OP LESS_THAN_OP label_name GREATER_THAN_OP GREATER_THAN_OP statement -> ^( LABEL_DECLARE[$ltp1] label_name statement ) ;
	public final PLSQLParser.labeled_statement_return labeled_statement() throws RecognitionException {
		PLSQLParser.labeled_statement_return retval = new PLSQLParser.labeled_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ltp1=null;
		Token LESS_THAN_OP947=null;
		Token GREATER_THAN_OP949=null;
		Token GREATER_THAN_OP950=null;
		ParserRuleReturnScope label_name948 =null;
		ParserRuleReturnScope statement951 =null;

		Object ltp1_tree=null;
		Object LESS_THAN_OP947_tree=null;
		Object GREATER_THAN_OP949_tree=null;
		Object GREATER_THAN_OP950_tree=null;
		RewriteRuleTokenStream stream_LESS_THAN_OP=new RewriteRuleTokenStream(adaptor,"token LESS_THAN_OP");
		RewriteRuleTokenStream stream_GREATER_THAN_OP=new RewriteRuleTokenStream(adaptor,"token GREATER_THAN_OP");
		RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
		RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1286:5: (ltp1= LESS_THAN_OP LESS_THAN_OP label_name GREATER_THAN_OP GREATER_THAN_OP statement -> ^( LABEL_DECLARE[$ltp1] label_name statement ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1286:10: ltp1= LESS_THAN_OP LESS_THAN_OP label_name GREATER_THAN_OP GREATER_THAN_OP statement
			{
			ltp1=(Token)match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_labeled_statement12857); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESS_THAN_OP.add(ltp1);

			LESS_THAN_OP947=(Token)match(input,LESS_THAN_OP,FOLLOW_LESS_THAN_OP_in_labeled_statement12859); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESS_THAN_OP.add(LESS_THAN_OP947);

			pushFollow(FOLLOW_label_name_in_labeled_statement12861);
			label_name948=label_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_label_name.add(label_name948.getTree());
			GREATER_THAN_OP949=(Token)match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_labeled_statement12863); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATER_THAN_OP.add(GREATER_THAN_OP949);

			GREATER_THAN_OP950=(Token)match(input,GREATER_THAN_OP,FOLLOW_GREATER_THAN_OP_in_labeled_statement12865); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATER_THAN_OP.add(GREATER_THAN_OP950);

			pushFollow(FOLLOW_statement_in_labeled_statement12876);
			statement951=statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_statement.add(statement951.getTree());
			// AST REWRITE
			// elements: statement, label_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1288:10: -> ^( LABEL_DECLARE[$ltp1] label_name statement )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1288:13: ^( LABEL_DECLARE[$ltp1] label_name statement )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABEL_DECLARE, ltp1), root_1);
				adaptor.addChild(root_1, stream_label_name.nextTree());
				adaptor.addChild(root_1, stream_statement.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "labeled_statement"


	public static class statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1291:1: statement options {backtrack=true; } : ( create_key swallow_to_semi ( SEMICOLON | EOF ) | alter_key swallow_to_semi ( SEMICOLON | EOF ) | grant_key swallow_to_semi ( SEMICOLON | EOF ) | truncate_key swallow_to_semi ( SEMICOLON | EOF ) | ( begin_key )=> body | ( declare_key )=> block | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | pipe_row_statement | case_statement[true] | sql_statement | function_call );
	public final PLSQLParser.statement_return statement() throws RecognitionException {
		PLSQLParser.statement_return retval = new PLSQLParser.statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token set954=null;
		Token set957=null;
		Token set960=null;
		Token set963=null;
		ParserRuleReturnScope create_key952 =null;
		ParserRuleReturnScope swallow_to_semi953 =null;
		ParserRuleReturnScope alter_key955 =null;
		ParserRuleReturnScope swallow_to_semi956 =null;
		ParserRuleReturnScope grant_key958 =null;
		ParserRuleReturnScope swallow_to_semi959 =null;
		ParserRuleReturnScope truncate_key961 =null;
		ParserRuleReturnScope swallow_to_semi962 =null;
		ParserRuleReturnScope body964 =null;
		ParserRuleReturnScope block965 =null;
		ParserRuleReturnScope assignment_statement966 =null;
		ParserRuleReturnScope continue_statement967 =null;
		ParserRuleReturnScope exit_statement968 =null;
		ParserRuleReturnScope goto_statement969 =null;
		ParserRuleReturnScope if_statement970 =null;
		ParserRuleReturnScope loop_statement971 =null;
		ParserRuleReturnScope forall_statement972 =null;
		ParserRuleReturnScope null_statement973 =null;
		ParserRuleReturnScope raise_statement974 =null;
		ParserRuleReturnScope return_statement975 =null;
		ParserRuleReturnScope pipe_row_statement976 =null;
		ParserRuleReturnScope case_statement977 =null;
		ParserRuleReturnScope sql_statement978 =null;
		ParserRuleReturnScope function_call979 =null;

		Object set954_tree=null;
		Object set957_tree=null;
		Object set960_tree=null;
		Object set963_tree=null;

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1295:5: ( create_key swallow_to_semi ( SEMICOLON | EOF ) | alter_key swallow_to_semi ( SEMICOLON | EOF ) | grant_key swallow_to_semi ( SEMICOLON | EOF ) | truncate_key swallow_to_semi ( SEMICOLON | EOF ) | ( begin_key )=> body | ( declare_key )=> block | assignment_statement | continue_statement | exit_statement | goto_statement | if_statement | loop_statement | forall_statement | null_statement | raise_statement | return_statement | pipe_row_statement | case_statement[true] | sql_statement | function_call )
			int alt252=20;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==SQL92_RESERVED_CREATE) ) {
				int LA252_1 = input.LA(2);
				if ( (synpred49_PLSQLParser()) ) {
					alt252=1;
				}
				else if ( (synpred54_PLSQLParser()) ) {
					alt252=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA252_0==SQL92_RESERVED_ALTER) ) {
				alt252=2;
			}
			else if ( (LA252_0==SQL92_RESERVED_GRANT) ) {
				alt252=3;
			}
			else if ( (LA252_0==REGULAR_ID) ) {
				int LA252_4 = input.LA(2);
				if ( ((synpred52_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("truncate")))) ) {
					alt252=4;
				}
				else if ( (synpred54_PLSQLParser()) ) {
					alt252=6;
				}
				else if ( (synpred55_PLSQLParser()) ) {
					alt252=7;
				}
				else if ( ((synpred56_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("continue")))) ) {
					alt252=8;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("exit"))&&synpred57_PLSQLParser())) ) {
					alt252=9;
				}
				else if ( ((((input.LT(1).getText().equalsIgnoreCase("loop"))||(input.LT(1).getText().equalsIgnoreCase("while")))&&synpred60_PLSQLParser())) ) {
					alt252=12;
				}
				else if ( ((synpred61_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("forall")))) ) {
					alt252=13;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("raise"))&&synpred63_PLSQLParser())) ) {
					alt252=15;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("return"))&&synpred64_PLSQLParser())) ) {
					alt252=16;
				}
				else if ( ((synpred65_PLSQLParser()&&(input.LT(1).getText().equalsIgnoreCase("pipe")))) ) {
					alt252=17;
				}
				else if ( ((((input.LT(1).getText().equalsIgnoreCase("commit"))||(input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("execute"))||(input.LT(1).getText().equalsIgnoreCase("rollback"))||(input.LT(1).getText().equalsIgnoreCase("savepoint"))||(input.LT(1).getText().equalsIgnoreCase("set"))||(input.LT(1).getText().equalsIgnoreCase("close"))||(input.LT(1).getText().equalsIgnoreCase("merge")))&&synpred67_PLSQLParser())) ) {
					alt252=19;
				}
				else if ( (true) ) {
					alt252=20;
				}

			}
			else if ( (LA252_0==SQL92_RESERVED_BEGIN) ) {
				int LA252_5 = input.LA(2);
				if ( (synpred53_PLSQLParser()) ) {
					alt252=5;
				}
				else if ( (synpred54_PLSQLParser()) ) {
					alt252=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 252, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA252_0==SQL92_RESERVED_DECLARE) && (synpred54_PLSQLParser())) {
				alt252=6;
			}
			else if ( (LA252_0==INTRODUCER) ) {
				int LA252_7 = input.LA(2);
				if ( (synpred54_PLSQLParser()) ) {
					alt252=6;
				}
				else if ( (synpred55_PLSQLParser()) ) {
					alt252=7;
				}
				else if ( (true) ) {
					alt252=20;
				}

			}
			else if ( (LA252_0==DELIMITED_ID) ) {
				int LA252_8 = input.LA(2);
				if ( (synpred54_PLSQLParser()) ) {
					alt252=6;
				}
				else if ( (synpred55_PLSQLParser()) ) {
					alt252=7;
				}
				else if ( (true) ) {
					alt252=20;
				}

			}
			else if ( (LA252_0==BINDVAR) ) {
				int LA252_9 = input.LA(2);
				if ( (synpred54_PLSQLParser()) ) {
					alt252=6;
				}
				else if ( (synpred55_PLSQLParser()) ) {
					alt252=7;
				}
				else if ( (true) ) {
					alt252=20;
				}

			}
			else if ( (LA252_0==COLON) ) {
				int LA252_10 = input.LA(2);
				if ( (synpred54_PLSQLParser()) ) {
					alt252=6;
				}
				else if ( (synpred55_PLSQLParser()) ) {
					alt252=7;
				}
				else if ( (true) ) {
					alt252=20;
				}

			}
			else if ( (LA252_0==SQL92_RESERVED_CURSOR) && (synpred54_PLSQLParser())) {
				alt252=6;
			}
			else if ( (LA252_0==SQL92_RESERVED_PROCEDURE) && (synpred54_PLSQLParser())) {
				alt252=6;
			}
			else if ( (LA252_0==SQL92_RESERVED_DELETE) ) {
				int LA252_13 = input.LA(2);
				if ( (synpred55_PLSQLParser()) ) {
					alt252=7;
				}
				else if ( (synpred67_PLSQLParser()) ) {
					alt252=19;
				}
				else if ( (true) ) {
					alt252=20;
				}

			}
			else if ( (LA252_0==SQL92_RESERVED_EXISTS) ) {
				int LA252_14 = input.LA(2);
				if ( (synpred55_PLSQLParser()) ) {
					alt252=7;
				}
				else if ( (true) ) {
					alt252=20;
				}

			}
			else if ( (LA252_0==SQL92_RESERVED_PRIOR) ) {
				int LA252_15 = input.LA(2);
				if ( (synpred55_PLSQLParser()) ) {
					alt252=7;
				}
				else if ( (true) ) {
					alt252=20;
				}

			}
			else if ( (LA252_0==SQL92_RESERVED_GOTO) ) {
				alt252=10;
			}
			else if ( (LA252_0==PLSQL_RESERVED_IF) ) {
				alt252=11;
			}
			else if ( (LA252_0==SQL92_RESERVED_FOR) ) {
				alt252=12;
			}
			else if ( (LA252_0==SQL92_RESERVED_NULL) ) {
				alt252=14;
			}
			else if ( (LA252_0==SQL92_RESERVED_CASE) ) {
				alt252=18;
			}
			else if ( (LA252_0==LEFT_PAREN||LA252_0==PLSQL_RESERVED_LOCK||LA252_0==SQL92_RESERVED_FETCH||LA252_0==SQL92_RESERVED_INSERT||LA252_0==SQL92_RESERVED_SELECT||LA252_0==SQL92_RESERVED_UPDATE||LA252_0==SQL92_RESERVED_WITH) ) {
				alt252=19;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 252, 0, input);
				throw nvae;
			}

			switch (alt252) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1295:10: create_key swallow_to_semi ( SEMICOLON | EOF )
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_create_key_in_statement12925);
					create_key952=create_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, create_key952.getTree());

					pushFollow(FOLLOW_swallow_to_semi_in_statement12927);
					swallow_to_semi953=swallow_to_semi();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, swallow_to_semi953.getTree());

					set954=input.LT(1);
					if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set954));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1296:10: alter_key swallow_to_semi ( SEMICOLON | EOF )
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_alter_key_in_statement12944);
					alter_key955=alter_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alter_key955.getTree());

					pushFollow(FOLLOW_swallow_to_semi_in_statement12946);
					swallow_to_semi956=swallow_to_semi();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, swallow_to_semi956.getTree());

					set957=input.LT(1);
					if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set957));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1297:10: grant_key swallow_to_semi ( SEMICOLON | EOF )
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_grant_key_in_statement12964);
					grant_key958=grant_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grant_key958.getTree());

					pushFollow(FOLLOW_swallow_to_semi_in_statement12966);
					swallow_to_semi959=swallow_to_semi();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, swallow_to_semi959.getTree());

					set960=input.LT(1);
					if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set960));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1298:10: truncate_key swallow_to_semi ( SEMICOLON | EOF )
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_truncate_key_in_statement12984);
					truncate_key961=truncate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, truncate_key961.getTree());

					pushFollow(FOLLOW_swallow_to_semi_in_statement12986);
					swallow_to_semi962=swallow_to_semi();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, swallow_to_semi962.getTree());

					set963=input.LT(1);
					if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
						input.consume();
						if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set963));
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						throw mse;
					}
					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1299:10: ( begin_key )=> body
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_body_in_statement13010);
					body964=body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, body964.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1300:10: ( declare_key )=> block
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_block_in_statement13027);
					block965=block();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, block965.getTree());

					}
					break;
				case 7 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1301:10: assignment_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_assignment_statement_in_statement13038);
					assignment_statement966=assignment_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_statement966.getTree());

					}
					break;
				case 8 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1302:10: continue_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_continue_statement_in_statement13049);
					continue_statement967=continue_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_statement967.getTree());

					}
					break;
				case 9 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1303:10: exit_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_exit_statement_in_statement13060);
					exit_statement968=exit_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement968.getTree());

					}
					break;
				case 10 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1304:10: goto_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_goto_statement_in_statement13071);
					goto_statement969=goto_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement969.getTree());

					}
					break;
				case 11 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1305:10: if_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_if_statement_in_statement13082);
					if_statement970=if_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement970.getTree());

					}
					break;
				case 12 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1306:10: loop_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_loop_statement_in_statement13093);
					loop_statement971=loop_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement971.getTree());

					}
					break;
				case 13 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1307:10: forall_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_forall_statement_in_statement13104);
					forall_statement972=forall_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, forall_statement972.getTree());

					}
					break;
				case 14 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1308:10: null_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_null_statement_in_statement13115);
					null_statement973=null_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, null_statement973.getTree());

					}
					break;
				case 15 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1309:10: raise_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_raise_statement_in_statement13126);
					raise_statement974=raise_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement974.getTree());

					}
					break;
				case 16 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1310:10: return_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_return_statement_in_statement13137);
					return_statement975=return_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement975.getTree());

					}
					break;
				case 17 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1311:10: pipe_row_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_pipe_row_statement_in_statement13148);
					pipe_row_statement976=pipe_row_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, pipe_row_statement976.getTree());

					}
					break;
				case 18 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1312:10: case_statement[true]
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_case_statement_in_statement13159);
					case_statement977=case_statement(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement977.getTree());

					}
					break;
				case 19 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1313:10: sql_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_sql_statement_in_statement13171);
					sql_statement978=sql_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statement978.getTree());

					}
					break;
				case 20 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1314:10: function_call
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_function_call_in_statement13182);
					function_call979=function_call();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call979.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class assignment_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "assignment_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1317:1: assignment_statement : general_element ASSIGN_OP expression -> ^( ASSIGN[$ASSIGN_OP] general_element ^( EXPR expression ) ) ;
	public final PLSQLParser.assignment_statement_return assignment_statement() throws RecognitionException {
		PLSQLParser.assignment_statement_return retval = new PLSQLParser.assignment_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token ASSIGN_OP981=null;
		ParserRuleReturnScope general_element980 =null;
		ParserRuleReturnScope expression982 =null;

		Object ASSIGN_OP981_tree=null;
		RewriteRuleTokenStream stream_ASSIGN_OP=new RewriteRuleTokenStream(adaptor,"token ASSIGN_OP");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_general_element=new RewriteRuleSubtreeStream(adaptor,"rule general_element");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1318:5: ( general_element ASSIGN_OP expression -> ^( ASSIGN[$ASSIGN_OP] general_element ^( EXPR expression ) ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1318:11: general_element ASSIGN_OP expression
			{
			pushFollow(FOLLOW_general_element_in_assignment_statement13203);
			general_element980=general_element();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_general_element.add(general_element980.getTree());
			ASSIGN_OP981=(Token)match(input,ASSIGN_OP,FOLLOW_ASSIGN_OP_in_assignment_statement13205); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_ASSIGN_OP.add(ASSIGN_OP981);

			pushFollow(FOLLOW_expression_in_assignment_statement13207);
			expression982=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression982.getTree());
			// AST REWRITE
			// elements: expression, general_element
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1319:9: -> ^( ASSIGN[$ASSIGN_OP] general_element ^( EXPR expression ) )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1319:12: ^( ASSIGN[$ASSIGN_OP] general_element ^( EXPR expression ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, ASSIGN_OP981), root_1);
				adaptor.addChild(root_1, stream_general_element.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1319:49: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "assignment_statement"


	public static class continue_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "continue_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1322:1: continue_statement : continue_key ( label_name )? ( when_key condition )? -> {mode == 1}? ^( continue_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) ) -> ^( continue_key ( label_name )? ) ;
	public final PLSQLParser.continue_statement_return continue_statement() throws RecognitionException {
		PLSQLParser.continue_statement_return retval = new PLSQLParser.continue_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope continue_key983 =null;
		ParserRuleReturnScope label_name984 =null;
		ParserRuleReturnScope when_key985 =null;
		ParserRuleReturnScope condition986 =null;

		RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
		RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
		RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
		RewriteRuleSubtreeStream stream_continue_key=new RewriteRuleSubtreeStream(adaptor,"rule continue_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1324:5: ( continue_key ( label_name )? ( when_key condition )? -> {mode == 1}? ^( continue_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) ) -> ^( continue_key ( label_name )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1324:10: continue_key ( label_name )? ( when_key condition )?
			{
			pushFollow(FOLLOW_continue_key_in_continue_statement13258);
			continue_key983=continue_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_continue_key.add(continue_key983.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1324:23: ( label_name )?
			int alt253=2;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==DELIMITED_ID||LA253_0==REGULAR_ID) ) {
				alt253=1;
			}
			switch (alt253) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1324:23: label_name
					{
					pushFollow(FOLLOW_label_name_in_continue_statement13260);
					label_name984=label_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_label_name.add(label_name984.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1324:35: ( when_key condition )?
			int alt254=2;
			int LA254_0 = input.LA(1);
			if ( (LA254_0==SQL92_RESERVED_WHEN) ) {
				alt254=1;
			}
			switch (alt254) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1324:36: when_key condition
					{
					pushFollow(FOLLOW_when_key_in_continue_statement13264);
					when_key985=when_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_when_key.add(when_key985.getTree());
					pushFollow(FOLLOW_condition_in_continue_statement13266);
					condition986=condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_condition.add(condition986.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			// AST REWRITE
			// elements: continue_key, label_name, label_name, when_key, condition, continue_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1325:9: -> {mode == 1}? ^( continue_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1325:24: ^( continue_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_continue_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1325:39: ( label_name )?
				if ( stream_label_name.hasNext() ) {
					adaptor.addChild(root_1, stream_label_name.nextTree());
				}
				stream_label_name.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1325:51: ^( when_key ^( LOGIC_EXPR condition ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1325:62: ^( LOGIC_EXPR condition )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
				adaptor.addChild(root_3, stream_condition.nextTree());
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1326:9: -> ^( continue_key ( label_name )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1326:12: ^( continue_key ( label_name )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_continue_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1326:27: ( label_name )?
				if ( stream_label_name.hasNext() ) {
					adaptor.addChild(root_1, stream_label_name.nextTree());
				}
				stream_label_name.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "continue_statement"


	public static class exit_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exit_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1329:1: exit_statement : exit_key ( label_name )? ( when_key condition )? -> {mode == 1}? ^( exit_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) ) -> ^( exit_key ( label_name )? ) ;
	public final PLSQLParser.exit_statement_return exit_statement() throws RecognitionException {
		PLSQLParser.exit_statement_return retval = new PLSQLParser.exit_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope exit_key987 =null;
		ParserRuleReturnScope label_name988 =null;
		ParserRuleReturnScope when_key989 =null;
		ParserRuleReturnScope condition990 =null;

		RewriteRuleSubtreeStream stream_exit_key=new RewriteRuleSubtreeStream(adaptor,"rule exit_key");
		RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
		RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
		RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1331:5: ( exit_key ( label_name )? ( when_key condition )? -> {mode == 1}? ^( exit_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) ) -> ^( exit_key ( label_name )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1331:10: exit_key ( label_name )? ( when_key condition )?
			{
			pushFollow(FOLLOW_exit_key_in_exit_statement13343);
			exit_key987=exit_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_exit_key.add(exit_key987.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1331:19: ( label_name )?
			int alt255=2;
			int LA255_0 = input.LA(1);
			if ( (LA255_0==DELIMITED_ID||LA255_0==REGULAR_ID) ) {
				alt255=1;
			}
			switch (alt255) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1331:19: label_name
					{
					pushFollow(FOLLOW_label_name_in_exit_statement13345);
					label_name988=label_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_label_name.add(label_name988.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1331:31: ( when_key condition )?
			int alt256=2;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==SQL92_RESERVED_WHEN) ) {
				alt256=1;
			}
			switch (alt256) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1331:32: when_key condition
					{
					pushFollow(FOLLOW_when_key_in_exit_statement13349);
					when_key989=when_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_when_key.add(when_key989.getTree());
					pushFollow(FOLLOW_condition_in_exit_statement13351);
					condition990=condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_condition.add(condition990.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;

			}

			// AST REWRITE
			// elements: when_key, condition, label_name, label_name, exit_key, exit_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1332:9: -> {mode == 1}? ^( exit_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1332:24: ^( exit_key ( label_name )? ^( when_key ^( LOGIC_EXPR condition ) ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_exit_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1332:35: ( label_name )?
				if ( stream_label_name.hasNext() ) {
					adaptor.addChild(root_1, stream_label_name.nextTree());
				}
				stream_label_name.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1332:47: ^( when_key ^( LOGIC_EXPR condition ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1332:58: ^( LOGIC_EXPR condition )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_3);
				adaptor.addChild(root_3, stream_condition.nextTree());
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1333:9: -> ^( exit_key ( label_name )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1333:12: ^( exit_key ( label_name )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_exit_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1333:23: ( label_name )?
				if ( stream_label_name.hasNext() ) {
					adaptor.addChild(root_1, stream_label_name.nextTree());
				}
				stream_label_name.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exit_statement"


	public static class goto_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "goto_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1336:1: goto_statement : goto_key ^ label_name ;
	public final PLSQLParser.goto_statement_return goto_statement() throws RecognitionException {
		PLSQLParser.goto_statement_return retval = new PLSQLParser.goto_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope goto_key991 =null;
		ParserRuleReturnScope label_name992 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1337:5: ( goto_key ^ label_name )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1337:10: goto_key ^ label_name
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_goto_key_in_goto_statement13420);
			goto_key991=goto_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(goto_key991.getTree(), root_0);
			pushFollow(FOLLOW_label_name_in_goto_statement13423);
			label_name992=label_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name992.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "goto_statement"


	public static class if_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "if_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1340:1: if_statement : if_key condition then_key seq_of_statements ( elsif_part )* ( else_part )? end_key if_key -> ^( if_key ^( LOGIC_EXPR condition ) seq_of_statements ( elsif_part )* ( else_part )? ) ;
	public final PLSQLParser.if_statement_return if_statement() throws RecognitionException {
		PLSQLParser.if_statement_return retval = new PLSQLParser.if_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope if_key993 =null;
		ParserRuleReturnScope condition994 =null;
		ParserRuleReturnScope then_key995 =null;
		ParserRuleReturnScope seq_of_statements996 =null;
		ParserRuleReturnScope elsif_part997 =null;
		ParserRuleReturnScope else_part998 =null;
		ParserRuleReturnScope end_key999 =null;
		ParserRuleReturnScope if_key1000 =null;

		RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
		RewriteRuleSubtreeStream stream_elsif_part=new RewriteRuleSubtreeStream(adaptor,"rule elsif_part");
		RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
		RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
		RewriteRuleSubtreeStream stream_if_key=new RewriteRuleSubtreeStream(adaptor,"rule if_key");
		RewriteRuleSubtreeStream stream_else_part=new RewriteRuleSubtreeStream(adaptor,"rule else_part");
		RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1341:5: ( if_key condition then_key seq_of_statements ( elsif_part )* ( else_part )? end_key if_key -> ^( if_key ^( LOGIC_EXPR condition ) seq_of_statements ( elsif_part )* ( else_part )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1341:10: if_key condition then_key seq_of_statements ( elsif_part )* ( else_part )? end_key if_key
			{
			pushFollow(FOLLOW_if_key_in_if_statement13443);
			if_key993=if_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_if_key.add(if_key993.getTree());
			pushFollow(FOLLOW_condition_in_if_statement13445);
			condition994=condition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_condition.add(condition994.getTree());
			pushFollow(FOLLOW_then_key_in_if_statement13447);
			then_key995=then_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_then_key.add(then_key995.getTree());
			pushFollow(FOLLOW_seq_of_statements_in_if_statement13449);
			seq_of_statements996=seq_of_statements();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements996.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1342:9: ( elsif_part )*
			loop257:
			while (true) {
				int alt257=2;
				int LA257_0 = input.LA(1);
				if ( (LA257_0==PLSQL_NON_RESERVED_ELSIF) ) {
					alt257=1;
				}

				switch (alt257) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1342:9: elsif_part
					{
					pushFollow(FOLLOW_elsif_part_in_if_statement13459);
					elsif_part997=elsif_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_elsif_part.add(elsif_part997.getTree());
					}
					break;

				default :
					break loop257;
				}
			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1342:21: ( else_part )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==SQL92_RESERVED_ELSE) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1342:21: else_part
					{
					pushFollow(FOLLOW_else_part_in_if_statement13462);
					else_part998=else_part();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_else_part.add(else_part998.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_end_key_in_if_statement13473);
			end_key999=end_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_end_key.add(end_key999.getTree());
			pushFollow(FOLLOW_if_key_in_if_statement13475);
			if_key1000=if_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_if_key.add(if_key1000.getTree());
			// AST REWRITE
			// elements: else_part, if_key, elsif_part, condition, seq_of_statements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1344:9: -> ^( if_key ^( LOGIC_EXPR condition ) seq_of_statements ( elsif_part )* ( else_part )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1344:12: ^( if_key ^( LOGIC_EXPR condition ) seq_of_statements ( elsif_part )* ( else_part )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_if_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1344:21: ^( LOGIC_EXPR condition )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
				adaptor.addChild(root_2, stream_condition.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_seq_of_statements.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1344:63: ( elsif_part )*
				while ( stream_elsif_part.hasNext() ) {
					adaptor.addChild(root_1, stream_elsif_part.nextTree());
				}
				stream_elsif_part.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1344:75: ( else_part )?
				if ( stream_else_part.hasNext() ) {
					adaptor.addChild(root_1, stream_else_part.nextTree());
				}
				stream_else_part.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "if_statement"


	public static class elsif_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "elsif_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1347:1: elsif_part : elsif_key condition then_key seq_of_statements -> ^( elsif_key ^( LOGIC_EXPR condition ) seq_of_statements ) ;
	public final PLSQLParser.elsif_part_return elsif_part() throws RecognitionException {
		PLSQLParser.elsif_part_return retval = new PLSQLParser.elsif_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope elsif_key1001 =null;
		ParserRuleReturnScope condition1002 =null;
		ParserRuleReturnScope then_key1003 =null;
		ParserRuleReturnScope seq_of_statements1004 =null;

		RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
		RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
		RewriteRuleSubtreeStream stream_elsif_key=new RewriteRuleSubtreeStream(adaptor,"rule elsif_key");
		RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1348:5: ( elsif_key condition then_key seq_of_statements -> ^( elsif_key ^( LOGIC_EXPR condition ) seq_of_statements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1348:10: elsif_key condition then_key seq_of_statements
			{
			pushFollow(FOLLOW_elsif_key_in_elsif_part13523);
			elsif_key1001=elsif_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_elsif_key.add(elsif_key1001.getTree());
			pushFollow(FOLLOW_condition_in_elsif_part13525);
			condition1002=condition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_condition.add(condition1002.getTree());
			pushFollow(FOLLOW_then_key_in_elsif_part13527);
			then_key1003=then_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_then_key.add(then_key1003.getTree());
			pushFollow(FOLLOW_seq_of_statements_in_elsif_part13529);
			seq_of_statements1004=seq_of_statements();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements1004.getTree());
			// AST REWRITE
			// elements: elsif_key, condition, seq_of_statements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1349:9: -> ^( elsif_key ^( LOGIC_EXPR condition ) seq_of_statements )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1349:12: ^( elsif_key ^( LOGIC_EXPR condition ) seq_of_statements )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_elsif_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1349:24: ^( LOGIC_EXPR condition )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
				adaptor.addChild(root_2, stream_condition.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_seq_of_statements.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "elsif_part"


	public static class else_part_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "else_part"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1352:1: else_part : else_key ^ seq_of_statements ;
	public final PLSQLParser.else_part_return else_part() throws RecognitionException {
		PLSQLParser.else_part_return retval = new PLSQLParser.else_part_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope else_key1005 =null;
		ParserRuleReturnScope seq_of_statements1006 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1353:5: ( else_key ^ seq_of_statements )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1353:10: else_key ^ seq_of_statements
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_else_key_in_else_part13571);
			else_key1005=else_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(else_key1005.getTree(), root_0);
			pushFollow(FOLLOW_seq_of_statements_in_else_part13574);
			seq_of_statements1006=seq_of_statements();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements1006.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "else_part"


	public static class loop_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "loop_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1356:1: loop_statement : ( while_key condition | for_key cursor_loop_param )? loop_key seq_of_statements end_key loop_key ( label_name )? -> {mode == 1}? ^( WHILE_LOOP[$while_key.start] ^( LOGIC_EXPR condition ) seq_of_statements ) -> {mode == 2}? ^( FOR_LOOP[$for_key.start] cursor_loop_param seq_of_statements ) -> ^( loop_key seq_of_statements ) ;
	public final PLSQLParser.loop_statement_return loop_statement() throws RecognitionException {
		PLSQLParser.loop_statement_return retval = new PLSQLParser.loop_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope while_key1007 =null;
		ParserRuleReturnScope condition1008 =null;
		ParserRuleReturnScope for_key1009 =null;
		ParserRuleReturnScope cursor_loop_param1010 =null;
		ParserRuleReturnScope loop_key1011 =null;
		ParserRuleReturnScope seq_of_statements1012 =null;
		ParserRuleReturnScope end_key1013 =null;
		ParserRuleReturnScope loop_key1014 =null;
		ParserRuleReturnScope label_name1015 =null;

		RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
		RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
		RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
		RewriteRuleSubtreeStream stream_loop_key=new RewriteRuleSubtreeStream(adaptor,"rule loop_key");
		RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
		RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");
		RewriteRuleSubtreeStream stream_while_key=new RewriteRuleSubtreeStream(adaptor,"rule while_key");
		RewriteRuleSubtreeStream stream_cursor_loop_param=new RewriteRuleSubtreeStream(adaptor,"rule cursor_loop_param");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1358:5: ( ( while_key condition | for_key cursor_loop_param )? loop_key seq_of_statements end_key loop_key ( label_name )? -> {mode == 1}? ^( WHILE_LOOP[$while_key.start] ^( LOGIC_EXPR condition ) seq_of_statements ) -> {mode == 2}? ^( FOR_LOOP[$for_key.start] cursor_loop_param seq_of_statements ) -> ^( loop_key seq_of_statements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1359:9: ( while_key condition | for_key cursor_loop_param )? loop_key seq_of_statements end_key loop_key ( label_name )?
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1359:9: ( while_key condition | for_key cursor_loop_param )?
			int alt259=3;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==REGULAR_ID) ) {
				int LA259_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("while"))) ) {
					alt259=1;
				}
			}
			else if ( (LA259_0==SQL92_RESERVED_FOR) ) {
				alt259=2;
			}
			switch (alt259) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1359:10: while_key condition
					{
					pushFollow(FOLLOW_while_key_in_loop_statement13613);
					while_key1007=while_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_while_key.add(while_key1007.getTree());
					pushFollow(FOLLOW_condition_in_loop_statement13615);
					condition1008=condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_condition.add(condition1008.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1359:44: for_key cursor_loop_param
					{
					pushFollow(FOLLOW_for_key_in_loop_statement13621);
					for_key1009=for_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_for_key.add(for_key1009.getTree());
					pushFollow(FOLLOW_cursor_loop_param_in_loop_statement13623);
					cursor_loop_param1010=cursor_loop_param();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_cursor_loop_param.add(cursor_loop_param1010.getTree());
					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;

			}

			pushFollow(FOLLOW_loop_key_in_loop_statement13637);
			loop_key1011=loop_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_loop_key.add(loop_key1011.getTree());
			pushFollow(FOLLOW_seq_of_statements_in_loop_statement13647);
			seq_of_statements1012=seq_of_statements();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements1012.getTree());
			pushFollow(FOLLOW_end_key_in_loop_statement13657);
			end_key1013=end_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_end_key.add(end_key1013.getTree());
			pushFollow(FOLLOW_loop_key_in_loop_statement13659);
			loop_key1014=loop_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_loop_key.add(loop_key1014.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1362:26: ( label_name )?
			int alt260=2;
			int LA260_0 = input.LA(1);
			if ( (LA260_0==DELIMITED_ID||LA260_0==REGULAR_ID) ) {
				alt260=1;
			}
			switch (alt260) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1362:26: label_name
					{
					pushFollow(FOLLOW_label_name_in_loop_statement13661);
					label_name1015=label_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_label_name.add(label_name1015.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: seq_of_statements, cursor_loop_param, loop_key, condition, seq_of_statements, seq_of_statements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1363:9: -> {mode == 1}? ^( WHILE_LOOP[$while_key.start] ^( LOGIC_EXPR condition ) seq_of_statements )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1363:25: ^( WHILE_LOOP[$while_key.start] ^( LOGIC_EXPR condition ) seq_of_statements )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WHILE_LOOP, (while_key1007!=null?(while_key1007.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1363:71: ^( LOGIC_EXPR condition )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
				adaptor.addChild(root_2, stream_condition.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_seq_of_statements.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1364:9: -> {mode == 2}? ^( FOR_LOOP[$for_key.start] cursor_loop_param seq_of_statements )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1364:25: ^( FOR_LOOP[$for_key.start] cursor_loop_param seq_of_statements )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR_LOOP, (for_key1009!=null?(for_key1009.start):null)), root_1);
				adaptor.addChild(root_1, stream_cursor_loop_param.nextTree());
				adaptor.addChild(root_1, stream_seq_of_statements.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1365:9: -> ^( loop_key seq_of_statements )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1365:12: ^( loop_key seq_of_statements )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_loop_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_seq_of_statements.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loop_statement"


	public static class cursor_loop_param_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "cursor_loop_param"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1370:1: cursor_loop_param : ( ( index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD )=> index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD upper_bound -> ^( INDEXED_FOR index_name ( reverse_key )? ^( SIMPLE_BOUND lower_bound upper_bound ) ) | record_name in_key ( general_element | LEFT_PAREN select_statement RIGHT_PAREN ) -> {mode == 1}? ^( CURSOR_BASED_FOR record_name general_element ) -> ^( SELECT_BASED_FOR record_name select_statement ) );
	public final PLSQLParser.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
		PLSQLParser.cursor_loop_param_return retval = new PLSQLParser.cursor_loop_param_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOUBLE_PERIOD1020=null;
		Token LEFT_PAREN1025=null;
		Token RIGHT_PAREN1027=null;
		ParserRuleReturnScope index_name1016 =null;
		ParserRuleReturnScope in_key1017 =null;
		ParserRuleReturnScope reverse_key1018 =null;
		ParserRuleReturnScope lower_bound1019 =null;
		ParserRuleReturnScope upper_bound1021 =null;
		ParserRuleReturnScope record_name1022 =null;
		ParserRuleReturnScope in_key1023 =null;
		ParserRuleReturnScope general_element1024 =null;
		ParserRuleReturnScope select_statement1026 =null;

		Object DOUBLE_PERIOD1020_tree=null;
		Object LEFT_PAREN1025_tree=null;
		Object RIGHT_PAREN1027_tree=null;
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_reverse_key=new RewriteRuleSubtreeStream(adaptor,"rule reverse_key");
		RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
		RewriteRuleSubtreeStream stream_lower_bound=new RewriteRuleSubtreeStream(adaptor,"rule lower_bound");
		RewriteRuleSubtreeStream stream_record_name=new RewriteRuleSubtreeStream(adaptor,"rule record_name");
		RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
		RewriteRuleSubtreeStream stream_upper_bound=new RewriteRuleSubtreeStream(adaptor,"rule upper_bound");
		RewriteRuleSubtreeStream stream_index_name=new RewriteRuleSubtreeStream(adaptor,"rule index_name");
		RewriteRuleSubtreeStream stream_general_element=new RewriteRuleSubtreeStream(adaptor,"rule general_element");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1372:5: ( ( index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD )=> index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD upper_bound -> ^( INDEXED_FOR index_name ( reverse_key )? ^( SIMPLE_BOUND lower_bound upper_bound ) ) | record_name in_key ( general_element | LEFT_PAREN select_statement RIGHT_PAREN ) -> {mode == 1}? ^( CURSOR_BASED_FOR record_name general_element ) -> ^( SELECT_BASED_FOR record_name select_statement ) )
			int alt263=2;
			switch ( input.LA(1) ) {
			case INTRODUCER:
				{
				int LA263_1 = input.LA(2);
				if ( (synpred68_PLSQLParser()) ) {
					alt263=1;
				}
				else if ( (true) ) {
					alt263=2;
				}

				}
				break;
			case REGULAR_ID:
				{
				int LA263_2 = input.LA(2);
				if ( (synpred68_PLSQLParser()) ) {
					alt263=1;
				}
				else if ( (true) ) {
					alt263=2;
				}

				}
				break;
			case DELIMITED_ID:
				{
				int LA263_3 = input.LA(2);
				if ( (synpred68_PLSQLParser()) ) {
					alt263=1;
				}
				else if ( (true) ) {
					alt263=2;
				}

				}
				break;
			case BINDVAR:
			case COLON:
				{
				alt263=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 263, 0, input);
				throw nvae;
			}
			switch (alt263) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1372:10: ( index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD )=> index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD upper_bound
					{
					pushFollow(FOLLOW_index_name_in_cursor_loop_param13787);
					index_name1016=index_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_index_name.add(index_name1016.getTree());
					pushFollow(FOLLOW_in_key_in_cursor_loop_param13789);
					in_key1017=in_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_in_key.add(in_key1017.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1373:31: ( reverse_key )?
					int alt261=2;
					int LA261_0 = input.LA(1);
					if ( (LA261_0==REGULAR_ID) ) {
						int LA261_1 = input.LA(2);
						if ( ((input.LT(1).getText().equalsIgnoreCase("reverse"))) ) {
							alt261=1;
						}
					}
					switch (alt261) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1373:31: reverse_key
							{
							pushFollow(FOLLOW_reverse_key_in_cursor_loop_param13791);
							reverse_key1018=reverse_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_reverse_key.add(reverse_key1018.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_lower_bound_in_cursor_loop_param13794);
					lower_bound1019=lower_bound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_lower_bound.add(lower_bound1019.getTree());
					DOUBLE_PERIOD1020=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_cursor_loop_param13796); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD1020);

					pushFollow(FOLLOW_upper_bound_in_cursor_loop_param13798);
					upper_bound1021=upper_bound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_upper_bound.add(upper_bound1021.getTree());
					// AST REWRITE
					// elements: index_name, upper_bound, reverse_key, lower_bound
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1374:9: -> ^( INDEXED_FOR index_name ( reverse_key )? ^( SIMPLE_BOUND lower_bound upper_bound ) )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1374:12: ^( INDEXED_FOR index_name ( reverse_key )? ^( SIMPLE_BOUND lower_bound upper_bound ) )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INDEXED_FOR, "INDEXED_FOR"), root_1);
						adaptor.addChild(root_1, stream_index_name.nextTree());
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1374:37: ( reverse_key )?
						if ( stream_reverse_key.hasNext() ) {
							adaptor.addChild(root_1, stream_reverse_key.nextTree());
						}
						stream_reverse_key.reset();

						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1374:50: ^( SIMPLE_BOUND lower_bound upper_bound )
						{
						Object root_2 = (Object)adaptor.nil();
						root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SIMPLE_BOUND, "SIMPLE_BOUND"), root_2);
						adaptor.addChild(root_2, stream_lower_bound.nextTree());
						adaptor.addChild(root_2, stream_upper_bound.nextTree());
						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1375:11: record_name in_key ( general_element | LEFT_PAREN select_statement RIGHT_PAREN )
					{
					pushFollow(FOLLOW_record_name_in_cursor_loop_param13837);
					record_name1022=record_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_record_name.add(record_name1022.getTree());
					pushFollow(FOLLOW_in_key_in_cursor_loop_param13839);
					in_key1023=in_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_in_key.add(in_key1023.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1375:30: ( general_element | LEFT_PAREN select_statement RIGHT_PAREN )
					int alt262=2;
					int LA262_0 = input.LA(1);
					if ( (LA262_0==BINDVAR||LA262_0==COLON||LA262_0==DELIMITED_ID||LA262_0==INTRODUCER||LA262_0==REGULAR_ID||LA262_0==SQL92_RESERVED_DELETE||LA262_0==SQL92_RESERVED_EXISTS||LA262_0==SQL92_RESERVED_PRIOR) ) {
						alt262=1;
					}
					else if ( (LA262_0==LEFT_PAREN) ) {
						alt262=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 262, 0, input);
						throw nvae;
					}

					switch (alt262) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1375:32: general_element
							{
							pushFollow(FOLLOW_general_element_in_cursor_loop_param13843);
							general_element1024=general_element();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_general_element.add(general_element1024.getTree());
							if ( state.backtracking==0 ) {mode = 1;}
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1375:62: LEFT_PAREN select_statement RIGHT_PAREN
							{
							LEFT_PAREN1025=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_cursor_loop_param13849); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN1025);

							pushFollow(FOLLOW_select_statement_in_cursor_loop_param13851);
							select_statement1026=select_statement();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_select_statement.add(select_statement1026.getTree());
							RIGHT_PAREN1027=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_cursor_loop_param13853); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN1027);

							}
							break;

					}

					// AST REWRITE
					// elements: record_name, select_statement, general_element, record_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1376:9: -> {mode == 1}? ^( CURSOR_BASED_FOR record_name general_element )
					if (mode == 1) {
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1376:24: ^( CURSOR_BASED_FOR record_name general_element )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CURSOR_BASED_FOR, "CURSOR_BASED_FOR"), root_1);
						adaptor.addChild(root_1, stream_record_name.nextTree());
						adaptor.addChild(root_1, stream_general_element.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 1377:9: -> ^( SELECT_BASED_FOR record_name select_statement )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1377:12: ^( SELECT_BASED_FOR record_name select_statement )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECT_BASED_FOR, "SELECT_BASED_FOR"), root_1);
						adaptor.addChild(root_1, stream_record_name.nextTree());
						adaptor.addChild(root_1, stream_select_statement.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_loop_param"


	public static class forall_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "forall_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1381:1: forall_statement : forall_key index_name in_key bounds_clause sql_statement ( save_key exceptions_key )? -> ^( forall_key index_name bounds_clause sql_statement ( exceptions_key )? ) ;
	public final PLSQLParser.forall_statement_return forall_statement() throws RecognitionException {
		PLSQLParser.forall_statement_return retval = new PLSQLParser.forall_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope forall_key1028 =null;
		ParserRuleReturnScope index_name1029 =null;
		ParserRuleReturnScope in_key1030 =null;
		ParserRuleReturnScope bounds_clause1031 =null;
		ParserRuleReturnScope sql_statement1032 =null;
		ParserRuleReturnScope save_key1033 =null;
		ParserRuleReturnScope exceptions_key1034 =null;

		RewriteRuleSubtreeStream stream_in_key=new RewriteRuleSubtreeStream(adaptor,"rule in_key");
		RewriteRuleSubtreeStream stream_forall_key=new RewriteRuleSubtreeStream(adaptor,"rule forall_key");
		RewriteRuleSubtreeStream stream_save_key=new RewriteRuleSubtreeStream(adaptor,"rule save_key");
		RewriteRuleSubtreeStream stream_exceptions_key=new RewriteRuleSubtreeStream(adaptor,"rule exceptions_key");
		RewriteRuleSubtreeStream stream_sql_statement=new RewriteRuleSubtreeStream(adaptor,"rule sql_statement");
		RewriteRuleSubtreeStream stream_bounds_clause=new RewriteRuleSubtreeStream(adaptor,"rule bounds_clause");
		RewriteRuleSubtreeStream stream_index_name=new RewriteRuleSubtreeStream(adaptor,"rule index_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1382:5: ( forall_key index_name in_key bounds_clause sql_statement ( save_key exceptions_key )? -> ^( forall_key index_name bounds_clause sql_statement ( exceptions_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1382:10: forall_key index_name in_key bounds_clause sql_statement ( save_key exceptions_key )?
			{
			pushFollow(FOLLOW_forall_key_in_forall_statement13912);
			forall_key1028=forall_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_forall_key.add(forall_key1028.getTree());
			pushFollow(FOLLOW_index_name_in_forall_statement13914);
			index_name1029=index_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_index_name.add(index_name1029.getTree());
			pushFollow(FOLLOW_in_key_in_forall_statement13916);
			in_key1030=in_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_in_key.add(in_key1030.getTree());
			pushFollow(FOLLOW_bounds_clause_in_forall_statement13918);
			bounds_clause1031=bounds_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_bounds_clause.add(bounds_clause1031.getTree());
			pushFollow(FOLLOW_sql_statement_in_forall_statement13920);
			sql_statement1032=sql_statement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_sql_statement.add(sql_statement1032.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1382:67: ( save_key exceptions_key )?
			int alt264=2;
			int LA264_0 = input.LA(1);
			if ( (LA264_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("save")))) {
				alt264=1;
			}
			switch (alt264) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1382:68: save_key exceptions_key
					{
					pushFollow(FOLLOW_save_key_in_forall_statement13923);
					save_key1033=save_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_save_key.add(save_key1033.getTree());
					pushFollow(FOLLOW_exceptions_key_in_forall_statement13925);
					exceptions_key1034=exceptions_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_exceptions_key.add(exceptions_key1034.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: sql_statement, index_name, bounds_clause, exceptions_key, forall_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1383:9: -> ^( forall_key index_name bounds_clause sql_statement ( exceptions_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1383:12: ^( forall_key index_name bounds_clause sql_statement ( exceptions_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_forall_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_index_name.nextTree());
				adaptor.addChild(root_1, stream_bounds_clause.nextTree());
				adaptor.addChild(root_1, stream_sql_statement.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1383:64: ( exceptions_key )?
				if ( stream_exceptions_key.hasNext() ) {
					adaptor.addChild(root_1, stream_exceptions_key.nextTree());
				}
				stream_exceptions_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "forall_statement"


	public static class bounds_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "bounds_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1386:1: bounds_clause : ( lower_bound DOUBLE_PERIOD upper_bound -> ^( SIMPLE_BOUND lower_bound upper_bound ) | indices_key of_key collection_name ( between_bound )? -> ^( INDICES_BOUND[$indices_key.start] collection_name ( between_bound )? ) | values_key of_key index_name -> ^( VALUES_BOUND[$values_key.start] index_name ) );
	public final PLSQLParser.bounds_clause_return bounds_clause() throws RecognitionException {
		PLSQLParser.bounds_clause_return retval = new PLSQLParser.bounds_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token DOUBLE_PERIOD1036=null;
		ParserRuleReturnScope lower_bound1035 =null;
		ParserRuleReturnScope upper_bound1037 =null;
		ParserRuleReturnScope indices_key1038 =null;
		ParserRuleReturnScope of_key1039 =null;
		ParserRuleReturnScope collection_name1040 =null;
		ParserRuleReturnScope between_bound1041 =null;
		ParserRuleReturnScope values_key1042 =null;
		ParserRuleReturnScope of_key1043 =null;
		ParserRuleReturnScope index_name1044 =null;

		Object DOUBLE_PERIOD1036_tree=null;
		RewriteRuleTokenStream stream_DOUBLE_PERIOD=new RewriteRuleTokenStream(adaptor,"token DOUBLE_PERIOD");
		RewriteRuleSubtreeStream stream_indices_key=new RewriteRuleSubtreeStream(adaptor,"rule indices_key");
		RewriteRuleSubtreeStream stream_of_key=new RewriteRuleSubtreeStream(adaptor,"rule of_key");
		RewriteRuleSubtreeStream stream_lower_bound=new RewriteRuleSubtreeStream(adaptor,"rule lower_bound");
		RewriteRuleSubtreeStream stream_values_key=new RewriteRuleSubtreeStream(adaptor,"rule values_key");
		RewriteRuleSubtreeStream stream_upper_bound=new RewriteRuleSubtreeStream(adaptor,"rule upper_bound");
		RewriteRuleSubtreeStream stream_between_bound=new RewriteRuleSubtreeStream(adaptor,"rule between_bound");
		RewriteRuleSubtreeStream stream_index_name=new RewriteRuleSubtreeStream(adaptor,"rule index_name");
		RewriteRuleSubtreeStream stream_collection_name=new RewriteRuleSubtreeStream(adaptor,"rule collection_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1387:5: ( lower_bound DOUBLE_PERIOD upper_bound -> ^( SIMPLE_BOUND lower_bound upper_bound ) | indices_key of_key collection_name ( between_bound )? -> ^( INDICES_BOUND[$indices_key.start] collection_name ( between_bound )? ) | values_key of_key index_name -> ^( VALUES_BOUND[$values_key.start] index_name ) )
			int alt266=3;
			switch ( input.LA(1) ) {
			case APPROXIMATE_NUM_LIT:
			case BINDVAR:
			case CHAR_STRING:
			case CHAR_STRING_PERL:
			case COLON:
			case DELIMITED_ID:
			case EXACT_NUM_LIT:
			case INTRODUCER:
			case LEFT_PAREN:
			case MINUS_SIGN:
			case NATIONAL_CHAR_STRING_LIT:
			case PLSQL_NON_RESERVED_CONNECT_BY_ROOT:
			case PLUS_SIGN:
			case SQL92_RESERVED_ALL:
			case SQL92_RESERVED_ANY:
			case SQL92_RESERVED_CASE:
			case SQL92_RESERVED_DATE:
			case SQL92_RESERVED_DEFAULT:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_DISTINCT:
			case SQL92_RESERVED_EXISTS:
			case SQL92_RESERVED_FALSE:
			case SQL92_RESERVED_NULL:
			case SQL92_RESERVED_PRIOR:
			case SQL92_RESERVED_TRUE:
			case UNSIGNED_INTEGER:
				{
				alt266=1;
				}
				break;
			case REGULAR_ID:
				{
				int LA266_2 = input.LA(2);
				if ( (LA266_2==MINUS_SIGN||LA266_2==PLUS_SIGN) ) {
					alt266=1;
				}
				else if ( (LA266_2==SQL92_RESERVED_PRIOR) && (((input.LT(1).getText().equalsIgnoreCase("interval"))||((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))))) {
					alt266=1;
				}
				else if ( (LA266_2==PLSQL_NON_RESERVED_CONNECT_BY_ROOT) && (((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))))) {
					alt266=1;
				}
				else if ( (LA266_2==REGULAR_ID) ) {
					alt266=1;
				}
				else if ( (LA266_2==SQL92_RESERVED_ALL||LA266_2==SQL92_RESERVED_CASE||LA266_2==SQL92_RESERVED_DISTINCT) && (((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))))) {
					alt266=1;
				}
				else if ( (LA266_2==SQL92_RESERVED_EXISTS) && (((input.LT(1).getText().equalsIgnoreCase("interval"))||((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))))) {
					alt266=1;
				}
				else if ( (LA266_2==SQL92_RESERVED_ANY) && (((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))))) {
					alt266=1;
				}
				else if ( (LA266_2==DELIMITED_ID||LA266_2==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("interval"))||((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))))) {
					alt266=1;
				}
				else if ( (LA266_2==BINDVAR||LA266_2==COLON) ) {
					alt266=1;
				}
				else if ( (LA266_2==SQL92_RESERVED_DELETE) && (((input.LT(1).getText().equalsIgnoreCase("interval"))||((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals(".")))))) {
					alt266=1;
				}
				else if ( (LA266_2==APPROXIMATE_NUM_LIT||LA266_2==EXACT_NUM_LIT||LA266_2==SQL92_RESERVED_DATE||LA266_2==UNSIGNED_INTEGER) && (((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))))) {
					alt266=1;
				}
				else if ( ((LA266_2 >= CHAR_STRING && LA266_2 <= CHAR_STRING_PERL)||LA266_2==NATIONAL_CHAR_STRING_LIT) ) {
					alt266=1;
				}
				else if ( (LA266_2==SQL92_RESERVED_DEFAULT||LA266_2==SQL92_RESERVED_FALSE||LA266_2==SQL92_RESERVED_NULL||LA266_2==SQL92_RESERVED_TRUE) && (((input.LT(1).getText().equalsIgnoreCase("new"))&&(input.LT(1).getText().equalsIgnoreCase("new") && !input.LT(2).getText().equals("."))))) {
					alt266=1;
				}
				else if ( (LA266_2==ASTERISK||LA266_2==CONCATENATION_OP||LA266_2==DOUBLE_PERIOD||(LA266_2 >= LEFT_BRACKET && LA266_2 <= LEFT_PAREN)||(LA266_2 >= PERCENT && LA266_2 <= PERIOD)||LA266_2==SOLIDUS||LA266_2==VERTICAL_BAR) ) {
					alt266=1;
				}
				else if ( (LA266_2==SQL92_RESERVED_OF) && ((input.LT(1).getText().equalsIgnoreCase("indices")))) {
					alt266=2;
				}

				}
				break;
			case SQL92_RESERVED_VALUES:
				{
				alt266=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 266, 0, input);
				throw nvae;
			}
			switch (alt266) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1387:10: lower_bound DOUBLE_PERIOD upper_bound
					{
					pushFollow(FOLLOW_lower_bound_in_bounds_clause13970);
					lower_bound1035=lower_bound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_lower_bound.add(lower_bound1035.getTree());
					DOUBLE_PERIOD1036=(Token)match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_bounds_clause13972); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOUBLE_PERIOD.add(DOUBLE_PERIOD1036);

					pushFollow(FOLLOW_upper_bound_in_bounds_clause13974);
					upper_bound1037=upper_bound();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_upper_bound.add(upper_bound1037.getTree());
					// AST REWRITE
					// elements: upper_bound, lower_bound
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1387:48: -> ^( SIMPLE_BOUND lower_bound upper_bound )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1387:51: ^( SIMPLE_BOUND lower_bound upper_bound )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SIMPLE_BOUND, "SIMPLE_BOUND"), root_1);
						adaptor.addChild(root_1, stream_lower_bound.nextTree());
						adaptor.addChild(root_1, stream_upper_bound.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1388:10: indices_key of_key collection_name ( between_bound )?
					{
					pushFollow(FOLLOW_indices_key_in_bounds_clause13995);
					indices_key1038=indices_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indices_key.add(indices_key1038.getTree());
					pushFollow(FOLLOW_of_key_in_bounds_clause13997);
					of_key1039=of_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_of_key.add(of_key1039.getTree());
					pushFollow(FOLLOW_collection_name_in_bounds_clause13999);
					collection_name1040=collection_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_collection_name.add(collection_name1040.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1388:45: ( between_bound )?
					int alt265=2;
					int LA265_0 = input.LA(1);
					if ( (LA265_0==SQL92_RESERVED_BETWEEN) ) {
						alt265=1;
					}
					switch (alt265) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1388:45: between_bound
							{
							pushFollow(FOLLOW_between_bound_in_bounds_clause14001);
							between_bound1041=between_bound();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_between_bound.add(between_bound1041.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: between_bound, collection_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1389:9: -> ^( INDICES_BOUND[$indices_key.start] collection_name ( between_bound )? )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1389:12: ^( INDICES_BOUND[$indices_key.start] collection_name ( between_bound )? )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INDICES_BOUND, (indices_key1038!=null?(indices_key1038.start):null)), root_1);
						adaptor.addChild(root_1, stream_collection_name.nextTree());
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1389:64: ( between_bound )?
						if ( stream_between_bound.hasNext() ) {
							adaptor.addChild(root_1, stream_between_bound.nextTree());
						}
						stream_between_bound.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1390:10: values_key of_key index_name
					{
					pushFollow(FOLLOW_values_key_in_bounds_clause14033);
					values_key1042=values_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_values_key.add(values_key1042.getTree());
					pushFollow(FOLLOW_of_key_in_bounds_clause14035);
					of_key1043=of_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_of_key.add(of_key1043.getTree());
					pushFollow(FOLLOW_index_name_in_bounds_clause14037);
					index_name1044=index_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_index_name.add(index_name1044.getTree());
					// AST REWRITE
					// elements: index_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (Object)adaptor.nil();
					// 1390:39: -> ^( VALUES_BOUND[$values_key.start] index_name )
					{
						// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1390:42: ^( VALUES_BOUND[$values_key.start] index_name )
						{
						Object root_1 = (Object)adaptor.nil();
						root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VALUES_BOUND, (values_key1042!=null?(values_key1042.start):null)), root_1);
						adaptor.addChild(root_1, stream_index_name.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "bounds_clause"


	public static class between_bound_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "between_bound"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1393:1: between_bound : between_key lower_bound and_key upper_bound -> ^( between_key lower_bound upper_bound ) ;
	public final PLSQLParser.between_bound_return between_bound() throws RecognitionException {
		PLSQLParser.between_bound_return retval = new PLSQLParser.between_bound_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope between_key1045 =null;
		ParserRuleReturnScope lower_bound1046 =null;
		ParserRuleReturnScope and_key1047 =null;
		ParserRuleReturnScope upper_bound1048 =null;

		RewriteRuleSubtreeStream stream_between_key=new RewriteRuleSubtreeStream(adaptor,"rule between_key");
		RewriteRuleSubtreeStream stream_lower_bound=new RewriteRuleSubtreeStream(adaptor,"rule lower_bound");
		RewriteRuleSubtreeStream stream_and_key=new RewriteRuleSubtreeStream(adaptor,"rule and_key");
		RewriteRuleSubtreeStream stream_upper_bound=new RewriteRuleSubtreeStream(adaptor,"rule upper_bound");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1394:5: ( between_key lower_bound and_key upper_bound -> ^( between_key lower_bound upper_bound ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1394:10: between_key lower_bound and_key upper_bound
			{
			pushFollow(FOLLOW_between_key_in_between_bound14067);
			between_key1045=between_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_between_key.add(between_key1045.getTree());
			pushFollow(FOLLOW_lower_bound_in_between_bound14069);
			lower_bound1046=lower_bound();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_lower_bound.add(lower_bound1046.getTree());
			pushFollow(FOLLOW_and_key_in_between_bound14071);
			and_key1047=and_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_and_key.add(and_key1047.getTree());
			pushFollow(FOLLOW_upper_bound_in_between_bound14073);
			upper_bound1048=upper_bound();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_upper_bound.add(upper_bound1048.getTree());
			// AST REWRITE
			// elements: between_key, lower_bound, upper_bound
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1395:9: -> ^( between_key lower_bound upper_bound )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1395:12: ^( between_key lower_bound upper_bound )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_between_key.nextNode(), root_1);
				adaptor.addChild(root_1, stream_lower_bound.nextTree());
				adaptor.addChild(root_1, stream_upper_bound.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "between_bound"


	public static class lower_bound_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "lower_bound"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1398:1: lower_bound : concatenation -> ^( EXPR concatenation ) ;
	public final PLSQLParser.lower_bound_return lower_bound() throws RecognitionException {
		PLSQLParser.lower_bound_return retval = new PLSQLParser.lower_bound_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope concatenation1049 =null;

		RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1399:5: ( concatenation -> ^( EXPR concatenation ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1399:10: concatenation
			{
			pushFollow(FOLLOW_concatenation_in_lower_bound14111);
			concatenation1049=concatenation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_concatenation.add(concatenation1049.getTree());
			// AST REWRITE
			// elements: concatenation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1400:9: -> ^( EXPR concatenation )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1400:12: ^( EXPR concatenation )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);
				adaptor.addChild(root_1, stream_concatenation.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lower_bound"


	public static class upper_bound_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "upper_bound"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1403:1: upper_bound : concatenation -> ^( EXPR concatenation ) ;
	public final PLSQLParser.upper_bound_return upper_bound() throws RecognitionException {
		PLSQLParser.upper_bound_return retval = new PLSQLParser.upper_bound_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope concatenation1050 =null;

		RewriteRuleSubtreeStream stream_concatenation=new RewriteRuleSubtreeStream(adaptor,"rule concatenation");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1404:5: ( concatenation -> ^( EXPR concatenation ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1404:10: concatenation
			{
			pushFollow(FOLLOW_concatenation_in_upper_bound14147);
			concatenation1050=concatenation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_concatenation.add(concatenation1050.getTree());
			// AST REWRITE
			// elements: concatenation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1405:9: -> ^( EXPR concatenation )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1405:12: ^( EXPR concatenation )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_1);
				adaptor.addChild(root_1, stream_concatenation.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "upper_bound"


	public static class null_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "null_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1408:1: null_statement : null_key ;
	public final PLSQLParser.null_statement_return null_statement() throws RecognitionException {
		PLSQLParser.null_statement_return retval = new PLSQLParser.null_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope null_key1051 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1409:5: ( null_key )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1409:10: null_key
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_null_key_in_null_statement14183);
			null_key1051=null_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, null_key1051.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "null_statement"


	public static class raise_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "raise_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1412:1: raise_statement : raise_key ^ ( exception_name )? ;
	public final PLSQLParser.raise_statement_return raise_statement() throws RecognitionException {
		PLSQLParser.raise_statement_return retval = new PLSQLParser.raise_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope raise_key1052 =null;
		ParserRuleReturnScope exception_name1053 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1413:5: ( raise_key ^ ( exception_name )? )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1413:10: raise_key ^ ( exception_name )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_raise_key_in_raise_statement14203);
			raise_key1052=raise_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(raise_key1052.getTree(), root_0);
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1413:21: ( exception_name )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==DELIMITED_ID||LA267_0==INTRODUCER||LA267_0==REGULAR_ID) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1413:21: exception_name
					{
					pushFollow(FOLLOW_exception_name_in_raise_statement14206);
					exception_name1053=exception_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name1053.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "raise_statement"


	public static class return_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "return_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1416:1: return_statement : return_key (cn1= condition )? -> {cn1 != null}? ^( return_key ^( LOGIC_EXPR condition ) ) -> ^( return_key ) ;
	public final PLSQLParser.return_statement_return return_statement() throws RecognitionException {
		PLSQLParser.return_statement_return retval = new PLSQLParser.return_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope cn1 =null;
		ParserRuleReturnScope return_key1054 =null;

		RewriteRuleSubtreeStream stream_condition=new RewriteRuleSubtreeStream(adaptor,"rule condition");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1417:5: ( return_key (cn1= condition )? -> {cn1 != null}? ^( return_key ^( LOGIC_EXPR condition ) ) -> ^( return_key ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1417:10: return_key (cn1= condition )?
			{
			pushFollow(FOLLOW_return_key_in_return_statement14227);
			return_key1054=return_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_return_key.add(return_key1054.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1417:24: (cn1= condition )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==APPROXIMATE_NUM_LIT||LA268_0==BINDVAR||(LA268_0 >= CHAR_STRING && LA268_0 <= COLON)||LA268_0==DELIMITED_ID||LA268_0==EXACT_NUM_LIT||LA268_0==INTRODUCER||LA268_0==LEFT_PAREN||LA268_0==MINUS_SIGN||LA268_0==NATIONAL_CHAR_STRING_LIT||LA268_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA268_0==PLUS_SIGN||LA268_0==REGULAR_ID||LA268_0==SQL92_RESERVED_ALL||LA268_0==SQL92_RESERVED_ANY||LA268_0==SQL92_RESERVED_CASE||(LA268_0 >= SQL92_RESERVED_CURSOR && LA268_0 <= SQL92_RESERVED_DATE)||(LA268_0 >= SQL92_RESERVED_DEFAULT && LA268_0 <= SQL92_RESERVED_DELETE)||LA268_0==SQL92_RESERVED_DISTINCT||(LA268_0 >= SQL92_RESERVED_EXISTS && LA268_0 <= SQL92_RESERVED_FALSE)||(LA268_0 >= SQL92_RESERVED_NOT && LA268_0 <= SQL92_RESERVED_NULL)||LA268_0==SQL92_RESERVED_PRIOR||LA268_0==SQL92_RESERVED_TRUE||LA268_0==UNSIGNED_INTEGER) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1417:24: cn1= condition
					{
					pushFollow(FOLLOW_condition_in_return_statement14231);
					cn1=condition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_condition.add(cn1.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: condition, return_key, return_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1418:5: -> {cn1 != null}? ^( return_key ^( LOGIC_EXPR condition ) )
			if (cn1 != null) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1418:23: ^( return_key ^( LOGIC_EXPR condition ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_return_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1418:36: ^( LOGIC_EXPR condition )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOGIC_EXPR, "LOGIC_EXPR"), root_2);
				adaptor.addChild(root_2, stream_condition.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1419:5: -> ^( return_key )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1419:8: ^( return_key )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_return_key.nextNode(), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "return_statement"


	public static class function_call_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "function_call"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1422:1: function_call : ( call_key )? general_element -> general_element ;
	public final PLSQLParser.function_call_return function_call() throws RecognitionException {
		PLSQLParser.function_call_return retval = new PLSQLParser.function_call_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope call_key1055 =null;
		ParserRuleReturnScope general_element1056 =null;

		RewriteRuleSubtreeStream stream_call_key=new RewriteRuleSubtreeStream(adaptor,"rule call_key");
		RewriteRuleSubtreeStream stream_general_element=new RewriteRuleSubtreeStream(adaptor,"rule general_element");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1423:5: ( ( call_key )? general_element -> general_element )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1423:10: ( call_key )? general_element
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1423:10: ( call_key )?
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==REGULAR_ID) ) {
				int LA269_1 = input.LA(2);
				if ( (LA269_1==BINDVAR||LA269_1==COLON||LA269_1==DELIMITED_ID||LA269_1==INTRODUCER||LA269_1==REGULAR_ID||LA269_1==SQL92_RESERVED_DELETE||LA269_1==SQL92_RESERVED_EXISTS||LA269_1==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("call")))) {
					alt269=1;
				}
			}
			switch (alt269) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1423:10: call_key
					{
					pushFollow(FOLLOW_call_key_in_function_call14280);
					call_key1055=call_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_call_key.add(call_key1055.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_general_element_in_function_call14283);
			general_element1056=general_element();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_general_element.add(general_element1056.getTree());
			// AST REWRITE
			// elements: general_element
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1424:9: -> general_element
			{
				adaptor.addChild(root_0, stream_general_element.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "function_call"


	public static class body_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "body"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1427:1: body : begin_key seq_of_statements ( exception_clause )? end_key ( label_name )? -> ^( BODY[$begin_key.start] ( label_name )? seq_of_statements ( exception_clause )? ) ;
	public final PLSQLParser.body_return body() throws RecognitionException {
		PLSQLParser.body_return retval = new PLSQLParser.body_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope begin_key1057 =null;
		ParserRuleReturnScope seq_of_statements1058 =null;
		ParserRuleReturnScope exception_clause1059 =null;
		ParserRuleReturnScope end_key1060 =null;
		ParserRuleReturnScope label_name1061 =null;

		RewriteRuleSubtreeStream stream_end_key=new RewriteRuleSubtreeStream(adaptor,"rule end_key");
		RewriteRuleSubtreeStream stream_begin_key=new RewriteRuleSubtreeStream(adaptor,"rule begin_key");
		RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
		RewriteRuleSubtreeStream stream_exception_clause=new RewriteRuleSubtreeStream(adaptor,"rule exception_clause");
		RewriteRuleSubtreeStream stream_label_name=new RewriteRuleSubtreeStream(adaptor,"rule label_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1428:5: ( begin_key seq_of_statements ( exception_clause )? end_key ( label_name )? -> ^( BODY[$begin_key.start] ( label_name )? seq_of_statements ( exception_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1428:10: begin_key seq_of_statements ( exception_clause )? end_key ( label_name )?
			{
			pushFollow(FOLLOW_begin_key_in_body14315);
			begin_key1057=begin_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_begin_key.add(begin_key1057.getTree());
			pushFollow(FOLLOW_seq_of_statements_in_body14325);
			seq_of_statements1058=seq_of_statements();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements1058.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1430:9: ( exception_clause )?
			int alt270=2;
			int LA270_0 = input.LA(1);
			if ( (LA270_0==SQL92_RESERVED_EXCEPTION) ) {
				alt270=1;
			}
			switch (alt270) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1430:9: exception_clause
					{
					pushFollow(FOLLOW_exception_clause_in_body14335);
					exception_clause1059=exception_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_exception_clause.add(exception_clause1059.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_end_key_in_body14346);
			end_key1060=end_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_end_key.add(end_key1060.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1431:17: ( label_name )?
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==REGULAR_ID) ) {
				int LA271_1 = input.LA(2);
				if ( (LA271_1==EOF||LA271_1==SEMICOLON) ) {
					alt271=1;
				}
				else if ( (LA271_1==REGULAR_ID) ) {
					int LA271_4 = input.LA(3);
					if ( (LA271_4==REGULAR_ID) ) {
						int LA271_5 = input.LA(4);
						if ( (LA271_5==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("after"))||(!(((input.LT(1).getText().equalsIgnoreCase("after"))))&&!(((input.LT(1).getText().equalsIgnoreCase("before")))))||(input.LT(1).getText().equalsIgnoreCase("before"))||!((((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before")))))))) {
							int LA271_7 = input.LA(5);
							if ( (!((((input.LT(1).getText().equalsIgnoreCase("after"))||(input.LT(1).getText().equalsIgnoreCase("before")))))) ) {
								alt271=1;
							}
						}
						else if ( (LA271_5==REGULAR_ID) ) {
							alt271=1;
						}
					}
				}
			}
			else if ( (LA271_0==DELIMITED_ID) ) {
				alt271=1;
			}
			switch (alt271) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1431:17: label_name
					{
					pushFollow(FOLLOW_label_name_in_body14348);
					label_name1061=label_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_label_name.add(label_name1061.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: label_name, exception_clause, seq_of_statements
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1432:9: -> ^( BODY[$begin_key.start] ( label_name )? seq_of_statements ( exception_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1432:12: ^( BODY[$begin_key.start] ( label_name )? seq_of_statements ( exception_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BODY, (begin_key1057!=null?(begin_key1057.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1432:37: ( label_name )?
				if ( stream_label_name.hasNext() ) {
					adaptor.addChild(root_1, stream_label_name.nextTree());
				}
				stream_label_name.reset();

				adaptor.addChild(root_1, stream_seq_of_statements.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1432:67: ( exception_clause )?
				if ( stream_exception_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_exception_clause.nextTree());
				}
				stream_exception_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class exception_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exception_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1437:1: exception_clause : exception_key ^ ( exception_handler )+ ;
	public final PLSQLParser.exception_clause_return exception_clause() throws RecognitionException {
		PLSQLParser.exception_clause_return retval = new PLSQLParser.exception_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope exception_key1062 =null;
		ParserRuleReturnScope exception_handler1063 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1438:5: ( exception_key ^ ( exception_handler )+ )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1438:10: exception_key ^ ( exception_handler )+
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_exception_key_in_exception_clause14395);
			exception_key1062=exception_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(exception_key1062.getTree(), root_0);
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1438:25: ( exception_handler )+
			int cnt272=0;
			loop272:
			while (true) {
				int alt272=2;
				int LA272_0 = input.LA(1);
				if ( (LA272_0==SQL92_RESERVED_WHEN) ) {
					alt272=1;
				}

				switch (alt272) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1438:25: exception_handler
					{
					pushFollow(FOLLOW_exception_handler_in_exception_clause14398);
					exception_handler1063=exception_handler();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler1063.getTree());

					}
					break;

				default :
					if ( cnt272 >= 1 ) break loop272;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(272, input);
					throw eee;
				}
				cnt272++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_clause"


	public static class exception_handler_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "exception_handler"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1441:1: exception_handler : when_key exception_name ( or_key exception_name )* then_key seq_of_statements -> ^( when_key ( exception_name )+ seq_of_statements ) ;
	public final PLSQLParser.exception_handler_return exception_handler() throws RecognitionException {
		PLSQLParser.exception_handler_return retval = new PLSQLParser.exception_handler_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope when_key1064 =null;
		ParserRuleReturnScope exception_name1065 =null;
		ParserRuleReturnScope or_key1066 =null;
		ParserRuleReturnScope exception_name1067 =null;
		ParserRuleReturnScope then_key1068 =null;
		ParserRuleReturnScope seq_of_statements1069 =null;

		RewriteRuleSubtreeStream stream_when_key=new RewriteRuleSubtreeStream(adaptor,"rule when_key");
		RewriteRuleSubtreeStream stream_exception_name=new RewriteRuleSubtreeStream(adaptor,"rule exception_name");
		RewriteRuleSubtreeStream stream_then_key=new RewriteRuleSubtreeStream(adaptor,"rule then_key");
		RewriteRuleSubtreeStream stream_seq_of_statements=new RewriteRuleSubtreeStream(adaptor,"rule seq_of_statements");
		RewriteRuleSubtreeStream stream_or_key=new RewriteRuleSubtreeStream(adaptor,"rule or_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1442:5: ( when_key exception_name ( or_key exception_name )* then_key seq_of_statements -> ^( when_key ( exception_name )+ seq_of_statements ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1442:10: when_key exception_name ( or_key exception_name )* then_key seq_of_statements
			{
			pushFollow(FOLLOW_when_key_in_exception_handler14419);
			when_key1064=when_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_when_key.add(when_key1064.getTree());
			pushFollow(FOLLOW_exception_name_in_exception_handler14421);
			exception_name1065=exception_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_exception_name.add(exception_name1065.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1442:34: ( or_key exception_name )*
			loop273:
			while (true) {
				int alt273=2;
				int LA273_0 = input.LA(1);
				if ( (LA273_0==SQL92_RESERVED_OR) ) {
					alt273=1;
				}

				switch (alt273) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1442:35: or_key exception_name
					{
					pushFollow(FOLLOW_or_key_in_exception_handler14424);
					or_key1066=or_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_or_key.add(or_key1066.getTree());
					pushFollow(FOLLOW_exception_name_in_exception_handler14426);
					exception_name1067=exception_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_exception_name.add(exception_name1067.getTree());
					}
					break;

				default :
					break loop273;
				}
			}

			pushFollow(FOLLOW_then_key_in_exception_handler14430);
			then_key1068=then_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_then_key.add(then_key1068.getTree());
			pushFollow(FOLLOW_seq_of_statements_in_exception_handler14440);
			seq_of_statements1069=seq_of_statements();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_seq_of_statements.add(seq_of_statements1069.getTree());
			// AST REWRITE
			// elements: when_key, seq_of_statements, exception_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1444:9: -> ^( when_key ( exception_name )+ seq_of_statements )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1444:12: ^( when_key ( exception_name )+ seq_of_statements )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_when_key.nextNode(), root_1);
				if ( !(stream_exception_name.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_exception_name.hasNext() ) {
					adaptor.addChild(root_1, stream_exception_name.nextTree());
				}
				stream_exception_name.reset();

				adaptor.addChild(root_1, stream_seq_of_statements.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exception_handler"


	public static class block_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "block"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1449:1: block : ( ( declare_key )? ( declare_spec )+ )? body -> ^( BLOCK ( declare_spec )* body ) ;
	public final PLSQLParser.block_return block() throws RecognitionException {
		PLSQLParser.block_return retval = new PLSQLParser.block_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope declare_key1070 =null;
		ParserRuleReturnScope declare_spec1071 =null;
		ParserRuleReturnScope body1072 =null;

		RewriteRuleSubtreeStream stream_declare_spec=new RewriteRuleSubtreeStream(adaptor,"rule declare_spec");
		RewriteRuleSubtreeStream stream_declare_key=new RewriteRuleSubtreeStream(adaptor,"rule declare_key");
		RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1450:5: ( ( ( declare_key )? ( declare_spec )+ )? body -> ^( BLOCK ( declare_spec )* body ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1450:10: ( ( declare_key )? ( declare_spec )+ )? body
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1450:10: ( ( declare_key )? ( declare_spec )+ )?
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==BINDVAR||LA276_0==COLON||LA276_0==DELIMITED_ID||LA276_0==INTRODUCER||LA276_0==REGULAR_ID||LA276_0==SQL92_RESERVED_CREATE||LA276_0==SQL92_RESERVED_CURSOR||LA276_0==SQL92_RESERVED_DECLARE||LA276_0==SQL92_RESERVED_PROCEDURE) ) {
				alt276=1;
			}
			switch (alt276) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1450:11: ( declare_key )? ( declare_spec )+
					{
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1450:11: ( declare_key )?
					int alt274=2;
					int LA274_0 = input.LA(1);
					if ( (LA274_0==SQL92_RESERVED_DECLARE) ) {
						alt274=1;
					}
					switch (alt274) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1450:11: declare_key
							{
							pushFollow(FOLLOW_declare_key_in_block14482);
							declare_key1070=declare_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_declare_key.add(declare_key1070.getTree());
							}
							break;

					}

					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1450:24: ( declare_spec )+
					int cnt275=0;
					loop275:
					while (true) {
						int alt275=2;
						int LA275_0 = input.LA(1);
						if ( (LA275_0==BINDVAR||LA275_0==COLON||LA275_0==DELIMITED_ID||LA275_0==INTRODUCER||LA275_0==REGULAR_ID||LA275_0==SQL92_RESERVED_CREATE||LA275_0==SQL92_RESERVED_CURSOR||LA275_0==SQL92_RESERVED_PROCEDURE) ) {
							alt275=1;
						}

						switch (alt275) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1450:24: declare_spec
							{
							pushFollow(FOLLOW_declare_spec_in_block14485);
							declare_spec1071=declare_spec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_declare_spec.add(declare_spec1071.getTree());
							}
							break;

						default :
							if ( cnt275 >= 1 ) break loop275;
							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee = new EarlyExitException(275, input);
							throw eee;
						}
						cnt275++;
					}

					}
					break;

			}

			pushFollow(FOLLOW_body_in_block14498);
			body1072=body();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_body.add(body1072.getTree());
			// AST REWRITE
			// elements: body, declare_spec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1452:9: -> ^( BLOCK ( declare_spec )* body )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1452:12: ^( BLOCK ( declare_spec )* body )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1452:20: ( declare_spec )*
				while ( stream_declare_spec.hasNext() ) {
					adaptor.addChild(root_1, stream_declare_spec.nextTree());
				}
				stream_declare_spec.reset();

				adaptor.addChild(root_1, stream_body.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "block"


	public static class sql_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "sql_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1459:1: sql_statement options {k=1; } : ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements );
	public final PLSQLParser.sql_statement_return sql_statement() throws RecognitionException {
		PLSQLParser.sql_statement_return retval = new PLSQLParser.sql_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope execute_immediate1073 =null;
		ParserRuleReturnScope data_manipulation_language_statements1074 =null;
		ParserRuleReturnScope cursor_manipulation_statements1075 =null;
		ParserRuleReturnScope transaction_control_statements1076 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1463:6: ( execute_immediate | data_manipulation_language_statements | cursor_manipulation_statements | transaction_control_statements )
			int alt277=4;
			switch ( input.LA(1) ) {
			case REGULAR_ID:
				{
				int LA277_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("execute"))) ) {
					alt277=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("merge"))) ) {
					alt277=2;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close")))) ) {
					alt277=3;
				}
				else if ( (((input.LT(1).getText().equalsIgnoreCase("commit"))||(input.LT(1).getText().equalsIgnoreCase("rollback"))||(input.LT(1).getText().equalsIgnoreCase("savepoint"))||(input.LT(1).getText().equalsIgnoreCase("set")))) ) {
					alt277=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 277, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LEFT_PAREN:
			case PLSQL_RESERVED_LOCK:
			case SQL92_RESERVED_DELETE:
			case SQL92_RESERVED_INSERT:
			case SQL92_RESERVED_SELECT:
			case SQL92_RESERVED_UPDATE:
			case SQL92_RESERVED_WITH:
				{
				alt277=2;
				}
				break;
			case SQL92_RESERVED_FETCH:
				{
				alt277=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 277, 0, input);
				throw nvae;
			}
			switch (alt277) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1463:11: execute_immediate
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_execute_immediate_in_sql_statement14552);
					execute_immediate1073=execute_immediate();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, execute_immediate1073.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1464:10: data_manipulation_language_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_data_manipulation_language_statements_in_sql_statement14563);
					data_manipulation_language_statements1074=data_manipulation_language_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, data_manipulation_language_statements1074.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1465:10: cursor_manipulation_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_cursor_manipulation_statements_in_sql_statement14574);
					cursor_manipulation_statements1075=cursor_manipulation_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_manipulation_statements1075.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1466:10: transaction_control_statements
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_transaction_control_statements_in_sql_statement14585);
					transaction_control_statements1076=transaction_control_statements();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, transaction_control_statements1076.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sql_statement"


	public static class execute_immediate_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "execute_immediate"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1469:1: execute_immediate : execute_key immediate_key expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? -> ^( execute_key ^( EXPR expression ) ( into_clause )? ( using_clause )? ( dynamic_returning_clause )? ) ;
	public final PLSQLParser.execute_immediate_return execute_immediate() throws RecognitionException {
		PLSQLParser.execute_immediate_return retval = new PLSQLParser.execute_immediate_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope execute_key1077 =null;
		ParserRuleReturnScope immediate_key1078 =null;
		ParserRuleReturnScope expression1079 =null;
		ParserRuleReturnScope into_clause1080 =null;
		ParserRuleReturnScope using_clause1081 =null;
		ParserRuleReturnScope using_clause1082 =null;
		ParserRuleReturnScope dynamic_returning_clause1083 =null;
		ParserRuleReturnScope dynamic_returning_clause1084 =null;

		RewriteRuleSubtreeStream stream_dynamic_returning_clause=new RewriteRuleSubtreeStream(adaptor,"rule dynamic_returning_clause");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_execute_key=new RewriteRuleSubtreeStream(adaptor,"rule execute_key");
		RewriteRuleSubtreeStream stream_using_clause=new RewriteRuleSubtreeStream(adaptor,"rule using_clause");
		RewriteRuleSubtreeStream stream_immediate_key=new RewriteRuleSubtreeStream(adaptor,"rule immediate_key");
		RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1470:5: ( execute_key immediate_key expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )? -> ^( execute_key ^( EXPR expression ) ( into_clause )? ( using_clause )? ( dynamic_returning_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1470:10: execute_key immediate_key expression ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )?
			{
			pushFollow(FOLLOW_execute_key_in_execute_immediate14605);
			execute_key1077=execute_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_execute_key.add(execute_key1077.getTree());
			pushFollow(FOLLOW_immediate_key_in_execute_immediate14607);
			immediate_key1078=immediate_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_immediate_key.add(immediate_key1078.getTree());
			pushFollow(FOLLOW_expression_in_execute_immediate14609);
			expression1079=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression1079.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1471:5: ( into_clause ( using_clause )? | using_clause ( dynamic_returning_clause )? | dynamic_returning_clause )?
			int alt280=4;
			switch ( input.LA(1) ) {
				case SQL92_RESERVED_INTO:
					{
					alt280=1;
					}
					break;
				case REGULAR_ID:
					{
					int LA280_2 = input.LA(2);
					if ( (LA280_2==REGULAR_ID) ) {
						int LA280_5 = input.LA(3);
						if ( (LA280_5==SQL92_RESERVED_INTO) && ((input.LT(1).getText().equalsIgnoreCase("bulk")))) {
							alt280=1;
						}
						else if ( (LA280_5==REGULAR_ID) ) {
							alt280=3;
						}
					}
					else if ( (LA280_2==SQL92_RESERVED_INTO) ) {
						alt280=3;
					}
					}
					break;
				case PLSQL_NON_RESERVED_USING:
					{
					alt280=2;
					}
					break;
			}
			switch (alt280) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1471:10: into_clause ( using_clause )?
					{
					pushFollow(FOLLOW_into_clause_in_execute_immediate14620);
					into_clause1080=into_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_into_clause.add(into_clause1080.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1471:22: ( using_clause )?
					int alt278=2;
					int LA278_0 = input.LA(1);
					if ( (LA278_0==PLSQL_NON_RESERVED_USING) ) {
						alt278=1;
					}
					switch (alt278) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1471:22: using_clause
							{
							pushFollow(FOLLOW_using_clause_in_execute_immediate14622);
							using_clause1081=using_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_using_clause.add(using_clause1081.getTree());
							}
							break;

					}

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1472:10: using_clause ( dynamic_returning_clause )?
					{
					pushFollow(FOLLOW_using_clause_in_execute_immediate14634);
					using_clause1082=using_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_using_clause.add(using_clause1082.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1472:23: ( dynamic_returning_clause )?
					int alt279=2;
					int LA279_0 = input.LA(1);
					if ( (LA279_0==REGULAR_ID) ) {
						int LA279_1 = input.LA(2);
						if ( (LA279_1==SQL92_RESERVED_INTO) ) {
							alt279=1;
						}
						else if ( (LA279_1==REGULAR_ID) ) {
							int LA279_4 = input.LA(3);
							if ( (LA279_4==REGULAR_ID) ) {
								alt279=1;
							}
						}
					}
					switch (alt279) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1472:23: dynamic_returning_clause
							{
							pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate14636);
							dynamic_returning_clause1083=dynamic_returning_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_dynamic_returning_clause.add(dynamic_returning_clause1083.getTree());
							}
							break;

					}

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1473:10: dynamic_returning_clause
					{
					pushFollow(FOLLOW_dynamic_returning_clause_in_execute_immediate14648);
					dynamic_returning_clause1084=dynamic_returning_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dynamic_returning_clause.add(dynamic_returning_clause1084.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: using_clause, dynamic_returning_clause, execute_key, expression, into_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1475:9: -> ^( execute_key ^( EXPR expression ) ( into_clause )? ( using_clause )? ( dynamic_returning_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1475:12: ^( execute_key ^( EXPR expression ) ( into_clause )? ( using_clause )? ( dynamic_returning_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_execute_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1475:26: ^( EXPR expression )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1475:45: ( into_clause )?
				if ( stream_into_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_into_clause.nextTree());
				}
				stream_into_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1475:58: ( using_clause )?
				if ( stream_using_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_using_clause.nextTree());
				}
				stream_using_clause.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1475:72: ( dynamic_returning_clause )?
				if ( stream_dynamic_returning_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_dynamic_returning_clause.nextTree());
				}
				stream_dynamic_returning_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execute_immediate"


	public static class dynamic_returning_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "dynamic_returning_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1479:1: dynamic_returning_clause : ( returning_key | return_key ) into_clause -> ^( DYNAMIC_RETURN into_clause ) ;
	public final PLSQLParser.dynamic_returning_clause_return dynamic_returning_clause() throws RecognitionException {
		PLSQLParser.dynamic_returning_clause_return retval = new PLSQLParser.dynamic_returning_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope returning_key1085 =null;
		ParserRuleReturnScope return_key1086 =null;
		ParserRuleReturnScope into_clause1087 =null;

		RewriteRuleSubtreeStream stream_returning_key=new RewriteRuleSubtreeStream(adaptor,"rule returning_key");
		RewriteRuleSubtreeStream stream_return_key=new RewriteRuleSubtreeStream(adaptor,"rule return_key");
		RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1480:5: ( ( returning_key | return_key ) into_clause -> ^( DYNAMIC_RETURN into_clause ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1480:10: ( returning_key | return_key ) into_clause
			{
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1480:10: ( returning_key | return_key )
			int alt281=2;
			int LA281_0 = input.LA(1);
			if ( (LA281_0==REGULAR_ID) ) {
				int LA281_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("returning"))) ) {
					alt281=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("return"))) ) {
					alt281=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 281, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 281, 0, input);
				throw nvae;
			}

			switch (alt281) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1480:11: returning_key
					{
					pushFollow(FOLLOW_returning_key_in_dynamic_returning_clause14707);
					returning_key1085=returning_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_returning_key.add(returning_key1085.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1480:25: return_key
					{
					pushFollow(FOLLOW_return_key_in_dynamic_returning_clause14709);
					return_key1086=return_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_return_key.add(return_key1086.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_into_clause_in_dynamic_returning_clause14712);
			into_clause1087=into_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_into_clause.add(into_clause1087.getTree());
			// AST REWRITE
			// elements: into_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1481:9: -> ^( DYNAMIC_RETURN into_clause )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1481:12: ^( DYNAMIC_RETURN into_clause )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DYNAMIC_RETURN, "DYNAMIC_RETURN"), root_1);
				adaptor.addChild(root_1, stream_into_clause.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dynamic_returning_clause"


	public static class data_manipulation_language_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "data_manipulation_language_statements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1488:1: data_manipulation_language_statements : ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement );
	public final PLSQLParser.data_manipulation_language_statements_return data_manipulation_language_statements() throws RecognitionException {
		PLSQLParser.data_manipulation_language_statements_return retval = new PLSQLParser.data_manipulation_language_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope merge_statement1088 =null;
		ParserRuleReturnScope lock_table_statement1089 =null;
		ParserRuleReturnScope select_statement1090 =null;
		ParserRuleReturnScope update_statement1091 =null;
		ParserRuleReturnScope delete_statement1092 =null;
		ParserRuleReturnScope insert_statement1093 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1489:5: ( merge_statement | lock_table_statement | select_statement | update_statement | delete_statement | insert_statement )
			int alt282=6;
			int LA282_0 = input.LA(1);
			if ( (LA282_0==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("merge")))) {
				alt282=1;
			}
			else if ( (LA282_0==PLSQL_RESERVED_LOCK) ) {
				alt282=2;
			}
			else if ( (LA282_0==LEFT_PAREN||LA282_0==SQL92_RESERVED_SELECT||LA282_0==SQL92_RESERVED_WITH) ) {
				alt282=3;
			}
			else if ( (LA282_0==SQL92_RESERVED_UPDATE) ) {
				alt282=4;
			}
			else if ( (LA282_0==SQL92_RESERVED_DELETE) ) {
				alt282=5;
			}
			else if ( (LA282_0==SQL92_RESERVED_INSERT) ) {
				alt282=6;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 282, 0, input);
				throw nvae;
			}

			switch (alt282) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1489:10: merge_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_merge_statement_in_data_manipulation_language_statements14752);
					merge_statement1088=merge_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, merge_statement1088.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1490:10: lock_table_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_lock_table_statement_in_data_manipulation_language_statements14763);
					lock_table_statement1089=lock_table_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement1089.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1491:10: select_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_select_statement_in_data_manipulation_language_statements14774);
					select_statement1090=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement1090.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1492:11: update_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_update_statement_in_data_manipulation_language_statements14786);
					update_statement1091=update_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, update_statement1091.getTree());

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1493:11: delete_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_delete_statement_in_data_manipulation_language_statements14798);
					delete_statement1092=delete_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_statement1092.getTree());

					}
					break;
				case 6 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1494:10: insert_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_insert_statement_in_data_manipulation_language_statements14809);
					insert_statement1093=insert_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_statement1093.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "data_manipulation_language_statements"


	public static class cursor_manipulation_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "cursor_manipulation_statements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1501:1: cursor_manipulation_statements : ( close_statement | open_statement | fetch_statement | open_for_statement );
	public final PLSQLParser.cursor_manipulation_statements_return cursor_manipulation_statements() throws RecognitionException {
		PLSQLParser.cursor_manipulation_statements_return retval = new PLSQLParser.cursor_manipulation_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope close_statement1094 =null;
		ParserRuleReturnScope open_statement1095 =null;
		ParserRuleReturnScope fetch_statement1096 =null;
		ParserRuleReturnScope open_for_statement1097 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1502:5: ( close_statement | open_statement | fetch_statement | open_for_statement )
			int alt283=4;
			alt283 = dfa283.predict(input);
			switch (alt283) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1502:10: close_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_close_statement_in_cursor_manipulation_statements14833);
					close_statement1094=close_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement1094.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1503:10: open_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_open_statement_in_cursor_manipulation_statements14844);
					open_statement1095=open_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement1095.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1504:10: fetch_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_fetch_statement_in_cursor_manipulation_statements14855);
					fetch_statement1096=fetch_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement1096.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1505:10: open_for_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_open_for_statement_in_cursor_manipulation_statements14866);
					open_for_statement1097=open_for_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, open_for_statement1097.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cursor_manipulation_statements"


	public static class close_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "close_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1508:1: close_statement : close_key ^ cursor_name ;
	public final PLSQLParser.close_statement_return close_statement() throws RecognitionException {
		PLSQLParser.close_statement_return retval = new PLSQLParser.close_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope close_key1098 =null;
		ParserRuleReturnScope cursor_name1099 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1509:5: ( close_key ^ cursor_name )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1509:11: close_key ^ cursor_name
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_close_key_in_close_statement14887);
			close_key1098=close_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(close_key1098.getTree(), root_0);
			pushFollow(FOLLOW_cursor_name_in_close_statement14890);
			cursor_name1099=cursor_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1099.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "close_statement"


	public static class open_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "open_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1512:1: open_statement : open_key ^ cursor_name ( expression_list )? ;
	public final PLSQLParser.open_statement_return open_statement() throws RecognitionException {
		PLSQLParser.open_statement_return retval = new PLSQLParser.open_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope open_key1100 =null;
		ParserRuleReturnScope cursor_name1101 =null;
		ParserRuleReturnScope expression_list1102 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1513:5: ( open_key ^ cursor_name ( expression_list )? )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1513:10: open_key ^ cursor_name ( expression_list )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_open_key_in_open_statement14910);
			open_key1100=open_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(open_key1100.getTree(), root_0);
			pushFollow(FOLLOW_cursor_name_in_open_statement14913);
			cursor_name1101=cursor_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1101.getTree());

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1513:32: ( expression_list )?
			int alt284=2;
			int LA284_0 = input.LA(1);
			if ( (LA284_0==LEFT_PAREN) ) {
				alt284=1;
			}
			switch (alt284) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1513:32: expression_list
					{
					pushFollow(FOLLOW_expression_list_in_open_statement14915);
					expression_list1102=expression_list();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1102.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_statement"


	public static class fetch_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "fetch_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1516:1: fetch_statement : fetch_key ^ cursor_name into_clause ;
	public final PLSQLParser.fetch_statement_return fetch_statement() throws RecognitionException {
		PLSQLParser.fetch_statement_return retval = new PLSQLParser.fetch_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope fetch_key1103 =null;
		ParserRuleReturnScope cursor_name1104 =null;
		ParserRuleReturnScope into_clause1105 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1517:5: ( fetch_key ^ cursor_name into_clause )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1517:10: fetch_key ^ cursor_name into_clause
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_fetch_key_in_fetch_statement14936);
			fetch_key1103=fetch_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(fetch_key1103.getTree(), root_0);
			pushFollow(FOLLOW_cursor_name_in_fetch_statement14939);
			cursor_name1104=cursor_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1104.getTree());

			pushFollow(FOLLOW_into_clause_in_fetch_statement14941);
			into_clause1105=into_clause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, into_clause1105.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fetch_statement"


	public static class open_for_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "open_for_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1520:1: open_for_statement : open_key variable_name for_key ( ( select_key | with_key )=> select_statement | expression_wrapper ) ( using_clause )? -> ^( OPEN_FOR[$open_key.start] variable_name ( select_statement )? ( expression_wrapper )? ( using_clause )? ) ;
	public final PLSQLParser.open_for_statement_return open_for_statement() throws RecognitionException {
		PLSQLParser.open_for_statement_return retval = new PLSQLParser.open_for_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope open_key1106 =null;
		ParserRuleReturnScope variable_name1107 =null;
		ParserRuleReturnScope for_key1108 =null;
		ParserRuleReturnScope select_statement1109 =null;
		ParserRuleReturnScope expression_wrapper1110 =null;
		ParserRuleReturnScope using_clause1111 =null;

		RewriteRuleSubtreeStream stream_for_key=new RewriteRuleSubtreeStream(adaptor,"rule for_key");
		RewriteRuleSubtreeStream stream_using_clause=new RewriteRuleSubtreeStream(adaptor,"rule using_clause");
		RewriteRuleSubtreeStream stream_expression_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule expression_wrapper");
		RewriteRuleSubtreeStream stream_open_key=new RewriteRuleSubtreeStream(adaptor,"rule open_key");
		RewriteRuleSubtreeStream stream_select_statement=new RewriteRuleSubtreeStream(adaptor,"rule select_statement");
		RewriteRuleSubtreeStream stream_variable_name=new RewriteRuleSubtreeStream(adaptor,"rule variable_name");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1521:5: ( open_key variable_name for_key ( ( select_key | with_key )=> select_statement | expression_wrapper ) ( using_clause )? -> ^( OPEN_FOR[$open_key.start] variable_name ( select_statement )? ( expression_wrapper )? ( using_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1521:10: open_key variable_name for_key ( ( select_key | with_key )=> select_statement | expression_wrapper ) ( using_clause )?
			{
			pushFollow(FOLLOW_open_key_in_open_for_statement14961);
			open_key1106=open_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_open_key.add(open_key1106.getTree());
			pushFollow(FOLLOW_variable_name_in_open_for_statement14963);
			variable_name1107=variable_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_variable_name.add(variable_name1107.getTree());
			pushFollow(FOLLOW_for_key_in_open_for_statement14965);
			for_key1108=for_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_for_key.add(for_key1108.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1522:5: ( ( select_key | with_key )=> select_statement | expression_wrapper )
			int alt285=2;
			int LA285_0 = input.LA(1);
			if ( (LA285_0==SQL92_RESERVED_WITH) && (synpred69_PLSQLParser())) {
				alt285=1;
			}
			else if ( (LA285_0==SQL92_RESERVED_SELECT) && (synpred69_PLSQLParser())) {
				alt285=1;
			}
			else if ( (LA285_0==LEFT_PAREN) ) {
				int LA285_3 = input.LA(2);
				if ( (synpred69_PLSQLParser()) ) {
					alt285=1;
				}
				else if ( (true) ) {
					alt285=2;
				}

			}
			else if ( (LA285_0==APPROXIMATE_NUM_LIT||LA285_0==BINDVAR||(LA285_0 >= CHAR_STRING && LA285_0 <= COLON)||LA285_0==DELIMITED_ID||LA285_0==EXACT_NUM_LIT||LA285_0==INTRODUCER||LA285_0==MINUS_SIGN||LA285_0==NATIONAL_CHAR_STRING_LIT||LA285_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA285_0==PLUS_SIGN||LA285_0==REGULAR_ID||LA285_0==SQL92_RESERVED_ALL||LA285_0==SQL92_RESERVED_ANY||LA285_0==SQL92_RESERVED_CASE||(LA285_0 >= SQL92_RESERVED_CURSOR && LA285_0 <= SQL92_RESERVED_DATE)||(LA285_0 >= SQL92_RESERVED_DEFAULT && LA285_0 <= SQL92_RESERVED_DELETE)||LA285_0==SQL92_RESERVED_DISTINCT||(LA285_0 >= SQL92_RESERVED_EXISTS && LA285_0 <= SQL92_RESERVED_FALSE)||(LA285_0 >= SQL92_RESERVED_NOT && LA285_0 <= SQL92_RESERVED_NULL)||LA285_0==SQL92_RESERVED_PRIOR||LA285_0==SQL92_RESERVED_TRUE||LA285_0==UNSIGNED_INTEGER) ) {
				alt285=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 285, 0, input);
				throw nvae;
			}

			switch (alt285) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1522:10: ( select_key | with_key )=> select_statement
					{
					pushFollow(FOLLOW_select_statement_in_open_for_statement14983);
					select_statement1109=select_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_select_statement.add(select_statement1109.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1523:10: expression_wrapper
					{
					pushFollow(FOLLOW_expression_wrapper_in_open_for_statement14994);
					expression_wrapper1110=expression_wrapper();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression_wrapper.add(expression_wrapper1110.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1525:9: ( using_clause )?
			int alt286=2;
			int LA286_0 = input.LA(1);
			if ( (LA286_0==PLSQL_NON_RESERVED_USING) ) {
				alt286=1;
			}
			switch (alt286) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1525:9: using_clause
					{
					pushFollow(FOLLOW_using_clause_in_open_for_statement15010);
					using_clause1111=using_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_using_clause.add(using_clause1111.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: variable_name, using_clause, select_statement, expression_wrapper
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1526:9: -> ^( OPEN_FOR[$open_key.start] variable_name ( select_statement )? ( expression_wrapper )? ( using_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1526:13: ^( OPEN_FOR[$open_key.start] variable_name ( select_statement )? ( expression_wrapper )? ( using_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OPEN_FOR, (open_key1106!=null?(open_key1106.start):null)), root_1);
				adaptor.addChild(root_1, stream_variable_name.nextTree());
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1526:55: ( select_statement )?
				if ( stream_select_statement.hasNext() ) {
					adaptor.addChild(root_1, stream_select_statement.nextTree());
				}
				stream_select_statement.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1526:73: ( expression_wrapper )?
				if ( stream_expression_wrapper.hasNext() ) {
					adaptor.addChild(root_1, stream_expression_wrapper.nextTree());
				}
				stream_expression_wrapper.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1526:93: ( using_clause )?
				if ( stream_using_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_using_clause.nextTree());
				}
				stream_using_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "open_for_statement"


	public static class transaction_control_statements_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "transaction_control_statements"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1533:1: transaction_control_statements : ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement );
	public final PLSQLParser.transaction_control_statements_return transaction_control_statements() throws RecognitionException {
		PLSQLParser.transaction_control_statements_return retval = new PLSQLParser.transaction_control_statements_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope set_transaction_command1112 =null;
		ParserRuleReturnScope set_constraint_command1113 =null;
		ParserRuleReturnScope commit_statement1114 =null;
		ParserRuleReturnScope rollback_statement1115 =null;
		ParserRuleReturnScope savepoint_statement1116 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1534:5: ( set_transaction_command | set_constraint_command | commit_statement | rollback_statement | savepoint_statement )
			int alt287=5;
			int LA287_0 = input.LA(1);
			if ( (LA287_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("commit"))||(input.LT(1).getText().equalsIgnoreCase("rollback"))||(input.LT(1).getText().equalsIgnoreCase("savepoint"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
				int LA287_1 = input.LA(2);
				if ( (LA287_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("savepoint"))||(input.LT(1).getText().equalsIgnoreCase("set"))))) {
					int LA287_2 = input.LA(3);
					if ( (LA287_2==DELIMITED_ID||LA287_2==INTRODUCER||LA287_2==REGULAR_ID||LA287_2==SQL92_RESERVED_ALL) && ((input.LT(1).getText().equalsIgnoreCase("set")))) {
						alt287=2;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("set"))) ) {
						alt287=1;
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("savepoint"))) ) {
						alt287=5;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 287, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA287_1==DELIMITED_ID||LA287_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {
					alt287=5;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("commit"))) ) {
					alt287=3;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("rollback"))) ) {
					alt287=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 287, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt287) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1534:10: set_transaction_command
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_set_transaction_command_in_transaction_control_statements15062);
					set_transaction_command1112=set_transaction_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_command1112.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1535:10: set_constraint_command
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_set_constraint_command_in_transaction_control_statements15073);
					set_constraint_command1113=set_constraint_command();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, set_constraint_command1113.getTree());

					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1536:10: commit_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_commit_statement_in_transaction_control_statements15084);
					commit_statement1114=commit_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement1114.getTree());

					}
					break;
				case 4 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1537:10: rollback_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_rollback_statement_in_transaction_control_statements15095);
					rollback_statement1115=rollback_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement1115.getTree());

					}
					break;
				case 5 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1538:10: savepoint_statement
					{
					root_0 = (Object)adaptor.nil();


					pushFollow(FOLLOW_savepoint_statement_in_transaction_control_statements15106);
					savepoint_statement1116=savepoint_statement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement1116.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transaction_control_statements"


	public static class set_transaction_command_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "set_transaction_command"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1541:1: set_transaction_command : set_key transaction_key ( read_key ( only_key | write_key ) | isolation_key level_key ( serializable_key | read_key committed_key ) | use_key rollback_key segment_key rollback_segment_name )? ( name_key quoted_string )? -> {mode == 1}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( read_key ( only_key )? ( write_key )? ) ) -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( isolation_key ( serializable_key )? ( committed_key )? ) ) -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( rollback_key rollback_segment_name ) ) -> ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ) ;
	public final PLSQLParser.set_transaction_command_return set_transaction_command() throws RecognitionException {
		PLSQLParser.set_transaction_command_return retval = new PLSQLParser.set_transaction_command_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope set_key1117 =null;
		ParserRuleReturnScope transaction_key1118 =null;
		ParserRuleReturnScope read_key1119 =null;
		ParserRuleReturnScope only_key1120 =null;
		ParserRuleReturnScope write_key1121 =null;
		ParserRuleReturnScope isolation_key1122 =null;
		ParserRuleReturnScope level_key1123 =null;
		ParserRuleReturnScope serializable_key1124 =null;
		ParserRuleReturnScope read_key1125 =null;
		ParserRuleReturnScope committed_key1126 =null;
		ParserRuleReturnScope use_key1127 =null;
		ParserRuleReturnScope rollback_key1128 =null;
		ParserRuleReturnScope segment_key1129 =null;
		ParserRuleReturnScope rollback_segment_name1130 =null;
		ParserRuleReturnScope name_key1131 =null;
		ParserRuleReturnScope quoted_string1132 =null;

		RewriteRuleSubtreeStream stream_serializable_key=new RewriteRuleSubtreeStream(adaptor,"rule serializable_key");
		RewriteRuleSubtreeStream stream_level_key=new RewriteRuleSubtreeStream(adaptor,"rule level_key");
		RewriteRuleSubtreeStream stream_rollback_key=new RewriteRuleSubtreeStream(adaptor,"rule rollback_key");
		RewriteRuleSubtreeStream stream_segment_key=new RewriteRuleSubtreeStream(adaptor,"rule segment_key");
		RewriteRuleSubtreeStream stream_write_key=new RewriteRuleSubtreeStream(adaptor,"rule write_key");
		RewriteRuleSubtreeStream stream_name_key=new RewriteRuleSubtreeStream(adaptor,"rule name_key");
		RewriteRuleSubtreeStream stream_transaction_key=new RewriteRuleSubtreeStream(adaptor,"rule transaction_key");
		RewriteRuleSubtreeStream stream_use_key=new RewriteRuleSubtreeStream(adaptor,"rule use_key");
		RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
		RewriteRuleSubtreeStream stream_isolation_key=new RewriteRuleSubtreeStream(adaptor,"rule isolation_key");
		RewriteRuleSubtreeStream stream_committed_key=new RewriteRuleSubtreeStream(adaptor,"rule committed_key");
		RewriteRuleSubtreeStream stream_rollback_segment_name=new RewriteRuleSubtreeStream(adaptor,"rule rollback_segment_name");
		RewriteRuleSubtreeStream stream_read_key=new RewriteRuleSubtreeStream(adaptor,"rule read_key");
		RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
		RewriteRuleSubtreeStream stream_only_key=new RewriteRuleSubtreeStream(adaptor,"rule only_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1543:5: ( set_key transaction_key ( read_key ( only_key | write_key ) | isolation_key level_key ( serializable_key | read_key committed_key ) | use_key rollback_key segment_key rollback_segment_name )? ( name_key quoted_string )? -> {mode == 1}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( read_key ( only_key )? ( write_key )? ) ) -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( isolation_key ( serializable_key )? ( committed_key )? ) ) -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( rollback_key rollback_segment_name ) ) -> ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1543:10: set_key transaction_key ( read_key ( only_key | write_key ) | isolation_key level_key ( serializable_key | read_key committed_key ) | use_key rollback_key segment_key rollback_segment_name )? ( name_key quoted_string )?
			{
			pushFollow(FOLLOW_set_key_in_set_transaction_command15134);
			set_key1117=set_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_set_key.add(set_key1117.getTree());
			pushFollow(FOLLOW_transaction_key_in_set_transaction_command15136);
			transaction_key1118=transaction_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_transaction_key.add(transaction_key1118.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1544:5: ( read_key ( only_key | write_key ) | isolation_key level_key ( serializable_key | read_key committed_key ) | use_key rollback_key segment_key rollback_segment_name )?
			int alt290=4;
			int LA290_0 = input.LA(1);
			if ( (LA290_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("isolation"))||(input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("use"))||(input.LT(1).getText().equalsIgnoreCase("name"))||(input.LT(1).getText().equalsIgnoreCase("read"))))) {
				int LA290_1 = input.LA(2);
				if ( (LA290_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("isolation"))||(input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("use"))||(input.LT(1).getText().equalsIgnoreCase("read"))))) {
					int LA290_3 = input.LA(3);
					if ( (LA290_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("isolation"))||(input.LT(1).getText().equalsIgnoreCase("use"))))) {
						int LA290_5 = input.LA(4);
						if ( (LA290_5==EOF||LA290_5==SEMICOLON) && ((input.LT(1).getText().equalsIgnoreCase("isolation")))) {
							alt290=2;
						}
						else if ( (LA290_5==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("isolation"))||(input.LT(1).getText().equalsIgnoreCase("use"))))) {
							int LA290_8 = input.LA(5);
							if ( ((input.LT(1).getText().equalsIgnoreCase("isolation"))) ) {
								alt290=2;
							}
							else if ( ((input.LT(1).getText().equalsIgnoreCase("use"))) ) {
								alt290=3;
							}
						}
						else if ( (LA290_5==DELIMITED_ID||LA290_5==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("use")))) {
							alt290=3;
						}
					}
					else if ( ((input.LT(1).getText().equalsIgnoreCase("read"))) ) {
						alt290=1;
					}
				}
			}
			switch (alt290) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1544:10: read_key ( only_key | write_key )
					{
					pushFollow(FOLLOW_read_key_in_set_transaction_command15148);
					read_key1119=read_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_read_key.add(read_key1119.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1544:19: ( only_key | write_key )
					int alt288=2;
					int LA288_0 = input.LA(1);
					if ( (LA288_0==REGULAR_ID) ) {
						int LA288_1 = input.LA(2);
						if ( ((input.LT(1).getText().equalsIgnoreCase("only"))) ) {
							alt288=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("write"))) ) {
							alt288=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 288, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 288, 0, input);
						throw nvae;
					}

					switch (alt288) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1544:20: only_key
							{
							pushFollow(FOLLOW_only_key_in_set_transaction_command15151);
							only_key1120=only_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_only_key.add(only_key1120.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1544:29: write_key
							{
							pushFollow(FOLLOW_write_key_in_set_transaction_command15153);
							write_key1121=write_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_write_key.add(write_key1121.getTree());
							}
							break;

					}

					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1545:10: isolation_key level_key ( serializable_key | read_key committed_key )
					{
					pushFollow(FOLLOW_isolation_key_in_set_transaction_command15168);
					isolation_key1122=isolation_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_isolation_key.add(isolation_key1122.getTree());
					pushFollow(FOLLOW_level_key_in_set_transaction_command15170);
					level_key1123=level_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_level_key.add(level_key1123.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1545:34: ( serializable_key | read_key committed_key )
					int alt289=2;
					int LA289_0 = input.LA(1);
					if ( (LA289_0==REGULAR_ID) ) {
						int LA289_1 = input.LA(2);
						if ( (LA289_1==EOF||LA289_1==SEMICOLON) ) {
							alt289=1;
						}
						else if ( (LA289_1==REGULAR_ID) ) {
							int LA289_3 = input.LA(3);
							if ( (LA289_3==EOF||LA289_3==SEMICOLON) && ((input.LT(1).getText().equalsIgnoreCase("read")))) {
								alt289=2;
							}
							else if ( ((LA289_3 >= CHAR_STRING && LA289_3 <= CHAR_STRING_PERL)||LA289_3==NATIONAL_CHAR_STRING_LIT) ) {
								alt289=1;
							}
							else if ( (LA289_3==REGULAR_ID) ) {
								int LA289_5 = input.LA(4);
								if ( (LA289_5==EOF||LA289_5==SEMICOLON) ) {
									alt289=1;
								}
								else if ( ((LA289_5 >= CHAR_STRING && LA289_5 <= CHAR_STRING_PERL)||LA289_5==NATIONAL_CHAR_STRING_LIT||LA289_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("read")))) {
									alt289=2;
								}

							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 289, 3, input);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 289, 1, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 289, 0, input);
						throw nvae;
					}

					switch (alt289) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1545:35: serializable_key
							{
							pushFollow(FOLLOW_serializable_key_in_set_transaction_command15173);
							serializable_key1124=serializable_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_serializable_key.add(serializable_key1124.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1545:52: read_key committed_key
							{
							pushFollow(FOLLOW_read_key_in_set_transaction_command15175);
							read_key1125=read_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_read_key.add(read_key1125.getTree());
							pushFollow(FOLLOW_committed_key_in_set_transaction_command15177);
							committed_key1126=committed_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_committed_key.add(committed_key1126.getTree());
							}
							break;

					}

					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;
				case 3 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1546:10: use_key rollback_key segment_key rollback_segment_name
					{
					pushFollow(FOLLOW_use_key_in_set_transaction_command15191);
					use_key1127=use_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_use_key.add(use_key1127.getTree());
					pushFollow(FOLLOW_rollback_key_in_set_transaction_command15193);
					rollback_key1128=rollback_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rollback_key.add(rollback_key1128.getTree());
					pushFollow(FOLLOW_segment_key_in_set_transaction_command15195);
					segment_key1129=segment_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_segment_key.add(segment_key1129.getTree());
					pushFollow(FOLLOW_rollback_segment_name_in_set_transaction_command15197);
					rollback_segment_name1130=rollback_segment_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rollback_segment_name.add(rollback_segment_name1130.getTree());
					if ( state.backtracking==0 ) {mode = 3;}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1548:9: ( name_key quoted_string )?
			int alt291=2;
			int LA291_0 = input.LA(1);
			if ( (LA291_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("name"))))) {
				int LA291_1 = input.LA(2);
				if ( ((LA291_1 >= CHAR_STRING && LA291_1 <= CHAR_STRING_PERL)||LA291_1==NATIONAL_CHAR_STRING_LIT) && ((input.LT(1).getText().equalsIgnoreCase("name")))) {
					alt291=1;
				}
			}
			switch (alt291) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1548:10: name_key quoted_string
					{
					pushFollow(FOLLOW_name_key_in_set_transaction_command15217);
					name_key1131=name_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_name_key.add(name_key1131.getTree());
					pushFollow(FOLLOW_quoted_string_in_set_transaction_command15219);
					quoted_string1132=quoted_string();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string1132.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: committed_key, quoted_string, read_key, quoted_string, quoted_string, only_key, serializable_key, isolation_key, write_key, quoted_string, rollback_key, rollback_segment_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1549:9: -> {mode == 1}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( read_key ( only_key )? ( write_key )? ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1549:24: ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( read_key ( only_key )? ( write_key )? ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SET_TRANSACTION, (set_key1117!=null?(set_key1117.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1549:58: ( quoted_string )?
				if ( stream_quoted_string.hasNext() ) {
					adaptor.addChild(root_1, stream_quoted_string.nextTree());
				}
				stream_quoted_string.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1549:73: ^( read_key ( only_key )? ( write_key )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_read_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1549:84: ( only_key )?
				if ( stream_only_key.hasNext() ) {
					adaptor.addChild(root_2, stream_only_key.nextTree());
				}
				stream_only_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1549:94: ( write_key )?
				if ( stream_write_key.hasNext() ) {
					adaptor.addChild(root_2, stream_write_key.nextTree());
				}
				stream_write_key.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1550:9: -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( isolation_key ( serializable_key )? ( committed_key )? ) )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1550:24: ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( isolation_key ( serializable_key )? ( committed_key )? ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SET_TRANSACTION, (set_key1117!=null?(set_key1117.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1550:58: ( quoted_string )?
				if ( stream_quoted_string.hasNext() ) {
					adaptor.addChild(root_1, stream_quoted_string.nextTree());
				}
				stream_quoted_string.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1550:73: ^( isolation_key ( serializable_key )? ( committed_key )? )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_isolation_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1550:89: ( serializable_key )?
				if ( stream_serializable_key.hasNext() ) {
					adaptor.addChild(root_2, stream_serializable_key.nextTree());
				}
				stream_serializable_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1550:107: ( committed_key )?
				if ( stream_committed_key.hasNext() ) {
					adaptor.addChild(root_2, stream_committed_key.nextTree());
				}
				stream_committed_key.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1551:9: -> {mode == 2}? ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( rollback_key rollback_segment_name ) )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1551:24: ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? ^( rollback_key rollback_segment_name ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SET_TRANSACTION, (set_key1117!=null?(set_key1117.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1551:58: ( quoted_string )?
				if ( stream_quoted_string.hasNext() ) {
					adaptor.addChild(root_1, stream_quoted_string.nextTree());
				}
				stream_quoted_string.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1551:73: ^( rollback_key rollback_segment_name )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_rollback_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_rollback_segment_name.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1552:9: -> ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1552:12: ^( SET_TRANSACTION[$set_key.start] ( quoted_string )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SET_TRANSACTION, (set_key1117!=null?(set_key1117.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1552:46: ( quoted_string )?
				if ( stream_quoted_string.hasNext() ) {
					adaptor.addChild(root_1, stream_quoted_string.nextTree());
				}
				stream_quoted_string.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_transaction_command"


	public static class set_constraint_command_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "set_constraint_command"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1555:1: set_constraint_command : set_key ( constraint_key | constraints_key ) ( all_key | constraint_name ( COMMA constraint_name )* ) ( immediate_key | deferred_key ) -> ^( SET_CONSTRAINT[$set_key.start] ( all_key )? ( constraint_name )* ( immediate_key )? ( deferred_key )? ) ;
	public final PLSQLParser.set_constraint_command_return set_constraint_command() throws RecognitionException {
		PLSQLParser.set_constraint_command_return retval = new PLSQLParser.set_constraint_command_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA1138=null;
		ParserRuleReturnScope set_key1133 =null;
		ParserRuleReturnScope constraint_key1134 =null;
		ParserRuleReturnScope constraints_key1135 =null;
		ParserRuleReturnScope all_key1136 =null;
		ParserRuleReturnScope constraint_name1137 =null;
		ParserRuleReturnScope constraint_name1139 =null;
		ParserRuleReturnScope immediate_key1140 =null;
		ParserRuleReturnScope deferred_key1141 =null;

		Object COMMA1138_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_constraint_key=new RewriteRuleSubtreeStream(adaptor,"rule constraint_key");
		RewriteRuleSubtreeStream stream_constraint_name=new RewriteRuleSubtreeStream(adaptor,"rule constraint_name");
		RewriteRuleSubtreeStream stream_set_key=new RewriteRuleSubtreeStream(adaptor,"rule set_key");
		RewriteRuleSubtreeStream stream_all_key=new RewriteRuleSubtreeStream(adaptor,"rule all_key");
		RewriteRuleSubtreeStream stream_constraints_key=new RewriteRuleSubtreeStream(adaptor,"rule constraints_key");
		RewriteRuleSubtreeStream stream_deferred_key=new RewriteRuleSubtreeStream(adaptor,"rule deferred_key");
		RewriteRuleSubtreeStream stream_immediate_key=new RewriteRuleSubtreeStream(adaptor,"rule immediate_key");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1556:5: ( set_key ( constraint_key | constraints_key ) ( all_key | constraint_name ( COMMA constraint_name )* ) ( immediate_key | deferred_key ) -> ^( SET_CONSTRAINT[$set_key.start] ( all_key )? ( constraint_name )* ( immediate_key )? ( deferred_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1556:10: set_key ( constraint_key | constraints_key ) ( all_key | constraint_name ( COMMA constraint_name )* ) ( immediate_key | deferred_key )
			{
			pushFollow(FOLLOW_set_key_in_set_constraint_command15342);
			set_key1133=set_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_set_key.add(set_key1133.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1556:18: ( constraint_key | constraints_key )
			int alt292=2;
			int LA292_0 = input.LA(1);
			if ( (LA292_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("constraint"))||(input.LT(1).getText().equalsIgnoreCase("constraints"))))) {
				int LA292_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("constraint"))) ) {
					alt292=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("constraints"))) ) {
					alt292=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 292, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt292) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1556:20: constraint_key
					{
					pushFollow(FOLLOW_constraint_key_in_set_constraint_command15346);
					constraint_key1134=constraint_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraint_key.add(constraint_key1134.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1556:37: constraints_key
					{
					pushFollow(FOLLOW_constraints_key_in_set_constraint_command15350);
					constraints_key1135=constraints_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraints_key.add(constraints_key1135.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1557:9: ( all_key | constraint_name ( COMMA constraint_name )* )
			int alt294=2;
			int LA294_0 = input.LA(1);
			if ( (LA294_0==SQL92_RESERVED_ALL) ) {
				alt294=1;
			}
			else if ( (LA294_0==DELIMITED_ID||LA294_0==INTRODUCER||LA294_0==REGULAR_ID) ) {
				alt294=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 294, 0, input);
				throw nvae;
			}

			switch (alt294) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1557:11: all_key
					{
					pushFollow(FOLLOW_all_key_in_set_constraint_command15364);
					all_key1136=all_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_all_key.add(all_key1136.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1557:21: constraint_name ( COMMA constraint_name )*
					{
					pushFollow(FOLLOW_constraint_name_in_set_constraint_command15368);
					constraint_name1137=constraint_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraint_name.add(constraint_name1137.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1557:37: ( COMMA constraint_name )*
					loop293:
					while (true) {
						int alt293=2;
						int LA293_0 = input.LA(1);
						if ( (LA293_0==COMMA) ) {
							alt293=1;
						}

						switch (alt293) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1557:38: COMMA constraint_name
							{
							COMMA1138=(Token)match(input,COMMA,FOLLOW_COMMA_in_set_constraint_command15371); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA1138);

							pushFollow(FOLLOW_constraint_name_in_set_constraint_command15373);
							constraint_name1139=constraint_name();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_constraint_name.add(constraint_name1139.getTree());
							}
							break;

						default :
							break loop293;
						}
					}

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1558:9: ( immediate_key | deferred_key )
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("immediate"))||(input.LT(1).getText().equalsIgnoreCase("deferred"))))) {
				int LA295_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("immediate"))) ) {
					alt295=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("deferred"))) ) {
					alt295=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 295, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			switch (alt295) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1558:10: immediate_key
					{
					pushFollow(FOLLOW_immediate_key_in_set_constraint_command15388);
					immediate_key1140=immediate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_immediate_key.add(immediate_key1140.getTree());
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1558:24: deferred_key
					{
					pushFollow(FOLLOW_deferred_key_in_set_constraint_command15390);
					deferred_key1141=deferred_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_deferred_key.add(deferred_key1141.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constraint_name, immediate_key, all_key, deferred_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1559:9: -> ^( SET_CONSTRAINT[$set_key.start] ( all_key )? ( constraint_name )* ( immediate_key )? ( deferred_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1559:12: ^( SET_CONSTRAINT[$set_key.start] ( all_key )? ( constraint_name )* ( immediate_key )? ( deferred_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SET_CONSTRAINT, (set_key1133!=null?(set_key1133.start):null)), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1559:45: ( all_key )?
				if ( stream_all_key.hasNext() ) {
					adaptor.addChild(root_1, stream_all_key.nextTree());
				}
				stream_all_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1559:54: ( constraint_name )*
				while ( stream_constraint_name.hasNext() ) {
					adaptor.addChild(root_1, stream_constraint_name.nextTree());
				}
				stream_constraint_name.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1559:71: ( immediate_key )?
				if ( stream_immediate_key.hasNext() ) {
					adaptor.addChild(root_1, stream_immediate_key.nextTree());
				}
				stream_immediate_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1559:86: ( deferred_key )?
				if ( stream_deferred_key.hasNext() ) {
					adaptor.addChild(root_1, stream_deferred_key.nextTree());
				}
				stream_deferred_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "set_constraint_command"


	public static class commit_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "commit_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1562:1: commit_statement : commit_key ( work_key )? ( comment_key expression | force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? ) )? ( write_clause )? -> {mode == 1}? ^( commit_key ( work_key )? ^( comment_key ^( EXPR expression ) ) ( write_clause )? ) -> {mode == 2}? ^( commit_key ( work_key )? ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ ) ( write_clause )? ) -> ^( commit_key ( work_key )? ( write_clause )? ) ;
	public final PLSQLParser.commit_statement_return commit_statement() throws RecognitionException {
		PLSQLParser.commit_statement_return retval = new PLSQLParser.commit_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token COMMA1151=null;
		ParserRuleReturnScope commit_key1142 =null;
		ParserRuleReturnScope work_key1143 =null;
		ParserRuleReturnScope comment_key1144 =null;
		ParserRuleReturnScope expression1145 =null;
		ParserRuleReturnScope force_key1146 =null;
		ParserRuleReturnScope corrupt_xid_key1147 =null;
		ParserRuleReturnScope expression1148 =null;
		ParserRuleReturnScope corrupt_xid_all_key1149 =null;
		ParserRuleReturnScope expression1150 =null;
		ParserRuleReturnScope expression1152 =null;
		ParserRuleReturnScope write_clause1153 =null;

		Object COMMA1151_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_commit_key=new RewriteRuleSubtreeStream(adaptor,"rule commit_key");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
		RewriteRuleSubtreeStream stream_work_key=new RewriteRuleSubtreeStream(adaptor,"rule work_key");
		RewriteRuleSubtreeStream stream_comment_key=new RewriteRuleSubtreeStream(adaptor,"rule comment_key");
		RewriteRuleSubtreeStream stream_corrupt_xid_key=new RewriteRuleSubtreeStream(adaptor,"rule corrupt_xid_key");
		RewriteRuleSubtreeStream stream_write_clause=new RewriteRuleSubtreeStream(adaptor,"rule write_clause");
		RewriteRuleSubtreeStream stream_corrupt_xid_all_key=new RewriteRuleSubtreeStream(adaptor,"rule corrupt_xid_all_key");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1564:5: ( commit_key ( work_key )? ( comment_key expression | force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? ) )? ( write_clause )? -> {mode == 1}? ^( commit_key ( work_key )? ^( comment_key ^( EXPR expression ) ) ( write_clause )? ) -> {mode == 2}? ^( commit_key ( work_key )? ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ ) ( write_clause )? ) -> ^( commit_key ( work_key )? ( write_clause )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1564:11: commit_key ( work_key )? ( comment_key expression | force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? ) )? ( write_clause )?
			{
			pushFollow(FOLLOW_commit_key_in_commit_statement15447);
			commit_key1142=commit_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_commit_key.add(commit_key1142.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1564:22: ( work_key )?
			int alt296=2;
			int LA296_0 = input.LA(1);
			if ( (LA296_0==REGULAR_ID) ) {
				int LA296_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("work"))) ) {
					alt296=1;
				}
			}
			switch (alt296) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1564:22: work_key
					{
					pushFollow(FOLLOW_work_key_in_commit_statement15449);
					work_key1143=work_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_work_key.add(work_key1143.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1565:5: ( comment_key expression | force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? ) )?
			int alt299=3;
			int LA299_0 = input.LA(1);
			if ( (LA299_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("force"))||(input.LT(1).getText().equalsIgnoreCase("comment"))||(input.LT(1).getText().equalsIgnoreCase("write"))||(input.LT(1).getText().equalsIgnoreCase("save"))))) {
				int LA299_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("comment"))) ) {
					alt299=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("force"))) ) {
					alt299=2;
				}
			}
			switch (alt299) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1565:10: comment_key expression
					{
					pushFollow(FOLLOW_comment_key_in_commit_statement15461);
					comment_key1144=comment_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_comment_key.add(comment_key1144.getTree());
					pushFollow(FOLLOW_expression_in_commit_statement15463);
					expression1145=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression1145.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1566:10: force_key ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? )
					{
					pushFollow(FOLLOW_force_key_in_commit_statement15476);
					force_key1146=force_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_force_key.add(force_key1146.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1566:20: ( corrupt_xid_key expression | corrupt_xid_all_key | expression ( COMMA expression )? )
					int alt298=3;
					int LA298_0 = input.LA(1);
					if ( (LA298_0==REGULAR_ID) ) {
						int LA298_1 = input.LA(2);
						if ( (LA298_1==APPROXIMATE_NUM_LIT||LA298_1==BINDVAR||(LA298_1 >= CHAR_STRING && LA298_1 <= COLON)||LA298_1==DELIMITED_ID||LA298_1==EXACT_NUM_LIT||LA298_1==INTRODUCER||LA298_1==LEFT_PAREN||LA298_1==MINUS_SIGN||LA298_1==NATIONAL_CHAR_STRING_LIT||LA298_1==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA298_1==PLUS_SIGN||LA298_1==REGULAR_ID||LA298_1==SQL92_RESERVED_ALL||LA298_1==SQL92_RESERVED_ANY||LA298_1==SQL92_RESERVED_CASE||(LA298_1 >= SQL92_RESERVED_CURSOR && LA298_1 <= SQL92_RESERVED_DATE)||(LA298_1 >= SQL92_RESERVED_DEFAULT && LA298_1 <= SQL92_RESERVED_DELETE)||LA298_1==SQL92_RESERVED_DISTINCT||(LA298_1 >= SQL92_RESERVED_EXISTS && LA298_1 <= SQL92_RESERVED_FALSE)||(LA298_1 >= SQL92_RESERVED_NOT && LA298_1 <= SQL92_RESERVED_NULL)||LA298_1==SQL92_RESERVED_PRIOR||LA298_1==SQL92_RESERVED_TRUE||LA298_1==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("corrupt_xid")))) {
							alt298=1;
						}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("corrupt_xid_all"))) ) {
							alt298=2;
						}
						else if ( (true) ) {
							alt298=3;
						}

					}
					else if ( (LA298_0==APPROXIMATE_NUM_LIT||LA298_0==BINDVAR||(LA298_0 >= CHAR_STRING && LA298_0 <= COLON)||LA298_0==DELIMITED_ID||LA298_0==EXACT_NUM_LIT||LA298_0==INTRODUCER||LA298_0==LEFT_PAREN||LA298_0==MINUS_SIGN||LA298_0==NATIONAL_CHAR_STRING_LIT||LA298_0==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA298_0==PLUS_SIGN||LA298_0==SQL92_RESERVED_ALL||LA298_0==SQL92_RESERVED_ANY||LA298_0==SQL92_RESERVED_CASE||(LA298_0 >= SQL92_RESERVED_CURSOR && LA298_0 <= SQL92_RESERVED_DATE)||(LA298_0 >= SQL92_RESERVED_DEFAULT && LA298_0 <= SQL92_RESERVED_DELETE)||LA298_0==SQL92_RESERVED_DISTINCT||(LA298_0 >= SQL92_RESERVED_EXISTS && LA298_0 <= SQL92_RESERVED_FALSE)||(LA298_0 >= SQL92_RESERVED_NOT && LA298_0 <= SQL92_RESERVED_NULL)||LA298_0==SQL92_RESERVED_PRIOR||LA298_0==SQL92_RESERVED_TRUE||LA298_0==UNSIGNED_INTEGER) ) {
						alt298=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 298, 0, input);
						throw nvae;
					}

					switch (alt298) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1566:21: corrupt_xid_key expression
							{
							pushFollow(FOLLOW_corrupt_xid_key_in_commit_statement15479);
							corrupt_xid_key1147=corrupt_xid_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_corrupt_xid_key.add(corrupt_xid_key1147.getTree());
							pushFollow(FOLLOW_expression_in_commit_statement15481);
							expression1148=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression1148.getTree());
							}
							break;
						case 2 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1566:49: corrupt_xid_all_key
							{
							pushFollow(FOLLOW_corrupt_xid_all_key_in_commit_statement15484);
							corrupt_xid_all_key1149=corrupt_xid_all_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_corrupt_xid_all_key.add(corrupt_xid_all_key1149.getTree());
							}
							break;
						case 3 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1566:71: expression ( COMMA expression )?
							{
							pushFollow(FOLLOW_expression_in_commit_statement15488);
							expression1150=expression();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_expression.add(expression1150.getTree());
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1566:82: ( COMMA expression )?
							int alt297=2;
							int LA297_0 = input.LA(1);
							if ( (LA297_0==COMMA) ) {
								alt297=1;
							}
							switch (alt297) {
								case 1 :
									// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1566:83: COMMA expression
									{
									COMMA1151=(Token)match(input,COMMA,FOLLOW_COMMA_in_commit_statement15491); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_COMMA.add(COMMA1151);

									pushFollow(FOLLOW_expression_in_commit_statement15493);
									expression1152=expression();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_expression.add(expression1152.getTree());
									}
									break;

							}

							}
							break;

					}

					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1568:9: ( write_clause )?
			int alt300=2;
			int LA300_0 = input.LA(1);
			if ( (LA300_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("write"))||(input.LT(1).getText().equalsIgnoreCase("save"))))) {
				int LA300_1 = input.LA(2);
				if ( (LA300_1==EOF||LA300_1==PLSQL_RESERVED_NOWAIT||LA300_1==SEMICOLON) && ((input.LT(1).getText().equalsIgnoreCase("write")))) {
					alt300=1;
				}
				else if ( (LA300_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("write"))||(input.LT(1).getText().equalsIgnoreCase("save"))))) {
					int LA300_4 = input.LA(3);
					if ( ((input.LT(1).getText().equalsIgnoreCase("write"))) ) {
						alt300=1;
					}
				}
			}
			switch (alt300) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1568:9: write_clause
					{
					pushFollow(FOLLOW_write_clause_in_commit_statement15516);
					write_clause1153=write_clause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_write_clause.add(write_clause1153.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: work_key, comment_key, write_clause, work_key, corrupt_xid_all_key, commit_key, write_clause, commit_key, commit_key, expression, expression, work_key, force_key, corrupt_xid_key, write_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1569:9: -> {mode == 1}? ^( commit_key ( work_key )? ^( comment_key ^( EXPR expression ) ) ( write_clause )? )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1569:25: ^( commit_key ( work_key )? ^( comment_key ^( EXPR expression ) ) ( write_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_commit_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1569:38: ( work_key )?
				if ( stream_work_key.hasNext() ) {
					adaptor.addChild(root_1, stream_work_key.nextTree());
				}
				stream_work_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1569:48: ^( comment_key ^( EXPR expression ) )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_comment_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1569:62: ^( EXPR expression )
				{
				Object root_3 = (Object)adaptor.nil();
				root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);
				adaptor.addChild(root_3, stream_expression.nextTree());
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1569:82: ( write_clause )?
				if ( stream_write_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_write_clause.nextTree());
				}
				stream_write_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1570:9: -> {mode == 2}? ^( commit_key ( work_key )? ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ ) ( write_clause )? )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1570:25: ^( commit_key ( work_key )? ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ ) ( write_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_commit_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1570:38: ( work_key )?
				if ( stream_work_key.hasNext() ) {
					adaptor.addChild(root_1, stream_work_key.nextTree());
				}
				stream_work_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1570:48: ^( force_key ( corrupt_xid_key )? ( corrupt_xid_all_key )? ( ^( EXPR expression ) )+ )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_force_key.nextNode(), root_2);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1570:60: ( corrupt_xid_key )?
				if ( stream_corrupt_xid_key.hasNext() ) {
					adaptor.addChild(root_2, stream_corrupt_xid_key.nextTree());
				}
				stream_corrupt_xid_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1570:77: ( corrupt_xid_all_key )?
				if ( stream_corrupt_xid_all_key.hasNext() ) {
					adaptor.addChild(root_2, stream_corrupt_xid_all_key.nextTree());
				}
				stream_corrupt_xid_all_key.reset();

				if ( !(stream_expression.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.hasNext() ) {
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1570:98: ^( EXPR expression )
					{
					Object root_3 = (Object)adaptor.nil();
					root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPR, "EXPR"), root_3);
					adaptor.addChild(root_3, stream_expression.nextTree());
					adaptor.addChild(root_2, root_3);
					}

				}
				stream_expression.reset();

				adaptor.addChild(root_1, root_2);
				}

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1570:119: ( write_clause )?
				if ( stream_write_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_write_clause.nextTree());
				}
				stream_write_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1571:9: -> ^( commit_key ( work_key )? ( write_clause )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1571:12: ^( commit_key ( work_key )? ( write_clause )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_commit_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1571:25: ( work_key )?
				if ( stream_work_key.hasNext() ) {
					adaptor.addChild(root_1, stream_work_key.nextTree());
				}
				stream_work_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1571:35: ( write_clause )?
				if ( stream_write_clause.hasNext() ) {
					adaptor.addChild(root_1, stream_write_clause.nextTree());
				}
				stream_write_clause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commit_statement"


	public static class write_clause_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "write_clause"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1574:1: write_clause : write_key ^ ( wait_key | nowait_key )? ( immediate_key | batch_key )? ;
	public final PLSQLParser.write_clause_return write_clause() throws RecognitionException {
		PLSQLParser.write_clause_return retval = new PLSQLParser.write_clause_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope write_key1154 =null;
		ParserRuleReturnScope wait_key1155 =null;
		ParserRuleReturnScope nowait_key1156 =null;
		ParserRuleReturnScope immediate_key1157 =null;
		ParserRuleReturnScope batch_key1158 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1575:5: ( write_key ^ ( wait_key | nowait_key )? ( immediate_key | batch_key )? )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1575:10: write_key ^ ( wait_key | nowait_key )? ( immediate_key | batch_key )?
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_write_key_in_write_clause15628);
			write_key1154=write_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(write_key1154.getTree(), root_0);
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1575:21: ( wait_key | nowait_key )?
			int alt301=3;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("batch"))||(input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("wait"))||(input.LT(1).getText().equalsIgnoreCase("immediate"))))) {
				int LA301_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("wait"))) ) {
					alt301=1;
				}
			}
			else if ( (LA301_0==PLSQL_RESERVED_NOWAIT) ) {
				alt301=2;
			}
			switch (alt301) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1575:22: wait_key
					{
					pushFollow(FOLLOW_wait_key_in_write_clause15632);
					wait_key1155=wait_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, wait_key1155.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1575:31: nowait_key
					{
					pushFollow(FOLLOW_nowait_key_in_write_clause15634);
					nowait_key1156=nowait_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, nowait_key1156.getTree());

					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1575:44: ( immediate_key | batch_key )?
			int alt302=3;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("batch"))||(input.LT(1).getText().equalsIgnoreCase("save"))||(input.LT(1).getText().equalsIgnoreCase("immediate"))))) {
				int LA302_1 = input.LA(2);
				if ( ((input.LT(1).getText().equalsIgnoreCase("immediate"))) ) {
					alt302=1;
				}
				else if ( ((input.LT(1).getText().equalsIgnoreCase("batch"))) ) {
					alt302=2;
				}
			}
			switch (alt302) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1575:45: immediate_key
					{
					pushFollow(FOLLOW_immediate_key_in_write_clause15639);
					immediate_key1157=immediate_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, immediate_key1157.getTree());

					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1575:59: batch_key
					{
					pushFollow(FOLLOW_batch_key_in_write_clause15641);
					batch_key1158=batch_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, batch_key1158.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "write_clause"


	public static class rollback_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "rollback_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1578:1: rollback_statement : rollback_key ( work_key )? ( to_key ( savepoint_key )? savepoint_name | force_key quoted_string )? -> {mode == 1}? ^( rollback_key ( work_key )? ^( to_key savepoint_name ) ) -> {mode == 2}? ^( rollback_key ( work_key )? ^( force_key quoted_string ) ) -> ^( rollback_key ( work_key )? ) ;
	public final PLSQLParser.rollback_statement_return rollback_statement() throws RecognitionException {
		PLSQLParser.rollback_statement_return retval = new PLSQLParser.rollback_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope rollback_key1159 =null;
		ParserRuleReturnScope work_key1160 =null;
		ParserRuleReturnScope to_key1161 =null;
		ParserRuleReturnScope savepoint_key1162 =null;
		ParserRuleReturnScope savepoint_name1163 =null;
		ParserRuleReturnScope force_key1164 =null;
		ParserRuleReturnScope quoted_string1165 =null;

		RewriteRuleSubtreeStream stream_to_key=new RewriteRuleSubtreeStream(adaptor,"rule to_key");
		RewriteRuleSubtreeStream stream_force_key=new RewriteRuleSubtreeStream(adaptor,"rule force_key");
		RewriteRuleSubtreeStream stream_savepoint_key=new RewriteRuleSubtreeStream(adaptor,"rule savepoint_key");
		RewriteRuleSubtreeStream stream_work_key=new RewriteRuleSubtreeStream(adaptor,"rule work_key");
		RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
		RewriteRuleSubtreeStream stream_rollback_key=new RewriteRuleSubtreeStream(adaptor,"rule rollback_key");
		RewriteRuleSubtreeStream stream_savepoint_name=new RewriteRuleSubtreeStream(adaptor,"rule savepoint_name");

		    int mode = 0;    
		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1580:5: ( rollback_key ( work_key )? ( to_key ( savepoint_key )? savepoint_name | force_key quoted_string )? -> {mode == 1}? ^( rollback_key ( work_key )? ^( to_key savepoint_name ) ) -> {mode == 2}? ^( rollback_key ( work_key )? ^( force_key quoted_string ) ) -> ^( rollback_key ( work_key )? ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1580:11: rollback_key ( work_key )? ( to_key ( savepoint_key )? savepoint_name | force_key quoted_string )?
			{
			pushFollow(FOLLOW_rollback_key_in_rollback_statement15672);
			rollback_key1159=rollback_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_rollback_key.add(rollback_key1159.getTree());
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1580:24: ( work_key )?
			int alt303=2;
			int LA303_0 = input.LA(1);
			if ( (LA303_0==REGULAR_ID) ) {
				int LA303_1 = input.LA(2);
				if ( (LA303_1==EOF||LA303_1==SEMICOLON||LA303_1==SQL92_RESERVED_TO) ) {
					alt303=1;
				}
				else if ( (LA303_1==REGULAR_ID) ) {
					int LA303_4 = input.LA(3);
					if ( ((LA303_4 >= CHAR_STRING && LA303_4 <= CHAR_STRING_PERL)||LA303_4==NATIONAL_CHAR_STRING_LIT||LA303_4==REGULAR_ID) ) {
						alt303=1;
					}
				}
			}
			switch (alt303) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1580:24: work_key
					{
					pushFollow(FOLLOW_work_key_in_rollback_statement15674);
					work_key1160=work_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_work_key.add(work_key1160.getTree());
					}
					break;

			}

			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1581:5: ( to_key ( savepoint_key )? savepoint_name | force_key quoted_string )?
			int alt305=3;
			int LA305_0 = input.LA(1);
			if ( (LA305_0==SQL92_RESERVED_TO) ) {
				alt305=1;
			}
			else if ( (LA305_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("force"))||(input.LT(1).getText().equalsIgnoreCase("save"))))) {
				int LA305_2 = input.LA(2);
				if ( ((LA305_2 >= CHAR_STRING && LA305_2 <= CHAR_STRING_PERL)||LA305_2==NATIONAL_CHAR_STRING_LIT) && ((input.LT(1).getText().equalsIgnoreCase("force")))) {
					alt305=2;
				}
			}
			switch (alt305) {
				case 1 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1581:11: to_key ( savepoint_key )? savepoint_name
					{
					pushFollow(FOLLOW_to_key_in_rollback_statement15687);
					to_key1161=to_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_to_key.add(to_key1161.getTree());
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1581:18: ( savepoint_key )?
					int alt304=2;
					int LA304_0 = input.LA(1);
					if ( (LA304_0==REGULAR_ID) ) {
						int LA304_1 = input.LA(2);
						if ( (LA304_1==DELIMITED_ID||LA304_1==INTRODUCER) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {
							alt304=1;
						}
						else if ( (LA304_1==REGULAR_ID) ) {
							int LA304_4 = input.LA(3);
							if ( (LA304_4==EOF||LA304_4==SEMICOLON) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {
								alt304=1;
							}
							else if ( (LA304_4==REGULAR_ID) ) {
								int LA304_5 = input.LA(4);
								if ( (LA304_5==REGULAR_ID) && ((input.LT(1).getText().equalsIgnoreCase("savepoint")))) {
									alt304=1;
								}
							}
						}
					}
					switch (alt304) {
						case 1 :
							// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1581:18: savepoint_key
							{
							pushFollow(FOLLOW_savepoint_key_in_rollback_statement15689);
							savepoint_key1162=savepoint_key();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_savepoint_key.add(savepoint_key1162.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_savepoint_name_in_rollback_statement15692);
					savepoint_name1163=savepoint_name();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_savepoint_name.add(savepoint_name1163.getTree());
					if ( state.backtracking==0 ) {mode = 1;}
					}
					break;
				case 2 :
					// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1582:10: force_key quoted_string
					{
					pushFollow(FOLLOW_force_key_in_rollback_statement15705);
					force_key1164=force_key();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_force_key.add(force_key1164.getTree());
					pushFollow(FOLLOW_quoted_string_in_rollback_statement15707);
					quoted_string1165=quoted_string();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string1165.getTree());
					if ( state.backtracking==0 ) {mode = 2;}
					}
					break;

			}

			// AST REWRITE
			// elements: work_key, rollback_key, work_key, to_key, quoted_string, rollback_key, savepoint_name, force_key, rollback_key, work_key
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1584:9: -> {mode == 1}? ^( rollback_key ( work_key )? ^( to_key savepoint_name ) )
			if (mode == 1) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1584:25: ^( rollback_key ( work_key )? ^( to_key savepoint_name ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_rollback_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1584:40: ( work_key )?
				if ( stream_work_key.hasNext() ) {
					adaptor.addChild(root_1, stream_work_key.nextTree());
				}
				stream_work_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1584:50: ^( to_key savepoint_name )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_to_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_savepoint_name.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1585:9: -> {mode == 2}? ^( rollback_key ( work_key )? ^( force_key quoted_string ) )
			if (mode == 2) {
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1585:25: ^( rollback_key ( work_key )? ^( force_key quoted_string ) )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_rollback_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1585:40: ( work_key )?
				if ( stream_work_key.hasNext() ) {
					adaptor.addChild(root_1, stream_work_key.nextTree());
				}
				stream_work_key.reset();

				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1585:50: ^( force_key quoted_string )
				{
				Object root_2 = (Object)adaptor.nil();
				root_2 = (Object)adaptor.becomeRoot(stream_force_key.nextNode(), root_2);
				adaptor.addChild(root_2, stream_quoted_string.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1586:9: -> ^( rollback_key ( work_key )? )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1586:12: ^( rollback_key ( work_key )? )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot(stream_rollback_key.nextNode(), root_1);
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1586:27: ( work_key )?
				if ( stream_work_key.hasNext() ) {
					adaptor.addChild(root_1, stream_work_key.nextTree());
				}
				stream_work_key.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollback_statement"


	public static class savepoint_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "savepoint_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1589:1: savepoint_statement : savepoint_key ^ savepoint_name ;
	public final PLSQLParser.savepoint_statement_return savepoint_statement() throws RecognitionException {
		PLSQLParser.savepoint_statement_return retval = new PLSQLParser.savepoint_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		ParserRuleReturnScope savepoint_key1166 =null;
		ParserRuleReturnScope savepoint_name1167 =null;


		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1590:5: ( savepoint_key ^ savepoint_name )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1590:10: savepoint_key ^ savepoint_name
			{
			root_0 = (Object)adaptor.nil();


			pushFollow(FOLLOW_savepoint_key_in_savepoint_statement15803);
			savepoint_key1166=savepoint_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(savepoint_key1166.getTree(), root_0);
			pushFollow(FOLLOW_savepoint_name_in_savepoint_statement15806);
			savepoint_name1167=savepoint_name();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_name1167.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "savepoint_statement"


	public static class pipe_row_statement_return extends ParserRuleReturnScope {
		Object tree;
		@Override
		public Object getTree() { return tree; }
	};


	// $ANTLR start "pipe_row_statement"
	// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1593:1: pipe_row_statement : pipe_key row_key LEFT_PAREN expression_wrapper RIGHT_PAREN -> ^( PIPE_ROW expression_wrapper ) ;
	public final PLSQLParser.pipe_row_statement_return pipe_row_statement() throws RecognitionException {
		PLSQLParser.pipe_row_statement_return retval = new PLSQLParser.pipe_row_statement_return();
		retval.start = input.LT(1);

		Object root_0 = null;

		Token LEFT_PAREN1170=null;
		Token RIGHT_PAREN1172=null;
		ParserRuleReturnScope pipe_key1168 =null;
		ParserRuleReturnScope row_key1169 =null;
		ParserRuleReturnScope expression_wrapper1171 =null;

		Object LEFT_PAREN1170_tree=null;
		Object RIGHT_PAREN1172_tree=null;
		RewriteRuleTokenStream stream_RIGHT_PAREN=new RewriteRuleTokenStream(adaptor,"token RIGHT_PAREN");
		RewriteRuleTokenStream stream_LEFT_PAREN=new RewriteRuleTokenStream(adaptor,"token LEFT_PAREN");
		RewriteRuleSubtreeStream stream_row_key=new RewriteRuleSubtreeStream(adaptor,"rule row_key");
		RewriteRuleSubtreeStream stream_pipe_key=new RewriteRuleSubtreeStream(adaptor,"rule pipe_key");
		RewriteRuleSubtreeStream stream_expression_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule expression_wrapper");

		try {
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1594:5: ( pipe_key row_key LEFT_PAREN expression_wrapper RIGHT_PAREN -> ^( PIPE_ROW expression_wrapper ) )
			// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1594:10: pipe_key row_key LEFT_PAREN expression_wrapper RIGHT_PAREN
			{
			pushFollow(FOLLOW_pipe_key_in_pipe_row_statement15831);
			pipe_key1168=pipe_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_pipe_key.add(pipe_key1168.getTree());
			pushFollow(FOLLOW_row_key_in_pipe_row_statement15833);
			row_key1169=row_key();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_row_key.add(row_key1169.getTree());
			LEFT_PAREN1170=(Token)match(input,LEFT_PAREN,FOLLOW_LEFT_PAREN_in_pipe_row_statement15835); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LEFT_PAREN.add(LEFT_PAREN1170);

			pushFollow(FOLLOW_expression_wrapper_in_pipe_row_statement15837);
			expression_wrapper1171=expression_wrapper();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression_wrapper.add(expression_wrapper1171.getTree());
			RIGHT_PAREN1172=(Token)match(input,RIGHT_PAREN,FOLLOW_RIGHT_PAREN_in_pipe_row_statement15839); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RIGHT_PAREN.add(RIGHT_PAREN1172);

			// AST REWRITE
			// elements: expression_wrapper
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (Object)adaptor.nil();
			// 1595:10: -> ^( PIPE_ROW expression_wrapper )
			{
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1595:13: ^( PIPE_ROW expression_wrapper )
				{
				Object root_1 = (Object)adaptor.nil();
				root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PIPE_ROW, "PIPE_ROW"), root_1);
				adaptor.addChild(root_1, stream_expression_wrapper.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (Object)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
			retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
		}
		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "pipe_row_statement"

	// $ANTLR start synpred1_PLSQLParser
	public final void synpred1_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:183:11: ( alter_function )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:183:11: alter_function
		{
		pushFollow(FOLLOW_alter_function_in_synpred1_PLSQLParser988);
		alter_function();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred1_PLSQLParser

	// $ANTLR start synpred2_PLSQLParser
	public final void synpred2_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:184:10: ( alter_package )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:184:10: alter_package
		{
		pushFollow(FOLLOW_alter_package_in_synpred2_PLSQLParser999);
		alter_package();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred2_PLSQLParser

	// $ANTLR start synpred3_PLSQLParser
	public final void synpred3_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:185:10: ( alter_procedure )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:185:10: alter_procedure
		{
		pushFollow(FOLLOW_alter_procedure_in_synpred3_PLSQLParser1010);
		alter_procedure();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred3_PLSQLParser

	// $ANTLR start synpred4_PLSQLParser
	public final void synpred4_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:186:10: ( alter_sequence )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:186:10: alter_sequence
		{
		pushFollow(FOLLOW_alter_sequence_in_synpred4_PLSQLParser1021);
		alter_sequence();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred4_PLSQLParser

	// $ANTLR start synpred5_PLSQLParser
	public final void synpred5_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:187:10: ( alter_trigger )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:187:10: alter_trigger
		{
		pushFollow(FOLLOW_alter_trigger_in_synpred5_PLSQLParser1032);
		alter_trigger();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred5_PLSQLParser

	// $ANTLR start synpred6_PLSQLParser
	public final void synpred6_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:188:10: ( alter_type )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:188:10: alter_type
		{
		pushFollow(FOLLOW_alter_type_in_synpred6_PLSQLParser1043);
		alter_type();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred6_PLSQLParser

	// $ANTLR start synpred7_PLSQLParser
	public final void synpred7_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:189:10: ( create_function_body )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:189:10: create_function_body
		{
		pushFollow(FOLLOW_create_function_body_in_synpred7_PLSQLParser1054);
		create_function_body();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred7_PLSQLParser

	// $ANTLR start synpred8_PLSQLParser
	public final void synpred8_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:190:10: ( create_procedure_body )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:190:10: create_procedure_body
		{
		pushFollow(FOLLOW_create_procedure_body_in_synpred8_PLSQLParser1065);
		create_procedure_body();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred8_PLSQLParser

	// $ANTLR start synpred9_PLSQLParser
	public final void synpred9_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:191:10: ( create_key ( or_key replace_key )? package_key )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:191:11: create_key ( or_key replace_key )? package_key
		{
		pushFollow(FOLLOW_create_key_in_synpred9_PLSQLParser1077);
		create_key();
		state._fsp--;
		if (state.failed) return;

		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:191:22: ( or_key replace_key )?
		int alt306=2;
		int LA306_0 = input.LA(1);
		if ( (LA306_0==SQL92_RESERVED_OR) ) {
			alt306=1;
		}
		switch (alt306) {
			case 1 :
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:191:24: or_key replace_key
				{
				pushFollow(FOLLOW_or_key_in_synpred9_PLSQLParser1081);
				or_key();
				state._fsp--;
				if (state.failed) return;

				pushFollow(FOLLOW_replace_key_in_synpred9_PLSQLParser1083);
				replace_key();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_package_key_in_synpred9_PLSQLParser1088);
		package_key();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred9_PLSQLParser

	// $ANTLR start synpred10_PLSQLParser
	public final void synpred10_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:192:10: ( create_sequence )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:192:10: create_sequence
		{
		pushFollow(FOLLOW_create_sequence_in_synpred10_PLSQLParser1102);
		create_sequence();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred10_PLSQLParser

	// $ANTLR start synpred11_PLSQLParser
	public final void synpred11_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:196:10: ( create_view )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:196:10: create_view
		{
		pushFollow(FOLLOW_create_view_in_synpred11_PLSQLParser1116);
		create_view();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred11_PLSQLParser

	// $ANTLR start synpred12_PLSQLParser
	public final void synpred12_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:200:10: ( create_trigger )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:200:10: create_trigger
		{
		pushFollow(FOLLOW_create_trigger_in_synpred12_PLSQLParser1131);
		create_trigger();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred12_PLSQLParser

	// $ANTLR start synpred13_PLSQLParser
	public final void synpred13_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:201:10: ( create_type )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:201:10: create_type
		{
		pushFollow(FOLLOW_create_type_in_synpred13_PLSQLParser1142);
		create_type();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred13_PLSQLParser

	// $ANTLR start synpred14_PLSQLParser
	public final void synpred14_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:202:10: ( drop_function )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:202:10: drop_function
		{
		pushFollow(FOLLOW_drop_function_in_synpred14_PLSQLParser1153);
		drop_function();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred14_PLSQLParser

	// $ANTLR start synpred15_PLSQLParser
	public final void synpred15_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:203:10: ( drop_package )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:203:10: drop_package
		{
		pushFollow(FOLLOW_drop_package_in_synpred15_PLSQLParser1164);
		drop_package();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred15_PLSQLParser

	// $ANTLR start synpred16_PLSQLParser
	public final void synpred16_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:204:10: ( drop_procedure )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:204:10: drop_procedure
		{
		pushFollow(FOLLOW_drop_procedure_in_synpred16_PLSQLParser1175);
		drop_procedure();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred16_PLSQLParser

	// $ANTLR start synpred17_PLSQLParser
	public final void synpred17_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:205:10: ( drop_sequence )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:205:10: drop_sequence
		{
		pushFollow(FOLLOW_drop_sequence_in_synpred17_PLSQLParser1186);
		drop_sequence();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred17_PLSQLParser

	// $ANTLR start synpred18_PLSQLParser
	public final void synpred18_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:206:10: ( drop_trigger )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:206:10: drop_trigger
		{
		pushFollow(FOLLOW_drop_trigger_in_synpred18_PLSQLParser1197);
		drop_trigger();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred18_PLSQLParser

	// $ANTLR start synpred19_PLSQLParser
	public final void synpred19_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:345:11: ( variable_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:345:11: variable_declaration
		{
		pushFollow(FOLLOW_variable_declaration_in_synpred19_PLSQLParser2927);
		variable_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred19_PLSQLParser

	// $ANTLR start synpred20_PLSQLParser
	public final void synpred20_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:346:11: ( subtype_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:346:11: subtype_declaration
		{
		pushFollow(FOLLOW_subtype_declaration_in_synpred20_PLSQLParser2939);
		subtype_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred20_PLSQLParser

	// $ANTLR start synpred22_PLSQLParser
	public final void synpred22_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:348:11: ( exception_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:348:11: exception_declaration
		{
		pushFollow(FOLLOW_exception_declaration_in_synpred22_PLSQLParser2963);
		exception_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred22_PLSQLParser

	// $ANTLR start synpred23_PLSQLParser
	public final void synpred23_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:349:11: ( record_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:349:11: record_declaration
		{
		pushFollow(FOLLOW_record_declaration_in_synpred23_PLSQLParser2975);
		record_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred23_PLSQLParser

	// $ANTLR start synpred24_PLSQLParser
	public final void synpred24_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:350:11: ( table_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:350:11: table_declaration
		{
		pushFollow(FOLLOW_table_declaration_in_synpred24_PLSQLParser2987);
		table_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred24_PLSQLParser

	// $ANTLR start synpred26_PLSQLParser
	public final void synpred26_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:352:11: ( function_spec )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:352:11: function_spec
		{
		pushFollow(FOLLOW_function_spec_in_synpred26_PLSQLParser3011);
		function_spec();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred26_PLSQLParser

	// $ANTLR start synpred27_PLSQLParser
	public final void synpred27_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:378:12: ( procedure_spec )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:378:12: procedure_spec
		{
		pushFollow(FOLLOW_procedure_spec_in_synpred27_PLSQLParser3310);
		procedure_spec();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred27_PLSQLParser

	// $ANTLR start synpred28_PLSQLParser
	public final void synpred28_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:379:11: ( function_spec )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:379:11: function_spec
		{
		pushFollow(FOLLOW_function_spec_in_synpred28_PLSQLParser3322);
		function_spec();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred28_PLSQLParser

	// $ANTLR start synpred29_PLSQLParser
	public final void synpred29_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:380:11: ( variable_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:380:11: variable_declaration
		{
		pushFollow(FOLLOW_variable_declaration_in_synpred29_PLSQLParser3334);
		variable_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred29_PLSQLParser

	// $ANTLR start synpred30_PLSQLParser
	public final void synpred30_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:381:11: ( subtype_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:381:11: subtype_declaration
		{
		pushFollow(FOLLOW_subtype_declaration_in_synpred30_PLSQLParser3347);
		subtype_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred30_PLSQLParser

	// $ANTLR start synpred32_PLSQLParser
	public final void synpred32_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:383:11: ( exception_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:383:11: exception_declaration
		{
		pushFollow(FOLLOW_exception_declaration_in_synpred32_PLSQLParser3373);
		exception_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred32_PLSQLParser

	// $ANTLR start synpred33_PLSQLParser
	public final void synpred33_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:384:11: ( record_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:384:11: record_declaration
		{
		pushFollow(FOLLOW_record_declaration_in_synpred33_PLSQLParser3386);
		record_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred33_PLSQLParser

	// $ANTLR start synpred34_PLSQLParser
	public final void synpred34_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:385:11: ( table_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:385:11: table_declaration
		{
		pushFollow(FOLLOW_table_declaration_in_synpred34_PLSQLParser3398);
		table_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred34_PLSQLParser

	// $ANTLR start synpred35_PLSQLParser
	public final void synpred35_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:386:11: ( create_procedure_body )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:386:11: create_procedure_body
		{
		pushFollow(FOLLOW_create_procedure_body_in_synpred35_PLSQLParser3410);
		create_procedure_body();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred35_PLSQLParser

	// $ANTLR start synpred36_PLSQLParser
	public final void synpred36_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:502:10: ( compound_key trigger_key )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:502:11: compound_key trigger_key
		{
		pushFollow(FOLLOW_compound_key_in_synpred36_PLSQLParser4751);
		compound_key();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_trigger_key_in_synpred36_PLSQLParser4753);
		trigger_key();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred36_PLSQLParser

	// $ANTLR start synpred37_PLSQLParser
	public final void synpred37_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:503:10: ( call_key id )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:503:11: call_key id
		{
		pushFollow(FOLLOW_call_key_in_synpred37_PLSQLParser4769);
		call_key();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_id_in_synpred37_PLSQLParser4771);
		id();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred37_PLSQLParser

	// $ANTLR start synpred38_PLSQLParser
	public final void synpred38_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:11: ( id type_spec ( sqlj_object_type_attr )? )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:11: id type_spec ( sqlj_object_type_attr )?
		{
		pushFollow(FOLLOW_id_in_synpred38_PLSQLParser8131);
		id();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_type_spec_in_synpred38_PLSQLParser8133);
		type_spec();
		state._fsp--;
		if (state.failed) return;

		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:24: ( sqlj_object_type_attr )?
		int alt307=2;
		int LA307_0 = input.LA(1);
		if ( (LA307_0==REGULAR_ID) ) {
			alt307=1;
		}
		switch (alt307) {
			case 1 :
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:803:24: sqlj_object_type_attr
				{
				pushFollow(FOLLOW_sqlj_object_type_attr_in_synpred38_PLSQLParser8135);
				sqlj_object_type_attr();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		}

	}
	// $ANTLR end synpred38_PLSQLParser

	// $ANTLR start synpred39_PLSQLParser
	public final void synpred39_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:975:10: ( constraint_state_item )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:975:11: constraint_state_item
		{
		pushFollow(FOLLOW_constraint_state_item_in_synpred39_PLSQLParser9863);
		constraint_state_item();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred39_PLSQLParser

	// $ANTLR start synpred40_PLSQLParser
	public final void synpred40_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1140:11: ( variable_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1140:11: variable_declaration
		{
		pushFollow(FOLLOW_variable_declaration_in_synpred40_PLSQLParser11221);
		variable_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred40_PLSQLParser

	// $ANTLR start synpred41_PLSQLParser
	public final void synpred41_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1141:11: ( subtype_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1141:11: subtype_declaration
		{
		pushFollow(FOLLOW_subtype_declaration_in_synpred41_PLSQLParser11233);
		subtype_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred41_PLSQLParser

	// $ANTLR start synpred43_PLSQLParser
	public final void synpred43_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1143:11: ( exception_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1143:11: exception_declaration
		{
		pushFollow(FOLLOW_exception_declaration_in_synpred43_PLSQLParser11257);
		exception_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred43_PLSQLParser

	// $ANTLR start synpred44_PLSQLParser
	public final void synpred44_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1144:11: ( pragma_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1144:11: pragma_declaration
		{
		pushFollow(FOLLOW_pragma_declaration_in_synpred44_PLSQLParser11269);
		pragma_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred44_PLSQLParser

	// $ANTLR start synpred45_PLSQLParser
	public final void synpred45_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1145:11: ( record_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1145:11: record_declaration
		{
		pushFollow(FOLLOW_record_declaration_in_synpred45_PLSQLParser11281);
		record_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred45_PLSQLParser

	// $ANTLR start synpred46_PLSQLParser
	public final void synpred46_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1146:11: ( table_declaration )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1146:11: table_declaration
		{
		pushFollow(FOLLOW_table_declaration_in_synpred46_PLSQLParser11293);
		table_declaration();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred46_PLSQLParser

	// $ANTLR start synpred47_PLSQLParser
	public final void synpred47_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1147:11: ( create_procedure_body )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1147:11: create_procedure_body
		{
		pushFollow(FOLLOW_create_procedure_body_in_synpred47_PLSQLParser11305);
		create_procedure_body();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred47_PLSQLParser

	// $ANTLR start synpred48_PLSQLParser
	public final void synpred48_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1148:11: ( create_function_body )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1148:11: create_function_body
		{
		pushFollow(FOLLOW_create_function_body_in_synpred48_PLSQLParser11317);
		create_function_body();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred48_PLSQLParser

	// $ANTLR start synpred49_PLSQLParser
	public final void synpred49_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1295:10: ( create_key swallow_to_semi ( SEMICOLON | EOF ) )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1295:10: create_key swallow_to_semi ( SEMICOLON | EOF )
		{
		pushFollow(FOLLOW_create_key_in_synpred49_PLSQLParser12925);
		create_key();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_swallow_to_semi_in_synpred49_PLSQLParser12927);
		swallow_to_semi();
		state._fsp--;
		if (state.failed) return;

		if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred49_PLSQLParser

	// $ANTLR start synpred52_PLSQLParser
	public final void synpred52_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1298:10: ( truncate_key swallow_to_semi ( SEMICOLON | EOF ) )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1298:10: truncate_key swallow_to_semi ( SEMICOLON | EOF )
		{
		pushFollow(FOLLOW_truncate_key_in_synpred52_PLSQLParser12984);
		truncate_key();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_swallow_to_semi_in_synpred52_PLSQLParser12986);
		swallow_to_semi();
		state._fsp--;
		if (state.failed) return;

		if ( input.LA(1)==EOF||input.LA(1)==SEMICOLON ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred52_PLSQLParser

	// $ANTLR start synpred53_PLSQLParser
	public final void synpred53_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1299:10: ( begin_key )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1299:11: begin_key
		{
		pushFollow(FOLLOW_begin_key_in_synpred53_PLSQLParser13005);
		begin_key();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred53_PLSQLParser

	// $ANTLR start synpred54_PLSQLParser
	public final void synpred54_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1300:10: ( declare_key )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1300:11: declare_key
		{
		pushFollow(FOLLOW_declare_key_in_synpred54_PLSQLParser13022);
		declare_key();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred54_PLSQLParser

	// $ANTLR start synpred55_PLSQLParser
	public final void synpred55_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1301:10: ( assignment_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1301:10: assignment_statement
		{
		pushFollow(FOLLOW_assignment_statement_in_synpred55_PLSQLParser13038);
		assignment_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred55_PLSQLParser

	// $ANTLR start synpred56_PLSQLParser
	public final void synpred56_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1302:10: ( continue_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1302:10: continue_statement
		{
		pushFollow(FOLLOW_continue_statement_in_synpred56_PLSQLParser13049);
		continue_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred56_PLSQLParser

	// $ANTLR start synpred57_PLSQLParser
	public final void synpred57_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1303:10: ( exit_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1303:10: exit_statement
		{
		pushFollow(FOLLOW_exit_statement_in_synpred57_PLSQLParser13060);
		exit_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred57_PLSQLParser

	// $ANTLR start synpred60_PLSQLParser
	public final void synpred60_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1306:10: ( loop_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1306:10: loop_statement
		{
		pushFollow(FOLLOW_loop_statement_in_synpred60_PLSQLParser13093);
		loop_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred60_PLSQLParser

	// $ANTLR start synpred61_PLSQLParser
	public final void synpred61_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1307:10: ( forall_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1307:10: forall_statement
		{
		pushFollow(FOLLOW_forall_statement_in_synpred61_PLSQLParser13104);
		forall_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred61_PLSQLParser

	// $ANTLR start synpred63_PLSQLParser
	public final void synpred63_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1309:10: ( raise_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1309:10: raise_statement
		{
		pushFollow(FOLLOW_raise_statement_in_synpred63_PLSQLParser13126);
		raise_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred63_PLSQLParser

	// $ANTLR start synpred64_PLSQLParser
	public final void synpred64_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1310:10: ( return_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1310:10: return_statement
		{
		pushFollow(FOLLOW_return_statement_in_synpred64_PLSQLParser13137);
		return_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred64_PLSQLParser

	// $ANTLR start synpred65_PLSQLParser
	public final void synpred65_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1311:10: ( pipe_row_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1311:10: pipe_row_statement
		{
		pushFollow(FOLLOW_pipe_row_statement_in_synpred65_PLSQLParser13148);
		pipe_row_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred65_PLSQLParser

	// $ANTLR start synpred67_PLSQLParser
	public final void synpred67_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1313:10: ( sql_statement )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1313:10: sql_statement
		{
		pushFollow(FOLLOW_sql_statement_in_synpred67_PLSQLParser13171);
		sql_statement();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred67_PLSQLParser

	// $ANTLR start synpred68_PLSQLParser
	public final void synpred68_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1372:10: ( index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD )
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1372:11: index_name in_key ( reverse_key )? lower_bound DOUBLE_PERIOD
		{
		pushFollow(FOLLOW_index_name_in_synpred68_PLSQLParser13761);
		index_name();
		state._fsp--;
		if (state.failed) return;

		pushFollow(FOLLOW_in_key_in_synpred68_PLSQLParser13763);
		in_key();
		state._fsp--;
		if (state.failed) return;

		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1372:29: ( reverse_key )?
		int alt308=2;
		int LA308_0 = input.LA(1);
		if ( (LA308_0==REGULAR_ID) ) {
			int LA308_1 = input.LA(2);
			if ( ((input.LT(1).getText().equalsIgnoreCase("reverse"))) ) {
				alt308=1;
			}
		}
		switch (alt308) {
			case 1 :
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1372:29: reverse_key
				{
				pushFollow(FOLLOW_reverse_key_in_synpred68_PLSQLParser13765);
				reverse_key();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}

		pushFollow(FOLLOW_lower_bound_in_synpred68_PLSQLParser13768);
		lower_bound();
		state._fsp--;
		if (state.failed) return;

		match(input,DOUBLE_PERIOD,FOLLOW_DOUBLE_PERIOD_in_synpred68_PLSQLParser13770); if (state.failed) return;

		}

	}
	// $ANTLR end synpred68_PLSQLParser

	// $ANTLR start synpred69_PLSQLParser
	public final void synpred69_PLSQLParser_fragment() throws RecognitionException {
		// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1522:10: ( select_key | with_key )
		int alt309=2;
		int LA309_0 = input.LA(1);
		if ( (LA309_0==SQL92_RESERVED_SELECT) ) {
			alt309=1;
		}
		else if ( (LA309_0==SQL92_RESERVED_WITH) ) {
			alt309=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 309, 0, input);
			throw nvae;
		}

		switch (alt309) {
			case 1 :
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1522:11: select_key
				{
				pushFollow(FOLLOW_select_key_in_synpred69_PLSQLParser14977);
				select_key();
				state._fsp--;
				if (state.failed) return;

				}
				break;
			case 2 :
				// F:\\Antlr\\plsql-postgresql-converter-master\\plsql-parser\\lexer-parser-walker/src/main/antlr3/br/com/porcelli/parser/plsql/PLSQLParser.g:1522:22: with_key
				{
				pushFollow(FOLLOW_with_key_in_synpred69_PLSQLParser14979);
				with_key();
				state._fsp--;
				if (state.failed) return;

				}
				break;

		}
	}
	// $ANTLR end synpred69_PLSQLParser

	// Delegated rules
	public PLSQLParser_PLSQLKeys.sysdate_key_return sysdate_key() throws RecognitionException { return gPLSQLKeys.sysdate_key(); }

	public PLSQLParser_PLSQLCommons.main_model_name_return main_model_name() throws RecognitionException { return gPLSQLCommons.main_model_name(); }

	public PLSQLParser_PLSQL_DMLParser.single_column_for_loop_return single_column_for_loop() throws RecognitionException { return gPLSQL_DMLParser.single_column_for_loop(); }

	public PLSQLParser_PLSQL_DMLParser.quantified_expression_return quantified_expression() throws RecognitionException { return gPLSQL_DMLParser.quantified_expression(); }

	public PLSQLParser_PLSQLKeys.guard_key_return guard_key() throws RecognitionException { return gPLSQLKeys.guard_key(); }

	public PLSQLParser_PLSQL_DMLParser.conditional_insert_else_part_return conditional_insert_else_part() throws RecognitionException { return gPLSQL_DMLParser.conditional_insert_else_part(); }

	public PLSQLParser_PLSQL_DMLParser.order_by_clause_return order_by_clause() throws RecognitionException { return gPLSQL_DMLParser.order_by_clause(); }

	public PLSQLParser_PLSQLCommons.parameter_name_return parameter_name() throws RecognitionException { return gPLSQLCommons.parameter_name(); }

	public PLSQLParser_PLSQLKeys.a_key_return a_key() throws RecognitionException { return gPLSQLKeys.a_key(); }

	public PLSQLParser_PLSQLKeys.document_key_return document_key() throws RecognitionException { return gPLSQLKeys.document_key(); }

	public PLSQLParser_PLSQLCommons.quoted_string_return quoted_string() throws RecognitionException { return gPLSQLCommons.quoted_string(); }

	public PLSQLParser_PLSQLKeys.rtrim_key_return rtrim_key() throws RecognitionException { return gPLSQLKeys.rtrim_key(); }

	public PLSQLParser_PLSQLKeys.dml_key_return dml_key() throws RecognitionException { return gPLSQLKeys.dml_key(); }

	public PLSQLParser_PLSQLKeys.scn_key_return scn_key() throws RecognitionException { return gPLSQLKeys.scn_key(); }

	public PLSQLParser_PLSQLKeys.pragma_key_return pragma_key() throws RecognitionException { return gPLSQLKeys.pragma_key(); }

	public PLSQLParser_PLSQL_DMLParser.query_partition_clause_return query_partition_clause() throws RecognitionException { return gPLSQL_DMLParser.query_partition_clause(); }

	public PLSQLParser_PLSQL_DMLParser.subquery_restriction_clause_return subquery_restriction_clause() throws RecognitionException { return gPLSQL_DMLParser.subquery_restriction_clause(); }

	public PLSQLParser_PLSQLKeys.collect_key_return collect_key() throws RecognitionException { return gPLSQLKeys.collect_key(); }

	public PLSQLParser_PLSQL_DMLParser.searched_case_statement_return searched_case_statement() throws RecognitionException { return gPLSQL_DMLParser.searched_case_statement(); }

	public PLSQLParser_PLSQLKeys.subpartition_key_return subpartition_key() throws RecognitionException { return gPLSQLKeys.subpartition_key(); }

	public PLSQLParser_PLSQLCommons.record_name_return record_name() throws RecognitionException { return gPLSQLCommons.record_name(); }

	public PLSQLParser_PLSQLCommons.datatype_return datatype() throws RecognitionException { return gPLSQLCommons.datatype(); }

	public PLSQLParser_PLSQLKeys.delete_key_return delete_key() throws RecognitionException { return gPLSQLKeys.delete_key(); }

	public PLSQLParser_PLSQLCommons.table_element_return table_element() throws RecognitionException { return gPLSQLCommons.table_element(); }

	public PLSQLParser_PLSQLKeys.reference_key_return reference_key() throws RecognitionException { return gPLSQLKeys.reference_key(); }

	public PLSQLParser_PLSQLKeys.enable_key_return enable_key() throws RecognitionException { return gPLSQLKeys.enable_key(); }

	public PLSQLParser_PLSQLKeys.timezone_abbr_key_return timezone_abbr_key() throws RecognitionException { return gPLSQLKeys.timezone_abbr_key(); }

	public PLSQLParser_PLSQL_DMLParser.sample_clause_return sample_clause() throws RecognitionException { return gPLSQL_DMLParser.sample_clause(); }

	public PLSQLParser_PLSQLKeys.audit_key_return audit_key() throws RecognitionException { return gPLSQLKeys.audit_key(); }

	public PLSQLParser_PLSQLKeys.noorder_key_return noorder_key() throws RecognitionException { return gPLSQLKeys.noorder_key(); }

	public PLSQLParser_PLSQLKeys.authid_key_return authid_key() throws RecognitionException { return gPLSQLKeys.authid_key(); }

	public PLSQLParser_PLSQLCommons.table_var_name_return table_var_name() throws RecognitionException { return gPLSQLCommons.table_var_name(); }

	public PLSQLParser_PLSQLKeys.percent_isopen_key_return percent_isopen_key() throws RecognitionException { return gPLSQLKeys.percent_isopen_key(); }

	public PLSQLParser_PLSQLKeys.urowid_key_return urowid_key() throws RecognitionException { return gPLSQLKeys.urowid_key(); }

	public PLSQLParser_PLSQLKeys.entityescaping_key_return entityescaping_key() throws RecognitionException { return gPLSQLKeys.entityescaping_key(); }

	public PLSQLParser_PLSQLKeys.desc_key_return desc_key() throws RecognitionException { return gPLSQLKeys.desc_key(); }

	public PLSQLParser_PLSQLKeys.as_key_return as_key() throws RecognitionException { return gPLSQLKeys.as_key(); }

	public PLSQLParser_PLSQLKeys.time_key_return time_key() throws RecognitionException { return gPLSQLKeys.time_key(); }

	public PLSQLParser_PLSQLKeys.multiset_key_return multiset_key() throws RecognitionException { return gPLSQLKeys.multiset_key(); }

	public PLSQLParser_PLSQLKeys.final_key_return final_key() throws RecognitionException { return gPLSQLKeys.final_key(); }

	public PLSQLParser_PLSQLKeys.precision_key_return precision_key() throws RecognitionException { return gPLSQLKeys.precision_key(); }

	public PLSQLParser_PLSQLKeys.unknown_key_return unknown_key() throws RecognitionException { return gPLSQLKeys.unknown_key(); }

	public PLSQLParser_PLSQLKeys.schema_key_return schema_key() throws RecognitionException { return gPLSQLKeys.schema_key(); }

	public PLSQLParser_PLSQLKeys.module_key_return module_key() throws RecognitionException { return gPLSQLKeys.module_key(); }

	public PLSQLParser_PLSQLKeys.disassociate_key_return disassociate_key() throws RecognitionException { return gPLSQLKeys.disassociate_key(); }

	public PLSQLParser_PLSQL_DMLParser.for_update_options_return for_update_options() throws RecognitionException { return gPLSQL_DMLParser.for_update_options(); }

	public PLSQLParser_PLSQLCommons.column_name_return column_name() throws RecognitionException { return gPLSQLCommons.column_name(); }

	public PLSQLParser_PLSQL_DMLParser.pivot_clause_return pivot_clause() throws RecognitionException { return gPLSQL_DMLParser.pivot_clause(); }

	public PLSQLParser_PLSQLCommons.rollback_segment_name_return rollback_segment_name() throws RecognitionException { return gPLSQLCommons.rollback_segment_name(); }

	public PLSQLParser_PLSQLKeys.binary_float_min_normal_key_return binary_float_min_normal_key() throws RecognitionException { return gPLSQLKeys.binary_float_min_normal_key(); }

	public PLSQLParser_PLSQLKeys.xmlexists_key_return xmlexists_key() throws RecognitionException { return gPLSQLKeys.xmlexists_key(); }

	public PLSQLParser_PLSQLKeys.logoff_key_return logoff_key() throws RecognitionException { return gPLSQLKeys.logoff_key(); }

	public PLSQLParser_PLSQLKeys.current_timestamp_key_return current_timestamp_key() throws RecognitionException { return gPLSQLKeys.current_timestamp_key(); }

	public PLSQLParser_PLSQLKeys.timestamp_key_return timestamp_key() throws RecognitionException { return gPLSQLKeys.timestamp_key(); }

	public PLSQLParser_PLSQLKeys.start_key_return start_key() throws RecognitionException { return gPLSQLKeys.start_key(); }

	public PLSQLParser_PLSQL_DMLParser.equality_expression_return equality_expression() throws RecognitionException { return gPLSQL_DMLParser.equality_expression(); }

	public PLSQLParser_PLSQLKeys.rows_key_return rows_key() throws RecognitionException { return gPLSQLKeys.rows_key(); }

	public PLSQLParser_PLSQLKeys.binary_double_min_subnormal_key_return binary_double_min_subnormal_key() throws RecognitionException { return gPLSQLKeys.binary_double_min_subnormal_key(); }

	public PLSQLParser_PLSQLKeys.extract_key_return extract_key() throws RecognitionException { return gPLSQLKeys.extract_key(); }

	public PLSQLParser_PLSQLKeys.numeric_key_return numeric_key() throws RecognitionException { return gPLSQLKeys.numeric_key(); }

	public PLSQLParser_PLSQLKeys.debug_key_return debug_key() throws RecognitionException { return gPLSQLKeys.debug_key(); }

	public PLSQLParser_PLSQLCommons.type_spec_return type_spec() throws RecognitionException { return gPLSQLCommons.type_spec(); }

	public PLSQLParser_PLSQLKeys.nocycle_key_return nocycle_key() throws RecognitionException { return gPLSQLKeys.nocycle_key(); }

	public PLSQLParser_PLSQLKeys.dump_key_return dump_key() throws RecognitionException { return gPLSQLKeys.dump_key(); }

	public PLSQLParser_PLSQLKeys.cycle_key_return cycle_key() throws RecognitionException { return gPLSQLKeys.cycle_key(); }

	public PLSQLParser_PLSQLKeys.skip_key_return skip_key() throws RecognitionException { return gPLSQLKeys.skip_key(); }

	public PLSQLParser_PLSQLKeys.xmlserialize_key_return xmlserialize_key() throws RecognitionException { return gPLSQLKeys.xmlserialize_key(); }

	public PLSQLParser_PLSQLKeys.day_key_return day_key() throws RecognitionException { return gPLSQLKeys.day_key(); }

	public PLSQLParser_PLSQLKeys.deferred_key_return deferred_key() throws RecognitionException { return gPLSQLKeys.deferred_key(); }

	public PLSQLParser_PLSQLKeys.nulls_key_return nulls_key() throws RecognitionException { return gPLSQLKeys.nulls_key(); }

	public PLSQLParser_PLSQLKeys.round_key_return round_key() throws RecognitionException { return gPLSQLKeys.round_key(); }

	public PLSQLParser_PLSQLKeys.locked_key_return locked_key() throws RecognitionException { return gPLSQLKeys.locked_key(); }

	public PLSQLParser_PLSQLKeys.infinite_key_return infinite_key() throws RecognitionException { return gPLSQLKeys.infinite_key(); }

	public PLSQLParser_PLSQL_DMLParser.negated_expression_return negated_expression() throws RecognitionException { return gPLSQL_DMLParser.negated_expression(); }

	public PLSQLParser_PLSQL_DMLParser.standard_function_return standard_function() throws RecognitionException { return gPLSQL_DMLParser.standard_function(); }

	public PLSQLParser_PLSQLCommons.function_name_return function_name() throws RecognitionException { return gPLSQLCommons.function_name(); }

	public PLSQLParser_PLSQL_DMLParser.reference_model_return reference_model() throws RecognitionException { return gPLSQL_DMLParser.reference_model(); }

	public PLSQLParser_PLSQLKeys.declare_key_return declare_key() throws RecognitionException { return gPLSQLKeys.declare_key(); }

	public PLSQLParser_PLSQLKeys.timestamp_unconstrained_key_return timestamp_unconstrained_key() throws RecognitionException { return gPLSQLKeys.timestamp_unconstrained_key(); }

	public PLSQLParser_PLSQL_DMLParser.cycle_clause_return cycle_clause() throws RecognitionException { return gPLSQL_DMLParser.cycle_clause(); }

	public PLSQLParser_PLSQLKeys.encoding_key_return encoding_key() throws RecognitionException { return gPLSQLKeys.encoding_key(); }

	public PLSQLParser_PLSQLKeys.default_key_return default_key() throws RecognitionException { return gPLSQLKeys.default_key(); }

	public PLSQLParser_PLSQLCommons.collection_name_return collection_name() throws RecognitionException { return gPLSQLCommons.collection_name(); }

	public PLSQLParser_PLSQL_DMLParser.multi_table_element_return multi_table_element() throws RecognitionException { return gPLSQL_DMLParser.multi_table_element(); }

	public PLSQLParser_PLSQLKeys.corrupt_xid_all_key_return corrupt_xid_all_key() throws RecognitionException { return gPLSQLKeys.corrupt_xid_all_key(); }

	public PLSQLParser_PLSQLKeys.revoke_key_return revoke_key() throws RecognitionException { return gPLSQLKeys.revoke_key(); }

	public PLSQLParser_PLSQLKeys.raw_key_return raw_key() throws RecognitionException { return gPLSQLKeys.raw_key(); }

	public PLSQLParser_PLSQLKeys.current_date_key_return current_date_key() throws RecognitionException { return gPLSQLKeys.current_date_key(); }

	public PLSQLParser_PLSQL_DMLParser.search_clause_return search_clause() throws RecognitionException { return gPLSQL_DMLParser.search_clause(); }

	public PLSQLParser_PLSQLKeys.distinct_key_return distinct_key() throws RecognitionException { return gPLSQLKeys.distinct_key(); }

	public PLSQLParser_PLSQLCommons.package_name_return package_name() throws RecognitionException { return gPLSQLCommons.package_name(); }

	public PLSQLParser_PLSQLCommons.bind_variable_return bind_variable() throws RecognitionException { return gPLSQLCommons.bind_variable(); }

	public PLSQLParser_PLSQLKeys.follows_key_return follows_key() throws RecognitionException { return gPLSQLKeys.follows_key(); }

	public PLSQLParser_PLSQLKeys.loop_key_return loop_key() throws RecognitionException { return gPLSQLKeys.loop_key(); }

	public PLSQLParser_PLSQLKeys.iterate_key_return iterate_key() throws RecognitionException { return gPLSQLKeys.iterate_key(); }

	public PLSQLParser_PLSQLKeys.decimal_key_return decimal_key() throws RecognitionException { return gPLSQLKeys.decimal_key(); }

	public PLSQLParser_PLSQLKeys.ascii_key_return ascii_key() throws RecognitionException { return gPLSQLKeys.ascii_key(); }

	public PLSQLParser_PLSQLKeys.constructor_key_return constructor_key() throws RecognitionException { return gPLSQLKeys.constructor_key(); }

	public PLSQLParser_PLSQLCommons.type_name_return type_name() throws RecognitionException { return gPLSQLCommons.type_name(); }

	public PLSQLParser_PLSQLKeys.join_key_return join_key() throws RecognitionException { return gPLSQLKeys.join_key(); }

	public PLSQLParser_PLSQLKeys.yes_key_return yes_key() throws RecognitionException { return gPLSQLKeys.yes_key(); }

	public PLSQLParser_PLSQLKeys.compile_key_return compile_key() throws RecognitionException { return gPLSQLKeys.compile_key(); }

	public PLSQLParser_PLSQLCommons.concatenation_op_return concatenation_op() throws RecognitionException { return gPLSQLCommons.concatenation_op(); }

	public PLSQLParser_PLSQLKeys.save_key_return save_key() throws RecognitionException { return gPLSQLKeys.save_key(); }

	public PLSQLParser_PLSQLKeys.int_key_return int_key() throws RecognitionException { return gPLSQLKeys.int_key(); }

	public PLSQLParser_PLSQL_DMLParser.case_else_part_return case_else_part() throws RecognitionException { return gPLSQL_DMLParser.case_else_part(); }

	public PLSQLParser_PLSQLKeys.merge_key_return merge_key() throws RecognitionException { return gPLSQLKeys.merge_key(); }

	public PLSQLParser_PLSQLKeys.rename_key_return rename_key() throws RecognitionException { return gPLSQLKeys.rename_key(); }

	public PLSQLParser_PLSQLKeys.xmlroot_key_return xmlroot_key() throws RecognitionException { return gPLSQLKeys.xmlroot_key(); }

	public PLSQLParser_PLSQLKeys.java_key_return java_key() throws RecognitionException { return gPLSQLKeys.java_key(); }

	public PLSQLParser_PLSQLKeys.cross_key_return cross_key() throws RecognitionException { return gPLSQLKeys.cross_key(); }

	public PLSQLParser_PLSQL_DMLParser.selected_tableview_return selected_tableview() throws RecognitionException { return gPLSQL_DMLParser.selected_tableview(); }

	public PLSQLParser_PLSQLCommons.aggregate_function_name_return aggregate_function_name() throws RecognitionException { return gPLSQLCommons.aggregate_function_name(); }

	public PLSQLParser_PLSQLKeys.call_key_return call_key() throws RecognitionException { return gPLSQLKeys.call_key(); }

	public PLSQLParser_PLSQLKeys.norely_key_return norely_key() throws RecognitionException { return gPLSQLKeys.norely_key(); }

	public PLSQLParser_PLSQLKeys.blob_key_return blob_key() throws RecognitionException { return gPLSQLKeys.blob_key(); }

	public PLSQLParser_PLSQL_DMLParser.error_logging_into_part_return error_logging_into_part() throws RecognitionException { return gPLSQL_DMLParser.error_logging_into_part(); }

	public PLSQLParser_PLSQLKeys.first_value_key_return first_value_key() throws RecognitionException { return gPLSQLKeys.first_value_key(); }

	public PLSQLParser_PLSQL_DMLParser.multi_table_insert_return multi_table_insert() throws RecognitionException { return gPLSQL_DMLParser.multi_table_insert(); }

	public PLSQLParser_PLSQL_DMLParser.main_model_return main_model() throws RecognitionException { return gPLSQL_DMLParser.main_model(); }

	public PLSQLParser_PLSQLKeys.xmlattributes_key_return xmlattributes_key() throws RecognitionException { return gPLSQLKeys.xmlattributes_key(); }

	public PLSQLParser_PLSQLKeys.inline_key_return inline_key() throws RecognitionException { return gPLSQLKeys.inline_key(); }

	public PLSQLParser_PLSQLKeys.month_key_return month_key() throws RecognitionException { return gPLSQLKeys.month_key(); }

	public PLSQLParser_PLSQLKeys.least_key_return least_key() throws RecognitionException { return gPLSQLKeys.least_key(); }

	public PLSQLParser_PLSQL_DMLParser.condition_wrapper_return condition_wrapper() throws RecognitionException { return gPLSQL_DMLParser.condition_wrapper(); }

	public PLSQLParser_PLSQL_DMLParser.using_element_return using_element() throws RecognitionException { return gPLSQL_DMLParser.using_element(); }

	public PLSQLParser_PLSQL_DMLParser.xml_multiuse_expression_element_return xml_multiuse_expression_element() throws RecognitionException { return gPLSQL_DMLParser.xml_multiuse_expression_element(); }

	public PLSQLParser_PLSQLKeys.nested_key_return nested_key() throws RecognitionException { return gPLSQLKeys.nested_key(); }

	public PLSQLParser_PLSQLKeys.array_key_return array_key() throws RecognitionException { return gPLSQLKeys.array_key(); }

	public PLSQLParser_PLSQLKeys.system_key_return system_key() throws RecognitionException { return gPLSQLKeys.system_key(); }

	public PLSQLParser_PLSQLCommons.index_name_return index_name() throws RecognitionException { return gPLSQLCommons.index_name(); }

	public PLSQLParser_PLSQLKeys.nav_key_return nav_key() throws RecognitionException { return gPLSQLKeys.nav_key(); }

	public PLSQLParser_PLSQLKeys.minus_key_return minus_key() throws RecognitionException { return gPLSQLKeys.minus_key(); }

	public PLSQLParser_PLSQLKeys.keep_key_return keep_key() throws RecognitionException { return gPLSQLKeys.keep_key(); }

	public PLSQLParser_PLSQLKeys.insert_key_return insert_key() throws RecognitionException { return gPLSQLKeys.insert_key(); }

	public PLSQLParser_PLSQLCommons.precision_part_return precision_part() throws RecognitionException { return gPLSQLCommons.precision_part(); }

	public PLSQLParser_PLSQLCommons.not_equal_op_return not_equal_op() throws RecognitionException { return gPLSQLCommons.not_equal_op(); }

	public PLSQLParser_PLSQLKeys.upper_key_return upper_key() throws RecognitionException { return gPLSQLKeys.upper_key(); }

	public PLSQLParser_PLSQLKeys.connect_key_return connect_key() throws RecognitionException { return gPLSQLKeys.connect_key(); }

	public PLSQLParser_PLSQLKeys.maxvalue_key_return maxvalue_key() throws RecognitionException { return gPLSQLKeys.maxvalue_key(); }

	public PLSQLParser_PLSQLKeys.rollback_key_return rollback_key() throws RecognitionException { return gPLSQLKeys.rollback_key(); }

	public PLSQLParser_PLSQLKeys.drop_key_return drop_key() throws RecognitionException { return gPLSQLKeys.drop_key(); }

	public PLSQLParser_PLSQLKeys.member_key_return member_key() throws RecognitionException { return gPLSQLKeys.member_key(); }

	public PLSQLParser_PLSQLKeys.varchar_key_return varchar_key() throws RecognitionException { return gPLSQLKeys.varchar_key(); }

	public PLSQLParser_PLSQLKeys.reuse_key_return reuse_key() throws RecognitionException { return gPLSQLKeys.reuse_key(); }

	public PLSQLParser_PLSQLKeys.nchar_key_return nchar_key() throws RecognitionException { return gPLSQLKeys.nchar_key(); }

	public PLSQLParser_PLSQL_DMLParser.update_statement_return update_statement() throws RecognitionException { return gPLSQL_DMLParser.update_statement(); }

	public PLSQLParser_PLSQLCommons.routine_id_return routine_id() throws RecognitionException { return gPLSQLCommons.routine_id(); }

	public PLSQLParser_PLSQL_DMLParser.within_or_over_part_return within_or_over_part() throws RecognitionException { return gPLSQL_DMLParser.within_or_over_part(); }

	public PLSQLParser_PLSQLKeys.xmlagg_key_return xmlagg_key() throws RecognitionException { return gPLSQLKeys.xmlagg_key(); }

	public PLSQLParser_PLSQLKeys.initcap_key_return initcap_key() throws RecognitionException { return gPLSQLKeys.initcap_key(); }

	public PLSQLParser_PLSQLCommons.general_element_id_return general_element_id() throws RecognitionException { return gPLSQLCommons.general_element_id(); }

	public PLSQLParser_PLSQLKeys.update_key_return update_key() throws RecognitionException { return gPLSQLKeys.update_key(); }

	public PLSQLParser_PLSQLKeys.on_key_return on_key() throws RecognitionException { return gPLSQLKeys.on_key(); }

	public PLSQLParser_PLSQLKeys.oid_key_return oid_key() throws RecognitionException { return gPLSQLKeys.oid_key(); }

	public PLSQLParser_PLSQLCommons.cursor_name_return cursor_name() throws RecognitionException { return gPLSQLCommons.cursor_name(); }

	public PLSQLParser_PLSQLKeys.errors_key_return errors_key() throws RecognitionException { return gPLSQLKeys.errors_key(); }

	public PLSQLParser_PLSQLKeys.depth_key_return depth_key() throws RecognitionException { return gPLSQLKeys.depth_key(); }

	public PLSQLParser_PLSQLKeys.specification_key_return specification_key() throws RecognitionException { return gPLSQLKeys.specification_key(); }

	public PLSQLParser_PLSQLKeys.boolean_key_return boolean_key() throws RecognitionException { return gPLSQLKeys.boolean_key(); }

	public PLSQLParser_PLSQL_DMLParser.compound_expression_return compound_expression() throws RecognitionException { return gPLSQL_DMLParser.compound_expression(); }

	public PLSQLParser_PLSQLKeys.unbounded_key_return unbounded_key() throws RecognitionException { return gPLSQLKeys.unbounded_key(); }

	public PLSQLParser_PLSQLKeys.dimension_key_return dimension_key() throws RecognitionException { return gPLSQLKeys.dimension_key(); }

	public PLSQLParser_PLSQLKeys.begin_key_return begin_key() throws RecognitionException { return gPLSQLKeys.begin_key(); }

	public PLSQLParser_PLSQLCommons.constraint_name_return constraint_name() throws RecognitionException { return gPLSQLCommons.constraint_name(); }

	public PLSQLParser_PLSQL_DMLParser.column_based_update_set_clause_return column_based_update_set_clause() throws RecognitionException { return gPLSQL_DMLParser.column_based_update_set_clause(); }

	public PLSQLParser_PLSQLKeys.foreign_key_return foreign_key() throws RecognitionException { return gPLSQLKeys.foreign_key(); }

	public PLSQLParser_PLSQLKeys.truncate_key_return truncate_key() throws RecognitionException { return gPLSQLKeys.truncate_key(); }

	public PLSQLParser_PLSQLKeys.self_key_return self_key() throws RecognitionException { return gPLSQLKeys.self_key(); }

	public PLSQLParser_PLSQLKeys.trigger_key_return trigger_key() throws RecognitionException { return gPLSQLKeys.trigger_key(); }

	public PLSQLParser_PLSQL_DMLParser.for_increment_decrement_type_return for_increment_decrement_type() throws RecognitionException { return gPLSQL_DMLParser.for_increment_decrement_type(); }

	public PLSQLParser_PLSQLKeys.cast_key_return cast_key() throws RecognitionException { return gPLSQLKeys.cast_key(); }

	public PLSQLParser_PLSQLKeys.rowidtochar_key_return rowidtochar_key() throws RecognitionException { return gPLSQLKeys.rowidtochar_key(); }

	public PLSQLParser_PLSQLKeys.user_key_return user_key() throws RecognitionException { return gPLSQLKeys.user_key(); }

	public PLSQLParser_PLSQLCommons.id_expression_return id_expression() throws RecognitionException { return gPLSQLCommons.id_expression(); }

	public PLSQLParser_PLSQL_DMLParser.model_clause_return model_clause() throws RecognitionException { return gPLSQL_DMLParser.model_clause(); }

	public PLSQLParser_PLSQL_DMLParser.model_column_return model_column() throws RecognitionException { return gPLSQL_DMLParser.model_column(); }

	public PLSQLParser_PLSQLKeys.cube_key_return cube_key() throws RecognitionException { return gPLSQLKeys.cube_key(); }

	public PLSQLParser_PLSQLCommons.routine_name_return routine_name() throws RecognitionException { return gPLSQLCommons.routine_name(); }

	public PLSQLParser_PLSQLKeys.clob_key_return clob_key() throws RecognitionException { return gPLSQLKeys.clob_key(); }

	public PLSQLParser_PLSQL_DMLParser.order_by_elements_return order_by_elements() throws RecognitionException { return gPLSQL_DMLParser.order_by_elements(); }

	public PLSQLParser_PLSQL_DMLParser.xml_table_column_return xml_table_column() throws RecognitionException { return gPLSQL_DMLParser.xml_table_column(); }

	public PLSQLParser_PLSQLCommons.into_clause_return into_clause() throws RecognitionException { return gPLSQLCommons.into_clause(); }

	public PLSQLParser_PLSQLKeys.increment_key_return increment_key() throws RecognitionException { return gPLSQLKeys.increment_key(); }

	public PLSQLParser_PLSQLKeys.greatest_key_return greatest_key() throws RecognitionException { return gPLSQLKeys.greatest_key(); }

	public PLSQLParser_PLSQL_DMLParser.merge_update_delete_part_return merge_update_delete_part() throws RecognitionException { return gPLSQL_DMLParser.merge_update_delete_part(); }

	public PLSQLParser_PLSQL_DMLParser.multiset_expression_return multiset_expression() throws RecognitionException { return gPLSQL_DMLParser.multiset_expression(); }

	public PLSQLParser_PLSQLKeys.coalesce_key_return coalesce_key() throws RecognitionException { return gPLSQLKeys.coalesce_key(); }

	public PLSQLParser_PLSQLKeys.if_key_return if_key() throws RecognitionException { return gPLSQLKeys.if_key(); }

	public PLSQLParser_PLSQLKeys.read_key_return read_key() throws RecognitionException { return gPLSQLKeys.read_key(); }

	public PLSQLParser_PLSQLCommons.id_return id() throws RecognitionException { return gPLSQLCommons.id(); }

	public PLSQLParser_PLSQLKeys.xmlcolattval_key_return xmlcolattval_key() throws RecognitionException { return gPLSQLKeys.xmlcolattval_key(); }

	public PLSQLParser_PLSQLKeys.vsize_key_return vsize_key() throws RecognitionException { return gPLSQLKeys.vsize_key(); }

	public PLSQLParser_PLSQL_DMLParser.grouping_sets_elements_return grouping_sets_elements() throws RecognitionException { return gPLSQL_DMLParser.grouping_sets_elements(); }

	public PLSQLParser_PLSQLKeys.database_key_return database_key() throws RecognitionException { return gPLSQLKeys.database_key(); }

	public PLSQLParser_PLSQL_DMLParser.subquery_basic_elements_return subquery_basic_elements() throws RecognitionException { return gPLSQL_DMLParser.subquery_basic_elements(); }

	public PLSQLParser_PLSQL_DMLParser.static_returning_clause_return static_returning_clause() throws RecognitionException { return gPLSQL_DMLParser.static_returning_clause(); }

	public PLSQLParser_PLSQLKeys.overriding_key_return overriding_key() throws RecognitionException { return gPLSQLKeys.overriding_key(); }

	public PLSQLParser_PLSQLKeys.true_key_return true_key() throws RecognitionException { return gPLSQLKeys.true_key(); }

	public PLSQLParser_PLSQLKeys.package_key_return package_key() throws RecognitionException { return gPLSQLKeys.package_key(); }

	public PLSQLParser_PLSQLKeys.until_key_return until_key() throws RecognitionException { return gPLSQLKeys.until_key(); }

	public PLSQLParser_PLSQL_DMLParser.group_by_elements_return group_by_elements() throws RecognitionException { return gPLSQL_DMLParser.group_by_elements(); }

	public PLSQLParser_PLSQLKeys.values_key_return values_key() throws RecognitionException { return gPLSQLKeys.values_key(); }

	public PLSQLParser_PLSQLKeys.varchar2_key_return varchar2_key() throws RecognitionException { return gPLSQLKeys.varchar2_key(); }

	public PLSQLParser_PLSQLKeys.timezone_hour_key_return timezone_hour_key() throws RecognitionException { return gPLSQLKeys.timezone_hour_key(); }

	public PLSQLParser_PLSQLKeys.char_length_key_return char_length_key() throws RecognitionException { return gPLSQLKeys.char_length_key(); }

	public PLSQLParser_PLSQLKeys.character_length_key_return character_length_key() throws RecognitionException { return gPLSQLKeys.character_length_key(); }

	public PLSQLParser_PLSQLKeys.nextval_key_return nextval_key() throws RecognitionException { return gPLSQLKeys.nextval_key(); }

	public PLSQLParser_PLSQLKeys.partial_key_return partial_key() throws RecognitionException { return gPLSQLKeys.partial_key(); }

	public PLSQLParser_PLSQL_DMLParser.insert_into_clause_return insert_into_clause() throws RecognitionException { return gPLSQL_DMLParser.insert_into_clause(); }

	public PLSQLParser_PLSQLKeys.recursive_key_return recursive_key() throws RecognitionException { return gPLSQLKeys.recursive_key(); }

	public PLSQLParser_PLSQLKeys.transaction_key_return transaction_key() throws RecognitionException { return gPLSQLKeys.transaction_key(); }

	public PLSQLParser_PLSQLKeys.pipelined_key_return pipelined_key() throws RecognitionException { return gPLSQLKeys.pipelined_key(); }

	public PLSQLParser_PLSQLCommons.function_argument_modeling_return function_argument_modeling() throws RecognitionException { return gPLSQLCommons.function_argument_modeling(); }

	public PLSQLParser_PLSQLKeys.national_key_return national_key() throws RecognitionException { return gPLSQLKeys.national_key(); }

	public PLSQLParser_PLSQLKeys.positive_key_return positive_key() throws RecognitionException { return gPLSQLKeys.positive_key(); }

	public PLSQLParser_PLSQLKeys.failure_key_return failure_key() throws RecognitionException { return gPLSQLKeys.failure_key(); }

	public PLSQLParser_PLSQLKeys.customdatum_key_return customdatum_key() throws RecognitionException { return gPLSQLKeys.customdatum_key(); }

	public PLSQLParser_PLSQLKeys.log_key_return log_key() throws RecognitionException { return gPLSQLKeys.log_key(); }

	public PLSQLParser_PLSQLKeys.xmltable_key_return xmltable_key() throws RecognitionException { return gPLSQLKeys.xmltable_key(); }

	public PLSQLParser_PLSQLKeys.following_key_return following_key() throws RecognitionException { return gPLSQLKeys.following_key(); }

	public PLSQLParser_PLSQLKeys.indicator_key_return indicator_key() throws RecognitionException { return gPLSQLKeys.indicator_key(); }

	public PLSQLParser_PLSQLKeys.corrupt_xid_key_return corrupt_xid_key() throws RecognitionException { return gPLSQLKeys.corrupt_xid_key(); }

	public PLSQLParser_PLSQLKeys.sample_key_return sample_key() throws RecognitionException { return gPLSQLKeys.sample_key(); }

	public PLSQLParser_PLSQLKeys.substitutable_key_return substitutable_key() throws RecognitionException { return gPLSQLKeys.substitutable_key(); }

	public PLSQLParser_PLSQLKeys.character_key_return character_key() throws RecognitionException { return gPLSQLKeys.character_key(); }

	public PLSQLParser_PLSQLKeys.byte_key_return byte_key() throws RecognitionException { return gPLSQLKeys.byte_key(); }

	public PLSQLParser_PLSQL_DMLParser.unary_expression_return unary_expression() throws RecognitionException { return gPLSQL_DMLParser.unary_expression(); }

	public PLSQLParser_PLSQLKeys.asc_key_return asc_key() throws RecognitionException { return gPLSQLKeys.asc_key(); }

	public PLSQLParser_PLSQLKeys.execute_key_return execute_key() throws RecognitionException { return gPLSQLKeys.execute_key(); }

	public PLSQLParser_PLSQLKeys.ignore_key_return ignore_key() throws RecognitionException { return gPLSQLKeys.ignore_key(); }

	public PLSQLParser_PLSQLKeys.updated_key_return updated_key() throws RecognitionException { return gPLSQLKeys.updated_key(); }

	public PLSQLParser_PLSQLKeys.varying_key_return varying_key() throws RecognitionException { return gPLSQLKeys.varying_key(); }

	public PLSQLParser_PLSQLKeys.to_key_return to_key() throws RecognitionException { return gPLSQLKeys.to_key(); }

	public PLSQLParser_PLSQL_DMLParser.xml_namespaces_clause_return xml_namespaces_clause() throws RecognitionException { return gPLSQL_DMLParser.xml_namespaces_clause(); }

	public PLSQLParser_PLSQLKeys.timestamp_ltz_unconstrained_key_return timestamp_ltz_unconstrained_key() throws RecognitionException { return gPLSQLKeys.timestamp_ltz_unconstrained_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_rules_part_return model_rules_part() throws RecognitionException { return gPLSQL_DMLParser.model_rules_part(); }

	public PLSQLParser_PLSQLKeys.like2_key_return like2_key() throws RecognitionException { return gPLSQLKeys.like2_key(); }

	public PLSQLParser_PLSQLKeys.chartorowid_key_return chartorowid_key() throws RecognitionException { return gPLSQLKeys.chartorowid_key(); }

	public PLSQLParser_PLSQL_DMLParser.pivot_element_return pivot_element() throws RecognitionException { return gPLSQL_DMLParser.pivot_element(); }

	public PLSQLParser_PLSQLKeys.dbtimezone_key_return dbtimezone_key() throws RecognitionException { return gPLSQLKeys.dbtimezone_key(); }

	public PLSQLParser_PLSQLKeys.min_key_return min_key() throws RecognitionException { return gPLSQLKeys.min_key(); }

	public PLSQLParser_PLSQLKeys.commit_key_return commit_key() throws RecognitionException { return gPLSQLKeys.commit_key(); }

	public PLSQLParser_PLSQLKeys.segment_key_return segment_key() throws RecognitionException { return gPLSQLKeys.segment_key(); }

	public PLSQLParser_PLSQL_DMLParser.single_table_insert_return single_table_insert() throws RecognitionException { return gPLSQL_DMLParser.single_table_insert(); }

	public PLSQLParser_PLSQLKeys.limit_key_return limit_key() throws RecognitionException { return gPLSQLKeys.limit_key(); }

	public PLSQLParser_SQLPLUSParser.sql_plus_command_return sql_plus_command() throws RecognitionException { return gSQLPLUSParser.sql_plus_command(); }

	public PLSQLParser_PLSQLKeys.single_key_return single_key() throws RecognitionException { return gPLSQLKeys.single_key(); }

	public PLSQLParser_PLSQLKeys.soundex_key_return soundex_key() throws RecognitionException { return gPLSQLKeys.soundex_key(); }

	public PLSQLParser_SQLPLUSParser.whenever_command_return whenever_command() throws RecognitionException { return gSQLPLUSParser.whenever_command(); }

	public PLSQLParser_PLSQLKeys.dense_rank_key_return dense_rank_key() throws RecognitionException { return gPLSQLKeys.dense_rank_key(); }

	public PLSQLParser_PLSQLKeys.like_key_return like_key() throws RecognitionException { return gPLSQLKeys.like_key(); }

	public PLSQLParser_PLSQLKeys.extend_key_return extend_key() throws RecognitionException { return gPLSQLKeys.extend_key(); }

	public PLSQLParser_PLSQLKeys.no_key_return no_key() throws RecognitionException { return gPLSQLKeys.no_key(); }

	public PLSQLParser_PLSQLKeys.whenever_key_return whenever_key() throws RecognitionException { return gPLSQLKeys.whenever_key(); }

	public PLSQLParser_PLSQLKeys.plan_key_return plan_key() throws RecognitionException { return gPLSQLKeys.plan_key(); }

	public PLSQLParser_PLSQLCommons.column_alias_return column_alias() throws RecognitionException { return gPLSQLCommons.column_alias(); }

	public PLSQLParser_PLSQL_DMLParser.xmlroot_param_version_part_return xmlroot_param_version_part() throws RecognitionException { return gPLSQL_DMLParser.xmlroot_param_version_part(); }

	public PLSQLParser_PLSQLKeys.static_key_return static_key() throws RecognitionException { return gPLSQLKeys.static_key(); }

	public PLSQLParser_PLSQLCommons.attribute_name_return attribute_name() throws RecognitionException { return gPLSQLCommons.attribute_name(); }

	public PLSQLParser_PLSQLKeys.invalidate_key_return invalidate_key() throws RecognitionException { return gPLSQLKeys.invalidate_key(); }

	public PLSQLParser_PLSQLKeys.references_key_return references_key() throws RecognitionException { return gPLSQLKeys.references_key(); }

	public PLSQLParser_PLSQL_DMLParser.pivot_in_clause_return pivot_in_clause() throws RecognitionException { return gPLSQL_DMLParser.pivot_in_clause(); }

	public PLSQLParser_PLSQL_DMLParser.multi_column_for_loop_return multi_column_for_loop() throws RecognitionException { return gPLSQL_DMLParser.multi_column_for_loop(); }

	public PLSQLParser_PLSQL_DMLParser.pivot_in_clause_element_return pivot_in_clause_element() throws RecognitionException { return gPLSQL_DMLParser.pivot_in_clause_element(); }

	public PLSQLParser_PLSQL_DMLParser.expression_or_vector_return expression_or_vector() throws RecognitionException { return gPLSQL_DMLParser.expression_or_vector(); }

	public PLSQLParser_PLSQL_DMLParser.xmlroot_param_standalone_part_return xmlroot_param_standalone_part() throws RecognitionException { return gPLSQL_DMLParser.xmlroot_param_standalone_part(); }

	public PLSQLParser_PLSQLKeys.table_key_return table_key() throws RecognitionException { return gPLSQLKeys.table_key(); }

	public PLSQLParser_PLSQL_DMLParser.join_clause_return join_clause() throws RecognitionException { return gPLSQL_DMLParser.join_clause(); }

	public PLSQLParser_PLSQLKeys.batch_key_return batch_key() throws RecognitionException { return gPLSQLKeys.batch_key(); }

	public PLSQLParser_PLSQLCommons.keep_clause_return keep_clause() throws RecognitionException { return gPLSQLCommons.keep_clause(); }

	public PLSQLParser_PLSQLKeys.context_key_return context_key() throws RecognitionException { return gPLSQLKeys.context_key(); }

	public PLSQLParser_PLSQL_DMLParser.pivot_for_clause_return pivot_for_clause() throws RecognitionException { return gPLSQL_DMLParser.pivot_for_clause(); }

	public PLSQLParser_PLSQLKeys.settings_key_return settings_key() throws RecognitionException { return gPLSQLKeys.settings_key(); }

	public PLSQLParser_PLSQLKeys.trailing_key_return trailing_key() throws RecognitionException { return gPLSQLKeys.trailing_key(); }

	public PLSQLParser_PLSQLKeys.unpivot_key_return unpivot_key() throws RecognitionException { return gPLSQLKeys.unpivot_key(); }

	public PLSQLParser_PLSQLKeys.in_key_return in_key() throws RecognitionException { return gPLSQLKeys.in_key(); }

	public PLSQLParser_PLSQLKeys.sequential_key_return sequential_key() throws RecognitionException { return gPLSQLKeys.sequential_key(); }

	public PLSQLParser_PLSQLKeys.show_key_return show_key() throws RecognitionException { return gPLSQLKeys.show_key(); }

	public PLSQLParser_PLSQLKeys.substring_key_return substring_key() throws RecognitionException { return gPLSQLKeys.substring_key(); }

	public PLSQLParser_PLSQL_DMLParser.case_statement_return case_statement(boolean isStatementParameter) throws RecognitionException { return gPLSQL_DMLParser.case_statement(isStatementParameter); }

	public PLSQLParser_PLSQLKeys.trim_key_return trim_key() throws RecognitionException { return gPLSQLKeys.trim_key(); }

	public PLSQLParser_PLSQL_DMLParser.start_part_return start_part() throws RecognitionException { return gPLSQL_DMLParser.start_part(); }

	public PLSQLParser_PLSQLKeys.noentityescaping_key_return noentityescaping_key() throws RecognitionException { return gPLSQLKeys.noentityescaping_key(); }

	public PLSQLParser_PLSQLKeys.treat_key_return treat_key() throws RecognitionException { return gPLSQLKeys.treat_key(); }

	public PLSQLParser_PLSQLCommons.reference_model_name_return reference_model_name() throws RecognitionException { return gPLSQLCommons.reference_model_name(); }

	public PLSQLParser_PLSQL_DMLParser.subquery_return subquery() throws RecognitionException { return gPLSQL_DMLParser.subquery(); }

	public PLSQLParser_PLSQL_DMLParser.for_update_of_part_return for_update_of_part() throws RecognitionException { return gPLSQL_DMLParser.for_update_of_part(); }

	public PLSQLParser_PLSQLKeys.nvarchar2_key_return nvarchar2_key() throws RecognitionException { return gPLSQLKeys.nvarchar2_key(); }

	public PLSQLParser_PLSQLKeys.rawtohex_key_return rawtohex_key() throws RecognitionException { return gPLSQLKeys.rawtohex_key(); }

	public PLSQLParser_PLSQLKeys.session_key_return session_key() throws RecognitionException { return gPLSQLKeys.session_key(); }

	public PLSQLParser_PLSQLKeys.by_key_return by_key() throws RecognitionException { return gPLSQLKeys.by_key(); }

	public PLSQLParser_PLSQLKeys.and_key_return and_key() throws RecognitionException { return gPLSQLKeys.and_key(); }

	public PLSQLParser_PLSQL_DMLParser.lock_mode_return lock_mode() throws RecognitionException { return gPLSQL_DMLParser.lock_mode(); }

	public PLSQLParser_PLSQLKeys.userenv_key_return userenv_key() throws RecognitionException { return gPLSQLKeys.userenv_key(); }

	public PLSQLParser_PLSQL_DMLParser.for_update_clause_return for_update_clause() throws RecognitionException { return gPLSQL_DMLParser.for_update_clause(); }

	public PLSQLParser_PLSQLKeys.to_char_key_return to_char_key() throws RecognitionException { return gPLSQLKeys.to_char_key(); }

	public PLSQLParser_PLSQLKeys.the_key_return the_key() throws RecognitionException { return gPLSQLKeys.the_key(); }

	public PLSQLParser_PLSQLKeys.nothing_key_return nothing_key() throws RecognitionException { return gPLSQLKeys.nothing_key(); }

	public PLSQLParser_PLSQLKeys.mode_key_return mode_key() throws RecognitionException { return gPLSQLKeys.mode_key(); }

	public PLSQLParser_PLSQL_DMLParser.collect_order_by_part_return collect_order_by_part() throws RecognitionException { return gPLSQL_DMLParser.collect_order_by_part(); }

	public PLSQLParser_PLSQLKeys.max_key_return max_key() throws RecognitionException { return gPLSQLKeys.max_key(); }

	public PLSQLParser_PLSQL_DMLParser.select_list_elements_return select_list_elements() throws RecognitionException { return gPLSQL_DMLParser.select_list_elements(); }

	public PLSQLParser_PLSQLKeys.goto_key_return goto_key() throws RecognitionException { return gPLSQLKeys.goto_key(); }

	public PLSQLParser_PLSQLKeys.upsert_key_return upsert_key() throws RecognitionException { return gPLSQLKeys.upsert_key(); }

	public PLSQLParser_PLSQLKeys.reject_key_return reject_key() throws RecognitionException { return gPLSQLKeys.reject_key(); }

	public PLSQLParser_PLSQL_DMLParser.subquery_operation_part_return subquery_operation_part() throws RecognitionException { return gPLSQL_DMLParser.subquery_operation_part(); }

	public PLSQLParser_PLSQLKeys.binary_float_infinity_key_return binary_float_infinity_key() throws RecognitionException { return gPLSQLKeys.binary_float_infinity_key(); }

	public PLSQLParser_PLSQLCommons.sequence_name_return sequence_name() throws RecognitionException { return gPLSQLCommons.sequence_name(); }

	public PLSQLParser_PLSQLKeys.percent_rowcount_key_return percent_rowcount_key() throws RecognitionException { return gPLSQLKeys.percent_rowcount_key(); }

	public PLSQLParser_PLSQLKeys.sqldata_key_return sqldata_key() throws RecognitionException { return gPLSQLKeys.sqldata_key(); }

	public PLSQLParser_PLSQLKeys.initially_key_return initially_key() throws RecognitionException { return gPLSQLKeys.initially_key(); }

	public PLSQLParser_PLSQLKeys.exists_key_return exists_key() throws RecognitionException { return gPLSQLKeys.exists_key(); }

	public PLSQLParser_PLSQLCommons.function_argument_return function_argument() throws RecognitionException { return gPLSQLCommons.function_argument(); }

	public PLSQLParser_PLSQLKeys.compatibility_key_return compatibility_key() throws RecognitionException { return gPLSQLKeys.compatibility_key(); }

	public PLSQLParser_PLSQLKeys.match_key_return match_key() throws RecognitionException { return gPLSQLKeys.match_key(); }

	public PLSQLParser_PLSQL_DMLParser.cost_matrix_clause_return cost_matrix_clause() throws RecognitionException { return gPLSQL_DMLParser.cost_matrix_clause(); }

	public PLSQLParser_PLSQLKeys.exception_init_key_return exception_init_key() throws RecognitionException { return gPLSQLKeys.exception_init_key(); }

	public PLSQLParser_PLSQLKeys.is_key_return is_key() throws RecognitionException { return gPLSQLKeys.is_key(); }

	public PLSQLParser_PLSQLKeys.identified_key_return identified_key() throws RecognitionException { return gPLSQLKeys.identified_key(); }

	public PLSQLParser_PLSQLKeys.cost_key_return cost_key() throws RecognitionException { return gPLSQLKeys.cost_key(); }

	public PLSQLParser_PLSQLKeys.wellformed_key_return wellformed_key() throws RecognitionException { return gPLSQLKeys.wellformed_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_expression_return model_expression() throws RecognitionException { return gPLSQL_DMLParser.model_expression(); }

	public PLSQLParser_PLSQLKeys.percent_type_key_return percent_type_key() throws RecognitionException { return gPLSQLKeys.percent_type_key(); }

	public PLSQLParser_PLSQLKeys.smallint_key_return smallint_key() throws RecognitionException { return gPLSQLKeys.smallint_key(); }

	public PLSQLParser_PLSQLCommons.general_element_return general_element() throws RecognitionException { return gPLSQLCommons.general_element(); }

	public PLSQLParser_PLSQLKeys.compound_key_return compound_key() throws RecognitionException { return gPLSQLKeys.compound_key(); }

	public PLSQLParser_PLSQLKeys.mod_key_return mod_key() throws RecognitionException { return gPLSQLKeys.mod_key(); }

	public PLSQLParser_PLSQLKeys.version_key_return version_key() throws RecognitionException { return gPLSQLKeys.version_key(); }

	public PLSQLParser_PLSQLKeys.octet_length_key_return octet_length_key() throws RecognitionException { return gPLSQLKeys.octet_length_key(); }

	public PLSQLParser_PLSQLKeys.exception_key_return exception_key() throws RecognitionException { return gPLSQLKeys.exception_key(); }

	public PLSQLParser_PLSQLCommons.outer_join_sign_return outer_join_sign() throws RecognitionException { return gPLSQLCommons.outer_join_sign(); }

	public PLSQLParser_PLSQLKeys.then_key_return then_key() throws RecognitionException { return gPLSQLKeys.then_key(); }

	public PLSQLParser_PLSQLKeys.novalidate_key_return novalidate_key() throws RecognitionException { return gPLSQLKeys.novalidate_key(); }

	public PLSQLParser_PLSQLKeys.object_key_return object_key() throws RecognitionException { return gPLSQLKeys.object_key(); }

	public PLSQLParser_PLSQLKeys.deterministic_key_return deterministic_key() throws RecognitionException { return gPLSQLKeys.deterministic_key(); }

	public PLSQLParser_PLSQLKeys.timezone_minute_key_return timezone_minute_key() throws RecognitionException { return gPLSQLKeys.timezone_minute_key(); }

	public PLSQLParser_PLSQLKeys.shutdown_key_return shutdown_key() throws RecognitionException { return gPLSQLKeys.shutdown_key(); }

	public PLSQLParser_PLSQLCommons.function_argument_analytic_return function_argument_analytic() throws RecognitionException { return gPLSQLCommons.function_argument_analytic(); }

	public PLSQLParser_PLSQLCommons.char_set_name_return char_set_name() throws RecognitionException { return gPLSQLCommons.char_set_name(); }

	public PLSQLParser_PLSQL_DMLParser.conditional_insert_clause_return conditional_insert_clause() throws RecognitionException { return gPLSQL_DMLParser.conditional_insert_clause(); }

	public PLSQLParser_PLSQLKeys.exceptions_key_return exceptions_key() throws RecognitionException { return gPLSQLKeys.exceptions_key(); }

	public PLSQLParser_PLSQLKeys.both_key_return both_key() throws RecognitionException { return gPLSQLKeys.both_key(); }

	public PLSQLParser_PLSQLKeys.abs_key_return abs_key() throws RecognitionException { return gPLSQLKeys.abs_key(); }

	public PLSQLParser_PLSQLKeys.replace_key_return replace_key() throws RecognitionException { return gPLSQLKeys.replace_key(); }

	public PLSQLParser_PLSQLKeys.inout_key_return inout_key() throws RecognitionException { return gPLSQLKeys.inout_key(); }

	public PLSQLParser_PLSQLKeys.grouping_key_return grouping_key() throws RecognitionException { return gPLSQLKeys.grouping_key(); }

	public PLSQLParser_PLSQLCommons.label_name_return label_name() throws RecognitionException { return gPLSQLCommons.label_name(); }

	public PLSQLParser_PLSQLKeys.exclude_key_return exclude_key() throws RecognitionException { return gPLSQLKeys.exclude_key(); }

	public PLSQLParser_PLSQLKeys.deferrable_key_return deferrable_key() throws RecognitionException { return gPLSQLKeys.deferrable_key(); }

	public PLSQLParser_PLSQL_DMLParser.grouping_sets_clause_return grouping_sets_clause() throws RecognitionException { return gPLSQL_DMLParser.grouping_sets_clause(); }

	public PLSQLParser_PLSQLKeys.xmlpi_key_return xmlpi_key() throws RecognitionException { return gPLSQLKeys.xmlpi_key(); }

	public PLSQLParser_PLSQL_DMLParser.lock_table_element_return lock_table_element() throws RecognitionException { return gPLSQL_DMLParser.lock_table_element(); }

	public PLSQLParser_PLSQLKeys.translate_key_return translate_key() throws RecognitionException { return gPLSQLKeys.translate_key(); }

	public PLSQLParser_PLSQLKeys.none_key_return none_key() throws RecognitionException { return gPLSQLKeys.none_key(); }

	public PLSQLParser_PLSQLCommons.constant_return constant() throws RecognitionException { return gPLSQLCommons.constant(); }

	public PLSQLParser_PLSQL_DMLParser.table_collection_expression_return table_collection_expression() throws RecognitionException { return gPLSQL_DMLParser.table_collection_expression(); }

	public PLSQLParser_PLSQLKeys.noschemacheck_key_return noschemacheck_key() throws RecognitionException { return gPLSQLKeys.noschemacheck_key(); }

	public PLSQLParser_PLSQLKeys.decode_key_return decode_key() throws RecognitionException { return gPLSQLKeys.decode_key(); }

	public PLSQLParser_PLSQLCommons.where_clause_return where_clause() throws RecognitionException { return gPLSQLCommons.where_clause(); }

	public PLSQLParser_PLSQLCommons.exception_name_return exception_name() throws RecognitionException { return gPLSQLCommons.exception_name(); }

	public PLSQLParser_PLSQLKeys.case_key_return case_key() throws RecognitionException { return gPLSQLKeys.case_key(); }

	public PLSQLParser_PLSQLKeys.length_key_return length_key() throws RecognitionException { return gPLSQLKeys.length_key(); }

	public PLSQLParser_PLSQL_DMLParser.expression_wrapper_return expression_wrapper() throws RecognitionException { return gPLSQL_DMLParser.expression_wrapper(); }

	public PLSQLParser_PLSQL_DMLParser.simple_case_statement_return simple_case_statement() throws RecognitionException { return gPLSQL_DMLParser.simple_case_statement(); }

	public PLSQLParser_PLSQLKeys.write_key_return write_key() throws RecognitionException { return gPLSQLKeys.write_key(); }

	public PLSQLParser_PLSQLKeys.system_user_key_return system_user_key() throws RecognitionException { return gPLSQLKeys.system_user_key(); }

	public PLSQLParser_PLSQLKeys.group_key_return group_key() throws RecognitionException { return gPLSQLKeys.group_key(); }

	public PLSQLParser_PLSQL_DMLParser.join_using_part_return join_using_part() throws RecognitionException { return gPLSQL_DMLParser.join_using_part(); }

	public PLSQLParser_PLSQLCommons.view_name_return view_name() throws RecognitionException { return gPLSQLCommons.view_name(); }

	public PLSQLParser_PLSQLKeys.constraints_key_return constraints_key() throws RecognitionException { return gPLSQLKeys.constraints_key(); }

	public PLSQLParser_PLSQL_DMLParser.having_clause_return having_clause() throws RecognitionException { return gPLSQL_DMLParser.having_clause(); }

	public PLSQLParser_PLSQLKeys.over_key_return over_key() throws RecognitionException { return gPLSQLKeys.over_key(); }

	public PLSQLParser_PLSQLKeys.connect_by_root_key_return connect_by_root_key() throws RecognitionException { return gPLSQLKeys.connect_by_root_key(); }

	public PLSQLParser_PLSQL_DMLParser.concatenation_wrapper_return concatenation_wrapper() throws RecognitionException { return gPLSQL_DMLParser.concatenation_wrapper(); }

	public PLSQLParser_PLSQLKeys.varray_key_return varray_key() throws RecognitionException { return gPLSQLKeys.varray_key(); }

	public PLSQLParser_PLSQLKeys.name_key_return name_key() throws RecognitionException { return gPLSQLKeys.name_key(); }

	public PLSQLParser_PLSQLKeys.local_key_return local_key() throws RecognitionException { return gPLSQLKeys.local_key(); }

	public PLSQLParser_PLSQLKeys.automatic_key_return automatic_key() throws RecognitionException { return gPLSQLKeys.automatic_key(); }

	public PLSQLParser_PLSQLKeys.savepoint_key_return savepoint_key() throws RecognitionException { return gPLSQLKeys.savepoint_key(); }

	public PLSQLParser_PLSQL_DMLParser.until_part_return until_part() throws RecognitionException { return gPLSQL_DMLParser.until_part(); }

	public PLSQLParser_PLSQLKeys.binary_double_max_normal_key_return binary_double_max_normal_key() throws RecognitionException { return gPLSQLKeys.binary_double_max_normal_key(); }

	public PLSQLParser_PLSQLKeys.include_key_return include_key() throws RecognitionException { return gPLSQLKeys.include_key(); }

	public PLSQLParser_PLSQLKeys.convert_key_return convert_key() throws RecognitionException { return gPLSQLKeys.convert_key(); }

	public PLSQLParser_PLSQLKeys.integer_key_return integer_key() throws RecognitionException { return gPLSQLKeys.integer_key(); }

	public PLSQLParser_PLSQL_DMLParser.return_rows_clause_return return_rows_clause() throws RecognitionException { return gPLSQL_DMLParser.return_rows_clause(); }

	public PLSQLParser_PLSQLKeys.constant_key_return constant_key() throws RecognitionException { return gPLSQLKeys.constant_key(); }

	public PLSQLParser_PLSQL_DMLParser.merge_insert_clause_return merge_insert_clause() throws RecognitionException { return gPLSQL_DMLParser.merge_insert_clause(); }

	public PLSQLParser_PLSQLKeys.key_key_return key_key() throws RecognitionException { return gPLSQLKeys.key_key(); }

	public PLSQLParser_PLSQLKeys.full_key_return full_key() throws RecognitionException { return gPLSQLKeys.full_key(); }

	public PLSQLParser_PLSQLKeys.record_key_return record_key() throws RecognitionException { return gPLSQLKeys.record_key(); }

	public PLSQLParser_PLSQLKeys.interval_key_return interval_key() throws RecognitionException { return gPLSQLKeys.interval_key(); }

	public PLSQLParser_PLSQLKeys.set_key_return set_key() throws RecognitionException { return gPLSQLKeys.set_key(); }

	public PLSQLParser_PLSQLKeys.create_key_return create_key() throws RecognitionException { return gPLSQLKeys.create_key(); }

	public PLSQLParser_PLSQLCommons.numeric_return numeric() throws RecognitionException { return gPLSQLCommons.numeric(); }

	public PLSQLParser_PLSQLKeys.out_key_return out_key() throws RecognitionException { return gPLSQLKeys.out_key(); }

	public PLSQLParser_PLSQLKeys.binary_float_max_normal_key_return binary_float_max_normal_key() throws RecognitionException { return gPLSQLKeys.binary_float_max_normal_key(); }

	public PLSQLParser_PLSQLKeys.use_key_return use_key() throws RecognitionException { return gPLSQLKeys.use_key(); }

	public PLSQLParser_PLSQLKeys.binary_double_key_return binary_double_key() throws RecognitionException { return gPLSQLKeys.binary_double_key(); }

	public PLSQLParser_PLSQLKeys.dsinterval_unconstrained_key_return dsinterval_unconstrained_key() throws RecognitionException { return gPLSQLKeys.dsinterval_unconstrained_key(); }

	public PLSQLParser_PLSQLKeys.immediate_key_return immediate_key() throws RecognitionException { return gPLSQLKeys.immediate_key(); }

	public PLSQLParser_PLSQLKeys.index_key_return index_key() throws RecognitionException { return gPLSQLKeys.index_key(); }

	public PLSQLParser_PLSQLKeys.referencing_key_return referencing_key() throws RecognitionException { return gPLSQLKeys.referencing_key(); }

	public PLSQLParser_PLSQL_DMLParser.expression_return expression() throws RecognitionException { return gPLSQL_DMLParser.expression(); }

	public PLSQLParser_PLSQLKeys.grant_key_return grant_key() throws RecognitionException { return gPLSQLKeys.grant_key(); }

	public PLSQLParser_PLSQLKeys.sessiontimezone_key_return sessiontimezone_key() throws RecognitionException { return gPLSQLKeys.sessiontimezone_key(); }

	public PLSQLParser_PLSQL_DMLParser.insert_statement_return insert_statement() throws RecognitionException { return gPLSQL_DMLParser.insert_statement(); }

	public PLSQLParser_PLSQL_DMLParser.conditional_insert_when_part_return conditional_insert_when_part() throws RecognitionException { return gPLSQL_DMLParser.conditional_insert_when_part(); }

	public PLSQLParser_PLSQLKeys.except_key_return except_key() throws RecognitionException { return gPLSQLKeys.except_key(); }

	public PLSQLParser_PLSQLKeys.inner_key_return inner_key() throws RecognitionException { return gPLSQLKeys.inner_key(); }

	public PLSQLParser_PLSQLCommons.routine_name_part_after_period_return routine_name_part_after_period() throws RecognitionException { return gPLSQLCommons.routine_name_part_after_period(); }

	public PLSQLParser_PLSQL_DMLParser.query_partition_clause_spec_return query_partition_clause_spec() throws RecognitionException { return gPLSQL_DMLParser.query_partition_clause_spec(); }

	public PLSQLParser_PLSQLKeys.each_key_return each_key() throws RecognitionException { return gPLSQLKeys.each_key(); }

	public PLSQLParser_PLSQLKeys.measures_key_return measures_key() throws RecognitionException { return gPLSQLKeys.measures_key(); }

	public PLSQLParser_PLSQLKeys.current_key_return current_key() throws RecognitionException { return gPLSQLKeys.current_key(); }

	public PLSQLParser_PLSQLKeys.standalone_key_return standalone_key() throws RecognitionException { return gPLSQLKeys.standalone_key(); }

	public PLSQLParser_PLSQL_DMLParser.unpivot_clause_return unpivot_clause() throws RecognitionException { return gPLSQL_DMLParser.unpivot_clause(); }

	public PLSQLParser_PLSQLKeys.uid_key_return uid_key() throws RecognitionException { return gPLSQLKeys.uid_key(); }

	public PLSQLParser_PLSQL_DMLParser.merge_statement_return merge_statement() throws RecognitionException { return gPLSQL_DMLParser.merge_statement(); }

	public PLSQLParser_PLSQLKeys.percent_notfound_key_return percent_notfound_key() throws RecognitionException { return gPLSQLKeys.percent_notfound_key(); }

	public PLSQLParser_PLSQLKeys.binary_integer_key_return binary_integer_key() throws RecognitionException { return gPLSQLKeys.binary_integer_key(); }

	public PLSQLParser_PLSQLKeys.power_key_return power_key() throws RecognitionException { return gPLSQLKeys.power_key(); }

	public PLSQLParser_PLSQLKeys.partition_key_return partition_key() throws RecognitionException { return gPLSQLKeys.partition_key(); }

	public PLSQLParser_PLSQL_DMLParser.unpivot_in_elements_return unpivot_in_elements() throws RecognitionException { return gPLSQL_DMLParser.unpivot_in_elements(); }

	public PLSQLParser_PLSQLKeys.body_key_return body_key() throws RecognitionException { return gPLSQLKeys.body_key(); }

	public PLSQLParser_PLSQLKeys.advise_key_return advise_key() throws RecognitionException { return gPLSQLKeys.advise_key(); }

	public PLSQLParser_PLSQLKeys.alter_key_return alter_key() throws RecognitionException { return gPLSQLKeys.alter_key(); }

	public PLSQLParser_PLSQLKeys.c_key_return c_key() throws RecognitionException { return gPLSQLKeys.c_key(); }

	public PLSQLParser_PLSQLKeys.yminterval_unconstrained_key_return yminterval_unconstrained_key() throws RecognitionException { return gPLSQLKeys.yminterval_unconstrained_key(); }

	public PLSQLParser_PLSQLKeys.instantiable_key_return instantiable_key() throws RecognitionException { return gPLSQLKeys.instantiable_key(); }

	public PLSQLParser_PLSQLKeys.binary_double_nan_key_return binary_double_nan_key() throws RecognitionException { return gPLSQLKeys.binary_double_nan_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_rules_clause_return model_rules_clause() throws RecognitionException { return gPLSQL_DMLParser.model_rules_clause(); }

	public PLSQLParser_PLSQLKeys.after_key_return after_key() throws RecognitionException { return gPLSQLKeys.after_key(); }

	public PLSQLParser_PLSQLKeys.parameters_key_return parameters_key() throws RecognitionException { return gPLSQLKeys.parameters_key(); }

	public PLSQLParser_PLSQLKeys.ref_key_return ref_key() throws RecognitionException { return gPLSQLKeys.ref_key(); }

	public PLSQLParser_PLSQLKeys.success_key_return success_key() throws RecognitionException { return gPLSQLKeys.success_key(); }

	public PLSQLParser_PLSQL_DMLParser.over_clause_return over_clause() throws RecognitionException { return gPLSQL_DMLParser.over_clause(); }

	public PLSQLParser_PLSQLKeys.avg_key_return avg_key() throws RecognitionException { return gPLSQLKeys.avg_key(); }

	public PLSQLParser_PLSQL_DMLParser.table_ref_list_return table_ref_list() throws RecognitionException { return gPLSQL_DMLParser.table_ref_list(); }

	public PLSQLParser_PLSQLKeys.data_key_return data_key() throws RecognitionException { return gPLSQLKeys.data_key(); }

	public PLSQLParser_PLSQLKeys.binary_float_key_return binary_float_key() throws RecognitionException { return gPLSQLKeys.binary_float_key(); }

	public PLSQLParser_PLSQLKeys.when_key_return when_key() throws RecognitionException { return gPLSQLKeys.when_key(); }

	public PLSQLParser_PLSQLKeys.where_key_return where_key() throws RecognitionException { return gPLSQLKeys.where_key(); }

	public PLSQLParser_PLSQLKeys.forall_key_return forall_key() throws RecognitionException { return gPLSQLKeys.forall_key(); }

	public PLSQLParser_PLSQLKeys.into_key_return into_key() throws RecognitionException { return gPLSQLKeys.into_key(); }

	public PLSQLParser_PLSQLKeys.force_key_return force_key() throws RecognitionException { return gPLSQLKeys.force_key(); }

	public PLSQLParser_PLSQLKeys.ceil_key_return ceil_key() throws RecognitionException { return gPLSQLKeys.ceil_key(); }

	public PLSQLParser_PLSQLKeys.noaudit_key_return noaudit_key() throws RecognitionException { return gPLSQLKeys.noaudit_key(); }

	public PLSQLParser_PLSQLKeys.select_key_return select_key() throws RecognitionException { return gPLSQLKeys.select_key(); }

	public PLSQLParser_PLSQLKeys.year_key_return year_key() throws RecognitionException { return gPLSQLKeys.year_key(); }

	public PLSQLParser_PLSQL_DMLParser.relational_expression_return relational_expression() throws RecognitionException { return gPLSQL_DMLParser.relational_expression(); }

	public PLSQLParser_PLSQLKeys.auto_key_return auto_key() throws RecognitionException { return gPLSQLKeys.auto_key(); }

	public PLSQLParser_PLSQLKeys.of_key_return of_key() throws RecognitionException { return gPLSQLKeys.of_key(); }

	public PLSQLParser_PLSQLKeys.block_key_return block_key() throws RecognitionException { return gPLSQLKeys.block_key(); }

	public PLSQLParser_PLSQLKeys.having_key_return having_key() throws RecognitionException { return gPLSQLKeys.having_key(); }

	public PLSQLParser_PLSQLCommons.current_of_clause_return current_of_clause() throws RecognitionException { return gPLSQLCommons.current_of_clause(); }

	public PLSQLParser_PLSQLCommons.xml_column_name_return xml_column_name() throws RecognitionException { return gPLSQLCommons.xml_column_name(); }

	public PLSQLParser_PLSQL_DMLParser.cell_assignment_return cell_assignment() throws RecognitionException { return gPLSQL_DMLParser.cell_assignment(); }

	public PLSQLParser_PLSQLKeys.bulk_key_return bulk_key() throws RecognitionException { return gPLSQLKeys.bulk_key(); }

	public PLSQLParser_PLSQLKeys.position_key_return position_key() throws RecognitionException { return gPLSQLKeys.position_key(); }

	public PLSQLParser_PLSQL_DMLParser.update_set_clause_return update_set_clause() throws RecognitionException { return gPLSQL_DMLParser.update_set_clause(); }

	public PLSQLParser_PLSQLKeys.canonical_key_return canonical_key() throws RecognitionException { return gPLSQLKeys.canonical_key(); }

	public PLSQLParser_PLSQLKeys.matched_key_return matched_key() throws RecognitionException { return gPLSQLKeys.matched_key(); }

	public PLSQLParser_PLSQLKeys.to_date_key_return to_date_key() throws RecognitionException { return gPLSQLKeys.to_date_key(); }

	public PLSQLParser_PLSQLKeys.evalname_key_return evalname_key() throws RecognitionException { return gPLSQLKeys.evalname_key(); }

	public PLSQLParser_PLSQLKeys.empty_key_return empty_key() throws RecognitionException { return gPLSQLKeys.empty_key(); }

	public PLSQLParser_PLSQL_DMLParser.like_escape_part_return like_escape_part() throws RecognitionException { return gPLSQL_DMLParser.like_escape_part(); }

	public PLSQLParser_PLSQLKeys.rollup_key_return rollup_key() throws RecognitionException { return gPLSQLKeys.rollup_key(); }

	public PLSQLParser_PLSQLKeys.comment_key_return comment_key() throws RecognitionException { return gPLSQLKeys.comment_key(); }

	public PLSQLParser_SQLPLUSParser.set_command_return set_command() throws RecognitionException { return gSQLPLUSParser.set_command(); }

	public PLSQLParser_PLSQLKeys.stddev_key_return stddev_key() throws RecognitionException { return gPLSQLKeys.stddev_key(); }

	public PLSQLParser_PLSQLKeys.exclusive_key_return exclusive_key() throws RecognitionException { return gPLSQLKeys.exclusive_key(); }

	public PLSQLParser_PLSQLKeys.procedure_key_return procedure_key() throws RecognitionException { return gPLSQLKeys.procedure_key(); }

	public PLSQLParser_PLSQL_DMLParser.wait_nowait_part_return wait_nowait_part() throws RecognitionException { return gPLSQL_DMLParser.wait_nowait_part(); }

	public PLSQLParser_PLSQL_DMLParser.error_logging_reject_part_return error_logging_reject_part() throws RecognitionException { return gPLSQL_DMLParser.error_logging_reject_part(); }

	public PLSQLParser_PLSQLKeys.present_key_return present_key() throws RecognitionException { return gPLSQLKeys.present_key(); }

	public PLSQLParser_PLSQL_DMLParser.additive_expression_return additive_expression() throws RecognitionException { return gPLSQL_DMLParser.additive_expression(); }

	public PLSQLParser_PLSQLKeys.analyze_key_return analyze_key() throws RecognitionException { return gPLSQLKeys.analyze_key(); }

	public PLSQLParser_PLSQLCommons.tableview_name_return tableview_name() throws RecognitionException { return gPLSQLCommons.tableview_name(); }

	public PLSQLParser_PLSQLCommons.argument_return argument() throws RecognitionException { return gPLSQLCommons.argument(); }

	public PLSQLParser_PLSQLCommons.procedure_name_return procedure_name() throws RecognitionException { return gPLSQLCommons.procedure_name(); }

	public PLSQLParser_PLSQL_DMLParser.xml_attributes_clause_return xml_attributes_clause() throws RecognitionException { return gPLSQL_DMLParser.xml_attributes_clause(); }

	public PLSQLParser_PLSQLKeys.content_key_return content_key() throws RecognitionException { return gPLSQLKeys.content_key(); }

	public PLSQLParser_PLSQL_DMLParser.condition_return condition() throws RecognitionException { return gPLSQL_DMLParser.condition(); }

	public PLSQLParser_PLSQLKeys.some_key_return some_key() throws RecognitionException { return gPLSQLKeys.some_key(); }

	public PLSQLParser_PLSQLKeys.elsif_key_return elsif_key() throws RecognitionException { return gPLSQLKeys.elsif_key(); }

	public PLSQLParser_PLSQLKeys.binary_float_nan_key_return binary_float_nan_key() throws RecognitionException { return gPLSQLKeys.binary_float_nan_key(); }

	public PLSQLParser_PLSQLKeys.null_key_return null_key() throws RecognitionException { return gPLSQLKeys.null_key(); }

	public PLSQLParser_PLSQLKeys.isolation_key_return isolation_key() throws RecognitionException { return gPLSQLKeys.isolation_key(); }

	public PLSQLParser_PLSQL_DMLParser.between_elements_return between_elements() throws RecognitionException { return gPLSQL_DMLParser.between_elements(); }

	public PLSQLParser_PLSQLKeys.nclob_key_return nclob_key() throws RecognitionException { return gPLSQLKeys.nclob_key(); }

	public PLSQLParser_PLSQLKeys.instr_key_return instr_key() throws RecognitionException { return gPLSQLKeys.instr_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_rules_element_return model_rules_element() throws RecognitionException { return gPLSQL_DMLParser.model_rules_element(); }

	public PLSQLParser_PLSQLKeys.return_key_return return_key() throws RecognitionException { return gPLSQLKeys.return_key(); }

	public PLSQLParser_PLSQLKeys.from_key_return from_key() throws RecognitionException { return gPLSQLKeys.from_key(); }

	public PLSQLParser_PLSQLKeys.leading_key_return leading_key() throws RecognitionException { return gPLSQLKeys.leading_key(); }

	public PLSQLParser_PLSQLKeys.current_user_key_return current_user_key() throws RecognitionException { return gPLSQLKeys.current_user_key(); }

	public PLSQLParser_PLSQLKeys.close_key_return close_key() throws RecognitionException { return gPLSQLKeys.close_key(); }

	public PLSQLParser_PLSQLKeys.percent_found_key_return percent_found_key() throws RecognitionException { return gPLSQLKeys.percent_found_key(); }

	public PLSQLParser_PLSQLKeys.map_key_return map_key() throws RecognitionException { return gPLSQLKeys.map_key(); }

	public PLSQLParser_PLSQLKeys.bfile_key_return bfile_key() throws RecognitionException { return gPLSQLKeys.bfile_key(); }

	public PLSQLParser_PLSQLKeys.preceding_key_return preceding_key() throws RecognitionException { return gPLSQLKeys.preceding_key(); }

	public PLSQLParser_PLSQLKeys.cursor_key_return cursor_key() throws RecognitionException { return gPLSQLKeys.cursor_key(); }

	public PLSQLParser_PLSQLKeys.minute_key_return minute_key() throws RecognitionException { return gPLSQLKeys.minute_key(); }

	public PLSQLParser_PLSQLKeys.reverse_key_return reverse_key() throws RecognitionException { return gPLSQLKeys.reverse_key(); }

	public PLSQLParser_PLSQLKeys.xmlparse_key_return xmlparse_key() throws RecognitionException { return gPLSQLKeys.xmlparse_key(); }

	public PLSQLParser_PLSQLKeys.fetch_key_return fetch_key() throws RecognitionException { return gPLSQLKeys.fetch_key(); }

	public PLSQLParser_PLSQLKeys.nvl_key_return nvl_key() throws RecognitionException { return gPLSQLKeys.nvl_key(); }

	public PLSQLParser_PLSQLKeys.floor_key_return floor_key() throws RecognitionException { return gPLSQLKeys.floor_key(); }

	public PLSQLParser_PLSQLKeys.ltrim_key_return ltrim_key() throws RecognitionException { return gPLSQLKeys.ltrim_key(); }

	public PLSQLParser_PLSQLKeys.cascade_key_return cascade_key() throws RecognitionException { return gPLSQLKeys.cascade_key(); }

	public PLSQLParser_PLSQL_DMLParser.table_ref_return table_ref() throws RecognitionException { return gPLSQL_DMLParser.table_ref(); }

	public PLSQLParser_PLSQL_DMLParser.simple_case_when_part_return simple_case_when_part() throws RecognitionException { return gPLSQL_DMLParser.simple_case_when_part(); }

	public PLSQLParser_PLSQLKeys.instead_key_return instead_key() throws RecognitionException { return gPLSQLKeys.instead_key(); }

	public PLSQLParser_PLSQLKeys.statement_key_return statement_key() throws RecognitionException { return gPLSQLKeys.statement_key(); }

	public PLSQLParser_PLSQL_DMLParser.from_clause_return from_clause() throws RecognitionException { return gPLSQL_DMLParser.from_clause(); }

	public PLSQLParser_PLSQLKeys.library_key_return library_key() throws RecognitionException { return gPLSQLKeys.library_key(); }

	public PLSQLParser_PLSQLKeys.attribute_key_return attribute_key() throws RecognitionException { return gPLSQLKeys.attribute_key(); }

	public PLSQLParser_PLSQLKeys.versions_key_return versions_key() throws RecognitionException { return gPLSQLKeys.versions_key(); }

	public PLSQLParser_PLSQLKeys.ordinality_key_return ordinality_key() throws RecognitionException { return gPLSQLKeys.ordinality_key(); }

	public PLSQLParser_PLSQLKeys.with_key_return with_key() throws RecognitionException { return gPLSQLKeys.with_key(); }

	public PLSQLParser_PLSQL_DMLParser.select_statement_return select_statement() throws RecognitionException { return gPLSQL_DMLParser.select_statement(); }

	public PLSQLParser_PLSQL_DMLParser.windowing_clause_return windowing_clause() throws RecognitionException { return gPLSQL_DMLParser.windowing_clause(); }

	public PLSQLParser_PLSQLKeys.path_key_return path_key() throws RecognitionException { return gPLSQLKeys.path_key(); }

	public PLSQLParser_PLSQLKeys.global_key_return global_key() throws RecognitionException { return gPLSQLKeys.global_key(); }

	public PLSQLParser_PLSQLKeys.nullif_key_return nullif_key() throws RecognitionException { return gPLSQLKeys.nullif_key(); }

	public PLSQLParser_PLSQLKeys.naturaln_key_return naturaln_key() throws RecognitionException { return gPLSQLKeys.naturaln_key(); }

	public PLSQLParser_PLSQL_DMLParser.stantard_function_enabling_over_return stantard_function_enabling_over() throws RecognitionException { return gPLSQL_DMLParser.stantard_function_enabling_over(); }

	public PLSQLParser_PLSQL_DMLParser.xmlserialize_param_version_part_return xmlserialize_param_version_part() throws RecognitionException { return gPLSQL_DMLParser.xmlserialize_param_version_part(); }

	public PLSQLParser_PLSQLKeys.raise_key_return raise_key() throws RecognitionException { return gPLSQLKeys.raise_key(); }

	public PLSQLParser_PLSQL_DMLParser.cursor_expression_return cursor_expression() throws RecognitionException { return gPLSQL_DMLParser.cursor_expression(); }

	public PLSQLParser_PLSQL_DMLParser.expression_list_return expression_list() throws RecognitionException { return gPLSQL_DMLParser.expression_list(); }

	public PLSQLParser_PLSQLKeys.range_key_return range_key() throws RecognitionException { return gPLSQLKeys.range_key(); }

	public PLSQLParser_PLSQLKeys.sqlerror_key_return sqlerror_key() throws RecognitionException { return gPLSQLKeys.sqlerror_key(); }

	public PLSQLParser_PLSQLKeys.off_key_return off_key() throws RecognitionException { return gPLSQLKeys.off_key(); }

	public PLSQLParser_PLSQLKeys.first_key_return first_key() throws RecognitionException { return gPLSQLKeys.first_key(); }

	public PLSQLParser_PLSQL_DMLParser.logical_and_expression_return logical_and_expression() throws RecognitionException { return gPLSQL_DMLParser.logical_and_expression(); }

	public PLSQLParser_PLSQL_DMLParser.atom_return atom() throws RecognitionException { return gPLSQL_DMLParser.atom(); }

	public PLSQLParser_PLSQLKeys.link_key_return link_key() throws RecognitionException { return gPLSQLKeys.link_key(); }

	public PLSQLParser_PLSQLCommons.partition_extension_clause_return partition_extension_clause() throws RecognitionException { return gPLSQLCommons.partition_extension_clause(); }

	public PLSQLParser_PLSQL_DMLParser.merge_update_clause_return merge_update_clause() throws RecognitionException { return gPLSQL_DMLParser.merge_update_clause(); }

	public PLSQLParser_PLSQL_DMLParser.stantard_function_enabling_within_or_over_return stantard_function_enabling_within_or_over() throws RecognitionException { return gPLSQL_DMLParser.stantard_function_enabling_within_or_over(); }

	public PLSQLParser_PLSQLKeys.sum_key_return sum_key() throws RecognitionException { return gPLSQLKeys.sum_key(); }

	public PLSQLParser_PLSQL_DMLParser.for_like_part_return for_like_part() throws RecognitionException { return gPLSQL_DMLParser.for_like_part(); }

	public PLSQLParser_PLSQL_DMLParser.concatenation_return concatenation() throws RecognitionException { return gPLSQL_DMLParser.concatenation(); }

	public PLSQLParser_PLSQL_DMLParser.xml_general_default_part_return xml_general_default_part() throws RecognitionException { return gPLSQL_DMLParser.xml_general_default_part(); }

	public PLSQLParser_PLSQL_DMLParser.query_block_return query_block() throws RecognitionException { return gPLSQL_DMLParser.query_block(); }

	public PLSQLParser_PLSQLKeys.continue_key_return continue_key() throws RecognitionException { return gPLSQLKeys.continue_key(); }

	public PLSQLParser_PLSQLKeys.share_key_return share_key() throws RecognitionException { return gPLSQLKeys.share_key(); }

	public PLSQLParser_PLSQLKeys.associate_key_return associate_key() throws RecognitionException { return gPLSQLKeys.associate_key(); }

	public PLSQLParser_PLSQLKeys.view_key_return view_key() throws RecognitionException { return gPLSQLKeys.view_key(); }

	public PLSQLParser_PLSQLKeys.rely_key_return rely_key() throws RecognitionException { return gPLSQLKeys.rely_key(); }

	public PLSQLParser_PLSQLKeys.simple_integer_key_return simple_integer_key() throws RecognitionException { return gPLSQLKeys.simple_integer_key(); }

	public PLSQLParser_PLSQLKeys.respect_key_return respect_key() throws RecognitionException { return gPLSQLKeys.respect_key(); }

	public PLSQLParser_PLSQLKeys.pipe_key_return pipe_key() throws RecognitionException { return gPLSQLKeys.pipe_key(); }

	public PLSQLParser_PLSQLKeys.second_key_return second_key() throws RecognitionException { return gPLSQLKeys.second_key(); }

	public PLSQLParser_PLSQLKeys.long_key_return long_key() throws RecognitionException { return gPLSQLKeys.long_key(); }

	public PLSQLParser_PLSQLKeys.exit_key_return exit_key() throws RecognitionException { return gPLSQLKeys.exit_key(); }

	public PLSQLParser_PLSQL_DMLParser.general_table_ref_return general_table_ref() throws RecognitionException { return gPLSQL_DMLParser.general_table_ref(); }

	public PLSQLParser_PLSQLKeys.sqrt_key_return sqrt_key() throws RecognitionException { return gPLSQLKeys.sqrt_key(); }

	public PLSQLParser_PLSQLKeys.binary_double_infinity_key_return binary_double_infinity_key() throws RecognitionException { return gPLSQLKeys.binary_double_infinity_key(); }

	public PLSQLParser_PLSQLKeys.statistics_key_return statistics_key() throws RecognitionException { return gPLSQLKeys.statistics_key(); }

	public PLSQLParser_PLSQL_DMLParser.in_elements_return in_elements() throws RecognitionException { return gPLSQL_DMLParser.in_elements(); }

	public PLSQLParser_PLSQLKeys.main_key_return main_key() throws RecognitionException { return gPLSQLKeys.main_key(); }

	public PLSQLParser_PLSQLKeys.right_key_return right_key() throws RecognitionException { return gPLSQLKeys.right_key(); }

	public PLSQLParser_PLSQLKeys.statement_id_key_return statement_id_key() throws RecognitionException { return gPLSQLKeys.statement_id_key(); }

	public PLSQLParser_PLSQLKeys.corresponding_key_return corresponding_key() throws RecognitionException { return gPLSQLKeys.corresponding_key(); }

	public PLSQLParser_PLSQLKeys.parallel_key_return parallel_key() throws RecognitionException { return gPLSQLKeys.parallel_key(); }

	public PLSQLParser_PLSQLKeys.servererror_key_return servererror_key() throws RecognitionException { return gPLSQLKeys.servererror_key(); }

	public PLSQLParser_PLSQLKeys.relies_on_key_return relies_on_key() throws RecognitionException { return gPLSQLKeys.relies_on_key(); }

	public PLSQLParser_PLSQLKeys.external_key_return external_key() throws RecognitionException { return gPLSQLKeys.external_key(); }

	public PLSQLParser_PLSQLKeys.timestamp_tz_unconstrained_key_return timestamp_tz_unconstrained_key() throws RecognitionException { return gPLSQLKeys.timestamp_tz_unconstrained_key(); }

	public PLSQLParser_PLSQLKeys.string_key_return string_key() throws RecognitionException { return gPLSQLKeys.string_key(); }

	public PLSQLParser_PLSQLKeys.lower_key_return lower_key() throws RecognitionException { return gPLSQLKeys.lower_key(); }

	public PLSQLParser_PLSQLCommons.query_name_return query_name() throws RecognitionException { return gPLSQLCommons.query_name(); }

	public PLSQLParser_SQLPLUSParser.prompt_command_return prompt_command() throws RecognitionException { return gSQLPLUSParser.prompt_command(); }

	public PLSQLParser_PLSQLKeys.outer_key_return outer_key() throws RecognitionException { return gPLSQLKeys.outer_key(); }

	public PLSQLParser_PLSQLKeys.count_key_return count_key() throws RecognitionException { return gPLSQLKeys.count_key(); }

	public PLSQLParser_PLSQLKeys.minvalue_key_return minvalue_key() throws RecognitionException { return gPLSQLKeys.minvalue_key(); }

	public PLSQLParser_PLSQLKeys.likec_key_return likec_key() throws RecognitionException { return gPLSQLKeys.likec_key(); }

	public PLSQLParser_PLSQLKeys.size_key_return size_key() throws RecognitionException { return gPLSQLKeys.size_key(); }

	public PLSQLParser_PLSQL_DMLParser.searched_case_when_part_return searched_case_when_part() throws RecognitionException { return gPLSQL_DMLParser.searched_case_when_part(); }

	public PLSQLParser_PLSQLKeys.hide_key_return hide_key() throws RecognitionException { return gPLSQLKeys.hide_key(); }

	public PLSQLParser_PLSQLKeys.autonomous_transaction_key_return autonomous_transaction_key() throws RecognitionException { return gPLSQLKeys.autonomous_transaction_key(); }

	public PLSQLParser_PLSQLKeys.definer_key_return definer_key() throws RecognitionException { return gPLSQLKeys.definer_key(); }

	public PLSQLParser_PLSQLKeys.db_role_change_key_return db_role_change_key() throws RecognitionException { return gPLSQLKeys.db_role_change_key(); }

	public PLSQLParser_PLSQL_DMLParser.multiset_type_return multiset_type() throws RecognitionException { return gPLSQL_DMLParser.multiset_type(); }

	public PLSQLParser_PLSQL_DMLParser.stantard_function_enabling_using_return stantard_function_enabling_using() throws RecognitionException { return gPLSQL_DMLParser.stantard_function_enabling_using(); }

	public PLSQLParser_PLSQLKeys.rpad_key_return rpad_key() throws RecognitionException { return gPLSQLKeys.rpad_key(); }

	public PLSQLParser_PLSQLKeys.trunc_key_return trunc_key() throws RecognitionException { return gPLSQLKeys.trunc_key(); }

	public PLSQLParser_PLSQLKeys.under_key_return under_key() throws RecognitionException { return gPLSQLKeys.under_key(); }

	public PLSQLParser_PLSQLKeys.any_key_return any_key() throws RecognitionException { return gPLSQLKeys.any_key(); }

	public PLSQLParser_PLSQLKeys.last_value_key_return last_value_key() throws RecognitionException { return gPLSQLKeys.last_value_key(); }

	public PLSQLParser_PLSQL_DMLParser.error_logging_clause_return error_logging_clause() throws RecognitionException { return gPLSQL_DMLParser.error_logging_clause(); }

	public PLSQLParser_PLSQLKeys.new_key_return new_key() throws RecognitionException { return gPLSQLKeys.new_key(); }

	public PLSQLParser_PLSQLKeys.xmlquery_key_return xmlquery_key() throws RecognitionException { return gPLSQLKeys.xmlquery_key(); }

	public PLSQLParser_PLSQLKeys.not_key_return not_key() throws RecognitionException { return gPLSQLKeys.not_key(); }

	public PLSQLParser_PLSQLKeys.hash_key_return hash_key() throws RecognitionException { return gPLSQLKeys.hash_key(); }

	public PLSQLParser_PLSQLKeys.while_key_return while_key() throws RecognitionException { return gPLSQLKeys.while_key(); }

	public PLSQLParser_PLSQLKeys.bit_key_return bit_key() throws RecognitionException { return gPLSQLKeys.bit_key(); }

	public PLSQLParser_PLSQLKeys.schemacheck_key_return schemacheck_key() throws RecognitionException { return gPLSQLKeys.schemacheck_key(); }

	public PLSQLParser_PLSQLKeys.indent_key_return indent_key() throws RecognitionException { return gPLSQLKeys.indent_key(); }

	public PLSQLParser_PLSQLKeys.restrict_references_key_return restrict_references_key() throws RecognitionException { return gPLSQLKeys.restrict_references_key(); }

	public PLSQLParser_PLSQLKeys.collate_key_return collate_key() throws RecognitionException { return gPLSQLKeys.collate_key(); }

	public PLSQLParser_PLSQLKeys.float_key_return float_key() throws RecognitionException { return gPLSQLKeys.float_key(); }

	public PLSQLParser_PLSQLKeys.using_key_return using_key() throws RecognitionException { return gPLSQLKeys.using_key(); }

	public PLSQLParser_PLSQLKeys.dec_key_return dec_key() throws RecognitionException { return gPLSQLKeys.dec_key(); }

	public PLSQLParser_PLSQLCommons.implementation_type_name_return implementation_type_name() throws RecognitionException { return gPLSQLCommons.implementation_type_name(); }

	public PLSQLParser_PLSQLKeys.variance_key_return variance_key() throws RecognitionException { return gPLSQLKeys.variance_key(); }

	public PLSQLParser_PLSQLKeys.validate_key_return validate_key() throws RecognitionException { return gPLSQLKeys.validate_key(); }

	public PLSQLParser_PLSQLCommons.variable_name_return variable_name() throws RecognitionException { return gPLSQLCommons.variable_name(); }

	public PLSQLParser_PLSQL_DMLParser.rollup_cube_clause_return rollup_cube_clause() throws RecognitionException { return gPLSQL_DMLParser.rollup_cube_clause(); }

	public PLSQLParser_PLSQLKeys.within_key_return within_key() throws RecognitionException { return gPLSQLKeys.within_key(); }

	public PLSQLParser_PLSQL_DMLParser.table_ref_aux_return table_ref_aux() throws RecognitionException { return gPLSQL_DMLParser.table_ref_aux(); }

	public PLSQLParser_PLSQLKeys.at_key_return at_key() throws RecognitionException { return gPLSQLKeys.at_key(); }

	public PLSQLParser_PLSQL_DMLParser.like_type_return like_type() throws RecognitionException { return gPLSQL_DMLParser.like_type(); }

	public PLSQLParser_PLSQLKeys.decrement_key_return decrement_key() throws RecognitionException { return gPLSQLKeys.decrement_key(); }

	public PLSQLParser_PLSQLCommons.native_datatype_element_return native_datatype_element() throws RecognitionException { return gPLSQLCommons.native_datatype_element(); }

	public PLSQLParser_PLSQLKeys.old_key_return old_key() throws RecognitionException { return gPLSQLKeys.old_key(); }

	public PLSQLParser_PLSQLKeys.modify_key_return modify_key() throws RecognitionException { return gPLSQLKeys.modify_key(); }

	public PLSQLParser_PLSQLKeys.like4_key_return like4_key() throws RecognitionException { return gPLSQLKeys.like4_key(); }

	public PLSQLParser_PLSQL_DMLParser.seed_part_return seed_part() throws RecognitionException { return gPLSQL_DMLParser.seed_part(); }

	public PLSQLParser_PLSQLKeys.lpad_key_return lpad_key() throws RecognitionException { return gPLSQLKeys.lpad_key(); }

	public PLSQLParser_PLSQLKeys.nchar_cs_key_return nchar_cs_key() throws RecognitionException { return gPLSQLKeys.nchar_cs_key(); }

	public PLSQLParser_PLSQLCommons.respect_or_ignore_nulls_return respect_or_ignore_nulls() throws RecognitionException { return gPLSQLCommons.respect_or_ignore_nulls(); }

	public PLSQLParser_PLSQLKeys.sets_key_return sets_key() throws RecognitionException { return gPLSQLKeys.sets_key(); }

	public PLSQLParser_PLSQLKeys.work_key_return work_key() throws RecognitionException { return gPLSQLKeys.work_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_expression_element_return model_expression_element() throws RecognitionException { return gPLSQL_DMLParser.model_expression_element(); }

	public PLSQLParser_PLSQLKeys.intersect_key_return intersect_key() throws RecognitionException { return gPLSQLKeys.intersect_key(); }

	public PLSQLParser_PLSQLKeys.sequence_key_return sequence_key() throws RecognitionException { return gPLSQLKeys.sequence_key(); }

	public PLSQLParser_PLSQLKeys.char_cs_key_return char_cs_key() throws RecognitionException { return gPLSQLKeys.char_cs_key(); }

	public PLSQLParser_PLSQLKeys.disable_key_return disable_key() throws RecognitionException { return gPLSQLKeys.disable_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_column_clauses_return model_column_clauses() throws RecognitionException { return gPLSQL_DMLParser.model_column_clauses(); }

	public PLSQLParser_PLSQLKeys.rules_key_return rules_key() throws RecognitionException { return gPLSQLKeys.rules_key(); }

	public PLSQLParser_PLSQLKeys.seed_key_return seed_key() throws RecognitionException { return gPLSQLKeys.seed_key(); }

	public PLSQLParser_PLSQL_DMLParser.pivot_in_clause_elements_return pivot_in_clause_elements() throws RecognitionException { return gPLSQL_DMLParser.pivot_in_clause_elements(); }

	public PLSQLParser_PLSQLKeys.number_key_return number_key() throws RecognitionException { return gPLSQLKeys.number_key(); }

	public PLSQLParser_PLSQLKeys.char_key_return char_key() throws RecognitionException { return gPLSQLKeys.char_key(); }

	public PLSQLParser_PLSQLKeys.nomaxvalue_key_return nomaxvalue_key() throws RecognitionException { return gPLSQLKeys.nomaxvalue_key(); }

	public PLSQLParser_PLSQLKeys.function_key_return function_key() throws RecognitionException { return gPLSQLKeys.function_key(); }

	public PLSQLParser_PLSQLKeys.columns_key_return columns_key() throws RecognitionException { return gPLSQLKeys.columns_key(); }

	public PLSQLParser_PLSQL_DMLParser.selected_element_return selected_element() throws RecognitionException { return gPLSQL_DMLParser.selected_element(); }

	public PLSQLParser_PLSQL_DMLParser.datetime_expression_return datetime_expression() throws RecognitionException { return gPLSQL_DMLParser.datetime_expression(); }

	public PLSQLParser_PLSQLCommons.savepoint_name_return savepoint_name() throws RecognitionException { return gPLSQLCommons.savepoint_name(); }

	public PLSQLParser_PLSQL_DMLParser.join_on_part_return join_on_part() throws RecognitionException { return gPLSQL_DMLParser.join_on_part(); }

	public PLSQLParser_PLSQLKeys.open_key_return open_key() throws RecognitionException { return gPLSQLKeys.open_key(); }

	public PLSQLParser_PLSQLKeys.percent_rowtype_key_return percent_rowtype_key() throws RecognitionException { return gPLSQLKeys.percent_rowtype_key(); }

	public PLSQLParser_PLSQLKeys.xmlelement_key_return xmlelement_key() throws RecognitionException { return gPLSQLKeys.xmlelement_key(); }

	public PLSQLParser_SQLPLUSParser.exit_command_return exit_command() throws RecognitionException { return gSQLPLUSParser.exit_command(); }

	public PLSQLParser_PLSQLKeys.or_key_return or_key() throws RecognitionException { return gPLSQLKeys.or_key(); }

	public PLSQLParser_PLSQLKeys.agent_key_return agent_key() throws RecognitionException { return gPLSQLKeys.agent_key(); }

	public PLSQLParser_PLSQLKeys.subtype_key_return subtype_key() throws RecognitionException { return gPLSQLKeys.subtype_key(); }

	public PLSQLParser_PLSQLKeys.cluster_key_return cluster_key() throws RecognitionException { return gPLSQLKeys.cluster_key(); }

	public PLSQLParser_PLSQLKeys.oradata_key_return oradata_key() throws RecognitionException { return gPLSQLKeys.oradata_key(); }

	public PLSQLParser_PLSQLKeys.substr_key_return substr_key() throws RecognitionException { return gPLSQLKeys.substr_key(); }

	public PLSQLParser_PLSQL_DMLParser.flashback_query_clause_return flashback_query_clause() throws RecognitionException { return gPLSQL_DMLParser.flashback_query_clause(); }

	public PLSQLParser_PLSQL_DMLParser.unpivot_in_clause_return unpivot_in_clause() throws RecognitionException { return gPLSQL_DMLParser.unpivot_in_clause(); }

	public PLSQLParser_PLSQL_DMLParser.outer_join_type_return outer_join_type() throws RecognitionException { return gPLSQL_DMLParser.outer_join_type(); }

	public PLSQLParser_PLSQLCommons.trigger_name_return trigger_name() throws RecognitionException { return gPLSQLCommons.trigger_name(); }

	public PLSQLParser_PLSQLKeys.for_key_return for_key() throws RecognitionException { return gPLSQLKeys.for_key(); }

	public PLSQLParser_PLSQLKeys.serializable_key_return serializable_key() throws RecognitionException { return gPLSQLKeys.serializable_key(); }

	public PLSQLParser_PLSQL_DMLParser.dml_table_expression_clause_simple_return dml_table_expression_clause_simple() throws RecognitionException { return gPLSQL_DMLParser.dml_table_expression_clause_simple(); }

	public PLSQLParser_PLSQLKeys.xmlcast_key_return xmlcast_key() throws RecognitionException { return gPLSQLKeys.xmlcast_key(); }

	public PLSQLParser_PLSQLKeys.all_key_return all_key() throws RecognitionException { return gPLSQLKeys.all_key(); }

	public PLSQLParser_PLSQLKeys.aggregate_key_return aggregate_key() throws RecognitionException { return gPLSQLKeys.aggregate_key(); }

	public PLSQLParser_PLSQLCommons.cost_class_name_return cost_class_name() throws RecognitionException { return gPLSQLCommons.cost_class_name(); }

	public PLSQLParser_PLSQLKeys.role_key_return role_key() throws RecognitionException { return gPLSQLKeys.role_key(); }

	public PLSQLParser_PLSQLKeys.variable_key_return variable_key() throws RecognitionException { return gPLSQLKeys.variable_key(); }

	public PLSQLParser_PLSQLCommons.schema_name_return schema_name() throws RecognitionException { return gPLSQLCommons.schema_name(); }

	public PLSQLParser_PLSQL_DMLParser.stantard_function_pedictions_return stantard_function_pedictions() throws RecognitionException { return gPLSQL_DMLParser.stantard_function_pedictions(); }

	public PLSQLParser_PLSQLKeys.timezone_region_key_return timezone_region_key() throws RecognitionException { return gPLSQLKeys.timezone_region_key(); }

	public PLSQLParser_PLSQLKeys.pls_integer_key_return pls_integer_key() throws RecognitionException { return gPLSQLKeys.pls_integer_key(); }

	public PLSQLParser_PLSQL_DMLParser.explain_statement_return explain_statement() throws RecognitionException { return gPLSQL_DMLParser.explain_statement(); }

	public PLSQLParser_PLSQLKeys.before_key_return before_key() throws RecognitionException { return gPLSQLKeys.before_key(); }

	public PLSQLParser_PLSQLKeys.language_key_return language_key() throws RecognitionException { return gPLSQLKeys.language_key(); }

	public PLSQLParser_PLSQL_DMLParser.group_by_clause_return group_by_clause() throws RecognitionException { return gPLSQL_DMLParser.group_by_clause(); }

	public PLSQLParser_PLSQLKeys.indexed_key_return indexed_key() throws RecognitionException { return gPLSQLKeys.indexed_key(); }

	public PLSQLParser_PLSQLKeys.escape_key_return escape_key() throws RecognitionException { return gPLSQLKeys.escape_key(); }

	public PLSQLParser_PLSQL_DMLParser.merge_element_return merge_element() throws RecognitionException { return gPLSQL_DMLParser.merge_element(); }

	public PLSQLParser_PLSQLKeys.signtype_key_return signtype_key() throws RecognitionException { return gPLSQLKeys.signtype_key(); }

	public PLSQLParser_PLSQLKeys.date_key_return date_key() throws RecognitionException { return gPLSQLKeys.date_key(); }

	public PLSQLParser_PLSQLKeys.xmlnamespaces_key_return xmlnamespaces_key() throws RecognitionException { return gPLSQLKeys.xmlnamespaces_key(); }

	public PLSQLParser_PLSQLKeys.else_key_return else_key() throws RecognitionException { return gPLSQLKeys.else_key(); }

	public PLSQLParser_PLSQLKeys.decompose_key_return decompose_key() throws RecognitionException { return gPLSQLKeys.decompose_key(); }

	public PLSQLParser_PLSQLKeys.unique_key_return unique_key() throws RecognitionException { return gPLSQLKeys.unique_key(); }

	public PLSQLParser_PLSQLKeys.hour_key_return hour_key() throws RecognitionException { return gPLSQLKeys.hour_key(); }

	public PLSQLParser_PLSQLKeys.option_key_return option_key() throws RecognitionException { return gPLSQLKeys.option_key(); }

	public PLSQLParser_PLSQLKeys.binary_float_min_subnormal_key_return binary_float_min_subnormal_key() throws RecognitionException { return gPLSQLKeys.binary_float_min_subnormal_key(); }

	public PLSQLParser_PLSQLKeys.unlimited_key_return unlimited_key() throws RecognitionException { return gPLSQLKeys.unlimited_key(); }

	public PLSQLParser_PLSQL_DMLParser.lock_table_statement_return lock_table_statement() throws RecognitionException { return gPLSQL_DMLParser.lock_table_statement(); }

	public PLSQLParser_PLSQLKeys.parent_key_return parent_key() throws RecognitionException { return gPLSQLKeys.parent_key(); }

	public PLSQLParser_PLSQLKeys.xmlforest_key_return xmlforest_key() throws RecognitionException { return gPLSQLKeys.xmlforest_key(); }

	public PLSQLParser_PLSQL_DMLParser.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException { return gPLSQL_DMLParser.hierarchical_query_clause(); }

	public PLSQLParser_PLSQLKeys.nan_key_return nan_key() throws RecognitionException { return gPLSQLKeys.nan_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_iterate_clause_return model_iterate_clause() throws RecognitionException { return gPLSQL_DMLParser.model_iterate_clause(); }

	public PLSQLParser_PLSQLKeys.element_key_return element_key() throws RecognitionException { return gPLSQLKeys.element_key(); }

	public PLSQLParser_PLSQL_DMLParser.xmlserialize_param_enconding_part_return xmlserialize_param_enconding_part() throws RecognitionException { return gPLSQL_DMLParser.xmlserialize_param_enconding_part(); }

	public PLSQLParser_PLSQLCommons.table_alias_return table_alias() throws RecognitionException { return gPLSQLCommons.table_alias(); }

	public PLSQLParser_PLSQL_DMLParser.cell_reference_options_return cell_reference_options() throws RecognitionException { return gPLSQL_DMLParser.cell_reference_options(); }

	public PLSQLParser_PLSQLCommons.alias_quoted_string_return alias_quoted_string() throws RecognitionException { return gPLSQLCommons.alias_quoted_string(); }

	public PLSQLParser_PLSQLCommons.less_than_or_equals_op_return less_than_or_equals_op() throws RecognitionException { return gPLSQLCommons.less_than_or_equals_op(); }

	public PLSQLParser_PLSQLKeys.only_key_return only_key() throws RecognitionException { return gPLSQLKeys.only_key(); }

	public PLSQLParser_PLSQLKeys.indices_key_return indices_key() throws RecognitionException { return gPLSQLKeys.indices_key(); }

	public PLSQLParser_PLSQLKeys.pivot_key_return pivot_key() throws RecognitionException { return gPLSQLKeys.pivot_key(); }

	public PLSQLParser_PLSQLKeys.parallel_enable_key_return parallel_enable_key() throws RecognitionException { return gPLSQLKeys.parallel_enable_key(); }

	public PLSQLParser_PLSQLKeys.div_key_return div_key() throws RecognitionException { return gPLSQLKeys.div_key(); }

	public PLSQLParser_PLSQLKeys.rowid_key_return rowid_key() throws RecognitionException { return gPLSQLKeys.rowid_key(); }

	public PLSQLParser_PLSQLKeys.xml_key_return xml_key() throws RecognitionException { return gPLSQLKeys.xml_key(); }

	public PLSQLParser_PLSQLKeys.order_key_return order_key() throws RecognitionException { return gPLSQLKeys.order_key(); }

	public PLSQLParser_PLSQL_DMLParser.factoring_element_return factoring_element() throws RecognitionException { return gPLSQL_DMLParser.factoring_element(); }

	public PLSQLParser_PLSQLKeys.result_key_return result_key() throws RecognitionException { return gPLSQLKeys.result_key(); }

	public PLSQLParser_PLSQLKeys.real_key_return real_key() throws RecognitionException { return gPLSQLKeys.real_key(); }

	public PLSQLParser_PLSQLKeys.session_user_key_return session_user_key() throws RecognitionException { return gPLSQLKeys.session_user_key(); }

	public PLSQLParser_PLSQLKeys.binary_float_max_subnormal_key_return binary_float_max_subnormal_key() throws RecognitionException { return gPLSQLKeys.binary_float_max_subnormal_key(); }

	public PLSQLParser_PLSQLKeys.model_key_return model_key() throws RecognitionException { return gPLSQLKeys.model_key(); }

	public PLSQLParser_PLSQLKeys.passing_key_return passing_key() throws RecognitionException { return gPLSQLKeys.passing_key(); }

	public PLSQLParser_PLSQL_DMLParser.xmlserialize_param_ident_part_return xmlserialize_param_ident_part() throws RecognitionException { return gPLSQL_DMLParser.xmlserialize_param_ident_part(); }

	public PLSQLParser_PLSQLKeys.timeout_key_return timeout_key() throws RecognitionException { return gPLSQLKeys.timeout_key(); }

	public PLSQLParser_PLSQLKeys.primary_key_return primary_key() throws RecognitionException { return gPLSQLKeys.primary_key(); }

	public PLSQLParser_PLSQLKeys.nocache_key_return nocache_key() throws RecognitionException { return gPLSQLKeys.nocache_key(); }

	public PLSQLParser_PLSQLKeys.serially_reusable_key_return serially_reusable_key() throws RecognitionException { return gPLSQLKeys.serially_reusable_key(); }

	public PLSQLParser_PLSQL_DMLParser.multiply_expression_return multiply_expression() throws RecognitionException { return gPLSQL_DMLParser.multiply_expression(); }

	public PLSQLParser_PLSQLKeys.nowait_key_return nowait_key() throws RecognitionException { return gPLSQLKeys.nowait_key(); }

	public PLSQLParser_PLSQLCommons.greater_than_or_equals_op_return greater_than_or_equals_op() throws RecognitionException { return gPLSQLCommons.greater_than_or_equals_op(); }

	public PLSQLParser_PLSQLKeys.hextoraw_key_return hextoraw_key() throws RecognitionException { return gPLSQLKeys.hextoraw_key(); }

	public PLSQLParser_PLSQLKeys.false_key_return false_key() throws RecognitionException { return gPLSQLKeys.false_key(); }

	public PLSQLParser_PLSQL_DMLParser.windowing_type_return windowing_type() throws RecognitionException { return gPLSQL_DMLParser.windowing_type(); }

	public PLSQLParser_PLSQLKeys.committed_key_return committed_key() throws RecognitionException { return gPLSQLKeys.committed_key(); }

	public PLSQLParser_PLSQLKeys.between_key_return between_key() throws RecognitionException { return gPLSQLKeys.between_key(); }

	public PLSQLParser_PLSQLKeys.binary_double_max_subnormal_key_return binary_double_max_subnormal_key() throws RecognitionException { return gPLSQLKeys.binary_double_max_subnormal_key(); }

	public PLSQLParser_PLSQL_DMLParser.vector_expr_return vector_expr() throws RecognitionException { return gPLSQL_DMLParser.vector_expr(); }

	public PLSQLParser_PLSQLKeys.chr_key_return chr_key() throws RecognitionException { return gPLSQLKeys.chr_key(); }

	public PLSQLParser_PLSQLKeys.returning_key_return returning_key() throws RecognitionException { return gPLSQLKeys.returning_key(); }

	public PLSQLParser_PLSQL_DMLParser.xml_passing_clause_return xml_passing_clause() throws RecognitionException { return gPLSQL_DMLParser.xml_passing_clause(); }

	public PLSQLParser_PLSQLKeys.row_key_return row_key() throws RecognitionException { return gPLSQLKeys.row_key(); }

	public PLSQLParser_PLSQLKeys.siblings_key_return siblings_key() throws RecognitionException { return gPLSQLKeys.siblings_key(); }

	public PLSQLParser_PLSQL_DMLParser.using_clause_return using_clause() throws RecognitionException { return gPLSQL_DMLParser.using_clause(); }

	public PLSQLParser_PLSQL_DMLParser.interval_expression_return interval_expression() throws RecognitionException { return gPLSQL_DMLParser.interval_expression(); }

	public PLSQLParser_PLSQLKeys.sign_key_return sign_key() throws RecognitionException { return gPLSQLKeys.sign_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_column_partition_part_return model_column_partition_part() throws RecognitionException { return gPLSQL_DMLParser.model_column_partition_part(); }

	public PLSQLParser_PLSQL_DMLParser.values_clause_return values_clause() throws RecognitionException { return gPLSQL_DMLParser.values_clause(); }

	public PLSQLParser_PLSQL_DMLParser.delete_statement_return delete_statement() throws RecognitionException { return gPLSQL_DMLParser.delete_statement(); }

	public PLSQLParser_PLSQLKeys.check_key_return check_key() throws RecognitionException { return gPLSQLKeys.check_key(); }

	public PLSQLParser_PLSQLKeys.positiven_key_return positiven_key() throws RecognitionException { return gPLSQLKeys.positiven_key(); }

	public PLSQLParser_PLSQL_DMLParser.subquery_factoring_clause_return subquery_factoring_clause() throws RecognitionException { return gPLSQL_DMLParser.subquery_factoring_clause(); }

	public PLSQLParser_PLSQLKeys.zone_key_return zone_key() throws RecognitionException { return gPLSQLKeys.zone_key(); }

	public PLSQLParser_PLSQL_DMLParser.windowing_elements_return windowing_elements() throws RecognitionException { return gPLSQL_DMLParser.windowing_elements(); }

	public PLSQLParser_PLSQLKeys.breadth_key_return breadth_key() throws RecognitionException { return gPLSQLKeys.breadth_key(); }

	public PLSQLParser_PLSQLKeys.ddl_key_return ddl_key() throws RecognitionException { return gPLSQLKeys.ddl_key(); }

	public PLSQLParser_PLSQLKeys.suspend_key_return suspend_key() throws RecognitionException { return gPLSQLKeys.suspend_key(); }

	public PLSQLParser_PLSQLKeys.level_key_return level_key() throws RecognitionException { return gPLSQLKeys.level_key(); }

	public PLSQLParser_PLSQLCommons.link_name_return link_name() throws RecognitionException { return gPLSQLCommons.link_name(); }

	public PLSQLParser_PLSQLKeys.end_key_return end_key() throws RecognitionException { return gPLSQLKeys.end_key(); }

	public PLSQLParser_PLSQLKeys.explain_key_return explain_key() throws RecognitionException { return gPLSQLKeys.explain_key(); }

	public PLSQLParser_PLSQLKeys.type_key_return type_key() throws RecognitionException { return gPLSQLKeys.type_key(); }

	public PLSQLParser_PLSQLKeys.including_key_return including_key() throws RecognitionException { return gPLSQLKeys.including_key(); }

	public PLSQLParser_PLSQLKeys.union_key_return union_key() throws RecognitionException { return gPLSQLKeys.union_key(); }

	public PLSQLParser_PLSQLKeys.natural_key_return natural_key() throws RecognitionException { return gPLSQLKeys.natural_key(); }

	public PLSQLParser_PLSQLKeys.to_number_key_return to_number_key() throws RecognitionException { return gPLSQLKeys.to_number_key(); }

	public PLSQLParser_PLSQLKeys.current_time_key_return current_time_key() throws RecognitionException { return gPLSQLKeys.current_time_key(); }

	public PLSQLParser_PLSQLKeys.cache_key_return cache_key() throws RecognitionException { return gPLSQLKeys.cache_key(); }

	public PLSQLParser_PLSQLKeys.bit_length_key_return bit_length_key() throws RecognitionException { return gPLSQLKeys.bit_length_key(); }

	public PLSQLParser_PLSQLKeys.query_key_return query_key() throws RecognitionException { return gPLSQLKeys.query_key(); }

	public PLSQLParser_PLSQLKeys.warning_key_return warning_key() throws RecognitionException { return gPLSQLKeys.warning_key(); }

	public PLSQLParser_PLSQL_DMLParser.dml_table_expression_clause_return dml_table_expression_clause() throws RecognitionException { return gPLSQL_DMLParser.dml_table_expression_clause(); }

	public PLSQLParser_PLSQLKeys.defaults_key_return defaults_key() throws RecognitionException { return gPLSQLKeys.defaults_key(); }

	public PLSQLParser_PLSQLKeys.result_cache_key_return result_cache_key() throws RecognitionException { return gPLSQLKeys.result_cache_key(); }

	public PLSQLParser_PLSQLKeys.mlslabel_key_return mlslabel_key() throws RecognitionException { return gPLSQLKeys.mlslabel_key(); }

	public PLSQLParser_PLSQLKeys.startup_key_return startup_key() throws RecognitionException { return gPLSQLKeys.startup_key(); }

	public PLSQLParser_PLSQLKeys.binary_double_min_normal_key_return binary_double_min_normal_key() throws RecognitionException { return gPLSQLKeys.binary_double_min_normal_key(); }

	public PLSQLParser_PLSQLKeys.resumable_key_return resumable_key() throws RecognitionException { return gPLSQLKeys.resumable_key(); }

	public PLSQLParser_PLSQLKeys.prior_key_return prior_key() throws RecognitionException { return gPLSQLKeys.prior_key(); }

	public PLSQLParser_PLSQLKeys.search_key_return search_key() throws RecognitionException { return gPLSQLKeys.search_key(); }

	public PLSQLParser_PLSQLKeys.logon_key_return logon_key() throws RecognitionException { return gPLSQLKeys.logon_key(); }

	public PLSQLParser_PLSQLKeys.nominvalue_key_return nominvalue_key() throws RecognitionException { return gPLSQLKeys.nominvalue_key(); }

	public PLSQLParser_PLSQLKeys.snapshot_key_return snapshot_key() throws RecognitionException { return gPLSQLKeys.snapshot_key(); }

	public PLSQLParser_PLSQLKeys.wait_key_return wait_key() throws RecognitionException { return gPLSQLKeys.wait_key(); }

	public PLSQLParser_PLSQLKeys.oserror_key_return oserror_key() throws RecognitionException { return gPLSQLKeys.oserror_key(); }

	public PLSQLParser_PLSQL_DMLParser.model_column_list_return model_column_list() throws RecognitionException { return gPLSQL_DMLParser.model_column_list(); }

	public PLSQLParser_PLSQLKeys.serveroutput_key_return serveroutput_key() throws RecognitionException { return gPLSQLKeys.serveroutput_key(); }

	public PLSQLParser_PLSQLKeys.add_key_return add_key() throws RecognitionException { return gPLSQLKeys.add_key(); }

	public PLSQLParser_PLSQLKeys.nocopy_key_return nocopy_key() throws RecognitionException { return gPLSQLKeys.nocopy_key(); }

	public PLSQLParser_PLSQLKeys.submultiset_key_return submultiset_key() throws RecognitionException { return gPLSQLKeys.submultiset_key(); }

	public PLSQLParser_PLSQLKeys.value_key_return value_key() throws RecognitionException { return gPLSQLKeys.value_key(); }

	public PLSQLParser_PLSQLKeys.double_key_return double_key() throws RecognitionException { return gPLSQLKeys.double_key(); }

	public PLSQLParser_PLSQLKeys.last_key_return last_key() throws RecognitionException { return gPLSQLKeys.last_key(); }

	public PLSQLParser_PLSQLKeys.lock_key_return lock_key() throws RecognitionException { return gPLSQLKeys.lock_key(); }

	public PLSQLParser_PLSQLKeys.concat_key_return concat_key() throws RecognitionException { return gPLSQLKeys.concat_key(); }

	public PLSQLParser_PLSQLKeys.left_key_return left_key() throws RecognitionException { return gPLSQLKeys.left_key(); }

	public PLSQLParser_PLSQLKeys.constraint_key_return constraint_key() throws RecognitionException { return gPLSQLKeys.constraint_key(); }

	public final boolean synpred24_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred24_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred45_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred44_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred44_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred46_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred67_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred67_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred65_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred65_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred23_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred27_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred27_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred20_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred28_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred28_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred41_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred41_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred49_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred49_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred63_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred63_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred22_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred43_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred43_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred64_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred64_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred6_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred29_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred29_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred4_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred5_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred3_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred40_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred2_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred60_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred60_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred61_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred61_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred7_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred8_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred9_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred48_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred48_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred69_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred69_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred37_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred15_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred26_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred26_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred47_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred47_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred68_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred68_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred57_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred57_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred14_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred36_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred13_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred56_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred56_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred55_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred55_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred35_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred33_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred33_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred12_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred16_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred34_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred34_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred38_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred17_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred10_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred52_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred52_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred39_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred11_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred19_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred54_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred54_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred53_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred53_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred18_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred32_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_PLSQLParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred30_PLSQLParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA73 dfa73 = new DFA73(this);
	protected DFA75 dfa75 = new DFA75(this);
	protected DFA91 dfa91 = new DFA91(this);
	protected DFA167 dfa167 = new DFA167(this);
	protected DFA190 dfa190 = new DFA190(this);
	protected DFA200 dfa200 = new DFA200(this);
	protected DFA232 dfa232 = new DFA232(this);
	protected DFA233 dfa233 = new DFA233(this);
	protected DFA241 dfa241 = new DFA241(this);
	protected DFA283 dfa283 = new DFA283(this);
	static final String DFA73_eotS =
		"\63\uffff";
	static final String DFA73_eofS =
		"\63\uffff";
	static final String DFA73_minS =
		"\2\13\1\uffff\1\7\4\uffff\1\13\1\27\1\0\1\7\10\uffff\1\13\1\uffff\2\27"+
		"\1\0\1\7\5\uffff\1\0\1\uffff\1\27\2\11\1\27\1\uffff\2\27\1\0\3\uffff\1"+
		"\0\2\7\1\27\1\uffff\2\7";
	static final String DFA73_maxS =
		"\2\u00a5\1\uffff\1\u00a7\4\uffff\1\u00a5\1\134\1\0\1\u00a5\10\uffff\1"+
		"\u00a5\1\uffff\2\134\1\0\1\u008d\5\uffff\1\0\1\uffff\1\134\2\u00a5\1\134"+
		"\1\uffff\2\134\1\0\3\uffff\1\0\2\u008d\1\134\1\uffff\2\u008d";
	static final String DFA73_acceptS =
		"\2\uffff\1\2\1\uffff\4\2\4\uffff\1\1\7\2\1\uffff\1\2\4\uffff\5\2\1\uffff"+
		"\1\2\4\uffff\1\2\3\uffff\3\2\4\uffff\1\2\2\uffff";
	static final String DFA73_specialS =
		"\1\uffff\1\15\1\uffff\1\12\4\uffff\1\11\1\1\1\16\1\25\10\uffff\1\6\1\uffff"+
		"\1\0\1\13\1\10\1\7\5\uffff\1\5\1\uffff\1\3\1\2\1\4\1\21\1\uffff\1\14\1"+
		"\24\1\27\3\uffff\1\30\1\17\1\23\1\26\1\uffff\1\22\1\20}>";
	static final String[] DFA73_transitionS = {
			"\1\2\5\uffff\1\2\5\uffff\1\2\15\uffff\1\2\66\uffff\1\1\16\uffff\1\2\5"+
			"\uffff\1\2\1\uffff\1\2\1\uffff\1\2\13\uffff\1\2\24\uffff\1\2\16\uffff"+
			"\1\2",
			"\1\6\5\uffff\1\6\5\uffff\1\5\15\uffff\1\4\20\uffff\1\7\45\uffff\1\3"+
			"\16\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\7\1\6\7\uffff\1\7\30\uffff\1"+
			"\6\16\uffff\1\6",
			"",
			"\1\23\1\uffff\1\22\1\uffff\1\16\3\uffff\2\14\1\16\1\15\4\uffff\1\13"+
			"\15\uffff\1\11\4\uffff\1\23\5\uffff\1\14\4\uffff\1\23\1\7\45\uffff\1"+
			"\12\3\uffff\1\23\10\uffff\1\10\1\uffff\1\17\5\uffff\1\16\1\uffff\1\16"+
			"\1\20\1\15\1\23\6\uffff\1\21\15\uffff\1\23\1\uffff\1\23\10\uffff\1\16"+
			"\16\uffff\1\15\1\uffff\1\23",
			"",
			"",
			"",
			"",
			"\1\14\3\uffff\3\14\5\uffff\1\14\15\uffff\1\14\12\uffff\1\14\53\uffff"+
			"\1\24\16\uffff\1\14\5\uffff\1\14\1\uffff\1\14\1\uffff\1\14\13\uffff\1"+
			"\14\24\uffff\1\14\4\uffff\1\25\11\uffff\1\14",
			"\1\27\104\uffff\1\26",
			"\1\uffff",
			"\1\35\1\uffff\1\34\1\uffff\1\14\5\uffff\1\14\5\uffff\1\31\15\uffff\1"+
			"\14\4\uffff\1\34\12\uffff\1\35\1\32\45\uffff\1\30\3\uffff\1\35\10\uffff"+
			"\1\36\1\uffff\1\14\5\uffff\1\14\1\uffff\1\14\1\33\1\14\1\35\6\uffff\1"+
			"\33\3\uffff\1\14\11\uffff\1\36\1\uffff\1\35\10\uffff\1\14\16\uffff\1"+
			"\14",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\14\3\uffff\3\14\5\uffff\1\14\15\uffff\1\14\4\uffff\1\40\5\uffff\1"+
			"\14\5\uffff\1\14\45\uffff\1\37\3\uffff\1\40\10\uffff\1\14\1\uffff\1\14"+
			"\5\uffff\1\14\1\uffff\3\14\7\uffff\1\14\3\uffff\1\14\13\uffff\1\40\10"+
			"\uffff\1\14\16\uffff\1\14",
			"",
			"\1\43\36\uffff\1\41\45\uffff\1\42",
			"\1\43\36\uffff\1\41\45\uffff\1\42",
			"\1\uffff",
			"\1\45\17\uffff\1\14\35\uffff\1\45\1\44\45\uffff\1\14\3\uffff\1\45\23"+
			"\uffff\1\14\1\uffff\1\45\6\uffff\1\14\17\uffff\1\45",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\47\104\uffff\1\46",
			"\1\34\1\uffff\1\14\5\uffff\1\14\5\uffff\1\31\15\uffff\1\14\4\uffff\1"+
			"\53\13\uffff\1\51\45\uffff\1\50\3\uffff\1\53\12\uffff\1\14\5\uffff\1"+
			"\14\1\uffff\1\14\1\33\1\14\7\uffff\1\52\3\uffff\1\14\24\uffff\1\14\16"+
			"\uffff\1\14",
			"\1\34\1\uffff\1\14\5\uffff\1\14\5\uffff\1\31\15\uffff\1\14\4\uffff\1"+
			"\53\13\uffff\1\51\45\uffff\1\54\3\uffff\1\53\12\uffff\1\14\5\uffff\1"+
			"\14\1\uffff\1\14\1\33\1\14\7\uffff\1\52\3\uffff\1\14\24\uffff\1\14\16"+
			"\uffff\1\14",
			"\1\56\104\uffff\1\55",
			"",
			"\1\43\36\uffff\1\41\45\uffff\1\42",
			"\1\43\36\uffff\1\41\45\uffff\1\42",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\60\17\uffff\1\14\35\uffff\1\45\1\57\45\uffff\1\14\3\uffff\1\60\23"+
			"\uffff\1\14\1\uffff\1\60\6\uffff\1\14\17\uffff\1\60",
			"\1\60\17\uffff\1\14\35\uffff\1\45\1\57\45\uffff\1\14\3\uffff\1\60\23"+
			"\uffff\1\14\1\uffff\1\60\6\uffff\1\14\17\uffff\1\60",
			"\1\62\104\uffff\1\61",
			"",
			"\1\60\55\uffff\1\45\1\57\51\uffff\1\60\25\uffff\1\60\6\uffff\1\14\17"+
			"\uffff\1\60",
			"\1\60\55\uffff\1\45\1\57\51\uffff\1\60\25\uffff\1\60\6\uffff\1\14\17"+
			"\uffff\1\60"
	};

	static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
	static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
	static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
	static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
	static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
	static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
	static final short[][] DFA73_transition;

	static {
		int numStates = DFA73_transitionS.length;
		DFA73_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
		}
	}

	protected class DFA73 extends DFA {

		public DFA73(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 73;
			this.eot = DFA73_eot;
			this.eof = DFA73_eof;
			this.min = DFA73_min;
			this.max = DFA73_max;
			this.accept = DFA73_accept;
			this.special = DFA73_special;
			this.transition = DFA73_transition;
		}
		@Override
		public String getDescription() {
			return "482:69: ( referencing_clause )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA73_22 = input.LA(1);
						 
						int index73_22 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_22==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 33;}
						else if ( (LA73_22==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 34;}
						else if ( (LA73_22==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 35;}
						 
						input.seek(index73_22);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA73_9 = input.LA(1);
						 
						int index73_9 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 22;}
						else if ( (LA73_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 23;}
						 
						input.seek(index73_9);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA73_34 = input.LA(1);
						 
						int index73_34 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_34==BINDVAR||LA73_34==COLON||LA73_34==INTRODUCER||LA73_34==SQL92_RESERVED_BEGIN||LA73_34==SQL92_RESERVED_CREATE||LA73_34==SQL92_RESERVED_CURSOR||LA73_34==SQL92_RESERVED_DECLARE||LA73_34==SQL92_RESERVED_FOR||LA73_34==SQL92_RESERVED_PROCEDURE||LA73_34==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_34==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 40;}
						else if ( (LA73_34==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 25;}
						else if ( (LA73_34==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 41;}
						else if ( (LA73_34==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 27;}
						else if ( (LA73_34==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}
						else if ( (LA73_34==AT_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 28;}
						else if ( (LA73_34==LEFT_PAREN||LA73_34==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 43;}
						 
						input.seek(index73_34);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA73_33 = input.LA(1);
						 
						int index73_33 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_33==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 38;}
						else if ( (LA73_33==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 39;}
						 
						input.seek(index73_33);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA73_35 = input.LA(1);
						 
						int index73_35 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_35==BINDVAR||LA73_35==COLON||LA73_35==INTRODUCER||LA73_35==SQL92_RESERVED_BEGIN||LA73_35==SQL92_RESERVED_CREATE||LA73_35==SQL92_RESERVED_CURSOR||LA73_35==SQL92_RESERVED_DECLARE||LA73_35==SQL92_RESERVED_FOR||LA73_35==SQL92_RESERVED_PROCEDURE||LA73_35==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_35==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 44;}
						else if ( (LA73_35==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 25;}
						else if ( (LA73_35==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 41;}
						else if ( (LA73_35==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 27;}
						else if ( (LA73_35==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}
						else if ( (LA73_35==AT_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 28;}
						else if ( (LA73_35==LEFT_PAREN||LA73_35==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 43;}
						 
						input.seek(index73_35);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA73_31 = input.LA(1);
						 
						int index73_31 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("type"))) ) {s = 37;}
						 
						input.seek(index73_31);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA73_20 = input.LA(1);
						 
						int index73_20 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_20==BINDVAR||(LA73_20 >= CHAR_STRING && LA73_20 <= COLON)||LA73_20==DELIMITED_ID||LA73_20==INTRODUCER||LA73_20==NATIONAL_CHAR_STRING_LIT||LA73_20==PERIOD||LA73_20==SQL92_RESERVED_AS||LA73_20==SQL92_RESERVED_BEGIN||LA73_20==SQL92_RESERVED_CREATE||(LA73_20 >= SQL92_RESERVED_CURSOR && LA73_20 <= SQL92_RESERVED_DECLARE)||LA73_20==SQL92_RESERVED_EXCEPTION||LA73_20==SQL92_RESERVED_FOR||LA73_20==SQL92_RESERVED_PROCEDURE||LA73_20==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_20==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("type"))))) {s = 31;}
						else if ( (LA73_20==LEFT_PAREN||LA73_20==SEMICOLON||LA73_20==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 32;}
						 
						input.seek(index73_20);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA73_25 = input.LA(1);
						 
						int index73_25 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_25==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 36;}
						else if ( (LA73_25==DELIMITED_ID||LA73_25==REGULAR_ID||LA73_25==SQL92_RESERVED_DATE||LA73_25==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_25==ASSIGN_OP||LA73_25==PERCENT||LA73_25==SEMICOLON||LA73_25==SQL92_RESERVED_DEFAULT||LA73_25==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						 
						input.seek(index73_25);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA73_24 = input.LA(1);
						 
						int index73_24 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable")))) ) {s = 32;}
						 
						input.seek(index73_24);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA73_8 = input.LA(1);
						 
						int index73_8 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_8==BINDVAR||(LA73_8 >= CHAR_STRING && LA73_8 <= COLON)||LA73_8==DELIMITED_ID||LA73_8==INTRODUCER||LA73_8==NATIONAL_CHAR_STRING_LIT||LA73_8==SQL92_RESERVED_BEGIN||LA73_8==SQL92_RESERVED_CREATE||LA73_8==SQL92_RESERVED_CURSOR||LA73_8==SQL92_RESERVED_DECLARE||LA73_8==SQL92_RESERVED_FOR||LA73_8==SQL92_RESERVED_PROCEDURE||LA73_8==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_8==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("type"))))) {s = 20;}
						else if ( (LA73_8==SQL92_RESERVED_TABLE) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 21;}
						 
						input.seek(index73_8);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA73_3 = input.LA(1);
						 
						int index73_3 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_3==SQL92_RESERVED_AS) && (((input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("type"))))) {s = 8;}
						else if ( (LA73_3==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 9;}
						else if ( (LA73_3==REGULAR_ID) ) {s = 10;}
						else if ( (LA73_3==DELIMITED_ID) ) {s = 11;}
						else if ( ((LA73_3 >= CHAR_STRING && LA73_3 <= CHAR_STRING_PERL)||LA73_3==NATIONAL_CHAR_STRING_LIT) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_3==PERIOD) ) {s = 7;}
						else if ( (LA73_3==COMMA||LA73_3==SQL92_RESERVED_DECLARE||LA73_3==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("follows")))) {s = 13;}
						else if ( (LA73_3==BINDVAR||LA73_3==COLON||LA73_3==SQL92_RESERVED_CREATE||LA73_3==SQL92_RESERVED_CURSOR||LA73_3==SQL92_RESERVED_PROCEDURE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 14;}
						else if ( (LA73_3==SQL92_RESERVED_BEGIN) && ((input.LT(1).getText().equalsIgnoreCase("follows")))) {s = 15;}
						else if ( (LA73_3==SQL92_RESERVED_DATE) ) {s = 16;}
						else if ( (LA73_3==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 17;}
						else if ( (LA73_3==AT_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("call")))) {s = 18;}
						else if ( (LA73_3==ASSIGN_OP||LA73_3==LEFT_PAREN||LA73_3==PERCENT||LA73_3==SEMICOLON||LA73_3==SQL92_RESERVED_DEFAULT||LA73_3==SQL92_RESERVED_IS||LA73_3==SQL92_RESERVED_NOT||LA73_3==SQL92_RESERVED_WITH) ) {s = 19;}
						 
						input.seek(index73_3);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA73_23 = input.LA(1);
						 
						int index73_23 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_23==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 33;}
						else if ( (LA73_23==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 34;}
						else if ( (LA73_23==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 35;}
						 
						input.seek(index73_23);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA73_38 = input.LA(1);
						 
						int index73_38 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_38==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 34;}
						else if ( (LA73_38==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 35;}
						else if ( (LA73_38==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 33;}
						 
						input.seek(index73_38);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA73_1 = input.LA(1);
						 
						int index73_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_1==REGULAR_ID) ) {s = 3;}
						else if ( (LA73_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))))) {s = 4;}
						else if ( (LA73_1==DELIMITED_ID) ) {s = 5;}
						else if ( (LA73_1==BINDVAR||LA73_1==COLON||LA73_1==SQL92_RESERVED_BEGIN||LA73_1==SQL92_RESERVED_CREATE||LA73_1==SQL92_RESERVED_CURSOR||LA73_1==SQL92_RESERVED_DECLARE||LA73_1==SQL92_RESERVED_PROCEDURE||LA73_1==SQL92_RESERVED_WHEN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 6;}
						else if ( (LA73_1==PERIOD||LA73_1==SQL92_RESERVED_DATE||LA73_1==SQL92_RESERVED_EXCEPTION) ) {s = 7;}
						 
						input.seek(index73_1);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA73_10 = input.LA(1);
						 
						int index73_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index73_10);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA73_45 = input.LA(1);
						 
						int index73_45 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_45==DELIMITED_ID||LA73_45==REGULAR_ID||LA73_45==SQL92_RESERVED_DATE||LA73_45==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_45==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 47;}
						else if ( (LA73_45==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						else if ( (LA73_45==ASSIGN_OP||LA73_45==SEMICOLON||LA73_45==SQL92_RESERVED_DEFAULT||LA73_45==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 48;}
						 
						input.seek(index73_45);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA73_50 = input.LA(1);
						 
						int index73_50 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_50==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_50==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 47;}
						else if ( (LA73_50==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						else if ( (LA73_50==ASSIGN_OP||LA73_50==SEMICOLON||LA73_50==SQL92_RESERVED_DEFAULT||LA73_50==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 48;}
						 
						input.seek(index73_50);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA73_36 = input.LA(1);
						 
						int index73_36 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_36==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 45;}
						else if ( (LA73_36==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 46;}
						 
						input.seek(index73_36);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA73_49 = input.LA(1);
						 
						int index73_49 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_49==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_49==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 47;}
						else if ( (LA73_49==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						else if ( (LA73_49==ASSIGN_OP||LA73_49==SEMICOLON||LA73_49==SQL92_RESERVED_DEFAULT||LA73_49==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 48;}
						 
						input.seek(index73_49);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA73_46 = input.LA(1);
						 
						int index73_46 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_46==DELIMITED_ID||LA73_46==REGULAR_ID||LA73_46==SQL92_RESERVED_DATE||LA73_46==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_46==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 47;}
						else if ( (LA73_46==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						else if ( (LA73_46==ASSIGN_OP||LA73_46==SEMICOLON||LA73_46==SQL92_RESERVED_DEFAULT||LA73_46==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 48;}
						 
						input.seek(index73_46);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA73_39 = input.LA(1);
						 
						int index73_39 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_39==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 34;}
						else if ( (LA73_39==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 35;}
						else if ( (LA73_39==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 33;}
						 
						input.seek(index73_39);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA73_11 = input.LA(1);
						 
						int index73_11 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_11==BINDVAR||LA73_11==COLON||LA73_11==INTRODUCER||LA73_11==SQL92_RESERVED_BEGIN||LA73_11==SQL92_RESERVED_CREATE||LA73_11==SQL92_RESERVED_CURSOR||LA73_11==SQL92_RESERVED_DECLARE||LA73_11==SQL92_RESERVED_FOR||LA73_11==SQL92_RESERVED_PROCEDURE||LA73_11==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA73_11==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 24;}
						else if ( (LA73_11==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 25;}
						else if ( (LA73_11==PERIOD) ) {s = 26;}
						else if ( (LA73_11==SQL92_RESERVED_DATE||LA73_11==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 27;}
						else if ( (LA73_11==AT_SIGN||LA73_11==LEFT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 28;}
						else if ( (LA73_11==ASSIGN_OP||LA73_11==PERCENT||LA73_11==SEMICOLON||LA73_11==SQL92_RESERVED_DEFAULT||LA73_11==SQL92_RESERVED_NOT) ) {s = 29;}
						else if ( (LA73_11==SQL92_RESERVED_AS||LA73_11==SQL92_RESERVED_IS) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("type"))))) {s = 30;}
						 
						input.seek(index73_11);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA73_47 = input.LA(1);
						 
						int index73_47 = input.index();
						input.rewind();
						s = -1;
						if ( (LA73_47==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 49;}
						else if ( (LA73_47==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 50;}
						 
						input.seek(index73_47);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA73_40 = input.LA(1);
						 
						int index73_40 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable")))) ) {s = 43;}
						 
						input.seek(index73_40);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA73_44 = input.LA(1);
						 
						int index73_44 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable")))) ) {s = 43;}
						 
						input.seek(index73_44);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 73, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA75_eotS =
		"\63\uffff";
	static final String DFA75_eofS =
		"\63\uffff";
	static final String DFA75_minS =
		"\2\13\1\uffff\1\7\4\uffff\1\13\1\27\1\0\1\7\10\uffff\1\13\1\uffff\2\27"+
		"\1\0\1\7\5\uffff\1\0\1\uffff\1\27\2\11\1\27\1\uffff\2\27\1\0\3\uffff\1"+
		"\0\2\7\1\27\1\uffff\2\7";
	static final String DFA75_maxS =
		"\2\u00a5\1\uffff\1\u00a7\4\uffff\1\u00a5\1\134\1\0\1\u00a5\10\uffff\1"+
		"\u00a5\1\uffff\2\134\1\0\1\u008d\5\uffff\1\0\1\uffff\1\134\2\u00a5\1\134"+
		"\1\uffff\2\134\1\0\3\uffff\1\0\2\u008d\1\134\1\uffff\2\u008d";
	static final String DFA75_acceptS =
		"\2\uffff\1\2\1\uffff\4\2\4\uffff\1\1\7\2\1\uffff\1\2\4\uffff\5\2\1\uffff"+
		"\1\2\4\uffff\1\2\3\uffff\3\2\4\uffff\1\2\2\uffff";
	static final String DFA75_specialS =
		"\1\uffff\1\15\1\uffff\1\11\4\uffff\1\5\1\2\1\26\1\13\10\uffff\1\10\1\uffff"+
		"\1\1\1\12\1\7\1\6\5\uffff\1\0\1\uffff\1\4\1\24\1\3\1\20\1\uffff\1\14\1"+
		"\23\1\27\3\uffff\1\30\1\16\1\22\1\25\1\uffff\1\21\1\17}>";
	static final String[] DFA75_transitionS = {
			"\1\2\5\uffff\1\2\5\uffff\1\2\15\uffff\1\2\66\uffff\1\1\16\uffff\1\2\5"+
			"\uffff\1\2\1\uffff\1\2\1\uffff\1\2\40\uffff\1\2\16\uffff\1\2",
			"\1\6\5\uffff\1\6\5\uffff\1\5\15\uffff\1\4\20\uffff\1\7\45\uffff\1\3"+
			"\16\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\7\1\6\7\uffff\1\7\30\uffff\1"+
			"\6\16\uffff\1\6",
			"",
			"\1\23\1\uffff\1\22\1\uffff\1\16\3\uffff\2\14\1\16\1\15\4\uffff\1\13"+
			"\15\uffff\1\11\4\uffff\1\23\5\uffff\1\14\4\uffff\1\23\1\7\45\uffff\1"+
			"\12\3\uffff\1\23\10\uffff\1\10\1\uffff\1\17\5\uffff\1\16\1\uffff\1\16"+
			"\1\20\1\15\1\23\6\uffff\1\21\15\uffff\1\23\1\uffff\1\23\10\uffff\1\16"+
			"\16\uffff\1\15\1\uffff\1\23",
			"",
			"",
			"",
			"",
			"\1\14\3\uffff\3\14\5\uffff\1\14\15\uffff\1\14\12\uffff\1\14\53\uffff"+
			"\1\24\16\uffff\1\14\5\uffff\1\14\1\uffff\1\14\1\uffff\1\14\40\uffff\1"+
			"\14\4\uffff\1\25\11\uffff\1\14",
			"\1\27\104\uffff\1\26",
			"\1\uffff",
			"\1\35\1\uffff\1\34\1\uffff\1\14\5\uffff\1\14\5\uffff\1\31\15\uffff\1"+
			"\14\4\uffff\1\34\12\uffff\1\35\1\32\45\uffff\1\30\3\uffff\1\35\10\uffff"+
			"\1\36\1\uffff\1\14\5\uffff\1\14\1\uffff\1\14\1\33\1\14\1\35\6\uffff\1"+
			"\33\15\uffff\1\36\1\uffff\1\35\10\uffff\1\14\16\uffff\1\14",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\14\3\uffff\3\14\5\uffff\1\14\15\uffff\1\14\4\uffff\1\40\5\uffff\1"+
			"\14\5\uffff\1\14\45\uffff\1\37\3\uffff\1\40\10\uffff\1\14\1\uffff\1\14"+
			"\5\uffff\1\14\1\uffff\3\14\7\uffff\1\14\17\uffff\1\40\10\uffff\1\14\16"+
			"\uffff\1\14",
			"",
			"\1\43\36\uffff\1\41\45\uffff\1\42",
			"\1\43\36\uffff\1\41\45\uffff\1\42",
			"\1\uffff",
			"\1\45\17\uffff\1\14\35\uffff\1\45\1\44\45\uffff\1\14\3\uffff\1\45\23"+
			"\uffff\1\14\1\uffff\1\45\6\uffff\1\14\17\uffff\1\45",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\47\104\uffff\1\46",
			"\1\34\1\uffff\1\14\5\uffff\1\14\5\uffff\1\31\15\uffff\1\14\4\uffff\1"+
			"\53\13\uffff\1\51\45\uffff\1\50\3\uffff\1\53\12\uffff\1\14\5\uffff\1"+
			"\14\1\uffff\1\14\1\33\1\14\7\uffff\1\52\30\uffff\1\14\16\uffff\1\14",
			"\1\34\1\uffff\1\14\5\uffff\1\14\5\uffff\1\31\15\uffff\1\14\4\uffff\1"+
			"\53\13\uffff\1\51\45\uffff\1\54\3\uffff\1\53\12\uffff\1\14\5\uffff\1"+
			"\14\1\uffff\1\14\1\33\1\14\7\uffff\1\52\30\uffff\1\14\16\uffff\1\14",
			"\1\56\104\uffff\1\55",
			"",
			"\1\43\36\uffff\1\41\45\uffff\1\42",
			"\1\43\36\uffff\1\41\45\uffff\1\42",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\60\17\uffff\1\14\35\uffff\1\45\1\57\45\uffff\1\14\3\uffff\1\60\23"+
			"\uffff\1\14\1\uffff\1\60\6\uffff\1\14\17\uffff\1\60",
			"\1\60\17\uffff\1\14\35\uffff\1\45\1\57\45\uffff\1\14\3\uffff\1\60\23"+
			"\uffff\1\14\1\uffff\1\60\6\uffff\1\14\17\uffff\1\60",
			"\1\62\104\uffff\1\61",
			"",
			"\1\60\55\uffff\1\45\1\57\51\uffff\1\60\25\uffff\1\60\6\uffff\1\14\17"+
			"\uffff\1\60",
			"\1\60\55\uffff\1\45\1\57\51\uffff\1\60\25\uffff\1\60\6\uffff\1\14\17"+
			"\uffff\1\60"
	};

	static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
	static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
	static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
	static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
	static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
	static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
	static final short[][] DFA75_transition;

	static {
		int numStates = DFA75_transitionS.length;
		DFA75_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
		}
	}

	protected class DFA75 extends DFA {

		public DFA75(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 75;
			this.eot = DFA75_eot;
			this.eof = DFA75_eof;
			this.min = DFA75_min;
			this.max = DFA75_max;
			this.accept = DFA75_accept;
			this.special = DFA75_special;
			this.transition = DFA75_transition;
		}
		@Override
		public String getDescription() {
			return "491:35: ( referencing_clause )?";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA75_31 = input.LA(1);
						 
						int index75_31 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("type"))) ) {s = 37;}
						 
						input.seek(index75_31);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA75_22 = input.LA(1);
						 
						int index75_22 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_22==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 33;}
						else if ( (LA75_22==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 34;}
						else if ( (LA75_22==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 35;}
						 
						input.seek(index75_22);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA75_9 = input.LA(1);
						 
						int index75_9 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 22;}
						else if ( (LA75_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 23;}
						 
						input.seek(index75_9);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA75_35 = input.LA(1);
						 
						int index75_35 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_35==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 44;}
						else if ( (LA75_35==BINDVAR||LA75_35==COLON||LA75_35==INTRODUCER||LA75_35==SQL92_RESERVED_BEGIN||LA75_35==SQL92_RESERVED_CREATE||LA75_35==SQL92_RESERVED_CURSOR||LA75_35==SQL92_RESERVED_DECLARE||LA75_35==SQL92_RESERVED_PROCEDURE||LA75_35==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_35==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 25;}
						else if ( (LA75_35==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 41;}
						else if ( (LA75_35==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 27;}
						else if ( (LA75_35==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}
						else if ( (LA75_35==AT_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 28;}
						else if ( (LA75_35==LEFT_PAREN||LA75_35==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 43;}
						 
						input.seek(index75_35);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA75_33 = input.LA(1);
						 
						int index75_33 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_33==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 38;}
						else if ( (LA75_33==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 39;}
						 
						input.seek(index75_33);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA75_8 = input.LA(1);
						 
						int index75_8 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_8==BINDVAR||(LA75_8 >= CHAR_STRING && LA75_8 <= COLON)||LA75_8==DELIMITED_ID||LA75_8==INTRODUCER||LA75_8==NATIONAL_CHAR_STRING_LIT||LA75_8==SQL92_RESERVED_BEGIN||LA75_8==SQL92_RESERVED_CREATE||LA75_8==SQL92_RESERVED_CURSOR||LA75_8==SQL92_RESERVED_DECLARE||LA75_8==SQL92_RESERVED_PROCEDURE||LA75_8==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_8==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("type"))))) {s = 20;}
						else if ( (LA75_8==SQL92_RESERVED_TABLE) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 21;}
						 
						input.seek(index75_8);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA75_25 = input.LA(1);
						 
						int index75_25 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_25==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 36;}
						else if ( (LA75_25==DELIMITED_ID||LA75_25==REGULAR_ID||LA75_25==SQL92_RESERVED_DATE||LA75_25==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_25==ASSIGN_OP||LA75_25==PERCENT||LA75_25==SEMICOLON||LA75_25==SQL92_RESERVED_DEFAULT||LA75_25==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						 
						input.seek(index75_25);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA75_24 = input.LA(1);
						 
						int index75_24 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable")))) ) {s = 32;}
						 
						input.seek(index75_24);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA75_20 = input.LA(1);
						 
						int index75_20 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_20==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("type"))))) {s = 31;}
						else if ( (LA75_20==BINDVAR||(LA75_20 >= CHAR_STRING && LA75_20 <= COLON)||LA75_20==DELIMITED_ID||LA75_20==INTRODUCER||LA75_20==NATIONAL_CHAR_STRING_LIT||LA75_20==PERIOD||LA75_20==SQL92_RESERVED_AS||LA75_20==SQL92_RESERVED_BEGIN||LA75_20==SQL92_RESERVED_CREATE||(LA75_20 >= SQL92_RESERVED_CURSOR && LA75_20 <= SQL92_RESERVED_DECLARE)||LA75_20==SQL92_RESERVED_EXCEPTION||LA75_20==SQL92_RESERVED_PROCEDURE||LA75_20==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_20==LEFT_PAREN||LA75_20==SEMICOLON||LA75_20==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 32;}
						 
						input.seek(index75_20);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA75_3 = input.LA(1);
						 
						int index75_3 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_3==SQL92_RESERVED_AS) && (((input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("type"))))) {s = 8;}
						else if ( (LA75_3==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 9;}
						else if ( (LA75_3==REGULAR_ID) ) {s = 10;}
						else if ( (LA75_3==DELIMITED_ID) ) {s = 11;}
						else if ( ((LA75_3 >= CHAR_STRING && LA75_3 <= CHAR_STRING_PERL)||LA75_3==NATIONAL_CHAR_STRING_LIT) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_3==PERIOD) ) {s = 7;}
						else if ( (LA75_3==COMMA||LA75_3==SQL92_RESERVED_DECLARE||LA75_3==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("follows")))) {s = 13;}
						else if ( (LA75_3==BINDVAR||LA75_3==COLON||LA75_3==SQL92_RESERVED_CREATE||LA75_3==SQL92_RESERVED_CURSOR||LA75_3==SQL92_RESERVED_PROCEDURE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 14;}
						else if ( (LA75_3==SQL92_RESERVED_BEGIN) && ((input.LT(1).getText().equalsIgnoreCase("follows")))) {s = 15;}
						else if ( (LA75_3==SQL92_RESERVED_DATE) ) {s = 16;}
						else if ( (LA75_3==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 17;}
						else if ( (LA75_3==AT_SIGN) && ((input.LT(1).getText().equalsIgnoreCase("call")))) {s = 18;}
						else if ( (LA75_3==ASSIGN_OP||LA75_3==LEFT_PAREN||LA75_3==PERCENT||LA75_3==SEMICOLON||LA75_3==SQL92_RESERVED_DEFAULT||LA75_3==SQL92_RESERVED_IS||LA75_3==SQL92_RESERVED_NOT||LA75_3==SQL92_RESERVED_WITH) ) {s = 19;}
						 
						input.seek(index75_3);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA75_23 = input.LA(1);
						 
						int index75_23 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_23==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 33;}
						else if ( (LA75_23==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 34;}
						else if ( (LA75_23==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 35;}
						 
						input.seek(index75_23);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA75_11 = input.LA(1);
						 
						int index75_11 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_11==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 24;}
						else if ( (LA75_11==BINDVAR||LA75_11==COLON||LA75_11==INTRODUCER||LA75_11==SQL92_RESERVED_BEGIN||LA75_11==SQL92_RESERVED_CREATE||LA75_11==SQL92_RESERVED_CURSOR||LA75_11==SQL92_RESERVED_DECLARE||LA75_11==SQL92_RESERVED_PROCEDURE||LA75_11==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_11==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 25;}
						else if ( (LA75_11==PERIOD) ) {s = 26;}
						else if ( (LA75_11==SQL92_RESERVED_DATE||LA75_11==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 27;}
						else if ( (LA75_11==AT_SIGN||LA75_11==LEFT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 28;}
						else if ( (LA75_11==ASSIGN_OP||LA75_11==PERCENT||LA75_11==SEMICOLON||LA75_11==SQL92_RESERVED_DEFAULT||LA75_11==SQL92_RESERVED_NOT) ) {s = 29;}
						else if ( (LA75_11==SQL92_RESERVED_AS||LA75_11==SQL92_RESERVED_IS) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("type"))))) {s = 30;}
						 
						input.seek(index75_11);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA75_38 = input.LA(1);
						 
						int index75_38 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_38==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 34;}
						else if ( (LA75_38==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 35;}
						else if ( (LA75_38==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 33;}
						 
						input.seek(index75_38);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA75_1 = input.LA(1);
						 
						int index75_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_1==REGULAR_ID) ) {s = 3;}
						else if ( (LA75_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))))) {s = 4;}
						else if ( (LA75_1==DELIMITED_ID) ) {s = 5;}
						else if ( (LA75_1==BINDVAR||LA75_1==COLON||LA75_1==SQL92_RESERVED_BEGIN||LA75_1==SQL92_RESERVED_CREATE||LA75_1==SQL92_RESERVED_CURSOR||LA75_1==SQL92_RESERVED_DECLARE||LA75_1==SQL92_RESERVED_PROCEDURE||LA75_1==SQL92_RESERVED_WHEN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 6;}
						else if ( (LA75_1==PERIOD||LA75_1==SQL92_RESERVED_DATE||LA75_1==SQL92_RESERVED_EXCEPTION) ) {s = 7;}
						 
						input.seek(index75_1);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA75_45 = input.LA(1);
						 
						int index75_45 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_45==DELIMITED_ID||LA75_45==REGULAR_ID||LA75_45==SQL92_RESERVED_DATE||LA75_45==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_45==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 47;}
						else if ( (LA75_45==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						else if ( (LA75_45==ASSIGN_OP||LA75_45==SEMICOLON||LA75_45==SQL92_RESERVED_DEFAULT||LA75_45==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 48;}
						 
						input.seek(index75_45);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA75_50 = input.LA(1);
						 
						int index75_50 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_50==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_50==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 47;}
						else if ( (LA75_50==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						else if ( (LA75_50==ASSIGN_OP||LA75_50==SEMICOLON||LA75_50==SQL92_RESERVED_DEFAULT||LA75_50==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 48;}
						 
						input.seek(index75_50);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA75_36 = input.LA(1);
						 
						int index75_36 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_36==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 45;}
						else if ( (LA75_36==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 46;}
						 
						input.seek(index75_36);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA75_49 = input.LA(1);
						 
						int index75_49 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_49==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_49==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 47;}
						else if ( (LA75_49==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						else if ( (LA75_49==ASSIGN_OP||LA75_49==SEMICOLON||LA75_49==SQL92_RESERVED_DEFAULT||LA75_49==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 48;}
						 
						input.seek(index75_49);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA75_46 = input.LA(1);
						 
						int index75_46 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_46==DELIMITED_ID||LA75_46==REGULAR_ID||LA75_46==SQL92_RESERVED_DATE||LA75_46==SQL92_RESERVED_EXCEPTION) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_46==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 47;}
						else if ( (LA75_46==PERCENT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 37;}
						else if ( (LA75_46==ASSIGN_OP||LA75_46==SEMICOLON||LA75_46==SQL92_RESERVED_DEFAULT||LA75_46==SQL92_RESERVED_NOT) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 48;}
						 
						input.seek(index75_46);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA75_39 = input.LA(1);
						 
						int index75_39 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_39==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 34;}
						else if ( (LA75_39==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 35;}
						else if ( (LA75_39==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 33;}
						 
						input.seek(index75_39);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA75_34 = input.LA(1);
						 
						int index75_34 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_34==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 40;}
						else if ( (LA75_34==BINDVAR||LA75_34==COLON||LA75_34==INTRODUCER||LA75_34==SQL92_RESERVED_BEGIN||LA75_34==SQL92_RESERVED_CREATE||LA75_34==SQL92_RESERVED_CURSOR||LA75_34==SQL92_RESERVED_DECLARE||LA75_34==SQL92_RESERVED_PROCEDURE||LA75_34==SQL92_RESERVED_WHEN) && ((input.LT(1).getText().equalsIgnoreCase("referencing")))) {s = 12;}
						else if ( (LA75_34==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 25;}
						else if ( (LA75_34==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 41;}
						else if ( (LA75_34==SQL92_RESERVED_DATE) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 27;}
						else if ( (LA75_34==SQL92_RESERVED_EXCEPTION) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 42;}
						else if ( (LA75_34==AT_SIGN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 28;}
						else if ( (LA75_34==LEFT_PAREN||LA75_34==SEMICOLON) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 43;}
						 
						input.seek(index75_34);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA75_47 = input.LA(1);
						 
						int index75_47 = input.index();
						input.rewind();
						s = -1;
						if ( (LA75_47==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 49;}
						else if ( (LA75_47==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("referencing"))||(input.LT(1).getText().equalsIgnoreCase("follows"))))) {s = 50;}
						 
						input.seek(index75_47);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA75_10 = input.LA(1);
						 
						int index75_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( (true) ) {s = 21;}
						 
						input.seek(index75_10);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA75_40 = input.LA(1);
						 
						int index75_40 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable")))) ) {s = 43;}
						 
						input.seek(index75_40);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA75_44 = input.LA(1);
						 
						int index75_44 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("referencing"))) ) {s = 12;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("compound"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable")))) ) {s = 43;}
						 
						input.seek(index75_44);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 75, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA91_eotS =
		"\26\uffff";
	static final String DFA91_eofS =
		"\26\uffff";
	static final String DFA91_minS =
		"\1\13\1\uffff\1\13\1\27\2\0\3\uffff\3\27\4\0\2\27\4\0";
	static final String DFA91_maxS =
		"\1\u00a5\1\uffff\1\u00a5\1\134\2\0\3\uffff\3\134\4\0\2\134\4\0";
	static final String DFA91_acceptS =
		"\1\uffff\1\2\4\uffff\2\2\1\1\15\uffff";
	static final String DFA91_specialS =
		"\2\uffff\1\0\1\13\1\16\1\12\3\uffff\1\5\1\20\1\14\1\6\1\1\1\7\1\2\1\17"+
		"\1\15\1\10\1\3\1\11\1\4}>";
	static final String[] DFA91_transitionS = {
			"\1\1\5\uffff\1\1\5\uffff\1\1\15\uffff\1\1\66\uffff\1\2\16\uffff\1\1\5"+
			"\uffff\1\1\1\uffff\1\1\1\uffff\1\1\13\uffff\1\1\24\uffff\1\1\16\uffff"+
			"\1\1",
			"",
			"\1\6\3\uffff\2\10\1\6\5\uffff\1\5\15\uffff\1\3\12\uffff\1\10\5\uffff"+
			"\1\7\45\uffff\1\4\14\uffff\1\10\1\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1"+
			"\7\1\6\7\uffff\1\7\30\uffff\1\6\16\uffff\1\6",
			"\1\12\104\uffff\1\11",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\15\36\uffff\1\13\45\uffff\1\14",
			"\1\17\36\uffff\1\13\45\uffff\1\16",
			"\1\21\104\uffff\1\20",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\23\36\uffff\1\13\45\uffff\1\22",
			"\1\25\36\uffff\1\13\45\uffff\1\24",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff"
	};

	static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
	static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
	static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
	static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
	static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
	static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
	static final short[][] DFA91_transition;

	static {
		int numStates = DFA91_transitionS.length;
		DFA91_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
		}
	}

	protected class DFA91 extends DFA {

		public DFA91(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 91;
			this.eot = DFA91_eot;
			this.eof = DFA91_eof;
			this.min = DFA91_min;
			this.max = DFA91_max;
			this.accept = DFA91_accept;
			this.special = DFA91_special;
			this.transition = DFA91_transition;
		}
		@Override
		public String getDescription() {
			return "()+ loopback of 574:27: ( referencing_element )+";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA91_2 = input.LA(1);
						 
						int index91_2 = input.index();
						input.rewind();
						s = -1;
						if ( (LA91_2==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 3;}
						else if ( (LA91_2==REGULAR_ID) ) {s = 4;}
						else if ( (LA91_2==DELIMITED_ID) ) {s = 5;}
						else if ( (LA91_2==BINDVAR||LA91_2==COLON||LA91_2==SQL92_RESERVED_BEGIN||LA91_2==SQL92_RESERVED_CREATE||LA91_2==SQL92_RESERVED_CURSOR||LA91_2==SQL92_RESERVED_DECLARE||LA91_2==SQL92_RESERVED_PROCEDURE||LA91_2==SQL92_RESERVED_WHEN) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("enable"))))) {s = 6;}
						else if ( (LA91_2==PERIOD||LA91_2==SQL92_RESERVED_DATE||LA91_2==SQL92_RESERVED_EXCEPTION) ) {s = 7;}
						else if ( ((LA91_2 >= CHAR_STRING && LA91_2 <= CHAR_STRING_PERL)||LA91_2==NATIONAL_CHAR_STRING_LIT||LA91_2==SQL92_RESERVED_AS) && (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 8;}
						 
						input.seek(index91_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA91_13 = input.LA(1);
						 
						int index91_13 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function")))) ) {s = 7;}
						 
						input.seek(index91_13);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA91_15 = input.LA(1);
						 
						int index91_15 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function")))) ) {s = 7;}
						 
						input.seek(index91_15);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA91_19 = input.LA(1);
						 
						int index91_19 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function")))) ) {s = 7;}
						 
						input.seek(index91_19);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA91_21 = input.LA(1);
						 
						int index91_21 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function")))) ) {s = 7;}
						 
						input.seek(index91_21);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA91_9 = input.LA(1);
						 
						int index91_9 = input.index();
						input.rewind();
						s = -1;
						if ( (LA91_9==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 11;}
						else if ( (LA91_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 12;}
						else if ( (LA91_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 13;}
						 
						input.seek(index91_9);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA91_12 = input.LA(1);
						 
						int index91_12 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function")))) ) {s = 7;}
						 
						input.seek(index91_12);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA91_14 = input.LA(1);
						 
						int index91_14 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function")))) ) {s = 7;}
						 
						input.seek(index91_14);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA91_18 = input.LA(1);
						 
						int index91_18 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function")))) ) {s = 7;}
						 
						input.seek(index91_18);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA91_20 = input.LA(1);
						 
						int index91_20 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function")))) ) {s = 7;}
						 
						input.seek(index91_20);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA91_5 = input.LA(1);
						 
						int index91_5 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index91_5);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA91_3 = input.LA(1);
						 
						int index91_3 = input.index();
						input.rewind();
						s = -1;
						if ( (LA91_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 9;}
						else if ( (LA91_3==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 10;}
						 
						input.seek(index91_3);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA91_11 = input.LA(1);
						 
						int index91_11 = input.index();
						input.rewind();
						s = -1;
						if ( (LA91_11==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 16;}
						else if ( (LA91_11==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 17;}
						 
						input.seek(index91_11);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA91_17 = input.LA(1);
						 
						int index91_17 = input.index();
						input.rewind();
						s = -1;
						if ( (LA91_17==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 20;}
						else if ( (LA91_17==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 21;}
						else if ( (LA91_17==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 11;}
						 
						input.seek(index91_17);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA91_4 = input.LA(1);
						 
						int index91_4 = input.index();
						input.rewind();
						s = -1;
						if ( (((input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("parent")))) ) {s = 8;}
						else if ( (true) ) {s = 7;}
						 
						input.seek(index91_4);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA91_16 = input.LA(1);
						 
						int index91_16 = input.index();
						input.rewind();
						s = -1;
						if ( (LA91_16==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 18;}
						else if ( (LA91_16==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 19;}
						else if ( (LA91_16==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 11;}
						 
						input.seek(index91_16);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA91_10 = input.LA(1);
						 
						int index91_10 = input.index();
						input.rewind();
						s = -1;
						if ( (LA91_10==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 11;}
						else if ( (LA91_10==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 14;}
						else if ( (LA91_10==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("disable"))||(input.LT(1).getText().equalsIgnoreCase("call"))||(input.LT(1).getText().equalsIgnoreCase("new"))||(input.LT(1).getText().equalsIgnoreCase("old"))||(input.LT(1).getText().equalsIgnoreCase("follows"))||(input.LT(1).getText().equalsIgnoreCase("enable"))||(input.LT(1).getText().equalsIgnoreCase("function"))||(input.LT(1).getText().equalsIgnoreCase("parent"))))) {s = 15;}
						 
						input.seek(index91_10);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 91, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA167_eotS =
		"\33\uffff";
	static final String DFA167_eofS =
		"\33\uffff";
	static final String DFA167_minS =
		"\1\27\1\22\1\uffff\1\134\2\uffff\1\22\1\134\1\uffff\1\6\1\0\1\27\2\0\3"+
		"\27\4\0\2\27\4\0";
	static final String DFA167_maxS =
		"\1\164\1\u00a7\1\uffff\1\134\2\uffff\1\u0093\1\u0096\1\uffff\1\u00ac\1"+
		"\0\1\134\2\0\2\u0095\1\134\4\0\2\u0095\4\0";
	static final String DFA167_acceptS =
		"\2\uffff\1\1\1\uffff\2\1\2\uffff\1\2\22\uffff";
	static final String DFA167_specialS =
		"\1\uffff\1\5\4\uffff\1\22\1\17\1\uffff\1\6\1\15\1\uffff\1\7\1\4\1\10\1"+
		"\20\1\uffff\1\11\1\0\1\12\1\1\1\21\1\16\1\13\1\2\1\14\1\3}>";
	static final String[] DFA167_transitionS = {
			"\1\2\104\uffff\1\1\27\uffff\1\2",
			"\1\2\4\uffff\1\4\22\uffff\1\2\12\uffff\2\5\45\uffff\1\2\1\uffff\1\2"+
			"\1\uffff\1\2\10\uffff\1\3\41\uffff\1\2\7\uffff\1\2\23\uffff\1\2",
			"",
			"\1\6",
			"",
			"",
			"\1\10\111\uffff\1\7\1\uffff\1\10\1\uffff\1\10\10\uffff\1\10\41\uffff"+
			"\1\10\7\uffff\1\10",
			"\1\11\3\uffff\1\10\54\uffff\1\10\10\uffff\1\10",
			"",
			"\1\10\4\uffff\1\10\3\uffff\1\12\2\10\5\uffff\1\15\4\uffff\1\10\10\uffff"+
			"\1\13\4\uffff\1\10\3\uffff\1\10\1\uffff\1\10\6\uffff\1\10\30\uffff\1"+
			"\10\13\uffff\1\14\10\uffff\1\10\2\uffff\1\10\5\uffff\1\10\4\uffff\2\10"+
			"\1\uffff\2\10\1\uffff\1\10\4\uffff\2\10\12\uffff\1\10\2\uffff\2\10\6"+
			"\uffff\1\10\5\uffff\1\10\2\uffff\2\10\14\uffff\1\10",
			"\1\uffff",
			"\1\17\104\uffff\1\16",
			"\1\uffff",
			"\1\uffff",
			"\1\22\36\uffff\1\20\45\uffff\1\21\32\uffff\1\10\6\uffff\1\10\26\uffff"+
			"\1\10",
			"\1\24\36\uffff\1\20\45\uffff\1\23\32\uffff\1\10\6\uffff\1\10\26\uffff"+
			"\1\10",
			"\1\26\104\uffff\1\25",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\30\36\uffff\1\20\45\uffff\1\27\32\uffff\1\10\6\uffff\1\10\26\uffff"+
			"\1\10",
			"\1\32\36\uffff\1\20\45\uffff\1\31\32\uffff\1\10\6\uffff\1\10\26\uffff"+
			"\1\10",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff"
	};

	static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
	static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
	static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
	static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
	static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
	static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
	static final short[][] DFA167_transition;

	static {
		int numStates = DFA167_transitionS.length;
		DFA167_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
		}
	}

	protected class DFA167 extends DFA {

		public DFA167(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 167;
			this.eot = DFA167_eot;
			this.eof = DFA167_eof;
			this.min = DFA167_min;
			this.max = DFA167_max;
			this.accept = DFA167_accept;
			this.special = DFA167_special;
			this.transition = DFA167_transition;
		}
		@Override
		public String getDescription() {
			return "843:20: ( type_spec | self_key as_key result_key )";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA167_18 = input.LA(1);
						 
						int index167_18 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_18);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA167_20 = input.LA(1);
						 
						int index167_20 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_20);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA167_24 = input.LA(1);
						 
						int index167_24 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_24);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA167_26 = input.LA(1);
						 
						int index167_26 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_26);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA167_13 = input.LA(1);
						 
						int index167_13 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_13);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA167_1 = input.LA(1);
						 
						int index167_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA167_1==COMMA||LA167_1==LEFT_PAREN||LA167_1==REGULAR_ID||LA167_1==RIGHT_PAREN||LA167_1==SEMICOLON||LA167_1==SQL92_RESERVED_IS||LA167_1==SQL92_RESERVED_ORDER||LA167_1==SQL92_RESERVED_WITH) ) {s = 2;}
						else if ( (LA167_1==SQL92_RESERVED_AS) ) {s = 3;}
						else if ( (LA167_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("ref")))) {s = 4;}
						else if ( ((LA167_1 >= PERCENT && LA167_1 <= PERIOD)) ) {s = 5;}
						 
						input.seek(index167_1);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA167_9 = input.LA(1);
						 
						int index167_9 = input.index();
						input.rewind();
						s = -1;
						if ( (LA167_9==CHAR_STRING) ) {s = 10;}
						else if ( (LA167_9==INTRODUCER) ) {s = 11;}
						else if ( (LA167_9==REGULAR_ID) ) {s = 12;}
						else if ( (LA167_9==DELIMITED_ID) ) {s = 13;}
						else if ( (LA167_9==APPROXIMATE_NUM_LIT||LA167_9==BINDVAR||(LA167_9 >= CHAR_STRING_PERL && LA167_9 <= COLON)||LA167_9==EXACT_NUM_LIT||LA167_9==LEFT_PAREN||LA167_9==MINUS_SIGN||LA167_9==NATIONAL_CHAR_STRING_LIT||LA167_9==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA167_9==PLUS_SIGN||LA167_9==SQL92_RESERVED_ALL||LA167_9==SQL92_RESERVED_ANY||LA167_9==SQL92_RESERVED_CASE||(LA167_9 >= SQL92_RESERVED_CURSOR && LA167_9 <= SQL92_RESERVED_DATE)||(LA167_9 >= SQL92_RESERVED_DEFAULT && LA167_9 <= SQL92_RESERVED_DELETE)||LA167_9==SQL92_RESERVED_DISTINCT||(LA167_9 >= SQL92_RESERVED_EXISTS && LA167_9 <= SQL92_RESERVED_FALSE)||LA167_9==SQL92_RESERVED_INTO||(LA167_9 >= SQL92_RESERVED_NOT && LA167_9 <= SQL92_RESERVED_NULL)||LA167_9==SQL92_RESERVED_PRIOR||LA167_9==SQL92_RESERVED_TABLE||(LA167_9 >= SQL92_RESERVED_TO && LA167_9 <= SQL92_RESERVED_TRUE)||LA167_9==UNSIGNED_INTEGER) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}
						 
						input.seek(index167_9);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA167_12 = input.LA(1);
						 
						int index167_12 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_12);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA167_14 = input.LA(1);
						 
						int index167_14 = input.index();
						input.rewind();
						s = -1;
						if ( (LA167_14==PERIOD) ) {s = 16;}
						else if ( (LA167_14==REGULAR_ID) ) {s = 17;}
						else if ( (LA167_14==DELIMITED_ID) ) {s = 18;}
						else if ( (LA167_14==SQL92_RESERVED_DELETE||LA167_14==SQL92_RESERVED_EXISTS||LA167_14==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}
						 
						input.seek(index167_14);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA167_17 = input.LA(1);
						 
						int index167_17 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_17);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA167_19 = input.LA(1);
						 
						int index167_19 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_19);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA167_23 = input.LA(1);
						 
						int index167_23 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_23);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA167_25 = input.LA(1);
						 
						int index167_25 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_25);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA167_10 = input.LA(1);
						 
						int index167_10 = input.index();
						input.rewind();
						s = -1;
						if ( (!(((input.LT(1).getText().equalsIgnoreCase("self"))))) ) {s = 5;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("self"))) ) {s = 8;}
						 
						input.seek(index167_10);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA167_22 = input.LA(1);
						 
						int index167_22 = input.index();
						input.rewind();
						s = -1;
						if ( (LA167_22==REGULAR_ID) ) {s = 25;}
						else if ( (LA167_22==DELIMITED_ID) ) {s = 26;}
						else if ( (LA167_22==PERIOD) ) {s = 16;}
						else if ( (LA167_22==SQL92_RESERVED_DELETE||LA167_22==SQL92_RESERVED_EXISTS||LA167_22==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}
						 
						input.seek(index167_22);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA167_7 = input.LA(1);
						 
						int index167_7 = input.index();
						input.rewind();
						s = -1;
						if ( (LA167_7==REGULAR_ID) ) {s = 9;}
						else if ( (LA167_7==SEMICOLON||LA167_7==SQL92_RESERVED_NOT||LA167_7==SQL92_RESERVED_PROCEDURE) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}
						 
						input.seek(index167_7);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA167_15 = input.LA(1);
						 
						int index167_15 = input.index();
						input.rewind();
						s = -1;
						if ( (LA167_15==PERIOD) ) {s = 16;}
						else if ( (LA167_15==REGULAR_ID) ) {s = 19;}
						else if ( (LA167_15==DELIMITED_ID) ) {s = 20;}
						else if ( (LA167_15==SQL92_RESERVED_DELETE||LA167_15==SQL92_RESERVED_EXISTS||LA167_15==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}
						 
						input.seek(index167_15);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA167_21 = input.LA(1);
						 
						int index167_21 = input.index();
						input.rewind();
						s = -1;
						if ( (LA167_21==REGULAR_ID) ) {s = 23;}
						else if ( (LA167_21==DELIMITED_ID) ) {s = 24;}
						else if ( (LA167_21==PERIOD) ) {s = 16;}
						else if ( (LA167_21==SQL92_RESERVED_DELETE||LA167_21==SQL92_RESERVED_EXISTS||LA167_21==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}
						 
						input.seek(index167_21);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA167_6 = input.LA(1);
						 
						int index167_6 = input.index();
						input.rewind();
						s = -1;
						if ( (LA167_6==REGULAR_ID) ) {s = 7;}
						else if ( (LA167_6==COMMA||LA167_6==RIGHT_PAREN||LA167_6==SEMICOLON||LA167_6==SQL92_RESERVED_AS||LA167_6==SQL92_RESERVED_IS||LA167_6==SQL92_RESERVED_ORDER) && ((input.LT(1).getText().equalsIgnoreCase("self")))) {s = 8;}
						 
						input.seek(index167_6);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 167, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA190_eotS =
		"\21\uffff";
	static final String DFA190_eofS =
		"\21\uffff";
	static final String DFA190_minS =
		"\1\27\1\22\2\uffff\1\27\1\uffff\1\11\1\uffff\1\22\2\6\1\10\1\6\1\22\1"+
		"\6\1\10\1\uffff";
	static final String DFA190_maxS =
		"\2\u00a1\2\uffff\1\u00a1\1\uffff\1\u00a1\1\uffff\1\u00a1\1\u00ac\2\u00ae"+
		"\1\u00ac\1\u008d\2\u00ae\1\uffff";
	static final String DFA190_acceptS =
		"\2\uffff\1\1\1\2\1\uffff\1\2\1\uffff\1\2\10\uffff\1\2";
	static final String DFA190_specialS =
		"\1\uffff\1\0\2\uffff\1\1\10\uffff\1\2\3\uffff}>";
	static final String[] DFA190_transitionS = {
			"\1\2\104\uffff\1\1\22\uffff\1\3\61\uffff\1\3",
			"\1\2\4\uffff\1\5\104\uffff\1\4\1\uffff\1\2\20\uffff\1\2\35\uffff\2\2"+
			"\22\uffff\1\2",
			"",
			"",
			"\1\2\15\uffff\1\2\4\uffff\1\7\61\uffff\1\6\22\uffff\1\5\61\uffff\1\5",
			"",
			"\1\2\10\uffff\1\2\27\uffff\1\2\13\uffff\1\2\5\uffff\1\2\37\uffff\1\10"+
			"\1\uffff\1\2\20\uffff\1\2\35\uffff\2\2\22\uffff\1\2",
			"",
			"\1\2\4\uffff\1\2\15\uffff\1\2\4\uffff\1\11\21\uffff\1\2\37\uffff\1\2"+
			"\1\uffff\1\2\20\uffff\1\2\21\uffff\1\2\10\uffff\1\2\2\uffff\2\2\22\uffff"+
			"\1\2",
			"\1\2\4\uffff\1\2\3\uffff\4\2\4\uffff\1\13\4\uffff\1\2\10\uffff\1\2\4"+
			"\uffff\1\2\3\uffff\1\2\1\uffff\1\2\6\uffff\1\2\30\uffff\1\2\13\uffff"+
			"\1\12\1\uffff\1\2\6\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\2\2\1\uffff"+
			"\2\2\1\uffff\1\2\4\uffff\2\2\15\uffff\2\2\6\uffff\1\2\11\uffff\1\2\14"+
			"\uffff\1\2",
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\4\2\1\14\2\uffff\1\2\1\uffff\1"+
			"\2\3\uffff\3\2\2\uffff\2\2\3\uffff\1\2\3\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\3\2\30\uffff\1\2\13\uffff\1\2\1\uffff\1\15\4"+
			"\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\2\2\1\uffff\1\2\4\uffff\2\2\7\uffff\1\2\3\uffff\4\2\3\uffff"+
			"\1\2\2\uffff\1\2\11\uffff\1\2\14\uffff\1\2\1\uffff\1\2",
			"\1\2\5\uffff\1\2\3\uffff\1\14\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\2"+
			"\uffff\2\2\7\uffff\4\2\1\uffff\1\2\3\uffff\1\2\2\uffff\2\2\31\uffff\1"+
			"\2\13\uffff\1\2\1\uffff\1\15\4\uffff\1\2\3\uffff\1\2\4\uffff\1\2\32\uffff"+
			"\1\2\3\uffff\3\2\4\uffff\1\2\33\uffff\1\2",
			"\1\2\4\uffff\1\2\3\uffff\3\2\5\uffff\1\17\4\uffff\1\2\10\uffff\1\2\4"+
			"\uffff\1\2\3\uffff\1\2\1\uffff\1\2\6\uffff\1\2\30\uffff\1\2\13\uffff"+
			"\1\16\10\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\2\2\1\uffff\2\2\1"+
			"\uffff\1\2\4\uffff\2\2\15\uffff\2\2\6\uffff\1\2\11\uffff\1\2\14\uffff"+
			"\1\2",
			"\1\20\27\uffff\1\2\21\uffff\1\20\37\uffff\1\20\1\uffff\1\20\56\uffff"+
			"\1\20",
			"\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\4\2\1\14\2\uffff\1\2\1\uffff\1"+
			"\2\3\uffff\3\2\2\uffff\2\2\3\uffff\1\2\3\uffff\4\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\2\2\uffff\3\2\30\uffff\1\2\13\uffff\1\2\1\uffff\1\15\4"+
			"\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\5\uffff\1"+
			"\2\1\uffff\2\2\1\uffff\1\2\4\uffff\2\2\7\uffff\1\2\3\uffff\4\2\3\uffff"+
			"\1\2\2\uffff\1\2\11\uffff\1\2\14\uffff\1\2\1\uffff\1\2",
			"\1\2\5\uffff\1\2\3\uffff\1\14\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\2"+
			"\uffff\2\2\7\uffff\4\2\1\uffff\1\2\3\uffff\1\2\2\uffff\2\2\31\uffff\1"+
			"\2\13\uffff\1\2\1\uffff\1\15\4\uffff\1\2\3\uffff\1\2\4\uffff\1\2\32\uffff"+
			"\1\2\3\uffff\3\2\4\uffff\1\2\33\uffff\1\2",
			""
	};

	static final short[] DFA190_eot = DFA.unpackEncodedString(DFA190_eotS);
	static final short[] DFA190_eof = DFA.unpackEncodedString(DFA190_eofS);
	static final char[] DFA190_min = DFA.unpackEncodedStringToUnsignedChars(DFA190_minS);
	static final char[] DFA190_max = DFA.unpackEncodedStringToUnsignedChars(DFA190_maxS);
	static final short[] DFA190_accept = DFA.unpackEncodedString(DFA190_acceptS);
	static final short[] DFA190_special = DFA.unpackEncodedString(DFA190_specialS);
	static final short[][] DFA190_transition;

	static {
		int numStates = DFA190_transitionS.length;
		DFA190_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA190_transition[i] = DFA.unpackEncodedString(DFA190_transitionS[i]);
		}
	}

	protected class DFA190 extends DFA {

		public DFA190(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 190;
			this.eot = DFA190_eot;
			this.eof = DFA190_eof;
			this.min = DFA190_min;
			this.max = DFA190_max;
			this.accept = DFA190_accept;
			this.special = DFA190_special;
			this.transition = DFA190_transition;
		}
		@Override
		public String getDescription() {
			return "966:1: view_type_constraints_clause_item : ( id_expression ( inline_constraint_clause )* -> ^( VIEW_TYPE_CONSTRAINT_ITEM_INLINE[$id_expression.start, \"view constraint item\"] id_expression ( inline_constraint_clause )* ) | out_of_line_constraint_clause );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA190_1 = input.LA(1);
						 
						int index190_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA190_1==REGULAR_ID) ) {s = 4;}
						else if ( (LA190_1==COMMA||LA190_1==RIGHT_PAREN||LA190_1==SQL92_RESERVED_CHECK||(LA190_1 >= SQL92_RESERVED_NOT && LA190_1 <= SQL92_RESERVED_NULL)||LA190_1==SQL92_RESERVED_UNIQUE) ) {s = 2;}
						else if ( (LA190_1==DELIMITED_ID) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {s = 5;}
						 
						input.seek(index190_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA190_4 = input.LA(1);
						 
						int index190_4 = input.index();
						input.rewind();
						s = -1;
						if ( (LA190_4==REGULAR_ID) ) {s = 6;}
						else if ( (LA190_4==DELIMITED_ID||LA190_4==INTRODUCER) ) {s = 2;}
						else if ( (LA190_4==SQL92_RESERVED_CHECK||LA190_4==SQL92_RESERVED_UNIQUE) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {s = 5;}
						else if ( (LA190_4==LEFT_PAREN) ) {s = 7;}
						 
						input.seek(index190_4);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA190_13 = input.LA(1);
						 
						int index190_13 = input.index();
						input.rewind();
						s = -1;
						if ( (LA190_13==LEFT_PAREN) ) {s = 2;}
						else if ( (LA190_13==COMMA||LA190_13==PLSQL_NON_RESERVED_USING||LA190_13==REGULAR_ID||LA190_13==RIGHT_PAREN||LA190_13==SQL92_RESERVED_NOT) && ((input.LT(1).getText().equalsIgnoreCase("constraint")))) {s = 16;}
						 
						input.seek(index190_13);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 190, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA200_eotS =
		"\21\uffff";
	static final String DFA200_eofS =
		"\21\uffff";
	static final String DFA200_minS =
		"\1\134\1\uffff\1\134\1\uffff\1\52\1\27\2\22\1\27\3\22\1\uffff\1\22\1\11"+
		"\1\uffff\1\22";
	static final String DFA200_maxS =
		"\1\u00a1\1\uffff\1\134\1\uffff\1\52\1\134\2\136\1\134\1\u008d\2\136\1"+
		"\uffff\2\u008d\1\uffff\1\u008d";
	static final String DFA200_acceptS =
		"\1\uffff\1\1\1\uffff\1\4\10\uffff\1\2\2\uffff\1\3\1\uffff";
	static final String DFA200_specialS =
		"\21\uffff}>";
	static final String[] DFA200_transitionS = {
			"\1\2\22\uffff\1\3\61\uffff\1\1",
			"",
			"\1\4",
			"",
			"\1\5",
			"\1\7\104\uffff\1\6",
			"\1\10\113\uffff\1\11",
			"\1\10\113\uffff\1\11",
			"\1\13\104\uffff\1\12",
			"\1\14\51\uffff\1\14\37\uffff\1\15\1\uffff\1\14\56\uffff\1\14",
			"\1\10\113\uffff\1\11",
			"\1\10\113\uffff\1\11",
			"",
			"\1\14\4\uffff\1\17\15\uffff\1\17\26\uffff\1\14\37\uffff\1\16\1\uffff"+
			"\1\14\53\uffff\1\14\2\uffff\1\14",
			"\1\17\10\uffff\1\14\27\uffff\1\17\13\uffff\1\17\5\uffff\1\14\37\uffff"+
			"\1\20\1\uffff\1\14\53\uffff\1\14\2\uffff\1\14",
			"",
			"\1\14\27\uffff\1\17\21\uffff\1\14\37\uffff\1\14\1\uffff\1\14\42\uffff"+
			"\1\17\10\uffff\1\14\2\uffff\1\14"
	};

	static final short[] DFA200_eot = DFA.unpackEncodedString(DFA200_eotS);
	static final short[] DFA200_eof = DFA.unpackEncodedString(DFA200_eofS);
	static final char[] DFA200_min = DFA.unpackEncodedStringToUnsignedChars(DFA200_minS);
	static final char[] DFA200_max = DFA.unpackEncodedStringToUnsignedChars(DFA200_maxS);
	static final short[] DFA200_accept = DFA.unpackEncodedString(DFA200_acceptS);
	static final short[] DFA200_special = DFA.unpackEncodedString(DFA200_specialS);
	static final short[][] DFA200_transition;

	static {
		int numStates = DFA200_transitionS.length;
		DFA200_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA200_transition[i] = DFA.unpackEncodedString(DFA200_transitionS[i]);
		}
	}

	protected class DFA200 extends DFA {

		public DFA200(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 200;
			this.eot = DFA200_eot;
			this.eof = DFA200_eof;
			this.min = DFA200_min;
			this.max = DFA200_max;
			this.accept = DFA200_accept;
			this.special = DFA200_special;
			this.transition = DFA200_transition;
		}
		@Override
		public String getDescription() {
			return "1053:1: out_of_line_constraint_def : ( out_of_line_constraint_def_unique | out_of_line_constraint_def_primary_key | out_of_line_constraint_def_foreign_key | checks_clause );";
		}
	}

	static final String DFA232_eotS =
		"\41\uffff";
	static final String DFA232_eofS =
		"\41\uffff";
	static final String DFA232_minS =
		"\1\134\1\52\1\27\2\uffff\1\27\2\22\1\uffff\2\27\1\uffff\1\6\1\27\1\10"+
		"\1\6\2\10\1\uffff\1\6\1\27\1\10\2\27\1\0\1\10\1\0\3\27\1\10\2\27";
	static final String DFA232_maxS =
		"\1\134\1\52\1\166\2\uffff\1\134\2\66\1\uffff\2\134\1\uffff\1\u00ac\1\134"+
		"\1\u00ae\1\u00ac\2\u00ae\1\uffff\1\u00ae\1\134\1\u00ae\2\134\1\0\1\u00ae"+
		"\1\0\2\u0095\1\134\1\u00ae\2\u0095";
	static final String DFA232_acceptS =
		"\3\uffff\1\1\1\2\3\uffff\1\5\2\uffff\1\3\6\uffff\1\4\16\uffff";
	static final String DFA232_specialS =
		"\1\uffff\1\14\1\7\11\uffff\1\5\1\uffff\1\3\1\10\1\0\1\1\1\uffff\1\11\1"+
		"\16\1\2\2\uffff\1\13\1\17\1\21\1\4\1\12\1\15\1\6\1\20\1\22}>";
	static final String[] DFA232_transitionS = {
			"\1\1",
			"\1\2",
			"\1\7\15\uffff\1\5\66\uffff\1\6\31\uffff\1\10",
			"",
			"",
			"\1\12\104\uffff\1\11",
			"\1\14\43\uffff\1\13",
			"\1\14\43\uffff\1\13",
			"",
			"\1\7\36\uffff\1\15\45\uffff\1\6",
			"\1\7\36\uffff\1\15\45\uffff\1\6",
			"",
			"\1\21\4\uffff\1\22\3\uffff\3\22\5\uffff\1\25\4\uffff\1\20\10\uffff\1"+
			"\24\4\uffff\1\22\3\uffff\1\17\1\uffff\1\22\6\uffff\1\22\30\uffff\1\22"+
			"\13\uffff\1\23\10\uffff\1\22\2\uffff\1\22\5\uffff\1\22\4\uffff\2\22\1"+
			"\uffff\2\22\1\uffff\1\22\4\uffff\2\22\15\uffff\2\22\6\uffff\1\22\11\uffff"+
			"\1\22\14\uffff\1\16",
			"\1\27\104\uffff\1\26",
			"\1\22\5\uffff\1\22\6\uffff\1\22\5\uffff\1\22\1\uffff\1\22\2\uffff\2"+
			"\22\7\uffff\1\22\1\uffff\2\22\1\uffff\1\22\3\uffff\1\22\2\uffff\1\22"+
			"\32\uffff\1\22\13\uffff\1\22\1\uffff\1\30\4\uffff\1\22\3\uffff\1\22\4"+
			"\uffff\1\22\32\uffff\1\22\3\uffff\3\22\4\uffff\1\22\33\uffff\1\22",
			"\1\22\4\uffff\1\22\3\uffff\3\22\5\uffff\1\22\4\uffff\1\22\10\uffff\1"+
			"\22\4\uffff\1\22\3\uffff\1\22\1\uffff\1\22\6\uffff\1\22\30\uffff\1\22"+
			"\13\uffff\1\22\10\uffff\1\22\2\uffff\1\22\5\uffff\1\22\5\uffff\1\22\1"+
			"\uffff\2\22\1\uffff\1\22\4\uffff\2\22\16\uffff\1\22\6\uffff\1\22\11\uffff"+
			"\1\22\14\uffff\1\31",
			"\1\22\5\uffff\1\22\6\uffff\1\22\5\uffff\1\22\1\uffff\1\22\2\uffff\2"+
			"\22\7\uffff\1\22\1\uffff\2\22\1\uffff\1\22\3\uffff\1\22\2\uffff\1\22"+
			"\32\uffff\1\22\13\uffff\1\22\1\uffff\1\30\4\uffff\1\22\3\uffff\1\22\4"+
			"\uffff\1\22\32\uffff\1\22\3\uffff\3\22\4\uffff\1\22\33\uffff\1\22",
			"\1\22\5\uffff\1\22\6\uffff\1\22\5\uffff\1\22\1\uffff\1\22\2\uffff\2"+
			"\22\7\uffff\1\22\1\uffff\2\22\1\uffff\1\22\3\uffff\1\22\2\uffff\1\22"+
			"\32\uffff\1\22\13\uffff\1\22\1\uffff\1\30\4\uffff\1\22\3\uffff\1\22\4"+
			"\uffff\1\22\32\uffff\1\22\3\uffff\3\22\4\uffff\1\22\33\uffff\1\22",
			"",
			"\1\22\1\uffff\1\22\2\uffff\1\22\2\uffff\4\22\1\10\2\uffff\1\22\1\uffff"+
			"\1\22\3\uffff\3\22\2\uffff\2\22\3\uffff\1\22\3\uffff\4\22\1\uffff\1\22"+
			"\1\uffff\1\22\1\uffff\1\22\2\uffff\3\22\30\uffff\1\22\13\uffff\1\22\1"+
			"\uffff\1\32\4\uffff\1\22\1\uffff\1\22\1\uffff\2\22\3\uffff\1\22\1\uffff"+
			"\1\22\5\uffff\1\22\1\uffff\2\22\1\uffff\1\22\4\uffff\2\22\7\uffff\1\22"+
			"\3\uffff\4\22\3\uffff\1\22\2\uffff\1\22\11\uffff\1\22\14\uffff\1\22\1"+
			"\uffff\1\22",
			"\1\34\104\uffff\1\33",
			"\1\22\5\uffff\1\22\3\uffff\1\10\2\uffff\1\22\5\uffff\1\22\1\uffff\1"+
			"\22\2\uffff\2\22\7\uffff\4\22\1\uffff\1\22\3\uffff\1\22\2\uffff\2\22"+
			"\31\uffff\1\22\13\uffff\1\22\1\uffff\1\32\4\uffff\1\22\3\uffff\1\22\4"+
			"\uffff\1\22\32\uffff\1\22\3\uffff\3\22\4\uffff\1\22\33\uffff\1\22",
			"\1\7\36\uffff\1\15\45\uffff\1\6",
			"\1\7\36\uffff\1\15\45\uffff\1\6",
			"\1\uffff",
			"\1\22\5\uffff\1\22\6\uffff\1\22\5\uffff\1\22\1\uffff\1\22\2\uffff\2"+
			"\22\7\uffff\1\22\1\uffff\2\22\1\uffff\1\22\3\uffff\1\22\2\uffff\1\22"+
			"\32\uffff\1\22\13\uffff\1\22\1\uffff\1\30\4\uffff\1\22\3\uffff\1\22\4"+
			"\uffff\1\22\32\uffff\1\22\3\uffff\3\22\4\uffff\1\22\33\uffff\1\22",
			"\1\uffff",
			"\1\25\36\uffff\1\35\45\uffff\1\36\32\uffff\1\22\6\uffff\1\22\26\uffff"+
			"\1\22",
			"\1\25\36\uffff\1\35\45\uffff\1\36\32\uffff\1\22\6\uffff\1\22\26\uffff"+
			"\1\22",
			"\1\40\104\uffff\1\37",
			"\1\22\5\uffff\1\22\3\uffff\1\10\2\uffff\1\22\5\uffff\1\22\1\uffff\1"+
			"\22\2\uffff\2\22\7\uffff\4\22\1\uffff\1\22\3\uffff\1\22\2\uffff\2\22"+
			"\31\uffff\1\22\13\uffff\1\22\1\uffff\1\32\4\uffff\1\22\3\uffff\1\22\4"+
			"\uffff\1\22\32\uffff\1\22\3\uffff\3\22\4\uffff\1\22\33\uffff\1\22",
			"\1\25\36\uffff\1\35\45\uffff\1\36\32\uffff\1\22\6\uffff\1\22\26\uffff"+
			"\1\22",
			"\1\25\36\uffff\1\35\45\uffff\1\36\32\uffff\1\22\6\uffff\1\22\26\uffff"+
			"\1\22"
	};

	static final short[] DFA232_eot = DFA.unpackEncodedString(DFA232_eotS);
	static final short[] DFA232_eof = DFA.unpackEncodedString(DFA232_eofS);
	static final char[] DFA232_min = DFA.unpackEncodedStringToUnsignedChars(DFA232_minS);
	static final char[] DFA232_max = DFA.unpackEncodedStringToUnsignedChars(DFA232_maxS);
	static final short[] DFA232_accept = DFA.unpackEncodedString(DFA232_acceptS);
	static final short[] DFA232_special = DFA.unpackEncodedString(DFA232_specialS);
	static final short[][] DFA232_transition;

	static {
		int numStates = DFA232_transitionS.length;
		DFA232_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA232_transition[i] = DFA.unpackEncodedString(DFA232_transitionS[i]);
		}
	}

	protected class DFA232 extends DFA {

		public DFA232(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 232;
			this.eot = DFA232_eot;
			this.eof = DFA232_eof;
			this.min = DFA232_min;
			this.max = DFA232_max;
			this.accept = DFA232_accept;
			this.special = DFA232_special;
			this.transition = DFA232_transition;
		}
		@Override
		public String getDescription() {
			return "1191:9: ( serially_reusable_key | autonomous_transaction_key | exception_init_key LEFT_PAREN exception_name COMMA numeric RIGHT_PAREN | inline_key LEFT_PAREN id1= id COMMA expression RIGHT_PAREN | restrict_references_key LEFT_PAREN ( id | default_key ) ( COMMA id )+ RIGHT_PAREN )";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA232_16 = input.LA(1);
						 
						int index232_16 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_16==RIGHT_PAREN) ) {s = 24;}
						else if ( (LA232_16==ASTERISK||LA232_16==CARRET_OPERATOR_PART||LA232_16==CONCATENATION_OP||LA232_16==EQUALS_OP||LA232_16==EXCLAMATION_OPERATOR_PART||(LA232_16 >= GREATER_THAN_OP && LA232_16 <= GREATER_THAN_OR_EQUALS_OP)||LA232_16==LEFT_BRACKET||(LA232_16 >= LESS_THAN_OP && LA232_16 <= LESS_THAN_OR_EQUALS_OP)||LA232_16==MINUS_SIGN||LA232_16==NOT_EQUAL_OP||LA232_16==PERCENT||LA232_16==PLUS_SIGN||LA232_16==REGULAR_ID||LA232_16==SOLIDUS||LA232_16==SQL92_RESERVED_AND||LA232_16==SQL92_RESERVED_BETWEEN||LA232_16==SQL92_RESERVED_IN||(LA232_16 >= SQL92_RESERVED_IS && LA232_16 <= SQL92_RESERVED_NOT)||LA232_16==SQL92_RESERVED_OR||LA232_16==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_16);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA232_17 = input.LA(1);
						 
						int index232_17 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_17==RIGHT_PAREN) ) {s = 24;}
						else if ( (LA232_17==ASTERISK||LA232_17==CARRET_OPERATOR_PART||LA232_17==CONCATENATION_OP||LA232_17==EQUALS_OP||LA232_17==EXCLAMATION_OPERATOR_PART||(LA232_17 >= GREATER_THAN_OP && LA232_17 <= GREATER_THAN_OR_EQUALS_OP)||LA232_17==LEFT_BRACKET||(LA232_17 >= LESS_THAN_OP && LA232_17 <= LESS_THAN_OR_EQUALS_OP)||LA232_17==MINUS_SIGN||LA232_17==NOT_EQUAL_OP||LA232_17==PERCENT||LA232_17==PLUS_SIGN||LA232_17==REGULAR_ID||LA232_17==SOLIDUS||LA232_17==SQL92_RESERVED_AND||LA232_17==SQL92_RESERVED_BETWEEN||LA232_17==SQL92_RESERVED_IN||(LA232_17 >= SQL92_RESERVED_IS && LA232_17 <= SQL92_RESERVED_NOT)||LA232_17==SQL92_RESERVED_OR||LA232_17==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_17);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA232_21 = input.LA(1);
						 
						int index232_21 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_21==ASTERISK||LA232_21==CARRET_OPERATOR_PART||LA232_21==CONCATENATION_OP||LA232_21==EQUALS_OP||LA232_21==EXCLAMATION_OPERATOR_PART||(LA232_21 >= GREATER_THAN_OP && LA232_21 <= GREATER_THAN_OR_EQUALS_OP)||(LA232_21 >= LEFT_BRACKET && LA232_21 <= LESS_THAN_OR_EQUALS_OP)||LA232_21==MINUS_SIGN||LA232_21==NOT_EQUAL_OP||(LA232_21 >= PERCENT && LA232_21 <= PERIOD)||LA232_21==PLUS_SIGN||LA232_21==REGULAR_ID||LA232_21==SOLIDUS||LA232_21==SQL92_RESERVED_AND||LA232_21==SQL92_RESERVED_BETWEEN||LA232_21==SQL92_RESERVED_IN||(LA232_21 >= SQL92_RESERVED_IS && LA232_21 <= SQL92_RESERVED_NOT)||LA232_21==SQL92_RESERVED_OR||LA232_21==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						else if ( (LA232_21==RIGHT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 26;}
						else if ( (LA232_21==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}
						 
						input.seek(index232_21);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA232_14 = input.LA(1);
						 
						int index232_14 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_14==RIGHT_PAREN) ) {s = 24;}
						else if ( (LA232_14==ASTERISK||LA232_14==CARRET_OPERATOR_PART||LA232_14==CONCATENATION_OP||LA232_14==EQUALS_OP||LA232_14==EXCLAMATION_OPERATOR_PART||(LA232_14 >= GREATER_THAN_OP && LA232_14 <= GREATER_THAN_OR_EQUALS_OP)||LA232_14==LEFT_BRACKET||(LA232_14 >= LESS_THAN_OP && LA232_14 <= LESS_THAN_OR_EQUALS_OP)||LA232_14==MINUS_SIGN||LA232_14==NOT_EQUAL_OP||LA232_14==PERCENT||LA232_14==PLUS_SIGN||LA232_14==REGULAR_ID||LA232_14==SOLIDUS||LA232_14==SQL92_RESERVED_AND||LA232_14==SQL92_RESERVED_BETWEEN||LA232_14==SQL92_RESERVED_IN||(LA232_14 >= SQL92_RESERVED_IS && LA232_14 <= SQL92_RESERVED_NOT)||LA232_14==SQL92_RESERVED_OR||LA232_14==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_14);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA232_27 = input.LA(1);
						 
						int index232_27 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_27==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 29;}
						else if ( (LA232_27==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 30;}
						else if ( (LA232_27==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 21;}
						else if ( (LA232_27==SQL92_RESERVED_DELETE||LA232_27==SQL92_RESERVED_EXISTS||LA232_27==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_27);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA232_12 = input.LA(1);
						 
						int index232_12 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_12==UNSIGNED_INTEGER) ) {s = 14;}
						else if ( (LA232_12==MINUS_SIGN) ) {s = 15;}
						else if ( (LA232_12==EXACT_NUM_LIT) ) {s = 16;}
						else if ( (LA232_12==APPROXIMATE_NUM_LIT) ) {s = 17;}
						else if ( (LA232_12==BINDVAR||(LA232_12 >= CHAR_STRING && LA232_12 <= COLON)||LA232_12==LEFT_PAREN||LA232_12==NATIONAL_CHAR_STRING_LIT||LA232_12==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA232_12==PLUS_SIGN||LA232_12==SQL92_RESERVED_ALL||LA232_12==SQL92_RESERVED_ANY||LA232_12==SQL92_RESERVED_CASE||(LA232_12 >= SQL92_RESERVED_CURSOR && LA232_12 <= SQL92_RESERVED_DATE)||(LA232_12 >= SQL92_RESERVED_DEFAULT && LA232_12 <= SQL92_RESERVED_DELETE)||LA232_12==SQL92_RESERVED_DISTINCT||(LA232_12 >= SQL92_RESERVED_EXISTS && LA232_12 <= SQL92_RESERVED_FALSE)||(LA232_12 >= SQL92_RESERVED_NOT && LA232_12 <= SQL92_RESERVED_NULL)||LA232_12==SQL92_RESERVED_PRIOR||LA232_12==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						else if ( (LA232_12==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 19;}
						else if ( (LA232_12==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 20;}
						else if ( (LA232_12==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 21;}
						 
						input.seek(index232_12);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA232_30 = input.LA(1);
						 
						int index232_30 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_30==ASTERISK||LA232_30==CARRET_OPERATOR_PART||LA232_30==CONCATENATION_OP||LA232_30==EQUALS_OP||LA232_30==EXCLAMATION_OPERATOR_PART||(LA232_30 >= GREATER_THAN_OP && LA232_30 <= GREATER_THAN_OR_EQUALS_OP)||(LA232_30 >= LEFT_BRACKET && LA232_30 <= LESS_THAN_OR_EQUALS_OP)||LA232_30==MINUS_SIGN||LA232_30==NOT_EQUAL_OP||(LA232_30 >= PERCENT && LA232_30 <= PERIOD)||LA232_30==PLUS_SIGN||LA232_30==REGULAR_ID||LA232_30==SOLIDUS||LA232_30==SQL92_RESERVED_AND||LA232_30==SQL92_RESERVED_BETWEEN||LA232_30==SQL92_RESERVED_IN||(LA232_30 >= SQL92_RESERVED_IS && LA232_30 <= SQL92_RESERVED_NOT)||LA232_30==SQL92_RESERVED_OR||LA232_30==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						else if ( (LA232_30==RIGHT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 26;}
						else if ( (LA232_30==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}
						 
						input.seek(index232_30);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA232_2 = input.LA(1);
						 
						int index232_2 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_2==INTRODUCER) ) {s = 5;}
						else if ( (LA232_2==REGULAR_ID) ) {s = 6;}
						else if ( (LA232_2==DELIMITED_ID) ) {s = 7;}
						else if ( (LA232_2==SQL92_RESERVED_DEFAULT) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}
						 
						input.seek(index232_2);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA232_15 = input.LA(1);
						 
						int index232_15 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_15==UNSIGNED_INTEGER) ) {s = 25;}
						else if ( (LA232_15==APPROXIMATE_NUM_LIT||LA232_15==BINDVAR||(LA232_15 >= CHAR_STRING && LA232_15 <= COLON)||LA232_15==DELIMITED_ID||LA232_15==EXACT_NUM_LIT||LA232_15==INTRODUCER||LA232_15==LEFT_PAREN||LA232_15==MINUS_SIGN||LA232_15==NATIONAL_CHAR_STRING_LIT||LA232_15==PLSQL_NON_RESERVED_CONNECT_BY_ROOT||LA232_15==PLUS_SIGN||LA232_15==REGULAR_ID||LA232_15==SQL92_RESERVED_ALL||LA232_15==SQL92_RESERVED_ANY||LA232_15==SQL92_RESERVED_CASE||LA232_15==SQL92_RESERVED_DATE||(LA232_15 >= SQL92_RESERVED_DEFAULT && LA232_15 <= SQL92_RESERVED_DELETE)||LA232_15==SQL92_RESERVED_DISTINCT||(LA232_15 >= SQL92_RESERVED_EXISTS && LA232_15 <= SQL92_RESERVED_FALSE)||LA232_15==SQL92_RESERVED_NULL||LA232_15==SQL92_RESERVED_PRIOR||LA232_15==SQL92_RESERVED_TRUE) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_15);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA232_19 = input.LA(1);
						 
						int index232_19 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_19==APPROXIMATE_NUM_LIT||LA232_19==ASTERISK||LA232_19==BINDVAR||(LA232_19 >= CARRET_OPERATOR_PART && LA232_19 <= COLON)||LA232_19==CONCATENATION_OP||LA232_19==DELIMITED_ID||(LA232_19 >= EQUALS_OP && LA232_19 <= EXCLAMATION_OPERATOR_PART)||(LA232_19 >= GREATER_THAN_OP && LA232_19 <= GREATER_THAN_OR_EQUALS_OP)||LA232_19==INTRODUCER||(LA232_19 >= LEFT_BRACKET && LA232_19 <= LESS_THAN_OR_EQUALS_OP)||LA232_19==MINUS_SIGN||LA232_19==NATIONAL_CHAR_STRING_LIT||LA232_19==NOT_EQUAL_OP||(LA232_19 >= PERCENT && LA232_19 <= PLSQL_NON_RESERVED_CONNECT_BY_ROOT)||LA232_19==PLUS_SIGN||LA232_19==REGULAR_ID||LA232_19==SOLIDUS||LA232_19==SQL92_RESERVED_ALL||(LA232_19 >= SQL92_RESERVED_AND && LA232_19 <= SQL92_RESERVED_ANY)||LA232_19==SQL92_RESERVED_BETWEEN||LA232_19==SQL92_RESERVED_CASE||LA232_19==SQL92_RESERVED_DATE||(LA232_19 >= SQL92_RESERVED_DEFAULT && LA232_19 <= SQL92_RESERVED_DELETE)||LA232_19==SQL92_RESERVED_DISTINCT||(LA232_19 >= SQL92_RESERVED_EXISTS && LA232_19 <= SQL92_RESERVED_FALSE)||LA232_19==SQL92_RESERVED_IN||(LA232_19 >= SQL92_RESERVED_IS && LA232_19 <= SQL92_RESERVED_NULL)||LA232_19==SQL92_RESERVED_OR||LA232_19==SQL92_RESERVED_PRIOR||LA232_19==SQL92_RESERVED_TRUE||LA232_19==UNSIGNED_INTEGER||LA232_19==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						else if ( (LA232_19==RIGHT_PAREN) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 26;}
						else if ( (LA232_19==COMMA) && ((input.LT(1).getText().equalsIgnoreCase("restrict_references")))) {s = 8;}
						 
						input.seek(index232_19);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA232_28 = input.LA(1);
						 
						int index232_28 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_28==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 29;}
						else if ( (LA232_28==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 30;}
						else if ( (LA232_28==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 21;}
						else if ( (LA232_28==SQL92_RESERVED_DELETE||LA232_28==SQL92_RESERVED_EXISTS||LA232_28==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_28);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA232_24 = input.LA(1);
						 
						int index232_24 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("exception_init"))) ) {s = 11;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("inline"))) ) {s = 18;}
						 
						input.seek(index232_24);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA232_1 = input.LA(1);
						 
						int index232_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_1==LEFT_PAREN) ) {s = 2;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("serially_reusable"))) ) {s = 3;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("autonomous_transaction"))) ) {s = 4;}
						 
						input.seek(index232_1);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA232_29 = input.LA(1);
						 
						int index232_29 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_29==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 31;}
						else if ( (LA232_29==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 32;}
						 
						input.seek(index232_29);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA232_20 = input.LA(1);
						 
						int index232_20 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_20==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 27;}
						else if ( (LA232_20==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 28;}
						 
						input.seek(index232_20);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA232_25 = input.LA(1);
						 
						int index232_25 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_25==RIGHT_PAREN) ) {s = 24;}
						else if ( (LA232_25==ASTERISK||LA232_25==CARRET_OPERATOR_PART||LA232_25==CONCATENATION_OP||LA232_25==EQUALS_OP||LA232_25==EXCLAMATION_OPERATOR_PART||(LA232_25 >= GREATER_THAN_OP && LA232_25 <= GREATER_THAN_OR_EQUALS_OP)||LA232_25==LEFT_BRACKET||(LA232_25 >= LESS_THAN_OP && LA232_25 <= LESS_THAN_OR_EQUALS_OP)||LA232_25==MINUS_SIGN||LA232_25==NOT_EQUAL_OP||LA232_25==PERCENT||LA232_25==PLUS_SIGN||LA232_25==REGULAR_ID||LA232_25==SOLIDUS||LA232_25==SQL92_RESERVED_AND||LA232_25==SQL92_RESERVED_BETWEEN||LA232_25==SQL92_RESERVED_IN||(LA232_25 >= SQL92_RESERVED_IS && LA232_25 <= SQL92_RESERVED_NOT)||LA232_25==SQL92_RESERVED_OR||LA232_25==VERTICAL_BAR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_25);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA232_31 = input.LA(1);
						 
						int index232_31 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_31==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 30;}
						else if ( (LA232_31==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 21;}
						else if ( (LA232_31==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 29;}
						else if ( (LA232_31==SQL92_RESERVED_DELETE||LA232_31==SQL92_RESERVED_EXISTS||LA232_31==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_31);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA232_26 = input.LA(1);
						 
						int index232_26 = input.index();
						input.rewind();
						s = -1;
						if ( ((input.LT(1).getText().equalsIgnoreCase("inline"))) ) {s = 18;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("restrict_references"))) ) {s = 8;}
						 
						input.seek(index232_26);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA232_32 = input.LA(1);
						 
						int index232_32 = input.index();
						input.rewind();
						s = -1;
						if ( (LA232_32==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 30;}
						else if ( (LA232_32==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 21;}
						else if ( (LA232_32==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("restrict_references"))||(input.LT(1).getText().equalsIgnoreCase("inline"))))) {s = 29;}
						else if ( (LA232_32==SQL92_RESERVED_DELETE||LA232_32==SQL92_RESERVED_EXISTS||LA232_32==SQL92_RESERVED_PRIOR) && ((input.LT(1).getText().equalsIgnoreCase("inline")))) {s = 18;}
						 
						input.seek(index232_32);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 232, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA233_eotS =
		"\11\uffff";
	static final String DFA233_eofS =
		"\11\uffff";
	static final String DFA233_minS =
		"\1\13\1\27\1\uffff\2\65\1\27\1\uffff\2\65";
	static final String DFA233_maxS =
		"\2\134\1\uffff\2\u008b\1\134\1\uffff\2\u008b";
	static final String DFA233_acceptS =
		"\2\uffff\1\2\3\uffff\1\1\2\uffff";
	static final String DFA233_specialS =
		"\3\uffff\1\0\1\2\2\uffff\1\1\1\3}>";
	static final String[] DFA233_transitionS = {
			"\1\2\5\uffff\1\2\5\uffff\1\2\15\uffff\1\2\66\uffff\1\1",
			"\1\4\104\uffff\1\3",
			"",
			"\1\2\1\5\124\uffff\1\6",
			"\1\2\1\5\124\uffff\1\6",
			"\1\10\104\uffff\1\7",
			"",
			"\1\2\1\5\124\uffff\1\6",
			"\1\2\1\5\124\uffff\1\6"
	};

	static final short[] DFA233_eot = DFA.unpackEncodedString(DFA233_eotS);
	static final short[] DFA233_eof = DFA.unpackEncodedString(DFA233_eofS);
	static final char[] DFA233_min = DFA.unpackEncodedStringToUnsignedChars(DFA233_minS);
	static final char[] DFA233_max = DFA.unpackEncodedStringToUnsignedChars(DFA233_maxS);
	static final short[] DFA233_accept = DFA.unpackEncodedString(DFA233_acceptS);
	static final short[] DFA233_special = DFA.unpackEncodedString(DFA233_specialS);
	static final short[][] DFA233_transition;

	static {
		int numStates = DFA233_transitionS.length;
		DFA233_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA233_transition[i] = DFA.unpackEncodedString(DFA233_transitionS[i]);
		}
	}

	protected class DFA233 extends DFA {

		public DFA233(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 233;
			this.eot = DFA233_eot;
			this.eof = DFA233_eof;
			this.min = DFA233_min;
			this.max = DFA233_max;
			this.accept = DFA233_accept;
			this.special = DFA233_special;
			this.transition = DFA233_transition;
		}
		@Override
		public String getDescription() {
			return "1205:1: record_declaration : ( record_type_dec | record_var_dec );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA233_3 = input.LA(1);
						 
						int index233_3 = input.index();
						input.rewind();
						s = -1;
						if ( (LA233_3==PERIOD) ) {s = 5;}
						else if ( (LA233_3==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}
						else if ( (LA233_3==PERCENT) ) {s = 2;}
						 
						input.seek(index233_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA233_7 = input.LA(1);
						 
						int index233_7 = input.index();
						input.rewind();
						s = -1;
						if ( (LA233_7==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}
						else if ( (LA233_7==PERIOD) ) {s = 5;}
						else if ( (LA233_7==PERCENT) ) {s = 2;}
						 
						input.seek(index233_7);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA233_4 = input.LA(1);
						 
						int index233_4 = input.index();
						input.rewind();
						s = -1;
						if ( (LA233_4==PERIOD) ) {s = 5;}
						else if ( (LA233_4==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}
						else if ( (LA233_4==PERCENT) ) {s = 2;}
						 
						input.seek(index233_4);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA233_8 = input.LA(1);
						 
						int index233_8 = input.index();
						input.rewind();
						s = -1;
						if ( (LA233_8==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}
						else if ( (LA233_8==PERIOD) ) {s = 5;}
						else if ( (LA233_8==PERCENT) ) {s = 2;}
						 
						input.seek(index233_8);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 233, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA241_eotS =
		"\11\uffff";
	static final String DFA241_eofS =
		"\11\uffff";
	static final String DFA241_minS =
		"\2\27\1\uffff\1\27\1\65\1\27\1\uffff\2\65";
	static final String DFA241_maxS =
		"\1\134\1\164\1\uffff\1\u00a7\1\u008b\1\134\1\uffff\2\u008b";
	static final String DFA241_acceptS =
		"\2\uffff\1\2\3\uffff\1\1\2\uffff";
	static final String DFA241_specialS =
		"\3\uffff\1\1\1\3\2\uffff\1\2\1\0}>";
	static final String[] DFA241_transitionS = {
			"\1\2\15\uffff\1\2\66\uffff\1\1",
			"\1\4\104\uffff\1\3\27\uffff\1\2",
			"",
			"\1\2\22\uffff\1\2\12\uffff\1\2\1\5\45\uffff\1\2\3\uffff\1\2\52\uffff"+
			"\1\6\33\uffff\1\2",
			"\1\2\1\5\51\uffff\1\2\52\uffff\1\6",
			"\1\10\104\uffff\1\7",
			"",
			"\1\2\1\5\51\uffff\1\2\52\uffff\1\6",
			"\1\2\1\5\51\uffff\1\2\52\uffff\1\6"
	};

	static final short[] DFA241_eot = DFA.unpackEncodedString(DFA241_eotS);
	static final short[] DFA241_eof = DFA.unpackEncodedString(DFA241_eofS);
	static final char[] DFA241_min = DFA.unpackEncodedStringToUnsignedChars(DFA241_minS);
	static final char[] DFA241_max = DFA.unpackEncodedStringToUnsignedChars(DFA241_maxS);
	static final short[] DFA241_accept = DFA.unpackEncodedString(DFA241_acceptS);
	static final short[] DFA241_special = DFA.unpackEncodedString(DFA241_specialS);
	static final short[][] DFA241_transition;

	static {
		int numStates = DFA241_transitionS.length;
		DFA241_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA241_transition[i] = DFA.unpackEncodedString(DFA241_transitionS[i]);
		}
	}

	protected class DFA241 extends DFA {

		public DFA241(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 241;
			this.eot = DFA241_eot;
			this.eof = DFA241_eof;
			this.min = DFA241_min;
			this.max = DFA241_max;
			this.accept = DFA241_accept;
			this.special = DFA241_special;
			this.transition = DFA241_transition;
		}
		@Override
		public String getDescription() {
			return "1237:10: ( table_type_dec | table_var_dec )";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA241_8 = input.LA(1);
						 
						int index241_8 = input.index();
						input.rewind();
						s = -1;
						if ( (LA241_8==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}
						else if ( (LA241_8==PERIOD) ) {s = 5;}
						else if ( (LA241_8==PERCENT||LA241_8==SEMICOLON) ) {s = 2;}
						 
						input.seek(index241_8);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA241_3 = input.LA(1);
						 
						int index241_3 = input.index();
						input.rewind();
						s = -1;
						if ( (LA241_3==PERIOD) ) {s = 5;}
						else if ( (LA241_3==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}
						else if ( (LA241_3==DELIMITED_ID||LA241_3==LEFT_PAREN||LA241_3==PERCENT||LA241_3==REGULAR_ID||LA241_3==SEMICOLON||LA241_3==SQL92_RESERVED_WITH) ) {s = 2;}
						 
						input.seek(index241_3);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA241_7 = input.LA(1);
						 
						int index241_7 = input.index();
						input.rewind();
						s = -1;
						if ( (LA241_7==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}
						else if ( (LA241_7==PERIOD) ) {s = 5;}
						else if ( (LA241_7==PERCENT||LA241_7==SEMICOLON) ) {s = 2;}
						 
						input.seek(index241_7);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA241_4 = input.LA(1);
						 
						int index241_4 = input.index();
						input.rewind();
						s = -1;
						if ( (LA241_4==PERIOD) ) {s = 5;}
						else if ( (LA241_4==SQL92_RESERVED_IS) && ((input.LT(1).getText().equalsIgnoreCase("type")))) {s = 6;}
						else if ( (LA241_4==PERCENT||LA241_4==SEMICOLON) ) {s = 2;}
						 
						input.seek(index241_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 241, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA283_eotS =
		"\21\uffff";
	static final String DFA283_eofS =
		"\21\uffff";
	static final String DFA283_minS =
		"\1\134\1\13\1\uffff\1\27\2\66\1\13\1\u00ac\2\27\3\uffff\1\13\3\27";
	static final String DFA283_maxS =
		"\1\u0080\1\134\1\uffff\1\134\3\u0081\1\u00ac\2\134\3\uffff\1\u0081\3\134";
	static final String DFA283_acceptS =
		"\2\uffff\1\3\7\uffff\1\4\1\1\1\2\4\uffff";
	static final String DFA283_specialS =
		"\1\4\1\3\1\uffff\1\14\1\12\1\1\1\5\1\0\1\7\1\13\3\uffff\1\2\1\11\1\6\1"+
		"\10}>";
	static final String[] DFA283_transitionS = {
			"\1\1\43\uffff\1\2",
			"\1\6\5\uffff\1\7\5\uffff\1\5\15\uffff\1\3\66\uffff\1\4",
			"",
			"\1\11\104\uffff\1\10",
			"\1\12\112\uffff\1\12",
			"\1\12\112\uffff\1\12",
			"\1\12\5\uffff\1\12\44\uffff\1\12\45\uffff\1\12\44\uffff\1\12",
			"\1\15",
			"\1\5\36\uffff\1\16\45\uffff\1\4",
			"\1\5\36\uffff\1\16\45\uffff\1\4",
			"",
			"",
			"",
			"\1\12\5\uffff\1\12\44\uffff\1\12\45\uffff\1\12\44\uffff\1\12",
			"\1\20\104\uffff\1\17",
			"\1\5\36\uffff\1\16\45\uffff\1\4",
			"\1\5\36\uffff\1\16\45\uffff\1\4"
	};

	static final short[] DFA283_eot = DFA.unpackEncodedString(DFA283_eotS);
	static final short[] DFA283_eof = DFA.unpackEncodedString(DFA283_eofS);
	static final char[] DFA283_min = DFA.unpackEncodedStringToUnsignedChars(DFA283_minS);
	static final char[] DFA283_max = DFA.unpackEncodedStringToUnsignedChars(DFA283_maxS);
	static final short[] DFA283_accept = DFA.unpackEncodedString(DFA283_acceptS);
	static final short[] DFA283_special = DFA.unpackEncodedString(DFA283_specialS);
	static final short[][] DFA283_transition;

	static {
		int numStates = DFA283_transitionS.length;
		DFA283_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA283_transition[i] = DFA.unpackEncodedString(DFA283_transitionS[i]);
		}
	}

	protected class DFA283 extends DFA {

		public DFA283(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 283;
			this.eot = DFA283_eot;
			this.eof = DFA283_eof;
			this.min = DFA283_min;
			this.max = DFA283_max;
			this.accept = DFA283_accept;
			this.special = DFA283_special;
			this.transition = DFA283_transition;
		}
		@Override
		public String getDescription() {
			return "1501:1: cursor_manipulation_statements : ( close_statement | open_statement | fetch_statement | open_for_statement );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA283_7 = input.LA(1);
						 
						int index283_7 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_7==UNSIGNED_INTEGER) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 13;}
						 
						input.seek(index283_7);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA283_5 = input.LA(1);
						 
						int index283_5 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_5==PERIOD||LA283_5==SQL92_RESERVED_FOR) && ((input.LT(1).getText().equalsIgnoreCase("open")))) {s = 10;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("close"))) ) {s = 11;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("open"))) ) {s = 12;}
						 
						input.seek(index283_5);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA283_13 = input.LA(1);
						 
						int index283_13 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_13==BINDVAR||LA283_13==COLON||LA283_13==PERIOD||LA283_13==REGULAR_ID||LA283_13==SQL92_RESERVED_FOR) && ((input.LT(1).getText().equalsIgnoreCase("open")))) {s = 10;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("close"))) ) {s = 11;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("open"))) ) {s = 12;}
						 
						input.seek(index283_13);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA283_1 = input.LA(1);
						 
						int index283_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_1==INTRODUCER) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 3;}
						else if ( (LA283_1==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 4;}
						else if ( (LA283_1==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 5;}
						else if ( (LA283_1==BINDVAR) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 6;}
						else if ( (LA283_1==COLON) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 7;}
						 
						input.seek(index283_1);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA283_0 = input.LA(1);
						 
						int index283_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_0==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 1;}
						else if ( (LA283_0==SQL92_RESERVED_FETCH) ) {s = 2;}
						 
						input.seek(index283_0);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA283_6 = input.LA(1);
						 
						int index283_6 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_6==BINDVAR||LA283_6==COLON||LA283_6==PERIOD||LA283_6==REGULAR_ID||LA283_6==SQL92_RESERVED_FOR) && ((input.LT(1).getText().equalsIgnoreCase("open")))) {s = 10;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("close"))) ) {s = 11;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("open"))) ) {s = 12;}
						 
						input.seek(index283_6);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA283_15 = input.LA(1);
						 
						int index283_15 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_15==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 4;}
						else if ( (LA283_15==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 5;}
						else if ( (LA283_15==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 14;}
						 
						input.seek(index283_15);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA283_8 = input.LA(1);
						 
						int index283_8 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_8==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 14;}
						else if ( (LA283_8==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 4;}
						else if ( (LA283_8==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 5;}
						 
						input.seek(index283_8);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA283_16 = input.LA(1);
						 
						int index283_16 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_16==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 4;}
						else if ( (LA283_16==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 5;}
						else if ( (LA283_16==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 14;}
						 
						input.seek(index283_16);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA283_14 = input.LA(1);
						 
						int index283_14 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_14==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 15;}
						else if ( (LA283_14==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 16;}
						 
						input.seek(index283_14);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA283_4 = input.LA(1);
						 
						int index283_4 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_4==PERIOD||LA283_4==SQL92_RESERVED_FOR) && ((input.LT(1).getText().equalsIgnoreCase("open")))) {s = 10;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("close"))) ) {s = 11;}
						else if ( ((input.LT(1).getText().equalsIgnoreCase("open"))) ) {s = 12;}
						 
						input.seek(index283_4);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA283_9 = input.LA(1);
						 
						int index283_9 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_9==PERIOD) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 14;}
						else if ( (LA283_9==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 4;}
						else if ( (LA283_9==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 5;}
						 
						input.seek(index283_9);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA283_3 = input.LA(1);
						 
						int index283_3 = input.index();
						input.rewind();
						s = -1;
						if ( (LA283_3==REGULAR_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 8;}
						else if ( (LA283_3==DELIMITED_ID) && (((input.LT(1).getText().equalsIgnoreCase("open"))||(input.LT(1).getText().equalsIgnoreCase("close"))))) {s = 9;}
						 
						input.seek(index283_3);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 283, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	public static final BitSet FOLLOW_unit_statement_in_compilation_unit892 = new BitSet(new long[]{0x0000000000000000L,0x0402004010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_EOF_in_compilation_unit895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unit_statement_in_sql_script934 = new BitSet(new long[]{0x0000000000000000L,0x0402004810020000L,0x0000000000400000L});
	public static final BitSet FOLLOW_sql_plus_command_in_sql_script938 = new BitSet(new long[]{0x0000000000000000L,0x0402004810020000L,0x0000000000400000L});
	public static final BitSet FOLLOW_EOF_in_sql_script942 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_function_in_unit_statement988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_unit_statement999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_unit_statement1010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_unit_statement1021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_unit_statement1032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_unit_statement1043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_unit_statement1054 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_unit_statement1065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_package_in_unit_statement1091 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_unit_statement1102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_view_in_unit_statement1116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_unit_statement1131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_unit_statement1142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_unit_statement1153 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_unit_statement1164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_unit_statement1175 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_unit_statement1186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_unit_statement1197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_type_in_unit_statement1208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_key_in_drop_function1232 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_key_in_drop_function1234 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_name_in_drop_function1236 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_drop_function1246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_key_in_alter_function1283 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_key_in_alter_function1285 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_name_in_alter_function1287 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_compile_key_in_alter_function1297 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_debug_key_in_alter_function1299 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_function1302 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_reuse_key_in_alter_function1314 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_settings_key_in_alter_function1316 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_alter_function1328 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_create_function_body1383 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_or_key_in_create_function_body1387 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_replace_key_in_create_function_body1389 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_key_in_create_function_body1396 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_name_in_create_function_body1398 = new BitSet(new long[]{0x0000040000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_create_function_body1417 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_in_create_function_body1419 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_create_function_body1422 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_in_create_function_body1424 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_create_function_body1428 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_return_key_in_create_function_body1440 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_create_function_body1442 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_function_body1461 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_parallel_enable_clause_in_create_function_body1463 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_result_cache_clause_in_create_function_body1465 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_deterministic_key_in_create_function_body1467 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_pipelined_key_in_create_function_body1498 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_create_function_body1503 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_as_key_in_create_function_body1507 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_block_in_create_function_body1538 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_call_spec_in_create_function_body1568 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_pipelined_key_in_create_function_body1601 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_aggregate_key_in_create_function_body1603 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_using_key_in_create_function_body1606 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_implementation_type_name_in_create_function_body1608 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_create_function_body1636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parallel_enable_key_in_parallel_enable_clause1951 = new BitSet(new long[]{0x0000040000000002L});
	public static final BitSet FOLLOW_partition_by_clause_in_parallel_enable_clause1954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_partition_by_clause1983 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_partition_key_in_partition_by_clause1997 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_partition_by_clause1999 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_by_key_in_partition_by_clause2001 = new BitSet(new long[]{0x0000000000000000L,0x0000010010000000L});
	public static final BitSet FOLLOW_any_key_in_partition_by_clause2021 = new BitSet(new long[]{0x0000000000000000L,0x0000000050000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_hash_key_in_partition_by_clause2043 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_range_key_in_partition_by_clause2047 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_partition_by_clause2050 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause2052 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_partition_by_clause2055 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_column_name_in_partition_by_clause2057 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_partition_by_clause2061 = new BitSet(new long[]{0x0000000000000000L,0x0000000050000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_streaming_clause_in_partition_by_clause2089 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_partition_by_clause2100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_result_cache_key_in_result_cache_clause2252 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_relies_on_part_in_result_cache_clause2254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_relies_on_key_in_relies_on_part2292 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_relies_on_part2295 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableview_name_in_relies_on_part2298 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_relies_on_part2301 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableview_name_in_relies_on_part2304 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_relies_on_part2308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_order_key_in_streaming_clause2330 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_cluster_key_in_streaming_clause2332 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_streaming_clause2335 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_by_key_in_streaming_clause2337 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_streaming_clause2348 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_column_name_in_streaming_clause2350 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_streaming_clause2353 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_column_name_in_streaming_clause2355 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_streaming_clause2359 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_key_in_drop_package2417 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_key_in_drop_package2419 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_body_key_in_drop_package2421 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_name_in_drop_package2424 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_drop_package2434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_key_in_alter_package2474 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_key_in_alter_package2476 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_name_in_alter_package2478 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_compile_key_in_alter_package2488 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_debug_key_in_alter_package2490 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_package_key_in_alter_package2494 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_body_key_in_alter_package2496 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_specification_key_in_alter_package2498 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_package2510 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_reuse_key_in_alter_package2522 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_settings_key_in_alter_package2524 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_alter_package2536 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_create_package2616 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_or_key_in_create_package2620 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_replace_key_in_create_package2622 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_key_in_create_package2627 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_package_spec_in_create_package2639 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_package_body_in_create_package2645 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_create_package2658 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_key_in_package_body2718 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_name_in_package_body2722 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_package_body2725 = new BitSet(new long[]{0x0000002000820800L,0x100A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_as_key_in_package_body2729 = new BitSet(new long[]{0x0000002000820800L,0x100A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_obj_body_in_package_body2740 = new BitSet(new long[]{0x0000002000820800L,0x100A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_begin_key_in_package_body2752 = new BitSet(new long[]{0x00000C2000820800L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_seq_of_statements_in_package_body2764 = new BitSet(new long[]{0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_package_body2776 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_end_key_in_package_body2798 = new BitSet(new long[]{0x0000002000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_name_in_package_body2800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_package_name_in_package_spec2845 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_package_spec2847 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_package_spec2851 = new BitSet(new long[]{0x0000002000820800L,0x1008000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_as_key_in_package_spec2855 = new BitSet(new long[]{0x0000002000820800L,0x1008000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_package_obj_spec_in_package_spec2866 = new BitSet(new long[]{0x0000002000820800L,0x1008000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_end_key_in_package_spec2877 = new BitSet(new long[]{0x0000002000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_name_in_package_spec2879 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec2927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec2939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec2951 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec2963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_spec2975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_spec2987 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec2999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_spec3011 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec3023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_key_in_procedure_spec3044 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_procedure_name_in_procedure_spec3046 = new BitSet(new long[]{0x0000040000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_procedure_spec3059 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_in_procedure_spec3061 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_procedure_spec3065 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_in_procedure_spec3067 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_procedure_spec3072 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_procedure_spec3077 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_key_in_function_spec3123 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_name_in_function_spec3125 = new BitSet(new long[]{0x0000040000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_function_spec3137 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_in_function_spec3139 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_function_spec3143 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_in_function_spec3145 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_function_spec3149 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_return_key_in_function_spec3162 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_function_spec3164 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_pipelined_key_in_function_spec3177 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_result_cache_clause_in_function_spec3181 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_deterministic_key_in_function_spec3185 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_pipelined_key_in_function_spec3197 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_function_spec3208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_package_obj_body3310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_package_obj_body3322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_package_obj_body3334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body3347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body3360 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_package_obj_body3373 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_package_obj_body3386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_package_obj_body3398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_package_obj_body3410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_package_obj_body3422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_key_in_drop_procedure3449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_procedure_key_in_drop_procedure3451 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_procedure_name_in_drop_procedure3453 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_drop_procedure3463 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_key_in_alter_procedure3500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_procedure_key_in_alter_procedure3502 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_procedure_name_in_alter_procedure3504 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_compile_key_in_alter_procedure3514 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_debug_key_in_alter_procedure3516 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_procedure3519 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_reuse_key_in_alter_procedure3531 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_settings_key_in_alter_procedure3533 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_alter_procedure3545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_create_procedure_body3600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000440000L});
	public static final BitSet FOLLOW_or_key_in_create_procedure_body3604 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_replace_key_in_create_procedure_body3606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_procedure_key_in_create_procedure_body3613 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_procedure_name_in_create_procedure_body3615 = new BitSet(new long[]{0x0000040000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_create_procedure_body3633 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_in_create_procedure_body3635 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_create_procedure_body3639 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_in_create_procedure_body3641 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_create_procedure_body3646 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_create_procedure_body3666 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_create_procedure_body3679 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_as_key_in_create_procedure_body3683 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_block_in_create_procedure_body3706 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_call_spec_in_create_procedure_body3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_external_key_in_create_procedure_body3751 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_create_procedure_body3785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_key_in_drop_trigger4038 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_key_in_drop_trigger4040 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_name_in_drop_trigger4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_drop_trigger4052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_key_in_alter_trigger4097 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_key_in_alter_trigger4099 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger4103 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_enable_key_in_alter_trigger4115 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_disable_key_in_alter_trigger4117 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_rename_key_in_alter_trigger4131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_to_key_in_alter_trigger4133 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_name_in_alter_trigger4137 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_compile_key_in_alter_trigger4150 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_debug_key_in_alter_trigger4152 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_alter_trigger4155 = new BitSet(new long[]{0x0000002000800000L,0x0000000110000000L});
	public static final BitSet FOLLOW_reuse_key_in_alter_trigger4159 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_settings_key_in_alter_trigger4161 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_alter_trigger4174 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_create_trigger4262 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_or_key_in_create_trigger4266 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_replace_key_in_create_trigger4268 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_key_in_create_trigger4273 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_name_in_create_trigger4275 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_simple_dml_trigger_in_create_trigger4286 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000002000400000L});
	public static final BitSet FOLLOW_compound_dml_trigger_in_create_trigger4297 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000002000400000L});
	public static final BitSet FOLLOW_non_dml_trigger_in_create_trigger4308 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000002000400000L});
	public static final BitSet FOLLOW_trigger_follows_clause_in_create_trigger4320 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000002000400000L});
	public static final BitSet FOLLOW_enable_key_in_create_trigger4328 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000002000400000L});
	public static final BitSet FOLLOW_disable_key_in_create_trigger4330 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000002000400000L});
	public static final BitSet FOLLOW_trigger_when_clause_in_create_trigger4338 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_trigger_body_in_create_trigger4346 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_create_trigger4348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_follows_key_in_trigger_follows_clause4425 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause4427 = new BitSet(new long[]{0x0000000000040002L});
	public static final BitSet FOLLOW_COMMA_in_trigger_follows_clause4430 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_name_in_trigger_follows_clause4432 = new BitSet(new long[]{0x0000000000040002L});
	public static final BitSet FOLLOW_when_key_in_trigger_when_clause4471 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_trigger_when_clause4473 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_condition_in_trigger_when_clause4475 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_trigger_when_clause4477 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_before_key_in_simple_dml_trigger4519 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000400000100L});
	public static final BitSet FOLLOW_after_key_in_simple_dml_trigger4521 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000400000100L});
	public static final BitSet FOLLOW_instead_key_in_simple_dml_trigger4523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_of_key_in_simple_dml_trigger4525 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000400000100L});
	public static final BitSet FOLLOW_dml_event_clause_in_simple_dml_trigger4528 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_referencing_clause_in_simple_dml_trigger4530 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_for_each_row_in_simple_dml_trigger4533 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_for_key_in_for_each_row4585 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_each_key_in_for_each_row4587 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_row_key_in_for_each_row4589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_for_key_in_compound_dml_trigger4614 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000400000100L});
	public static final BitSet FOLLOW_dml_event_clause_in_compound_dml_trigger4616 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_referencing_clause_in_compound_dml_trigger4618 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_before_key_in_non_dml_trigger4660 = new BitSet(new long[]{0x0000000000000000L,0x0402004010000000L,0x0000000001000010L});
	public static final BitSet FOLLOW_after_key_in_non_dml_trigger4662 = new BitSet(new long[]{0x0000000000000000L,0x0402004010000000L,0x0000000001000010L});
	public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger4665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000050000L});
	public static final BitSet FOLLOW_or_key_in_non_dml_trigger4668 = new BitSet(new long[]{0x0000000000000000L,0x0402004010000000L,0x0000000001000010L});
	public static final BitSet FOLLOW_non_dml_event_in_non_dml_trigger4670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000050000L});
	public static final BitSet FOLLOW_on_key_in_non_dml_trigger4682 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_database_key_in_non_dml_trigger4685 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_schema_name_in_non_dml_trigger4690 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_PERIOD_in_non_dml_trigger4692 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_schema_key_in_non_dml_trigger4696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compound_trigger_block_in_trigger_body4757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_call_key_in_trigger_body4775 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_routine_clause_in_trigger_body4778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_trigger_body4790 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_routine_name_in_routine_clause4818 = new BitSet(new long[]{0x0000040000000002L});
	public static final BitSet FOLLOW_function_argument_in_routine_clause4820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compound_key_in_compound_trigger_block4841 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_key_in_compound_trigger_block4843 = new BitSet(new long[]{0x0000002000820800L,0x000A000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_declare_spec_in_compound_trigger_block4845 = new BitSet(new long[]{0x0000002000820800L,0x000A000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_timing_point_section_in_compound_trigger_block4848 = new BitSet(new long[]{0x0000000000000000L,0x1000000010000000L});
	public static final BitSet FOLLOW_end_key_in_compound_trigger_block4851 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_name_in_compound_trigger_block4853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_before_key_in_timing_point_section4905 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_statement_key_in_timing_point_section4907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_timing_point_section4909 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_block_in_timing_point_section4911 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_before_key_in_timing_point_section4913 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_statement_key_in_timing_point_section4915 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_timing_point_section4917 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_before_key_in_timing_point_section4947 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_each_key_in_timing_point_section4949 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_row_key_in_timing_point_section4951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_timing_point_section4953 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_block_in_timing_point_section4955 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_before_key_in_timing_point_section4957 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_each_key_in_timing_point_section4959 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_row_key_in_timing_point_section4961 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_timing_point_section4963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_after_key_in_timing_point_section4993 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_statement_key_in_timing_point_section4995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_timing_point_section4997 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_block_in_timing_point_section4999 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_after_key_in_timing_point_section5001 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_statement_key_in_timing_point_section5003 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_timing_point_section5005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_after_key_in_timing_point_section5035 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_each_key_in_timing_point_section5037 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_row_key_in_timing_point_section5039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_timing_point_section5041 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_block_in_timing_point_section5043 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_after_key_in_timing_point_section5045 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_each_key_in_timing_point_section5047 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_row_key_in_timing_point_section5049 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_timing_point_section5051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_key_in_non_dml_event5088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_analyze_key_in_non_dml_event5099 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_associate_key_in_non_dml_event5110 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_statistics_key_in_non_dml_event5112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_audit_key_in_non_dml_event5123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_comment_key_in_non_dml_event5134 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_non_dml_event5145 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_disassociate_key_in_non_dml_event5156 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_statistics_key_in_non_dml_event5158 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_key_in_non_dml_event5169 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grant_key_in_non_dml_event5180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_noaudit_key_in_non_dml_event5191 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rename_key_in_non_dml_event5202 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revoke_key_in_non_dml_event5213 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncate_key_in_non_dml_event5224 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ddl_key_in_non_dml_event5235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_startup_key_in_non_dml_event5246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_shutdown_key_in_non_dml_event5257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_db_role_change_key_in_non_dml_event5268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_logon_key_in_non_dml_event5279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_logoff_key_in_non_dml_event5290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_servererror_key_in_non_dml_event5301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_suspend_key_in_non_dml_event5312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_database_key_in_non_dml_event5323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_schema_key_in_non_dml_event5334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_follows_key_in_non_dml_event5345 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause5365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000050000L});
	public static final BitSet FOLLOW_or_key_in_dml_event_clause5368 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000400000100L});
	public static final BitSet FOLLOW_dml_event_element_in_dml_event_clause5370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000050000L});
	public static final BitSet FOLLOW_on_key_in_dml_event_clause5382 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_dml_event_nested_clause_in_dml_event_clause5393 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_clause5396 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_key_in_dml_event_element5445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_insert_key_in_dml_event_element5447 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_update_key_in_dml_event_element5449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_of_key_in_dml_event_element5453 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_column_name_in_dml_event_element5455 = new BitSet(new long[]{0x0000000000040002L});
	public static final BitSet FOLLOW_COMMA_in_dml_event_element5458 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_column_name_in_dml_event_element5460 = new BitSet(new long[]{0x0000000000040002L});
	public static final BitSet FOLLOW_nested_key_in_dml_event_nested_clause5514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_table_key_in_dml_event_nested_clause5516 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableview_name_in_dml_event_nested_clause5518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_of_key_in_dml_event_nested_clause5520 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_referencing_key_in_referencing_clause5556 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_referencing_element_in_referencing_clause5559 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_new_key_in_referencing_element5582 = new BitSet(new long[]{0x0001002000818000L,0x0000020010000000L});
	public static final BitSet FOLLOW_old_key_in_referencing_element5587 = new BitSet(new long[]{0x0001002000818000L,0x0000020010000000L});
	public static final BitSet FOLLOW_parent_key_in_referencing_element5592 = new BitSet(new long[]{0x0001002000818000L,0x0000020010000000L});
	public static final BitSet FOLLOW_column_alias_in_referencing_element5597 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_key_in_drop_type5622 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_key_in_drop_type5624 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_body_key_in_drop_type5626 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_name_in_drop_type5629 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_force_key_in_drop_type5632 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_validate_key_in_drop_type5634 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_drop_type5646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_key_in_alter_type5700 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_key_in_alter_type5702 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_name_in_alter_type5704 = new BitSet(new long[]{0x0000000000000000L,0x0400000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_compile_type_clause_in_alter_type5715 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_replace_type_clause_in_alter_type5726 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_alter_attribute_definition_in_alter_type5741 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_alter_method_spec_in_alter_type5754 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_alter_collection_clauses_in_alter_type5767 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_modifier_clause_in_alter_type5780 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_dependent_handling_clause_in_alter_type5798 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_alter_type5809 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compile_key_in_compile_type_clause5972 = new BitSet(new long[]{0x0000002000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_debug_key_in_compile_type_clause5974 = new BitSet(new long[]{0x0000002000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_specification_key_in_compile_type_clause5978 = new BitSet(new long[]{0x0000002000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_body_key_in_compile_type_clause5980 = new BitSet(new long[]{0x0000002000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_compiler_parameters_clause_in_compile_type_clause5984 = new BitSet(new long[]{0x0000002000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_reuse_key_in_compile_type_clause5988 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_settings_key_in_compile_type_clause5990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replace_key_in_replace_type_clause6041 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_replace_type_clause6043 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_as_key_in_replace_type_clause6046 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_object_key_in_replace_type_clause6048 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_replace_type_clause6058 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L,0x0000000000082000L});
	public static final BitSet FOLLOW_object_member_spec_in_replace_type_clause6060 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_replace_type_clause6063 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L,0x0000000000082000L});
	public static final BitSet FOLLOW_object_member_spec_in_replace_type_clause6065 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_replace_type_clause6069 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_method_element_in_alter_method_spec6114 = new BitSet(new long[]{0x0000000000040002L});
	public static final BitSet FOLLOW_COMMA_in_alter_method_spec6117 = new BitSet(new long[]{0x0000000000000000L,0x0400000010000000L});
	public static final BitSet FOLLOW_alter_method_element_in_alter_method_spec6119 = new BitSet(new long[]{0x0000000000040002L});
	public static final BitSet FOLLOW_add_key_in_alter_method_element6159 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_drop_key_in_alter_method_element6161 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_map_order_function_spec_in_alter_method_element6165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprogram_spec_in_alter_method_element6167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_add_key_in_alter_attribute_definition6215 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_modify_key_in_alter_attribute_definition6217 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_drop_key_in_alter_attribute_definition6219 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_attribute_key_in_alter_attribute_definition6222 = new BitSet(new long[]{0x0000042000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_attribute_definition6237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_alter_attribute_definition6252 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_attribute_definition6254 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_alter_attribute_definition6257 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_attribute_definition_in_alter_attribute_definition6259 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_alter_attribute_definition6263 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_attribute_name_in_attribute_definition6323 = new BitSet(new long[]{0x0000000000800002L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_attribute_definition6325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_modify_key_in_alter_collection_clauses6373 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_limit_key_in_alter_collection_clauses6384 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_alter_collection_clauses6386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_element_key_in_alter_collection_clauses6397 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_key_in_alter_collection_clauses6399 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_alter_collection_clauses6401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_invalidate_key_in_dependent_handling_clause6487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cascade_key_in_dependent_handling_clause6506 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_convert_key_in_dependent_handling_clause6521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_to_key_in_dependent_handling_clause6523 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_substitutable_key_in_dependent_handling_clause6525 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_not_key_in_dependent_handling_clause6542 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_including_key_in_dependent_handling_clause6545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_table_key_in_dependent_handling_clause6547 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_data_key_in_dependent_handling_clause6549 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_dependent_exceptions_part_in_dependent_handling_clause6572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_force_key_in_dependent_exceptions_part6667 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_exceptions_key_in_dependent_exceptions_part6670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_key_in_dependent_exceptions_part6672 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableview_name_in_dependent_exceptions_part6674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_create_type6723 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_or_key_in_create_type6726 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_replace_key_in_create_type6728 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_key_in_create_type6732 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_definition_in_create_type6744 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_type_body_in_create_type6748 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_create_type6761 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_key_in_type_in_decl6834 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_definition_in_type_in_decl6846 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_type_body_in_type_in_decl6850 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_type_in_decl6863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_name_in_type_definition6919 = new BitSet(new long[]{0x0000000000000002L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_oid_key_in_type_definition6931 = new BitSet(new long[]{0x0000000000008000L});
	public static final BitSet FOLLOW_CHAR_STRING_in_type_definition6933 = new BitSet(new long[]{0x0000000000000002L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_object_type_def_in_type_definition6945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_invoker_rights_clause_in_object_type_def6984 = new BitSet(new long[]{0x0000000000000000L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_object_as_part_in_object_type_def6996 = new BitSet(new long[]{0x0000040000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_object_under_part_in_object_type_def7007 = new BitSet(new long[]{0x0000040000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_sqlj_object_type_in_object_type_def7023 = new BitSet(new long[]{0x0000040000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_object_type_def7035 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L,0x0000000000082000L});
	public static final BitSet FOLLOW_object_member_spec_in_object_type_def7037 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_object_type_def7040 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L,0x0000000000082000L});
	public static final BitSet FOLLOW_object_member_spec_in_object_type_def7042 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_object_type_def7046 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_modifier_clause_in_object_type_def7058 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_is_key_in_object_as_part7131 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_as_key_in_object_as_part7133 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_object_key_in_object_as_part7137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varray_type_def_in_object_as_part7139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nested_table_type_def_in_object_as_part7141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_under_key_in_object_under_part7185 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_object_under_part7188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_key_in_nested_table_type_def7208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_of_key_in_nested_table_type_def7210 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_nested_table_type_def7212 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_not_key_in_nested_table_type_def7223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_null_key_in_nested_table_type_def7225 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_nested_table_type_def7237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_external_key_in_sqlj_object_type7282 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_name_key_in_sqlj_object_type7284 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type7286 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_language_key_in_sqlj_object_type7288 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_java_key_in_sqlj_object_type7290 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_using_key_in_sqlj_object_type7292 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_sqldata_key_in_sqlj_object_type7295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_customdatum_key_in_sqlj_object_type7297 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_oradata_key_in_sqlj_object_type7299 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_key_in_type_body7349 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_name_in_type_body7351 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_type_body7362 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_as_key_in_type_body7364 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_type_body_elements_in_type_body7367 = new BitSet(new long[]{0x0000000000040000L,0x1000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_type_body7370 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_type_body_elements_in_type_body7372 = new BitSet(new long[]{0x0000000000040000L,0x1000000000000000L});
	public static final BitSet FOLLOW_end_key_in_type_body7384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_order_func_declaration_in_type_body_elements7423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprog_decl_in_type_in_type_body_elements7434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_key_in_map_order_func_declaration7455 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_order_key_in_map_order_func_declaration7458 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_member_key_in_map_order_func_declaration7462 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_func_decl_in_type_in_map_order_func_declaration7465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_key_in_subprog_decl_in_type7486 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_static_key_in_subprog_decl_in_type7489 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_proc_decl_in_type_in_subprog_decl_in_type7502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_func_decl_in_type_in_subprog_decl_in_type7513 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_declaration_in_subprog_decl_in_type7524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_key_in_proc_decl_in_type7553 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_procedure_name_in_proc_decl_in_type7555 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_proc_decl_in_type7565 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_proc_decl_in_type7567 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_proc_decl_in_type7570 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_proc_decl_in_type7572 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_proc_decl_in_type7576 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_proc_decl_in_type7587 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_as_key_in_proc_decl_in_type7589 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_call_spec_in_proc_decl_in_type7606 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_proc_decl_in_type7610 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_proc_decl_in_type7612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_key_in_func_decl_in_type7701 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_name_in_func_decl_in_type7703 = new BitSet(new long[]{0x0000040000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_func_decl_in_type7715 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_func_decl_in_type7717 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_func_decl_in_type7720 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_func_decl_in_type7722 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_func_decl_in_type7726 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_return_key_in_func_decl_in_type7739 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_func_decl_in_type7741 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_func_decl_in_type7752 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_as_key_in_func_decl_in_type7754 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_call_spec_in_func_decl_in_type7770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_func_decl_in_type7774 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_func_decl_in_type7776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_final_key_in_constructor_declaration7869 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_instantiable_key_in_constructor_declaration7872 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_constructor_key_in_constructor_declaration7875 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_key_in_constructor_declaration7877 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_constructor_declaration7879 = new BitSet(new long[]{0x0000040000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_constructor_declaration7890 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_self_key_in_constructor_declaration7893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_constructor_declaration7895 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_out_key_in_constructor_declaration7897 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_constructor_declaration7899 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_COMMA_in_constructor_declaration7901 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration7904 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_constructor_declaration7907 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_declaration7909 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_constructor_declaration7914 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_return_key_in_constructor_declaration7926 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_self_key_in_constructor_declaration7928 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_as_key_in_constructor_declaration7930 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_result_key_in_constructor_declaration7932 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_constructor_declaration7944 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_as_key_in_constructor_declaration7946 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_call_spec_in_constructor_declaration7963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declare_key_in_constructor_declaration7967 = new BitSet(new long[]{0x0000002000820800L,0x002A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_block_in_constructor_declaration7970 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_constructor_declaration7972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_not_key_in_modifier_clause8069 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_instantiable_key_in_modifier_clause8073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_final_key_in_modifier_clause8075 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_overriding_key_in_modifier_clause8077 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_id_in_object_member_spec8131 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_object_member_spec8133 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_sqlj_object_type_attr_in_object_member_spec8135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_element_spec_in_object_member_spec8164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_external_key_in_sqlj_object_type_attr8184 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_name_key_in_sqlj_object_type_attr8186 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_sqlj_object_type_attr8188 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_modifier_clause_in_element_spec8228 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_element_spec_options_in_element_spec8239 = new BitSet(new long[]{0x0000000000040002L,0x0000000010000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_COMMA_in_element_spec8251 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_pragma_clause_in_element_spec8253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subprogram_spec_in_element_spec_options8298 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constructor_spec_in_element_spec_options8309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_order_function_spec_in_element_spec_options8320 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_member_key_in_subprogram_spec8341 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_static_key_in_subprogram_spec8344 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_type_procedure_spec_in_subprogram_spec8357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_function_spec_in_subprogram_spec8359 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_key_in_type_procedure_spec8388 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_procedure_name_in_type_procedure_spec8390 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_type_procedure_spec8400 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_type_procedure_spec8402 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_type_procedure_spec8405 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_type_procedure_spec8407 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_type_procedure_spec8411 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_type_procedure_spec8423 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_as_key_in_type_procedure_spec8425 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_call_spec_in_type_procedure_spec8428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_key_in_type_function_spec8513 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_name_in_type_function_spec8515 = new BitSet(new long[]{0x0000040000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_type_function_spec8527 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_type_function_spec8529 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_type_function_spec8532 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_type_function_spec8534 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_type_function_spec8538 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_return_key_in_type_function_spec8551 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_type_function_spec8555 = new BitSet(new long[]{0x0000000000000002L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_self_key_in_type_function_spec8559 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_as_key_in_type_function_spec8561 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_result_key_in_type_function_spec8563 = new BitSet(new long[]{0x0000000000000002L,0x0000020010000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_type_function_spec8576 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_as_key_in_type_function_spec8578 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_call_spec_in_type_function_spec8581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_external_key_in_type_function_spec8586 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_variable_key_in_type_function_spec8588 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_name_key_in_type_function_spec8591 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_type_function_spec8593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_final_key_in_constructor_spec8730 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_instantiable_key_in_constructor_spec8733 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_constructor_key_in_constructor_spec8736 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_function_key_in_constructor_spec8738 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_constructor_spec8740 = new BitSet(new long[]{0x0000040000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_constructor_spec8751 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_self_key_in_constructor_spec8754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_constructor_spec8756 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_out_key_in_constructor_spec8758 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_constructor_spec8760 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_COMMA_in_constructor_spec8762 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec8765 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_constructor_spec8768 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_elements_parameter_in_constructor_spec8770 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_constructor_spec8775 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_return_key_in_constructor_spec8787 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_self_key_in_constructor_spec8789 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_as_key_in_constructor_spec8791 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_result_key_in_constructor_spec8793 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_constructor_spec8797 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_as_key_in_constructor_spec8799 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_call_spec_in_constructor_spec8802 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_map_key_in_map_order_function_spec8894 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_order_key_in_map_order_function_spec8897 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_member_key_in_map_order_function_spec8901 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_function_spec_in_map_order_function_spec8904 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_key_in_pragma_clause8924 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_restrict_references_key_in_pragma_clause8926 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_pragma_clause8928 = new BitSet(new long[]{0x0000002000800000L,0x0040000010000000L});
	public static final BitSet FOLLOW_pragma_elements_in_pragma_clause8930 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_pragma_clause8933 = new BitSet(new long[]{0x0000002000800000L,0x0040000010000000L});
	public static final BitSet FOLLOW_pragma_elements_in_pragma_clause8935 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_pragma_clause8939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_id_in_pragma_elements8976 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_default_key_in_pragma_elements8987 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameter_name_in_type_elements_parameter9007 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_type_elements_parameter9009 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_key_in_drop_sequence9051 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_sequence_key_in_drop_sequence9053 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_sequence_name_in_drop_sequence9055 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_drop_sequence9065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_key_in_alter_sequence9102 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_sequence_key_in_alter_sequence9104 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_sequence_name_in_alter_sequence9106 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_sequence_spec_in_alter_sequence9108 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SEMICOLON_in_alter_sequence9120 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_create_sequence9160 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_sequence_key_in_create_sequence9162 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_sequence_name_in_create_sequence9164 = new BitSet(new long[]{0x0000000000000000L,0x0000000110002000L,0x0000000000080000L});
	public static final BitSet FOLLOW_sequence_start_clause_in_create_sequence9175 = new BitSet(new long[]{0x0000000000000000L,0x0000000110002000L,0x0000000000080000L});
	public static final BitSet FOLLOW_sequence_spec_in_create_sequence9186 = new BitSet(new long[]{0x0000000000000000L,0x0000000110002000L,0x0000000000080000L});
	public static final BitSet FOLLOW_SEMICOLON_in_create_sequence9197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_increment_key_in_sequence_spec9242 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_by_key_in_sequence_spec9245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec9248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_maxvalue_key_in_sequence_spec9259 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec9262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_minvalue_key_in_sequence_spec9273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec9276 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cache_key_in_sequence_spec9287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_spec9290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nomaxvalue_key_in_sequence_spec9301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nominvalue_key_in_sequence_spec9312 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cycle_key_in_sequence_spec9323 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nocycle_key_in_sequence_spec9334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_nocache_key_in_sequence_spec9345 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_order_key_in_sequence_spec9356 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_noorder_key_in_sequence_spec9367 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_start_key_in_sequence_start_clause9387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_with_key_in_sequence_start_clause9390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_UNSIGNED_INTEGER_in_sequence_start_clause9393 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_create_view9417 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000040000L});
	public static final BitSet FOLLOW_or_key_in_create_view9428 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_replace_key_in_create_view9430 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_create_view_force_clause_in_create_view9442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_view_key_in_create_view9453 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_view_name_in_create_view9463 = new BitSet(new long[]{0x0000040000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_view_type_clause_in_create_view9473 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_as_key_in_create_view9484 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_subquery_in_create_view9494 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_subquery_restriction_clause_in_create_view9504 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_create_view9515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_no_key_in_create_view_force_clause9638 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_force_key_in_create_view_force_clause9640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_force_key_in_create_view_force_clause9657 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_view_type_constraints_clause_in_view_type_clause9684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_view_type_constraints_clause9734 = new BitSet(new long[]{0x0000000000800000L,0x0000800010000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_view_type_constraints_clause_item_in_view_type_constraints_clause9736 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_view_type_constraints_clause9739 = new BitSet(new long[]{0x0000000000800000L,0x0000800010000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_view_type_constraints_clause_item_in_view_type_constraints_clause9741 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_view_type_constraints_clause9745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_id_expression_in_view_type_constraints_clause_item9778 = new BitSet(new long[]{0x0000000000000002L,0x0000800010000000L,0x0000000200006000L});
	public static final BitSet FOLLOW_inline_constraint_clause_in_view_type_constraints_clause_item9780 = new BitSet(new long[]{0x0000000000000002L,0x0000800010000000L,0x0000000200006000L});
	public static final BitSet FOLLOW_out_of_line_constraint_clause_in_view_type_constraints_clause_item9813 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constraint_key_in_inline_constraint_clause9837 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_inline_constraint_clause9839 = new BitSet(new long[]{0x0000000000000000L,0x0000800010000000L,0x0000000200006000L});
	public static final BitSet FOLLOW_inline_constraint_def_in_inline_constraint_clause9851 = new BitSet(new long[]{0x1000000000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_constraint_state_item_in_inline_constraint_clause9866 = new BitSet(new long[]{0x1000000000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_inline_constraint_null_in_inline_constraint_def9920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inline_constraint_not_null_in_inline_constraint_def9932 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inline_constraint_unique_in_inline_constraint_def9944 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_inline_constraint_primary_key_in_inline_constraint_def9956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_references_clause_in_inline_constraint_def9968 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_checks_clause_in_inline_constraint_def9980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_key_in_inline_constraint_null9996 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_not_key_in_inline_constraint_not_null10002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_null_key_in_inline_constraint_not_null10004 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unique_key_in_inline_constraint_unique10015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primary_key_in_inline_constraint_primary_key10021 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_key_key_in_inline_constraint_primary_key10023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_references_key_in_references_clause10040 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableview_name_in_references_clause10042 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_references_clause10044 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_references_clause10046 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_references_clause10049 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_references_clause10051 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_references_clause10055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
	public static final BitSet FOLLOW_references_on_delete_clause_in_references_clause10057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_on_key_in_references_on_delete_clause10096 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_delete_key_in_references_on_delete_clause10098 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_on_delete_clause_action_in_references_on_delete_clause10100 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cascade_key_in_on_delete_clause_action10135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_key_in_on_delete_clause_action10143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_null_key_in_on_delete_clause_action10145 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_check_key_in_checks_clause10171 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_checks_clause10173 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_wrapper_in_checks_clause10175 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_checks_clause10177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_not_key_in_constraint_state_item10210 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_deferrable_key_in_constraint_state_item10212 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_deferrable_key_in_constraint_state_item10225 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_initially_key_in_constraint_state_item10233 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_immediate_key_in_constraint_state_item10235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_initially_key_in_constraint_state_item10247 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_deferred_key_in_constraint_state_item10249 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rely_key_in_constraint_state_item10261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_norely_key_in_constraint_state_item10269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_using_index_clause_in_constraint_state_item10277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enable_key_in_constraint_state_item10285 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_disable_key_in_constraint_state_item10293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_validate_key_in_constraint_state_item10301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_novalidate_key_in_constraint_state_item10309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exceptions_clause_in_constraint_state_item10317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_using_key_in_using_index_clause10338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_index_key_in_using_index_clause10340 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_using_index_def_in_using_index_clause10342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableview_name_in_using_index_def10372 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exceptions_key_in_exceptions_clause10406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_key_in_exceptions_clause10408 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_tableview_name_in_exceptions_clause10410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constraint_key_in_out_of_line_constraint_clause10444 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_out_of_line_constraint_clause10446 = new BitSet(new long[]{0x0000000000000000L,0x0000800010000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_out_of_line_constraint_def_in_out_of_line_constraint_clause10450 = new BitSet(new long[]{0x1000000000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_constraint_state_item_in_out_of_line_constraint_clause10452 = new BitSet(new long[]{0x1000000000000002L,0x0000000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_out_of_line_constraint_def_unique_in_out_of_line_constraint_def10491 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_out_of_line_constraint_def_primary_key_in_out_of_line_constraint_def10499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_out_of_line_constraint_def_foreign_key_in_out_of_line_constraint_def10507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_checks_clause_in_out_of_line_constraint_def10515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unique_key_in_out_of_line_constraint_def_unique10536 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_out_of_line_constraint_def_unique10538 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_out_of_line_constraint_def_unique10540 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_out_of_line_constraint_def_unique10543 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_out_of_line_constraint_def_unique10545 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_out_of_line_constraint_def_unique10549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_primary_key_in_out_of_line_constraint_def_primary_key10585 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_key_key_in_out_of_line_constraint_def_primary_key10587 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_out_of_line_constraint_def_primary_key10589 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_out_of_line_constraint_def_primary_key10591 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_out_of_line_constraint_def_primary_key10594 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_out_of_line_constraint_def_primary_key10596 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_out_of_line_constraint_def_primary_key10600 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_foreign_key_in_out_of_line_constraint_def_foreign_key10633 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_key_key_in_out_of_line_constraint_def_foreign_key10635 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_out_of_line_constraint_def_foreign_key10637 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_out_of_line_constraint_def_foreign_key10639 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_out_of_line_constraint_def_foreign_key10642 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_expression_in_out_of_line_constraint_def_foreign_key10644 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_out_of_line_constraint_def_foreign_key10648 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_references_clause_in_out_of_line_constraint_def_foreign_key10650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_authid_key_in_invoker_rights_clause10693 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_current_user_key_in_invoker_rights_clause10696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_definer_key_in_invoker_rights_clause10698 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_id_in_compiler_parameters_clause10739 = new BitSet(new long[]{0x0000000008000000L});
	public static final BitSet FOLLOW_EQUALS_OP_in_compiler_parameters_clause10741 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_compiler_parameters_clause10743 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_language_key_in_call_spec10790 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_java_spec_in_call_spec10795 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_c_spec_in_call_spec10799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_java_key_in_java_spec10823 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_name_key_in_java_spec10826 = new BitSet(new long[]{0x0000000000008000L});
	public static final BitSet FOLLOW_CHAR_STRING_in_java_spec10829 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_c_key_in_c_spec10849 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_name_key_in_c_spec10852 = new BitSet(new long[]{0x0000000000008000L});
	public static final BitSet FOLLOW_CHAR_STRING_in_c_spec10854 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_library_key_in_c_spec10867 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_in_c_spec10869 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_c_agent_in_clause_in_c_spec10879 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_with_key_in_c_spec10883 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_context_key_in_c_spec10885 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_c_parameters_clause_in_c_spec10889 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_agent_key_in_c_agent_in_clause10942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_c_agent_in_clause10944 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_c_agent_in_clause10946 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_c_agent_in_clause10948 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_c_agent_in_clause10951 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_c_agent_in_clause10953 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_c_agent_in_clause10957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameters_key_in_c_parameters_clause11006 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_c_parameters_clause11008 = new BitSet(new long[]{0x0081442012838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_c_parameters_clause11011 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_c_parameters_clause11014 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_c_parameters_clause11016 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_DOUBLE_PERIOD_in_c_parameters_clause11022 = new BitSet(new long[]{0x0040000000000000L});
	public static final BitSet FOLLOW_PERIOD_in_c_parameters_clause11024 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_c_parameters_clause11029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameter_name_in_parameter11086 = new BitSet(new long[]{0x0000000000800082L,0x0050000010000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_parameter11090 = new BitSet(new long[]{0x0000000000800082L,0x0050000010000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_out_key_in_parameter11094 = new BitSet(new long[]{0x0000000000800082L,0x0050000010000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_inout_key_in_parameter11098 = new BitSet(new long[]{0x0000000000800082L,0x0050000010000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_nocopy_key_in_parameter11102 = new BitSet(new long[]{0x0000000000800082L,0x0050000010000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_type_spec_in_parameter11106 = new BitSet(new long[]{0x0000000000000082L,0x0040000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter11109 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ASSIGN_OP_in_default_value_part11162 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_default_key_in_default_value_part11164 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_default_value_part11167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_declare_spec11221 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_declare_spec11233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_declaration_in_declare_spec11245 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_declare_spec11257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_declare_spec11269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_declare_spec11281 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_declare_spec11293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_declare_spec11305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_declare_spec11317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_decl_in_declare_spec11329 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_name_in_variable_declaration11350 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_constant_key_in_variable_declaration11352 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_variable_declaration11363 = new BitSet(new long[]{0x0000000000000080L,0x0040000100000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_not_key_in_variable_declaration11366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_null_key_in_variable_declaration11368 = new BitSet(new long[]{0x0000000000000080L,0x0040000100000000L});
	public static final BitSet FOLLOW_default_value_part_in_variable_declaration11381 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_variable_declaration11384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_key_in_subtype_declaration11445 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_name_in_subtype_declaration11447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_subtype_declaration11449 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_subtype_declaration11451 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_range_key_in_subtype_declaration11464 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_subtype_declaration11466 = new BitSet(new long[]{0x0000000002000000L});
	public static final BitSet FOLLOW_DOUBLE_PERIOD_in_subtype_declaration11468 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_subtype_declaration11470 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_not_key_in_subtype_declaration11487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_null_key_in_subtype_declaration11489 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_subtype_declaration11493 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_key_in_cursor_declaration11577 = new BitSet(new long[]{0x0000002000820800L,0x0000000010000000L});
	public static final BitSet FOLLOW_cursor_name_in_cursor_declaration11579 = new BitSet(new long[]{0x0000040000000000L,0x0000000110000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_cursor_declaration11596 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration11598 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_cursor_declaration11601 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_parameter_spec_in_cursor_declaration11603 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_cursor_declaration11607 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_return_key_in_cursor_declaration11627 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_cursor_declaration11629 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_cursor_declaration11634 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000008002000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_declaration11636 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_cursor_declaration11640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_parameter_name_in_parameter_spec11691 = new BitSet(new long[]{0x0000000000800082L,0x0050000010000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_parameter_spec11694 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_parameter_spec11697 = new BitSet(new long[]{0x0000000000000082L,0x0040000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_parameter_spec11710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_name_in_exception_declaration11754 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_exception_key_in_exception_declaration11756 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_exception_declaration11758 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_key_in_pragma_declaration11816 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_serially_reusable_key_in_pragma_declaration11831 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_autonomous_transaction_key_in_pragma_declaration11848 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_exception_init_key_in_pragma_declaration11865 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_pragma_declaration11867 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_exception_name_in_pragma_declaration11869 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_COMMA_in_pragma_declaration11871 = new BitSet(new long[]{0x0000400010000040L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_numeric_in_pragma_declaration11873 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_pragma_declaration11875 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_inline_key_in_pragma_declaration11893 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_pragma_declaration11895 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration11899 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_COMMA_in_pragma_declaration11901 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_pragma_declaration11903 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_pragma_declaration11905 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_restrict_references_key_in_pragma_declaration11922 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_pragma_declaration11924 = new BitSet(new long[]{0x0000002000800000L,0x0040000010000000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration11927 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_default_key_in_pragma_declaration11929 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_COMMA_in_pragma_declaration11933 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_in_pragma_declaration11935 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_pragma_declaration11939 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_pragma_declaration11959 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_type_dec_in_record_declaration12102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_var_dec_in_record_declaration12113 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_key_in_record_type_dec12136 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_name_in_record_type_dec12138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_record_type_dec12140 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_record_key_in_record_type_dec12152 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_record_type_dec12154 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec12156 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_COMMA_in_record_type_dec12160 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_field_spec_in_record_type_dec12162 = new BitSet(new long[]{0x0000000000040000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_record_type_dec12167 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_ref_key_in_record_type_dec12196 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_cursor_key_in_record_type_dec12198 = new BitSet(new long[]{0x0000000000000000L,0x0000000110000000L});
	public static final BitSet FOLLOW_return_key_in_record_type_dec12201 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_record_type_dec12203 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_record_type_dec12234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_column_name_in_field_spec12254 = new BitSet(new long[]{0x0000000000800082L,0x0050000010000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_type_spec_in_field_spec12256 = new BitSet(new long[]{0x0000000000000082L,0x0040000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_not_key_in_field_spec12268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_null_key_in_field_spec12270 = new BitSet(new long[]{0x0000000000000082L,0x0040000000000000L});
	public static final BitSet FOLLOW_default_value_part_in_field_spec12282 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_name_in_record_var_dec12328 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_name_in_record_var_dec12330 = new BitSet(new long[]{0x0020000000000000L});
	public static final BitSet FOLLOW_percent_rowtype_key_in_record_var_dec12333 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_percent_type_key_in_record_var_dec12335 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_record_var_dec12338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_type_dec_in_table_declaration12385 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_table_var_dec_in_table_declaration12389 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_table_declaration12392 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_key_in_table_type_dec12421 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_type_name_in_table_type_dec12423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_is_key_in_table_type_dec12425 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_table_key_in_table_type_dec12437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_of_key_in_table_type_dec12451 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_table_type_dec12453 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000010L,0x0000000000002000L});
	public static final BitSet FOLLOW_table_indexed_by_part_in_table_type_dec12468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_not_key_in_table_type_dec12480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_null_key_in_table_type_dec12482 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varray_type_def_in_table_type_dec12495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_indexed_key_in_table_indexed_by_part12575 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_index_key_in_table_indexed_by_part12579 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_by_key_in_table_indexed_by_part12582 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_table_indexed_by_part12584 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_varray_key_in_varray_type_def12622 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_varying_key_in_varray_type_def12625 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_array_key_in_varray_type_def12627 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_varray_type_def12638 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_varray_type_def12640 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_varray_type_def12642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_of_key_in_varray_type_def12653 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_varray_type_def12655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_not_key_in_varray_type_def12666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_null_key_in_varray_type_def12668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_var_name_in_table_var_dec12715 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_table_var_dec12717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_seq_of_statements_item_in_seq_of_statements12761 = new BitSet(new long[]{0x00000C2000820802L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_labeled_statement_in_seq_of_statements_item12800 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_seq_of_statements_item12803 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EOF_in_seq_of_statements_item12805 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_statement_in_seq_of_statements_item12821 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_SEMICOLON_in_seq_of_statements_item12824 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EOF_in_seq_of_statements_item12826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_THAN_OP_in_labeled_statement12857 = new BitSet(new long[]{0x0000080000000000L});
	public static final BitSet FOLLOW_LESS_THAN_OP_in_labeled_statement12859 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_label_name_in_labeled_statement12861 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_GREATER_THAN_OP_in_labeled_statement12863 = new BitSet(new long[]{0x0000000100000000L});
	public static final BitSet FOLLOW_GREATER_THAN_OP_in_labeled_statement12865 = new BitSet(new long[]{0x0000042000820800L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_statement_in_labeled_statement12876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_statement12925 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFEFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
	public static final BitSet FOLLOW_swallow_to_semi_in_statement12927 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_set_in_statement12929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_key_in_statement12944 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFEFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
	public static final BitSet FOLLOW_swallow_to_semi_in_statement12946 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_set_in_statement12949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grant_key_in_statement12964 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFEFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
	public static final BitSet FOLLOW_swallow_to_semi_in_statement12966 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_set_in_statement12969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncate_key_in_statement12984 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFEFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
	public static final BitSet FOLLOW_swallow_to_semi_in_statement12986 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_set_in_statement12989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_body_in_statement13010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_block_in_statement13027 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assignment_statement_in_statement13038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_statement13049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_statement13060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_statement_in_statement13071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_statement_in_statement13082 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_statement13093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_statement13104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_statement_in_statement13115 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_statement13126 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_statement13137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_statement13148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_case_statement_in_statement13159 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_statement13171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_call_in_statement13182 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_general_element_in_assignment_statement13203 = new BitSet(new long[]{0x0000000000000080L});
	public static final BitSet FOLLOW_ASSIGN_OP_in_assignment_statement13205 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_assignment_statement13207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_key_in_continue_statement13258 = new BitSet(new long[]{0x0000000000800002L,0x0000000010000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_label_name_in_continue_statement13260 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_when_key_in_continue_statement13264 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_condition_in_continue_statement13266 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_key_in_exit_statement13343 = new BitSet(new long[]{0x0000000000800002L,0x0000000010000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_label_name_in_exit_statement13345 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_when_key_in_exit_statement13349 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_condition_in_exit_statement13351 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_goto_key_in_goto_statement13420 = new BitSet(new long[]{0x0000000000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_label_name_in_goto_statement13423 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_if_key_in_if_statement13443 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_condition_in_if_statement13445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_then_key_in_if_statement13447 = new BitSet(new long[]{0x00000C2000820800L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_seq_of_statements_in_if_statement13449 = new BitSet(new long[]{0x0100000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_elsif_part_in_if_statement13459 = new BitSet(new long[]{0x0100000000000000L,0x1800000000000000L});
	public static final BitSet FOLLOW_else_part_in_if_statement13462 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_end_key_in_if_statement13473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_if_key_in_if_statement13475 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_elsif_key_in_elsif_part13523 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_condition_in_elsif_part13525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_then_key_in_elsif_part13527 = new BitSet(new long[]{0x00000C2000820800L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_seq_of_statements_in_elsif_part13529 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_else_key_in_else_part13571 = new BitSet(new long[]{0x00000C2000820800L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_seq_of_statements_in_else_part13574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_while_key_in_loop_statement13613 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_condition_in_loop_statement13615 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_for_key_in_loop_statement13621 = new BitSet(new long[]{0x0000002000820800L,0x0000000010000000L});
	public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement13623 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_loop_key_in_loop_statement13637 = new BitSet(new long[]{0x00000C2000820800L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_seq_of_statements_in_loop_statement13647 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_end_key_in_loop_statement13657 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_loop_key_in_loop_statement13659 = new BitSet(new long[]{0x0000000000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_label_name_in_loop_statement13661 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_name_in_cursor_loop_param13787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_cursor_loop_param13789 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100080204000L});
	public static final BitSet FOLLOW_reverse_key_in_cursor_loop_param13791 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100080204000L});
	public static final BitSet FOLLOW_lower_bound_in_cursor_loop_param13794 = new BitSet(new long[]{0x0000000002000000L});
	public static final BitSet FOLLOW_DOUBLE_PERIOD_in_cursor_loop_param13796 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100080204000L});
	public static final BitSet FOLLOW_upper_bound_in_cursor_loop_param13798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_name_in_cursor_loop_param13837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_cursor_loop_param13839 = new BitSet(new long[]{0x0000042000820800L,0x4080000010000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_general_element_in_cursor_loop_param13843 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_cursor_loop_param13849 = new BitSet(new long[]{0x0000040000000000L,0x0000000000000000L,0x0000008002000000L});
	public static final BitSet FOLLOW_select_statement_in_cursor_loop_param13851 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_cursor_loop_param13853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_key_in_forall_statement13912 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_index_name_in_forall_statement13914 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_forall_statement13916 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100880204000L});
	public static final BitSet FOLLOW_bounds_clause_in_forall_statement13918 = new BitSet(new long[]{0x0000040000000000L,0x0080000010000040L,0x0000008402000101L});
	public static final BitSet FOLLOW_sql_statement_in_forall_statement13920 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_save_key_in_forall_statement13923 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_exceptions_key_in_forall_statement13925 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lower_bound_in_bounds_clause13970 = new BitSet(new long[]{0x0000000002000000L});
	public static final BitSet FOLLOW_DOUBLE_PERIOD_in_bounds_clause13972 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100080204000L});
	public static final BitSet FOLLOW_upper_bound_in_bounds_clause13974 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_indices_key_in_bounds_clause13995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_of_key_in_bounds_clause13997 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_collection_name_in_bounds_clause13999 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
	public static final BitSet FOLLOW_between_bound_in_bounds_clause14001 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_values_key_in_bounds_clause14033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_of_key_in_bounds_clause14035 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_index_name_in_bounds_clause14037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_between_key_in_between_bound14067 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100080204000L});
	public static final BitSet FOLLOW_lower_bound_in_between_bound14069 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_and_key_in_between_bound14071 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100080204000L});
	public static final BitSet FOLLOW_upper_bound_in_between_bound14073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_concatenation_in_lower_bound14111 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_concatenation_in_upper_bound14147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_null_key_in_null_statement14183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_key_in_raise_statement14203 = new BitSet(new long[]{0x0000002000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_exception_name_in_raise_statement14206 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_key_in_return_statement14227 = new BitSet(new long[]{0x0081442010838842L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_condition_in_return_statement14231 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_call_key_in_function_call14280 = new BitSet(new long[]{0x0000002000820800L,0x4080000010000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_general_element_in_function_call14283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_begin_key_in_body14315 = new BitSet(new long[]{0x00000C2000820800L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_seq_of_statements_in_body14325 = new BitSet(new long[]{0x0000000000000000L,0x3000000000000000L});
	public static final BitSet FOLLOW_exception_clause_in_body14335 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
	public static final BitSet FOLLOW_end_key_in_body14346 = new BitSet(new long[]{0x0000000000800002L,0x0000000010000000L});
	public static final BitSet FOLLOW_label_name_in_body14348 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_key_in_exception_clause14395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_exception_handler_in_exception_clause14398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_when_key_in_exception_handler14419 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler14421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020040000L});
	public static final BitSet FOLLOW_or_key_in_exception_handler14424 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_exception_name_in_exception_handler14426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020040000L});
	public static final BitSet FOLLOW_then_key_in_exception_handler14430 = new BitSet(new long[]{0x00000C2000820800L,0x40AA484010000048L,0x000000840260411BL});
	public static final BitSet FOLLOW_seq_of_statements_in_exception_handler14440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declare_key_in_block14482 = new BitSet(new long[]{0x0000002000820800L,0x000A000010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_declare_spec_in_block14485 = new BitSet(new long[]{0x0000002000820800L,0x000A080010000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_body_in_block14498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_execute_immediate_in_sql_statement14552 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_data_manipulation_language_statements_in_sql_statement14563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cursor_manipulation_statements_in_sql_statement14574 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transaction_control_statements_in_sql_statement14585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_execute_key_in_execute_immediate14605 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_immediate_key_in_execute_immediate14607 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_execute_immediate14609 = new BitSet(new long[]{0x1000000000000002L,0x0000000010000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_clause_in_execute_immediate14620 = new BitSet(new long[]{0x1000000000000002L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate14622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_using_clause_in_execute_immediate14634 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate14636 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dynamic_returning_clause_in_execute_immediate14648 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_returning_key_in_dynamic_returning_clause14707 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_return_key_in_dynamic_returning_clause14709 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_clause_in_dynamic_returning_clause14712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_merge_statement_in_data_manipulation_language_statements14752 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lock_table_statement_in_data_manipulation_language_statements14763 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_statement_in_data_manipulation_language_statements14774 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_update_statement_in_data_manipulation_language_statements14786 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_delete_statement_in_data_manipulation_language_statements14798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insert_statement_in_data_manipulation_language_statements14809 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_close_statement_in_cursor_manipulation_statements14833 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_statement_in_cursor_manipulation_statements14844 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_statement_in_cursor_manipulation_statements14855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_for_statement_in_cursor_manipulation_statements14866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_close_key_in_close_statement14887 = new BitSet(new long[]{0x0000002000820800L,0x0000000010000000L});
	public static final BitSet FOLLOW_cursor_name_in_close_statement14890 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_key_in_open_statement14910 = new BitSet(new long[]{0x0000002000820800L,0x0000000010000000L});
	public static final BitSet FOLLOW_cursor_name_in_open_statement14913 = new BitSet(new long[]{0x0000040000000002L});
	public static final BitSet FOLLOW_expression_list_in_open_statement14915 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fetch_key_in_fetch_statement14936 = new BitSet(new long[]{0x0000002000820800L,0x0000000010000000L});
	public static final BitSet FOLLOW_cursor_name_in_fetch_statement14939 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_into_clause_in_fetch_statement14941 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_open_key_in_open_for_statement14961 = new BitSet(new long[]{0x0000002000820800L,0x0000000010000000L});
	public static final BitSet FOLLOW_variable_name_in_open_for_statement14963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_for_key_in_open_for_statement14965 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000108082206000L});
	public static final BitSet FOLLOW_select_statement_in_open_for_statement14983 = new BitSet(new long[]{0x1000000000000002L});
	public static final BitSet FOLLOW_expression_wrapper_in_open_for_statement14994 = new BitSet(new long[]{0x1000000000000002L});
	public static final BitSet FOLLOW_using_clause_in_open_for_statement15010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_transaction_command_in_transaction_control_statements15062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_constraint_command_in_transaction_control_statements15073 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_statement_in_transaction_control_statements15084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_statement_in_transaction_control_statements15095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_statement_in_transaction_control_statements15106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_key_in_set_transaction_command15134 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_transaction_key_in_set_transaction_command15136 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_read_key_in_set_transaction_command15148 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_only_key_in_set_transaction_command15151 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_write_key_in_set_transaction_command15153 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_isolation_key_in_set_transaction_command15168 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_level_key_in_set_transaction_command15170 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_serializable_key_in_set_transaction_command15173 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_read_key_in_set_transaction_command15175 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_committed_key_in_set_transaction_command15177 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_use_key_in_set_transaction_command15191 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_rollback_key_in_set_transaction_command15193 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_segment_key_in_set_transaction_command15195 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_rollback_segment_name_in_set_transaction_command15197 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_name_key_in_set_transaction_command15217 = new BitSet(new long[]{0x0001000000018000L});
	public static final BitSet FOLLOW_quoted_string_in_set_transaction_command15219 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_key_in_set_constraint_command15342 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_constraint_key_in_set_constraint_command15346 = new BitSet(new long[]{0x0000002000800000L,0x0000002010000000L});
	public static final BitSet FOLLOW_constraints_key_in_set_constraint_command15350 = new BitSet(new long[]{0x0000002000800000L,0x0000002010000000L});
	public static final BitSet FOLLOW_all_key_in_set_constraint_command15364 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command15368 = new BitSet(new long[]{0x0000000000040000L,0x0000000010000000L});
	public static final BitSet FOLLOW_COMMA_in_set_constraint_command15371 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_constraint_name_in_set_constraint_command15373 = new BitSet(new long[]{0x0000000000040000L,0x0000000010000000L});
	public static final BitSet FOLLOW_immediate_key_in_set_constraint_command15388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_deferred_key_in_set_constraint_command15390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commit_key_in_commit_statement15447 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_work_key_in_commit_statement15449 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_comment_key_in_commit_statement15461 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_commit_statement15463 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_force_key_in_commit_statement15476 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_corrupt_xid_key_in_commit_statement15479 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_commit_statement15481 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_corrupt_xid_all_key_in_commit_statement15484 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_expression_in_commit_statement15488 = new BitSet(new long[]{0x0000000000040002L,0x0000000010000000L});
	public static final BitSet FOLLOW_COMMA_in_commit_statement15491 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_in_commit_statement15493 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_write_clause_in_commit_statement15516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_write_key_in_write_clause15628 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000400L});
	public static final BitSet FOLLOW_wait_key_in_write_clause15632 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_nowait_key_in_write_clause15634 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_immediate_key_in_write_clause15639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_batch_key_in_write_clause15641 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollback_key_in_rollback_statement15672 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_work_key_in_rollback_statement15674 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_to_key_in_rollback_statement15687 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_savepoint_key_in_rollback_statement15689 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_savepoint_name_in_rollback_statement15692 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_force_key_in_rollback_statement15705 = new BitSet(new long[]{0x0001000000018000L});
	public static final BitSet FOLLOW_quoted_string_in_rollback_statement15707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_savepoint_key_in_savepoint_statement15803 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement15806 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_key_in_pipe_row_statement15831 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_row_key_in_pipe_row_statement15833 = new BitSet(new long[]{0x0000040000000000L});
	public static final BitSet FOLLOW_LEFT_PAREN_in_pipe_row_statement15835 = new BitSet(new long[]{0x0081442010838840L,0xC2D8412010010000L,0x0000100080206000L});
	public static final BitSet FOLLOW_expression_wrapper_in_pipe_row_statement15837 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_RIGHT_PAREN_in_pipe_row_statement15839 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_function_in_synpred1_PLSQLParser988 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_package_in_synpred2_PLSQLParser999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_procedure_in_synpred3_PLSQLParser1010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_sequence_in_synpred4_PLSQLParser1021 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_trigger_in_synpred5_PLSQLParser1032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alter_type_in_synpred6_PLSQLParser1043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_synpred7_PLSQLParser1054 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_synpred8_PLSQLParser1065 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_synpred9_PLSQLParser1077 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_or_key_in_synpred9_PLSQLParser1081 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_replace_key_in_synpred9_PLSQLParser1083 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_package_key_in_synpred9_PLSQLParser1088 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_sequence_in_synpred10_PLSQLParser1102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_view_in_synpred11_PLSQLParser1116 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_trigger_in_synpred12_PLSQLParser1131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_type_in_synpred13_PLSQLParser1142 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_function_in_synpred14_PLSQLParser1153 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_package_in_synpred15_PLSQLParser1164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_procedure_in_synpred16_PLSQLParser1175 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_sequence_in_synpred17_PLSQLParser1186 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_drop_trigger_in_synpred18_PLSQLParser1197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_synpred19_PLSQLParser2927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_synpred20_PLSQLParser2939 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_synpred22_PLSQLParser2963 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_synpred23_PLSQLParser2975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_synpred24_PLSQLParser2987 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_synpred26_PLSQLParser3011 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_procedure_spec_in_synpred27_PLSQLParser3310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_spec_in_synpred28_PLSQLParser3322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_synpred29_PLSQLParser3334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_synpred30_PLSQLParser3347 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_synpred32_PLSQLParser3373 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_synpred33_PLSQLParser3386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_synpred34_PLSQLParser3398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_synpred35_PLSQLParser3410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_compound_key_in_synpred36_PLSQLParser4751 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_trigger_key_in_synpred36_PLSQLParser4753 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_call_key_in_synpred37_PLSQLParser4769 = new BitSet(new long[]{0x0000002000800000L,0x0000000010000000L});
	public static final BitSet FOLLOW_id_in_synpred37_PLSQLParser4771 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_id_in_synpred38_PLSQLParser8131 = new BitSet(new long[]{0x0000000000800000L,0x0010000010000000L});
	public static final BitSet FOLLOW_type_spec_in_synpred38_PLSQLParser8133 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
	public static final BitSet FOLLOW_sqlj_object_type_attr_in_synpred38_PLSQLParser8135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_constraint_state_item_in_synpred39_PLSQLParser9863 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_variable_declaration_in_synpred40_PLSQLParser11221 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_subtype_declaration_in_synpred41_PLSQLParser11233 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exception_declaration_in_synpred43_PLSQLParser11257 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pragma_declaration_in_synpred44_PLSQLParser11269 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_record_declaration_in_synpred45_PLSQLParser11281 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_table_declaration_in_synpred46_PLSQLParser11293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_procedure_body_in_synpred47_PLSQLParser11305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_function_body_in_synpred48_PLSQLParser11317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_create_key_in_synpred49_PLSQLParser12925 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFEFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
	public static final BitSet FOLLOW_swallow_to_semi_in_synpred49_PLSQLParser12927 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_set_in_synpred49_PLSQLParser12929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncate_key_in_synpred52_PLSQLParser12984 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFEFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000001FFFFFFFFFL});
	public static final BitSet FOLLOW_swallow_to_semi_in_synpred52_PLSQLParser12986 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_set_in_synpred52_PLSQLParser12989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_begin_key_in_synpred53_PLSQLParser13005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declare_key_in_synpred54_PLSQLParser13022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_assignment_statement_in_synpred55_PLSQLParser13038 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_continue_statement_in_synpred56_PLSQLParser13049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exit_statement_in_synpred57_PLSQLParser13060 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loop_statement_in_synpred60_PLSQLParser13093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_forall_statement_in_synpred61_PLSQLParser13104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_raise_statement_in_synpred63_PLSQLParser13126 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_return_statement_in_synpred64_PLSQLParser13137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pipe_row_statement_in_synpred65_PLSQLParser13148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sql_statement_in_synpred67_PLSQLParser13171 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_index_name_in_synpred68_PLSQLParser13761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_in_key_in_synpred68_PLSQLParser13763 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100080204000L});
	public static final BitSet FOLLOW_reverse_key_in_synpred68_PLSQLParser13765 = new BitSet(new long[]{0x0081442010838840L,0xC2D0412010010000L,0x0000100080204000L});
	public static final BitSet FOLLOW_lower_bound_in_synpred68_PLSQLParser13768 = new BitSet(new long[]{0x0000000002000000L});
	public static final BitSet FOLLOW_DOUBLE_PERIOD_in_synpred68_PLSQLParser13770 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_select_key_in_synpred69_PLSQLParser14977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_with_key_in_synpred69_PLSQLParser14979 = new BitSet(new long[]{0x0000000000000002L});
}
